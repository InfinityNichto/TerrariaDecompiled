using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Input;
using ReLogic.Utilities;
using Terraria.Audio;
using Terraria.Chat;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Creative;
using Terraria.GameContent.Drawing;
using Terraria.GameContent.Events;
using Terraria.GameContent.Golf;
using Terraria.GameContent.Items;
using Terraria.GameContent.ObjectInteractions;
using Terraria.GameContent.Tile_Entities;
using Terraria.GameContent.UI;
using Terraria.GameInput;
using Terraria.Graphics;
using Terraria.Graphics.Capture;
using Terraria.Graphics.Effects;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.IO;
using Terraria.Localization;
using Terraria.ObjectData;
using Terraria.Social;
using Terraria.UI;
using Terraria.UI.Chat;
using Terraria.UI.Gamepad;
using Terraria.Utilities;
using Terraria.WorldBuilding;

namespace Terraria;

public class Player : Entity, IFixLoadedData
{
	public static class BuilderAccToggleIDs
	{
		public const int RulerLine = 0;

		public const int RulerGrid = 1;

		public const int AutoActuate = 2;

		public const int AutoPaint = 3;

		public const int WireVisibility_Red = 4;

		public const int WireVisibility_Green = 5;

		public const int WireVisibility_Blue = 6;

		public const int WireVisibility_Yellow = 7;

		public const int HideAllWires = 8;

		public const int WireVisibility_Actuators = 9;

		public const int BlockSwap = 10;

		public const int TorchBiome = 11;

		public static readonly int Count = 12;
	}

	public struct DirectionalInputSyncCache
	{
		public bool controlLeft;

		public bool controlRight;

		public bool controlUp;

		public bool controlDown;

		public DirectionalInputSyncCache(Player player)
		{
			controlLeft = player.controlLeft;
			controlRight = player.controlRight;
			controlUp = player.controlUp;
			controlDown = player.controlDown;
		}

		public void ApplyTo(Player player)
		{
			player.controlLeft = controlLeft;
			player.controlRight = controlRight;
			player.controlUp = controlUp;
			player.controlDown = controlDown;
		}
	}

	private struct ChannelCancelKey
	{
		public int ProjectileTypeExpected;

		public int ProjectileIndexExpected;

		public bool Matches(Projectile projectile)
		{
			if (ProjectileTypeExpected == projectile.type)
			{
				return ProjectileIndexExpected == projectile.whoAmI;
			}
			return false;
		}

		public void TryTracking(Projectile projectile)
		{
			if (ProjectileTypeExpected == projectile.type)
			{
				ProjectileIndexExpected = projectile.whoAmI;
			}
		}
	}

	public struct RabbitOrderFrameHelper
	{
		public int DisplayFrame;

		private int _frameCounter;

		private int _aiState;

		private const int AIState_Idle = 0;

		private const int AIState_LookingAtCamera = 1;

		private const int AIState_Resting = 2;

		private const int AIState_EatingCarrot = 3;

		public void Update()
		{
			switch (_aiState)
			{
			case 0:
				UpdateFrame(0, 0, Main.rand.Next(1, 4), Main.rand.Next(180, 3600));
				break;
			case 1:
				UpdateFrame(7, 9, 0, 20);
				break;
			case 2:
			{
				int gameFramesPerDisplayFrame = 8;
				if (DisplayFrame == 13)
				{
					gameFramesPerDisplayFrame = 120;
				}
				UpdateFrame(10, 16, 0, gameFramesPerDisplayFrame);
				break;
			}
			case 3:
				UpdateFrame(17, 26, 0, 4);
				break;
			}
		}

		public void Reset()
		{
			ChangeToAIState(0);
		}

		private void ChangeToAIState(int aiState)
		{
			_aiState = aiState;
			_frameCounter = 0;
			Update();
		}

		private void UpdateFrame(int displayFrameMin, int displayFrameMax, int exitAIState, int gameFramesPerDisplayFrame)
		{
			DisplayFrame = Utils.Clamp(DisplayFrame, displayFrameMin, displayFrameMax);
			if (_frameCounter++ >= gameFramesPerDisplayFrame)
			{
				_frameCounter = 0;
				if (DisplayFrame++ >= displayFrameMax)
				{
					ChangeToAIState(exitAIState);
				}
			}
		}
	}

	public enum CompositeArmStretchAmount
	{
		Full,
		None,
		Quarter,
		ThreeQuarters
	}

	public struct CompositeArmData
	{
		public bool enabled;

		public CompositeArmStretchAmount stretch;

		public float rotation;

		public CompositeArmData(bool enabled, CompositeArmStretchAmount intendedStrech, float rotation)
		{
			this.enabled = enabled;
			stretch = intendedStrech;
			this.rotation = rotation;
		}
	}

	public delegate void DashStartAction(int dashDirection);

	public struct SetMatchRequest
	{
		public int Head;

		public int Body;

		public int Legs;

		public int ArmorSlotRequested;

		public bool Male;
	}

	public struct ItemSpaceStatus
	{
		public readonly bool CanTakeItem;

		public readonly bool ItemIsGoingToVoidVault;

		public bool CanTakeItemToPersonalInventory
		{
			get
			{
				if (CanTakeItem)
				{
					return !ItemIsGoingToVoidVault;
				}
				return false;
			}
		}

		public ItemSpaceStatus(bool CanTakeItem, bool ItemIsGoingToVoidVault = false)
		{
			this.CanTakeItem = CanTakeItem;
			this.ItemIsGoingToVoidVault = ItemIsGoingToVoidVault;
		}
	}

	public struct ItemCheckContext
	{
		public bool SkipItemConsumption;
	}

	private struct SpecialToolUsageSettings
	{
		public delegate bool CanUseToolCondition(Player user, Item item, int targetX, int targetY);

		public delegate void UseToolAction(Player user, Item item, int targetX, int targetY);

		public bool IsAValidTool;

		public CanUseToolCondition UsageCondition;

		public UseToolAction UsageAction;
	}

	public class SavedPlayerDataWithAnnoyingRules
	{
		public bool godmodePowerEnabled;

		public bool farPlacementRangePowerEnabled;

		public float spawnRatePowerSliderValue;
	}

	public class RandomTeleportationAttemptSettings
	{
		public bool mostlySolidFloor;

		public bool avoidLava;

		public bool avoidAnyLiquid;

		public bool avoidHurtTiles;

		public bool avoidWalls;

		public int attemptsBeforeGivingUp;

		public int maximumFallDistanceFromOrignalPoint;
	}

	public static class Hooks
	{
		public static event Action<Player> OnEnterWorld;

		public static void PlayerConnect(int playerIndex)
		{
			PressurePlateHelper.ResetPlayer(playerIndex);
		}

		public static void PlayerDisconnect(int playerIndex)
		{
			PressurePlateHelper.ResetPlayer(playerIndex);
		}

		public static void EnterWorld(int playerIndex)
		{
			if (Hooks.OnEnterWorld != null)
			{
				Hooks.OnEnterWorld(Main.player[playerIndex]);
			}
			if (playerIndex == Main.myPlayer)
			{
				Main.ToggleGameplayUpdates(state: true);
			}
		}
	}

	public class SmartCursorSettings
	{
		public static bool SmartBlocksEnabled;

		public static bool SmartAxeAfterPickaxe;

		public static bool SmartCursorHoldCanReleaseMidUse;
	}

	public class Settings
	{
		public enum HoverControlMode
		{
			Hold,
			Click
		}

		public static HoverControlMode HoverControl;

		public static void CycleHoverControl()
		{
			switch (HoverControl)
			{
			case HoverControlMode.Hold:
				HoverControl = HoverControlMode.Click;
				break;
			case HoverControlMode.Click:
				HoverControl = HoverControlMode.Hold;
				break;
			}
		}
	}

	public class SelectionRadial
	{
		public enum SelectionMode
		{
			Dpad4,
			RadialCircular,
			RadialQuicks
		}

		private int _SelectedBinding = -1;

		public int RadialCount;

		public int[] Bindings;

		public SelectionMode Mode;

		public int SelectedBinding => _SelectedBinding;

		public int SelectedItem
		{
			get
			{
				if (_SelectedBinding == -1)
				{
					return -1;
				}
				return Bindings[_SelectedBinding];
			}
		}

		public SelectionRadial(SelectionMode mode = SelectionMode.Dpad4)
		{
			Mode = mode;
			int radialCount = 0;
			switch (mode)
			{
			case SelectionMode.Dpad4:
				radialCount = 4;
				break;
			case SelectionMode.RadialCircular:
				radialCount = 10;
				break;
			case SelectionMode.RadialQuicks:
				radialCount = 4;
				break;
			}
			RadialCount = radialCount;
			Bindings = new int[RadialCount];
			for (int i = 0; i < RadialCount; i++)
			{
				Bindings[i] = -1;
			}
		}

		public void Update()
		{
			switch (Mode)
			{
			case SelectionMode.Dpad4:
				if (PlayerInput.Triggers.JustPressed.DpadRadial1)
				{
					ChangeSelection(0);
				}
				if (PlayerInput.Triggers.JustPressed.DpadRadial2)
				{
					ChangeSelection(1);
				}
				if (PlayerInput.Triggers.JustPressed.DpadRadial3)
				{
					ChangeSelection(2);
				}
				if (PlayerInput.Triggers.JustPressed.DpadRadial4)
				{
					ChangeSelection(3);
				}
				break;
			case SelectionMode.RadialCircular:
			case SelectionMode.RadialQuicks:
			{
				for (int i = 0; i < RadialCount; i++)
				{
					Bindings[i] = i;
				}
				if ((Mode != SelectionMode.RadialCircular || !PlayerInput.Triggers.Current.RadialHotbar) && (Mode != SelectionMode.RadialQuicks || !PlayerInput.Triggers.Current.RadialQuickbar))
				{
					break;
				}
				bool flag = Mode == SelectionMode.RadialCircular;
				float num = (float)Math.PI * 2f / (float)RadialCount / 2f;
				Vector2 vector = PlayerInput.GamepadThumbstickRight.RotatedBy(-(float)Math.PI / 2f + num);
				if (vector.Length() == 0f)
				{
					vector = PlayerInput.GamepadThumbstickLeft.RotatedBy(-(float)Math.PI / 2f + num);
				}
				int num2 = -1;
				if (vector.Length() > 0.3f)
				{
					num2 = (int)((vector.ToRotation() + (float)Math.PI) / ((float)Math.PI * 2f / (float)RadialCount));
					if (num2 >= RadialCount)
					{
						num2 -= RadialCount;
					}
				}
				if ((num2 != -1 || !flag) && _SelectedBinding != num2 && (num2 != -1 || !(vector != Vector2.Zero)))
				{
					ChangeSelection(num2);
				}
				break;
			}
			}
		}

		public void ChangeBinding(int itemSlot)
		{
			if (itemSlot >= 0 && itemSlot < 50 && Mode == SelectionMode.Dpad4)
			{
				if (PlayerInput.Triggers.JustPressed.DpadRadial1)
				{
					Bind(itemSlot, 0);
				}
				if (PlayerInput.Triggers.JustPressed.DpadRadial2)
				{
					Bind(itemSlot, 1);
				}
				if (PlayerInput.Triggers.JustPressed.DpadRadial3)
				{
					Bind(itemSlot, 2);
				}
				if (PlayerInput.Triggers.JustPressed.DpadRadial4)
				{
					Bind(itemSlot, 3);
				}
			}
		}

		public void ChangeSelection(int to)
		{
			if (_SelectedBinding == to)
			{
				_SelectedBinding = -1;
			}
			else
			{
				_SelectedBinding = to;
			}
		}

		private void Bind(int itemslot, int radialslot)
		{
			ChangeSelection(-1);
			if (Bindings[radialslot] == itemslot)
			{
				Bindings[radialslot] = -1;
				return;
			}
			for (int i = 0; i < RadialCount; i++)
			{
				if (Bindings[i] == itemslot)
				{
					Bindings[i] = -1;
				}
			}
			Bindings[radialslot] = itemslot;
		}

		public int GetDrawMode(int itemslot)
		{
			if (SelectedBinding != -1 && Bindings[SelectedBinding] == itemslot)
			{
				return 2;
			}
			for (int i = 0; i < RadialCount; i++)
			{
				if (Bindings[i] == itemslot)
				{
					return 1;
				}
			}
			return 0;
		}

		public void CopyTo(SelectionRadial that)
		{
			that._SelectedBinding = _SelectedBinding;
			that.Mode = Mode;
			that.RadialCount = RadialCount;
			Array.Resize(ref that.Bindings, RadialCount);
			for (int i = 0; i < RadialCount; i++)
			{
				that.Bindings[i] = Bindings[i];
			}
		}
	}

	public struct OverheadMessage
	{
		public string chatText;

		public TextSnippet[] snippets;

		public Vector2 messageSize;

		public int timeLeft;

		public Color color;

		public void NewMessage(string message, int displayTime)
		{
			chatText = message;
			snippets = ChatManager.ParseMessage(chatText, Color.White).ToArray();
			messageSize = ChatManager.GetStringSize(FontAssets.MouseText.Value, snippets, Vector2.One);
			timeLeft = displayTime;
		}
	}

	public int emoteTime;

	public CreativeUnlocksTracker creativeTracker;

	private static byte[] ENCRYPTION_KEY = new UnicodeEncoding().GetBytes("h3y_gUyZ");

	public OverheadMessage chatOverhead;

	public SelectionRadial DpadRadial = new SelectionRadial();

	public SelectionRadial CircularRadial = new SelectionRadial(SelectionRadial.SelectionMode.RadialCircular);

	public SelectionRadial QuicksRadial = new SelectionRadial(SelectionRadial.SelectionMode.RadialQuicks);

	public bool alchemyTable;

	public int HotbarOffset;

	public bool GoingDownWithGrapple;

	public byte spelunkerTimer;

	public bool[] hideInfo = new bool[13];

	public int[] builderAccStatus = new int[BuilderAccToggleIDs.Count];

	public long lostCoins;

	public string lostCoinString = "";

	public int soulDrain;

	public float drainBoost;

	public bool dd2Accessory;

	private static bool disabledBlizzardGraphic = false;

	private static bool disabledBlizzardSound = false;

	private static float _blizzardSoundVolume;

	private static SlotId _strongBlizzardSound = SlotId.Invalid;

	private static SlotId _insideBlizzardSound = SlotId.Invalid;

	public string name = "";

	public int taxMoney;

	public int taxTimer;

	public static int taxRate = 3600;

	public int numberOfDeathsPVE;

	public int numberOfDeathsPVP;

	public static int crystalLeafDamage = 100;

	public static int crystalLeafKB = 10;

	public float basiliskCharge;

	public Vector2 lastDeathPostion;

	public DateTime lastDeathTime;

	public bool showLastDeath;

	public bool usedAegisCrystal;

	public bool usedAegisFruit;

	public bool usedArcaneCrystal;

	public bool usedGalaxyPearl;

	public bool usedGummyWorm;

	public bool usedAmbrosia;

	public int extraAccessorySlots = 2;

	public bool extraAccessory;

	private bool dontConsumeWand;

	public int tankPet = -1;

	public bool tankPetReset;

	public int stringColor;

	public int counterWeight;

	public bool yoyoString;

	public bool yoyoGlove;

	public int beetleOrbs;

	public float beetleCounter;

	public int beetleCountdown;

	public bool beetleDefense;

	public bool beetleOffense;

	public bool beetleBuff;

	public int solarShields;

	public int solarCounter;

	public const int maxSolarShields = 3;

	public Vector2[] solarShieldPos = new Vector2[3];

	public Vector2[] solarShieldVel = new Vector2[3];

	public bool solarDashing;

	public bool solarDashConsumedFlare;

	public const int nebulaMaxLevel = 3;

	public int nebulaLevelLife;

	public int nebulaLevelMana;

	public int nebulaManaCounter;

	public int nebulaLevelDamage;

	public bool manaMagnet;

	public bool lifeMagnet;

	public bool treasureMagnet;

	public bool chiselSpeed;

	public bool lifeForce;

	public bool calmed;

	public bool inferno;

	public float flameRingRot;

	public float flameRingScale = 1f;

	public byte flameRingFrame;

	public byte flameRingAlpha;

	public int netManaTime;

	public int netLifeTime;

	public bool netMana;

	public bool netLife;

	public Vector2[] beetlePos = new Vector2[3];

	public Vector2[] beetleVel = new Vector2[3];

	public int beetleFrame;

	public int beetleFrameCounter;

	public static int manaSickTime = 300;

	public static int manaSickTimeMax = 600;

	public static float manaSickLessDmg = 0.25f;

	public float manaSickReduction;

	public bool manaSick;

	public int afkCounter;

	public bool stairFall;

	public int loadStatus;

	public Vector2[] itemFlamePos = new Vector2[7];

	public int itemFlameCount;

	public bool outOfRange;

	public float lifeSteal = 99999f;

	public float ghostDmg;

	public bool teleporting;

	public float teleportTime;

	public int teleportStyle;

	public bool sloping;

	public bool chilled;

	public bool dazed;

	public bool frozen;

	public bool stoned;

	public bool lastStoned;

	public bool ichor;

	public bool webbed;

	public bool tipsy;

	public bool noBuilding;

	public int ropeCount;

	public int manaRegenBonus;

	public float manaRegenDelayBonus;

	public int dashType;

	public int dash;

	public int dashTime;

	public int timeSinceLastDashStarted;

	public int dashDelay;

	public int eocDash;

	public int eocHit;

	public float accRunSpeed;

	public bool cordage;

	public int gem = -1;

	public int gemCount;

	public BitsByte ownedLargeGems;

	public byte meleeEnchant;

	public byte pulleyDir;

	public bool pulley;

	public int pulleyFrame;

	public float pulleyFrameCounter;

	public bool blackBelt;

	public bool sliding;

	public int slideDir;

	public int snowBallLauncherInteractionCooldown;

	public bool iceSkate;

	public bool carpet;

	public int spikedBoots;

	public int carpetFrame = -1;

	public float carpetFrameCounter;

	public bool canCarpet;

	public int carpetTime;

	public int miscCounter;

	public int infernoCounter;

	public int insanityShadowCooldown;

	public int starCloakCooldown;

	public bool sandStorm;

	public bool crimsonRegen;

	public bool ghostHeal;

	public bool ghostHurt;

	public bool sticky;

	public bool slippy;

	public bool slippy2;

	public bool powerrun;

	public bool runningOnSand;

	public bool flapSound;

	public bool iceBarrier;

	public bool dangerSense;

	public byte luckPotion;

	public byte oldLuckPotion;

	public float endurance;

	public float whipRangeMultiplier;

	public float whipUseTimeMultiplier;

	public bool loveStruck;

	public bool stinky;

	public bool resistCold;

	public bool electrified;

	public bool dryadWard;

	public bool panic;

	public Item brainOfConfusionItem;

	public int brainOfConfusionDodgeAnimationCounter;

	public byte iceBarrierFrame;

	public byte iceBarrierFrameCounter;

	public bool shadowDodge;

	public float shadowDodgeCount;

	public bool palladiumRegen;

	public bool onHitDodge;

	public bool onHitRegen;

	public bool onHitPetal;

	public bool onHitTitaniumStorm;

	public int titaniumStormCooldown;

	public bool hasTitaniumStormBuff;

	public int petalTimer;

	public int shadowDodgeTimer;

	public int boneGloveTimer;

	public int phantomPhoneixCounter;

	public int fishingSkill;

	public bool cratePotion;

	public bool sonarPotion;

	public bool accFishingLine;

	public bool accFishingBobber;

	public bool accTackleBox;

	public bool accLavaFishing;

	public int maxMinions = 1;

	public int numMinions;

	public float slotsMinions;

	public bool pygmy;

	public bool raven;

	public bool slime;

	public bool hornetMinion;

	public bool impMinion;

	public bool twinsMinion;

	public bool spiderMinion;

	public int nextCycledSpiderMinionType;

	public bool pirateMinion;

	public bool sharknadoMinion;

	public bool UFOMinion;

	public bool DeadlySphereMinion;

	public bool stardustMinion;

	public bool stardustGuardian;

	public bool stardustDragon;

	public bool batsOfLight;

	public bool babyBird;

	public bool vampireFrog;

	public bool stormTiger;

	public int highestStormTigerGemOriginalDamage;

	public bool smolstar;

	public bool empressBlade;

	public bool flinxMinion;

	public bool abigailMinion;

	public int highestAbigailCounterOriginalDamage;

	public float wingTime;

	public int wings;

	public int wingsLogic;

	public int wingTimeMax;

	public int wingFrame;

	public int wingFrameCounter;

	public int skinVariant;

	public bool ghost;

	public int ghostFrame;

	public int ghostFrameCounter;

	public int miscTimer;

	public int environmentBuffImmunityTimer;

	public int _framesLeftEligibleForDeadmansChestDeathAchievement;

	public bool pvpDeath;

	public BitsByte zone1 = (byte)0;

	public BitsByte zone2 = (byte)0;

	public BitsByte zone3 = (byte)0;

	public BitsByte zone4 = (byte)0;

	public BitsByte zone5 = (byte)0;

	private bool _wasInShimmerZone;

	public bool boneArmor;

	public bool frostArmor;

	public bool honey;

	public bool crystalLeaf;

	public int crystalLeafCooldown;

	public PortableStoolUsage portableStoolInfo;

	public bool preventAllItemPickups;

	public bool dontHurtCritters;

	public bool hasLucyTheAxe;

	public bool dontHurtNature;

	public int[] doubleTapCardinalTimer = new int[4];

	public int[] holdDownCardinalTimer = new int[4];

	public bool defendedByPaladin;

	public bool hasPaladinShield;

	public float[] speedSlice = new float[60];

	public float townNPCs;

	public double headFrameCounter;

	public double bodyFrameCounter;

	public double legFrameCounter;

	public int netSkip;

	public int oldSelectItem;

	public bool immune;

	public bool immuneNoBlink;

	public int immuneTime;

	public int immuneAlphaDirection;

	public int immuneAlpha;

	public int team;

	private int _timeSinceLastImmuneGet;

	private int _immuneStrikes;

	public bool hbLocked;

	public static int nameLen = 20;

	public float maxRegenDelay;

	public int sign = -1;

	public bool editedChestName;

	public int reuseDelay;

	public int aggro;

	public float nearbyActiveNPCs;

	public bool creativeInterface;

	public bool mouseInterface;

	public bool lastMouseInterface;

	public int noThrow;

	public int changeItem = -1;

	public int selectedItem;

	public const int SupportedSlotsArmor = 3;

	public const int SupportedSlotsAccs = 7;

	public const int SupportedSlotSets = 10;

	public const int InitialAccSlotCount = 5;

	public const int miscSlotPet = 0;

	public const int miscSlotLight = 1;

	public const int miscSlotCart = 2;

	public const int miscSlotMount = 3;

	public const int miscSlotHook = 4;

	public const int SupportedMiscSlotCount = 5;

	public Item[] armor = new Item[20];

	public Item[] dye = new Item[10];

	public Item[] miscEquips = new Item[5];

	public Item[] miscDyes = new Item[5];

	public Item trashItem = new Item();

	public float itemRotation;

	public int itemWidth;

	public int itemHeight;

	public Vector2 itemLocation;

	public bool poundRelease;

	public float ghostFade;

	public float ghostDir = 1f;

	public static readonly int maxBuffs = 44;

	public int[] buffType = new int[maxBuffs];

	public int[] buffTime = new int[maxBuffs];

	public bool[] buffImmune = new bool[BuffID.Count];

	public int heldProj = -1;

	public int breathCD;

	public int breathMax = 200;

	public int breath = 200;

	public int lavaCD;

	public int lavaMax;

	public int lavaTime;

	public bool ignoreWater;

	public bool armorEffectDrawShadow;

	public bool armorEffectDrawShadowSubtle;

	public bool armorEffectDrawOutlines;

	public bool armorEffectDrawShadowLokis;

	public bool armorEffectDrawShadowBasilisk;

	public bool armorEffectDrawOutlinesForbidden;

	public bool armorEffectDrawShadowEOCShield;

	public bool socialShadowRocketBoots;

	public bool socialGhost;

	public bool shroomiteStealth;

	public bool ashWoodBonus;

	public bool socialIgnoreLight;

	public int stealthTimer;

	public float stealth = 1f;

	public int beardGrowthTimer;

	public bool isDisplayDollOrInanimate;

	public bool isFullbright;

	public bool isHatRackDoll;

	public bool isFirstFractalAfterImage;

	public float firstFractalAfterImageOpacity;

	public string setBonus = "";

	public Item[] inventory = new Item[59];

	public bool[] inventoryChestStack = new bool[59];

	public Item lastVisualizedSelectedItem;

	public Chest bank = new Chest(bank: true);

	public Chest bank2 = new Chest(bank: true);

	public Chest bank3 = new Chest(bank: true);

	public Chest bank4 = new Chest(bank: true);

	public BitsByte voidVaultInfo;

	public float headRotation;

	public float bodyRotation;

	public float legRotation;

	public Vector2 headPosition;

	public Vector2 bodyPosition;

	public Vector2 legPosition;

	public Vector2 headVelocity;

	public Vector2 bodyVelocity;

	public Vector2 legVelocity;

	public float fullRotation;

	public Vector2 fullRotationOrigin = Vector2.Zero;

	public int fartKartCloudDelay;

	public const int fartKartCloudDelayMax = 20;

	public int nonTorch = -1;

	public float gfxOffY;

	public float stepSpeed = 1f;

	public static bool deadForGood = false;

	public bool dead;

	public int respawnTimer;

	public const int respawnTimerMax = 3600;

	public long lastTimePlayerWasSaved;

	public int attackCD;

	public int potionDelay;

	public byte difficulty;

	public byte wetSlime;

	public HitTile hitTile;

	public HitTile hitReplace;

	public int jump;

	public int head = -1;

	public int body = -1;

	public int legs = -1;

	public sbyte handon = -1;

	public sbyte handoff = -1;

	public sbyte back = -1;

	public sbyte front = -1;

	public sbyte shoe = -1;

	public sbyte waist = -1;

	public sbyte shield = -1;

	public sbyte neck = -1;

	public sbyte face = -1;

	public sbyte balloon = -1;

	public sbyte backpack = -1;

	public sbyte tail = -1;

	public sbyte faceHead = -1;

	public sbyte faceFlower = -1;

	public sbyte balloonFront = -1;

	public sbyte beard = -1;

	public bool[] hideVisibleAccessory = new bool[10];

	public BitsByte hideMisc = (byte)0;

	public Rectangle headFrame;

	public Rectangle bodyFrame;

	public Rectangle legFrame;

	public Rectangle hairFrame;

	public DirectionalInputSyncCache LocalInputCache;

	public bool controlLeft;

	public bool controlRight;

	public bool controlUp;

	public bool controlDown;

	public bool controlJump;

	public bool controlUseItem;

	public bool controlUseTile;

	public bool controlThrow;

	public bool controlInv;

	public bool controlHook;

	public bool controlTorch;

	public bool controlMap;

	public bool controlSmart;

	public bool controlMount;

	public bool releaseJump;

	public bool releaseUp;

	public bool releaseUseItem;

	public bool releaseUseTile;

	public bool releaseInventory;

	public bool releaseHook;

	public bool releaseThrow;

	public bool releaseQuickMana;

	public bool releaseQuickHeal;

	public bool releaseLeft;

	public bool releaseRight;

	public bool releaseSmart;

	public bool releaseMount;

	public bool releaseDown;

	public bool controlQuickMana;

	public bool controlQuickHeal;

	public bool controlCreativeMenu;

	public bool releaseCreativeMenu;

	public bool tileInteractionHappened;

	public bool tileInteractAttempted;

	public bool controlDownHold;

	public bool isOperatingAnotherEntity;

	public bool autoReuseAllWeapons;

	public bool isControlledByFilm;

	public bool tryKeepingHoveringDown;

	public bool tryKeepingHoveringUp;

	public int altFunctionUse;

	public bool mapZoomIn;

	public bool mapZoomOut;

	public bool mapAlphaUp;

	public bool mapAlphaDown;

	public bool mapFullScreen;

	public bool mapStyle;

	public bool releaseMapFullscreen;

	public bool releaseMapStyle;

	public int leftTimer;

	public int rightTimer;

	public bool delayUseItem;

	public const int defaultWidth = 20;

	public const int defaultHeight = 42;

	public bool cursorItemIconEnabled;

	public bool cursorItemIconReversed;

	public int cursorItemIconID;

	public int cursorItemIconPush;

	public string cursorItemIconText = "";

	public int runSoundDelay;

	public float opacityForAnimation = 1f;

	public const int shadowMax = 3;

	public Vector2[] shadowPos = new Vector2[3];

	public float[] shadowRotation = new float[3];

	public Vector2[] shadowOrigin = new Vector2[3];

	public int[] shadowDirection = new int[3];

	public int shadowCount;

	public float manaCost = 1f;

	public bool fireWalk;

	public bool channel;

	public int step = -1;

	private ChannelCancelKey _channelShotCache;

	public bool skipAnimatingValuesInPlayerFrame;

	public RabbitOrderFrameHelper rabbitOrderFrame;

	public bool creativeGodMode;

	private const int MaxAdvancedShadows = 60;

	public int availableAdvancedShadowsCount;

	private EntityShadowInfo[] _advancedShadows = new EntityShadowInfo[60];

	private int _lastAddedAvancedShadow;

	public CompositeArmData compositeFrontArm;

	public CompositeArmData compositeBackArm;

	public int anglerQuestsFinished;

	public int golferScoreAccumulated;

	public int bartenderQuestLog;

	public bool downedDD2EventAnyDifficulty;

	public int armorPenetration;

	public int statDefense;

	public int statLifeMax = 100;

	public int statLifeMax2 = 100;

	public int statLife = 100;

	public int statMana;

	public int statManaMax;

	public int statManaMax2;

	public int lifeRegen;

	public int lifeRegenCount;

	public float lifeRegenTime;

	public int manaRegen;

	public int manaRegenCount;

	public float manaRegenDelay;

	public bool manaRegenBuff;

	public bool noKnockback;

	private bool shimmerImmune;

	public bool spaceGun;

	public float gravDir = 1f;

	public bool chloroAmmoCost80;

	public bool huntressAmmoCost90;

	public bool ammoCost80;

	public bool ammoCost75;

	public int stickyBreak;

	public bool magicQuiver;

	public bool magmaStone;

	public bool lavaRose;

	public bool hasMoltenQuiver;

	public int phantasmTime;

	public bool ammoBox;

	public bool ammoPotion;

	public bool chaosState;

	public bool strongBees;

	public bool sporeSac;

	public bool shinyStone;

	public bool empressBrooch;

	public bool volatileGelatin;

	public int volatileGelatinCounter;

	public bool hasMagiluminescence;

	public bool shadowArmor;

	public bool dontStarveShader;

	public bool eyebrellaCloud;

	public int yoraiz0rEye;

	public bool yoraiz0rDarkness;

	public bool hasUnicornHorn;

	public bool hasAngelHalo;

	public bool hasRainbowCursor;

	public bool leinforsHair;

	public bool stardustMonolithShader;

	public bool nebulaMonolithShader;

	public bool vortexMonolithShader;

	public bool solarMonolithShader;

	public bool moonLordMonolithShader;

	public bool bloodMoonMonolithShader;

	public bool shimmerMonolithShader;

	public int overrideFishingBobber = -1;

	public bool unlockedBiomeTorches;

	public bool ateArtisanBread;

	public bool unlockedSuperCart;

	public bool enabledSuperCart = true;

	public bool suspiciouslookingTentacle;

	public bool crimsonHeart;

	public bool lightOrb;

	public bool blueFairy;

	public bool redFairy;

	public bool greenFairy;

	public bool bunny;

	public bool turtle;

	public bool eater;

	public bool penguin;

	public bool HasGardenGnomeNearby;

	public bool magicLantern;

	public bool rabid;

	public bool sunflower;

	public bool wellFed;

	public bool puppy;

	public bool grinch;

	public bool miniMinotaur;

	public bool flowerBoots;

	public bool fairyBoots;

	public bool hellfireTreads;

	public bool moonLordLegs;

	public bool arcticDivingGear;

	public bool coolWhipBuff;

	public bool wearsRobe;

	public bool minecartLeft;

	public bool onWrongGround;

	public bool onTrack;

	public int cartRampTime;

	public bool cartFlip;

	public float trackBoost;

	public Vector2 lastBoost = Vector2.Zero;

	public Mount mount;

	public bool blackCat;

	public bool spider;

	public bool squashling;

	public bool petFlagDD2Gato;

	public bool petFlagDD2Ghost;

	public bool petFlagDD2Dragon;

	public bool petFlagUpbeatStar;

	public bool petFlagSugarGlider;

	public bool petFlagBabyShark;

	public bool petFlagLilHarpy;

	public bool petFlagFennecFox;

	public bool petFlagGlitteryButterfly;

	public bool petFlagBabyImp;

	public bool petFlagBabyRedPanda;

	public bool petFlagPlantero;

	public bool petFlagDynamiteKitten;

	public bool petFlagBabyWerewolf;

	public bool petFlagShadowMimic;

	public bool petFlagVoltBunny;

	public bool petFlagKingSlimePet;

	public bool petFlagEyeOfCthulhuPet;

	public bool petFlagEaterOfWorldsPet;

	public bool petFlagBrainOfCthulhuPet;

	public bool petFlagSkeletronPet;

	public bool petFlagQueenBeePet;

	public bool petFlagDestroyerPet;

	public bool petFlagTwinsPet;

	public bool petFlagSkeletronPrimePet;

	public bool petFlagPlanteraPet;

	public bool petFlagGolemPet;

	public bool petFlagDukeFishronPet;

	public bool petFlagLunaticCultistPet;

	public bool petFlagMoonLordPet;

	public bool petFlagFairyQueenPet;

	public bool petFlagPumpkingPet;

	public bool petFlagEverscreamPet;

	public bool petFlagIceQueenPet;

	public bool petFlagMartianPet;

	public bool petFlagDD2OgrePet;

	public bool petFlagDD2BetsyPet;

	public bool petFlagQueenSlimePet;

	public bool petFlagBerniePet;

	public bool petFlagGlommerPet;

	public bool petFlagDeerclopsPet;

	public bool petFlagPigPet;

	public bool petFlagChesterPet;

	public bool petFlagJunimoPet;

	public bool petFlagBlueChickenPet;

	public bool petFlagSpiffo;

	public bool petFlagCaveling;

	public bool petFlagDirtiestBlock;

	public bool companionCube;

	public bool babyFaceMonster;

	public bool magicCuffs;

	public bool coldDash;

	public bool sailDash;

	public bool desertDash;

	public bool desertBoots;

	public bool eyeSpring;

	public bool snowman;

	public bool scope;

	public bool dino;

	public bool skeletron;

	public bool hornet;

	public bool zephyrfish;

	public bool tiki;

	public bool parrot;

	public bool truffle;

	public bool sapling;

	public bool cSapling;

	public bool wisp;

	public bool lizard;

	public bool archery;

	public bool poisoned;

	public bool venom;

	public bool blind;

	public bool blackout;

	public bool headcovered;

	public bool frostBurn;

	public bool onFrostBurn;

	public bool onFrostBurn2;

	public bool burned;

	public bool shimmering;

	public int timeShimmering;

	public float shimmerTransparency;

	public ShimmerUnstuckHelper shimmerUnstuckHelper;

	public bool suffocating;

	public byte suffocateDelay;

	public bool dripping;

	public bool drippingSlime;

	public bool drippingSparkleSlime;

	public bool onFire;

	public bool onFire2;

	public bool onFire3;

	public bool noItems;

	public bool cursed;

	public bool hungry;

	public bool starving;

	public bool heartyMeal;

	public bool windPushed;

	public bool wereWolf;

	public bool wolfAcc;

	public bool hideMerman;

	public bool hideWolf;

	public bool forceMerman;

	public bool forceWerewolf;

	public bool rulerGrid;

	public bool rulerLine;

	public bool bleed;

	public bool confused;

	public bool accMerman;

	public bool merman;

	public bool trident;

	public bool brokenArmor;

	public bool silence;

	public bool slow;

	public bool gross;

	public bool tongued;

	public bool kbGlove;

	public bool autoReuseGlove;

	public bool meleeScaleGlove;

	public bool kbBuff;

	public bool remoteVisionForDrone;

	public Item starCloakItem;

	public Item starCloakItem_manaCloakOverrideItem;

	public Item starCloakItem_starVeilOverrideItem;

	public Item starCloakItem_beeCloakOverrideItem;

	public bool longInvince;

	public bool pStone;

	public static readonly float PhilosopherStoneDurationMultiplier = 0.75f;

	public bool manaFlower;

	public bool moonLeech;

	public bool vortexDebuff;

	public bool trapDebuffSource;

	public bool witheredArmor;

	public bool witheredWeapon;

	public bool slowOgreSpit;

	public bool parryDamageBuff;

	public bool ballistaPanic;

	public bool JustDroppedAnItem;

	public int meleeCrit = 4;

	public int magicCrit = 4;

	public int rangedCrit = 4;

	public float meleeDamage = 1f;

	public float magicDamage = 1f;

	public float rangedDamage = 1f;

	public float rangedMultDamage = 1f;

	public float arrowDamageAdditiveStack;

	public float arrowDamage = 1f;

	public float bulletDamage = 1f;

	public float rocketDamage = 1f;

	public float minionDamage = 1f;

	public float minionKB;

	public float meleeSpeed = 1f;

	public float summonerWeaponSpeedBonus;

	public float moveSpeed = 1f;

	public float pickSpeed = 1f;

	public float wallSpeed = 1f;

	public float tileSpeed = 1f;

	public bool autoPaint;

	public bool autoActuator;

	public int SpawnX = -1;

	public int SpawnY = -1;

	public Vector2? PotionOfReturnOriginalUsePosition;

	public Vector2? PotionOfReturnHomePosition;

	public int[] spX = new int[200];

	public int[] spY = new int[200];

	public string[] spN = new string[200];

	public int[] spI = new int[200];

	public static int tileRangeX = 5;

	public static int tileRangeY = 4;

	public int lastTileRangeX;

	public int lastTileRangeY;

	public static int tileTargetX;

	public static int tileTargetY;

	public static float defaultGravity = 0.4f;

	public static int jumpHeight = 15;

	public static float jumpSpeed = 5.01f;

	public float gravity = defaultGravity;

	public float maxFallSpeed = 10f;

	public float maxRunSpeed = 3f;

	public float runAcceleration = 0.08f;

	public float runSlowdown = 0.2f;

	public bool adjWater;

	public bool adjHoney;

	public bool adjLava;

	public bool oldAdjWater;

	public bool oldAdjHoney;

	public bool oldAdjLava;

	public bool[] adjTile = new bool[TileID.Count];

	public bool[] oldAdjTile = new bool[TileID.Count];

	public static int defaultItemGrabRange = 42;

	private static float itemGrabSpeed = 0.45f;

	private static float itemGrabSpeedMax = 4f;

	public byte hairDye;

	public Color hairDyeColor = Color.Transparent;

	public float hairDyeVar;

	public int skinDyePacked;

	public Color hairColor = new Color(215, 90, 55);

	public Color skinColor = new Color(255, 125, 90);

	public Color eyeColor = new Color(105, 90, 75);

	public Color shirtColor = new Color(175, 165, 140);

	public Color underShirtColor = new Color(160, 180, 215);

	public Color pantsColor = new Color(255, 230, 175);

	public Color shoeColor = new Color(160, 105, 60);

	public int hair;

	public bool hostile;

	public SoundPlaySet hermesStepSound = new SoundPlaySet();

	public Vector2 instantMovementAccumulatedThisFrame;

	public int accCompass;

	public int accWatch;

	public int accDepthMeter;

	public bool accFishFinder;

	public bool accWeatherRadio;

	public bool accJarOfSouls;

	public bool accCalendar;

	public int lastCreatureHit = -1;

	public bool accThirdEye;

	public byte accThirdEyeCounter;

	public byte accThirdEyeNumber;

	public bool accStopwatch;

	public bool accOreFinder;

	public bool accCritterGuide;

	public byte accCritterGuideCounter;

	public byte accCritterGuideNumber;

	public bool accDreamCatcher;

	public bool hasFootball;

	public bool drawingFootball;

	public bool ActuationRodLock;

	public bool ActuationRodLockSetting;

	public bool InfoAccMechShowWires;

	public DateTime dpsStart;

	public DateTime dpsEnd;

	public DateTime dpsLastHit;

	public int dpsDamage;

	public bool dpsStarted;

	public string displayedFishingInfo = "";

	public bool discountEquipped;

	public bool discountAvailable;

	public bool hasLuckyCoin;

	public Item boneGloveItem;

	public bool goldRing;

	public bool accDivingHelm;

	public bool accFlipper;

	public bool hasLuck_LuckyCoin;

	public bool hasLuck_LuckyHorseshoe;

	public bool hasJumpOption_Cloud;

	public bool canJumpAgain_Cloud;

	public bool isPerformingJump_Cloud;

	public bool hasJumpOption_Sandstorm;

	public bool canJumpAgain_Sandstorm;

	public bool isPerformingJump_Sandstorm;

	public bool hasJumpOption_Blizzard;

	public bool canJumpAgain_Blizzard;

	public bool isPerformingJump_Blizzard;

	public bool hasJumpOption_Fart;

	public bool canJumpAgain_Fart;

	public bool isPerformingJump_Fart;

	public bool hasJumpOption_Sail;

	public bool canJumpAgain_Sail;

	public bool isPerformingJump_Sail;

	public bool hasJumpOption_Unicorn;

	public bool canJumpAgain_Unicorn;

	public bool isPerformingJump_Unicorn;

	public bool hasJumpOption_Santank;

	public bool canJumpAgain_Santank;

	public bool isPerformingJump_Santank;

	public bool hasJumpOption_WallOfFleshGoat;

	public bool canJumpAgain_WallOfFleshGoat;

	public bool isPerformingJump_WallOfFleshGoat;

	public bool hasJumpOption_Basilisk;

	public bool canJumpAgain_Basilisk;

	public bool isPerformingJump_Basilisk;

	public bool isPerformingPogostickTricks;

	public bool autoJump;

	public bool justJumped;

	public float jumpSpeedBoost;

	public int extraFall;

	public bool canFloatInWater;

	public bool hasFloatingTube;

	public bool frogLegJumpBoost;

	public bool skyStoneEffects;

	public bool spawnMax;

	public int blockRange;

	public int[] grappling = new int[20];

	public int grapCount;

	public int rocketTime;

	public int rocketTimeMax = 7;

	public int rocketDelay;

	public int rocketDelay2;

	public int rocketSoundDelay;

	public bool rocketRelease;

	public bool rocketFrame;

	public int rocketBoots;

	public int vanityRocketBoots;

	public bool canRocket;

	public bool jumpBoost;

	public bool noFallDmg;

	public int swimTime;

	public bool killGuide;

	public bool killClothier;

	public float equipmentBasedLuckBonus;

	public float lastEquipmentBasedLuckBonus;

	public bool hasCreditsSceneMusicBox;

	public bool lavaImmune;

	public bool gills;

	public bool slowFall;

	public bool findTreasure;

	public bool biomeSight;

	public bool invis;

	public bool detectCreature;

	public bool nightVision;

	public bool enemySpawns;

	public float thorns;

	public bool turtleArmor;

	public bool turtleThorns;

	public bool cactusThorns;

	public bool spiderArmor;

	public bool anglerSetSpawnReduction;

	public bool CanSeeInvisibleBlocks;

	public bool setSolar;

	public bool setVortex;

	public bool setNebula;

	public int nebulaCD;

	public bool setStardust;

	public bool setForbidden;

	public bool setForbiddenCooldownLocked;

	public bool setSquireT3;

	public bool setHuntressT3;

	public bool setApprenticeT3;

	public bool setMonkT3;

	public bool setSquireT2;

	public bool setHuntressT2;

	public bool setApprenticeT2;

	public bool setMonkT2;

	public int maxTurrets = 1;

	public int maxTurretsOld = 1;

	public bool vortexStealthActive;

	public bool waterWalk;

	public bool waterWalk2;

	public int forcedGravity;

	public bool gravControl;

	public bool gravControl2;

	public Item honeyCombItem;

	public int wireOperationsCooldown;

	public int lastChest;

	public TrackedProjectileReference piggyBankProjTracker;

	public TrackedProjectileReference voidLensChest;

	public int chest = -1;

	public int chestX;

	public int chestY;

	public int fallStart;

	public int fallStart2;

	public int potionDelayTime = Item.potionDelay;

	public int restorationDelayTime = Item.restorationDelay;

	public int mushroomDelayTime = Item.mushroomDelay;

	private bool _batbatCanHeal;

	private bool _spawnTentacleSpikes;

	private bool _spawnBloodButcherer;

	private bool _spawnVolcanoExplosion;

	private bool _spawnMuramasaCut;

	public bool isPettingAnimal;

	public bool isTheAnimalBeingPetSmall;

	public PlayerSittingHelper sitting;

	public PlayerSleepingHelper sleeping;

	public PlayerEyeHelper eyeHelper;

	public PlayerInteractionAnchor tileEntityAnchor;

	public DoorOpeningHelper doorHelper;

	public ShoppingSettings currentShoppingSettings = ShoppingSettings.NotInShop;

	public int cHead;

	public int cBody;

	public int cLegs;

	public int cHandOn;

	public int cHandOff;

	public int cBack;

	public int cFront;

	public int cShoe;

	public int cWaist;

	public int cShield;

	public int cNeck;

	public int cFace;

	public int cFaceHead;

	public int cFaceFlower;

	public int cBalloon;

	public int cBalloonFront;

	public int cWings;

	public int cCarpet;

	public int cFloatingTube;

	public int cBackpack;

	public int cTail;

	public int cShieldFallback;

	public int cGrapple;

	public int cMount;

	public int cMinecart;

	public int cPet;

	public int cLight;

	public int cYorai;

	public int cPortableStool;

	public int cUnicornHorn;

	public int cAngelHalo;

	public int cBeard;

	public int cMinion;

	public int cLeinShampoo;

	public int cFlameWaker;

	public int[] ownedProjectileCounts = new int[ProjectileID.Count];

	public bool[] npcTypeNoAggro = new bool[NPCID.Count];

	public int lastPortalColorIndex;

	public int _portalPhysicsTime;

	public bool portalPhysicsFlag;

	public int lastTeleportPylonStyleUsed;

	public float MountFishronSpecialCounter;

	public Vector2 MinionRestTargetPoint = Vector2.Zero;

	public int MinionAttackTargetNPC = -1;

	public List<Point> TouchedTiles = new List<Point>();

	public int itemAnimation;

	public int itemAnimationMax;

	public int itemTime;

	public int itemTimeMax;

	public int toolTime;

	public static int BlockInteractionWithProjectiles = 3;

	public const int SafeItemAnimationTimeForPreventingExploits = 20;

	private HashSet<Point> _blackListedTileCoordsForGrappling = new HashSet<Point>();

	private bool makeStrongBee;

	public bool equippedAnyTileRangeAcc;

	public bool equippedAnyTileSpeedAcc;

	public bool equippedAnyWallSpeedAcc;

	private static List<NPC> _hallucinationCandidates = new List<NPC>();

	public bool behindBackWall;

	public int _funkytownAchievementCheckCooldown;

	private float _stormShaderObstruction = 1f;

	private float _shaderObstructionInternalValue = 1f;

	private int graveImmediateTime;

	public static float airLightDecay = 1f;

	public static float solidLightDecay = 1f;

	private float _deerclopsBlizzardSmoothedEffect;

	public const int ChairSittingMaxDistance = 40;

	private static SmartInteractSystem _smartInteractSys = new SmartInteractSystem();

	private int _lastSmartCursorToolStrategy = -1;

	private bool[] nearbyTorch = new bool[TorchID.Count];

	private bool dryCoralTorch;

	private int luckyTorchCounter;

	private int nearbyTorches;

	public float torchLuck;

	private Vector2 _nextTorchLuckCheckCenter;

	public bool happyFunTorchTime;

	private int torchFunTimer;

	private int torchGodCooldown;

	private int numberOfTorchAttacksMade;

	private static int maxTorchAttacks = 200;

	private int[] unlitTorchX = new int[maxTorchAttacks];

	private int[] unlitTorchY = new int[maxTorchAttacks];

	private static int[] _torchAttackPosX = new int[400];

	private static int[] _torchAttackPosY = new int[400];

	public int ladyBugLuckTimeLeft;

	public float luck;

	public float luckMinimumCap = -0.7f;

	public float luckMaximumCap = 1f;

	public float coinLuck;

	public bool luckNeedsSync;

	public int disableVoidBag = -1;

	private int _quickGrappleCooldown;

	public PlayerMovementAccsCache movementAbilitiesCache;

	public float wingAccRunSpeed = -1f;

	public float wingRunAccelerationMult = 1f;

	public const int SHIELD_PARRY_DURATION = 20;

	public const int SHIELD_PARRY_DURATION_DRAWING_TWEAKER = 20;

	public const int SHIELD_PARRY_DAMAGE_BUFF_MULTIPLIER = 5;

	public bool hasRaisableShield;

	public bool shieldRaised;

	public int shieldParryTimeLeft;

	public int shield_parry_cooldown;

	private bool _forceForwardCursor;

	private Point _inputMouseCoordsForward;

	private Point _mainMouseCoordsForward;

	private bool _forceSmartSelectCursor;

	private Point _inputMouseCoordsSmartSelect;

	private Point _mainMouseCoordsSmartSelect;

	private Point _tileTargetSmartSelect;

	private bool botherWithUnaimedMinecartTracks = true;

	private List<int> _projectilesToInteractWith = new List<int>();

	private int _lockTileInteractionsTimer;

	public int[] hurtCooldowns = new int[5];

	public static int FlexibleWandRandomSeed;

	public static int FlexibleWandCycleOffset;

	public static Point FlexibleWandLastPosition;

	public static bool lastPound = true;

	private static Point[] _tentacleSpikesMax5 = new Point[5];

	private static Point[] _bloodButchererMax5 = new Point[5];

	public int[] meleeNPCHitCooldown = new int[200];

	public static int musicNotes = 6;

	public float musicDist;

	private static List<Projectile> _oldestProjCheckList = new List<Projectile>();

	public EquipmentLoadout[] Loadouts = new EquipmentLoadout[3]
	{
		new EquipmentLoadout(),
		new EquipmentLoadout(),
		new EquipmentLoadout()
	};

	public int CurrentLoadoutIndex;

	public SavedPlayerDataWithAnnoyingRules savedPerPlayerFieldsThatArentInThePlayerClass;

	private const int SaveSlotIndex_MouseItem = 0;

	private const int SaveSlotIndex_CreativeSacrifice = 1;

	private const int SaveSlotIndex_GuideItem = 2;

	private const int SaveSlotIndex_TinkererItem = 3;

	private const int SaveSlotIndexCount = 4;

	private Item[] _temporaryItemSlots = new Item[4];

	private static readonly PlayerFileData _visualCloneDummyData = new PlayerFileData();

	private static readonly MemoryStream _visualCloneStream = new MemoryStream();

	private static readonly BinaryWriter _visualCloneWriter = new BinaryWriter(_visualCloneStream);

	private static readonly BinaryReader _visualCloneReader = new BinaryReader(_visualCloneStream);

	public Vector2 BlehOldPositionFixer => -Vector2.UnitY;

	public float HeightOffsetVisual
	{
		get
		{
			if (mount.Active)
			{
				return mount.PlayerOffset;
			}
			if (portableStoolInfo.IsInUse)
			{
				return portableStoolInfo.VisualYOffset;
			}
			return 0f;
		}
	}

	public float HeightOffsetHitboxCenter
	{
		get
		{
			if (mount.Active)
			{
				return mount.PlayerOffsetHitbox;
			}
			if (portableStoolInfo.IsInUse)
			{
				return portableStoolInfo.HeightBoost - portableStoolInfo.VisualYOffset;
			}
			return 0f;
		}
	}

	public float MountXOffset
	{
		get
		{
			if (mount.Active)
			{
				return mount.PlayerXOFfset;
			}
			return 0f;
		}
	}

	public int HeightOffsetBoost
	{
		get
		{
			if (mount.Active)
			{
				return mount.HeightBoost;
			}
			if (portableStoolInfo.IsInUse)
			{
				return portableStoolInfo.HeightBoost;
			}
			return 0;
		}
	}

	public int HeightMapOffset
	{
		get
		{
			if (mount.Active)
			{
				return mount.PlayerHeadOffset;
			}
			if (portableStoolInfo.IsInUse)
			{
				return portableStoolInfo.HeightBoost;
			}
			return 0;
		}
	}

	public Rectangle HitboxForBestiaryNearbyCheck
	{
		get
		{
			Rectangle result = new Rectangle((int)position.X, (int)position.Y, width, height);
			result.Inflate(300, 200);
			return result;
		}
	}

	public bool IsStandingStillForSpecialEffects
	{
		get
		{
			if ((double)Math.Abs(velocity.X) < 0.05)
			{
				return (double)Math.Abs(velocity.Y) < 0.05;
			}
			return false;
		}
	}

	public Vector2 MountedCenter
	{
		get
		{
			return new Vector2(position.X + (float)(width / 2), position.Y + 21f + HeightOffsetHitboxCenter);
		}
		set
		{
			position = new Vector2(value.X - (float)(width / 2), value.Y - 21f - HeightOffsetHitboxCenter);
		}
	}

	public bool TileReplacementEnabled => builderAccStatus[10] == 0;

	public override Vector2 VisualPosition => position + new Vector2(0f, gfxOffY);

	public bool CCed
	{
		get
		{
			if (!frozen && !webbed)
			{
				return stoned;
			}
			return true;
		}
	}

	public float miscCounterNormalized => (float)miscCounter / 300f;

	public bool Male
	{
		get
		{
			return PlayerVariantID.Sets.Male[skinVariant];
		}
		set
		{
			if (value)
			{
				if (!Male)
				{
					skinVariant = PlayerVariantID.Sets.AltGenderReference[skinVariant];
				}
			}
			else if (Male)
			{
				skinVariant = PlayerVariantID.Sets.AltGenderReference[skinVariant];
			}
		}
	}

	public bool ZoneDungeon
	{
		get
		{
			return zone1[0];
		}
		set
		{
			zone1[0] = value;
		}
	}

	public bool ZoneCorrupt
	{
		get
		{
			return zone1[1];
		}
		set
		{
			zone1[1] = value;
		}
	}

	public bool ZoneHallow
	{
		get
		{
			return zone1[2];
		}
		set
		{
			zone1[2] = value;
		}
	}

	public bool ZoneMeteor
	{
		get
		{
			return zone1[3];
		}
		set
		{
			zone1[3] = value;
		}
	}

	public bool ZoneJungle
	{
		get
		{
			return zone1[4];
		}
		set
		{
			zone1[4] = value;
		}
	}

	public bool ZoneSnow
	{
		get
		{
			return zone1[5];
		}
		set
		{
			zone1[5] = value;
		}
	}

	public bool ZoneCrimson
	{
		get
		{
			return zone1[6];
		}
		set
		{
			zone1[6] = value;
		}
	}

	public bool ZoneWaterCandle
	{
		get
		{
			return zone1[7];
		}
		set
		{
			zone1[7] = value;
		}
	}

	public bool ZonePeaceCandle
	{
		get
		{
			return zone2[0];
		}
		set
		{
			zone2[0] = value;
		}
	}

	public bool ZoneTowerSolar
	{
		get
		{
			return zone2[1];
		}
		set
		{
			zone2[1] = value;
		}
	}

	public bool ZoneTowerVortex
	{
		get
		{
			return zone2[2];
		}
		set
		{
			zone2[2] = value;
		}
	}

	public bool ZoneTowerNebula
	{
		get
		{
			return zone2[3];
		}
		set
		{
			zone2[3] = value;
		}
	}

	public bool ZoneTowerStardust
	{
		get
		{
			return zone2[4];
		}
		set
		{
			zone2[4] = value;
		}
	}

	public bool ZoneDesert
	{
		get
		{
			return zone2[5];
		}
		set
		{
			zone2[5] = value;
		}
	}

	public bool ZoneGlowshroom
	{
		get
		{
			return zone2[6];
		}
		set
		{
			zone2[6] = value;
		}
	}

	public bool ZoneUndergroundDesert
	{
		get
		{
			return zone2[7];
		}
		set
		{
			zone2[7] = value;
		}
	}

	public bool ZoneSkyHeight
	{
		get
		{
			return zone3[0];
		}
		set
		{
			zone3[0] = value;
		}
	}

	public bool ZoneOverworldHeight
	{
		get
		{
			return zone3[1];
		}
		set
		{
			zone3[1] = value;
		}
	}

	public bool ZoneDirtLayerHeight
	{
		get
		{
			return zone3[2];
		}
		set
		{
			zone3[2] = value;
		}
	}

	public bool ZoneRockLayerHeight
	{
		get
		{
			return zone3[3];
		}
		set
		{
			zone3[3] = value;
		}
	}

	public bool ZoneUnderworldHeight
	{
		get
		{
			return zone3[4];
		}
		set
		{
			zone3[4] = value;
		}
	}

	public bool ZoneBeach
	{
		get
		{
			return zone3[5];
		}
		set
		{
			zone3[5] = value;
		}
	}

	public bool ZoneRain
	{
		get
		{
			return zone3[6];
		}
		set
		{
			zone3[6] = value;
		}
	}

	public bool ZoneSandstorm
	{
		get
		{
			return zone3[7];
		}
		set
		{
			zone3[7] = value;
		}
	}

	public bool ZoneOldOneArmy
	{
		get
		{
			return zone4[0];
		}
		set
		{
			zone4[0] = value;
		}
	}

	public bool ZoneGranite
	{
		get
		{
			return zone4[1];
		}
		set
		{
			zone4[1] = value;
		}
	}

	public bool ZoneMarble
	{
		get
		{
			return zone4[2];
		}
		set
		{
			zone4[2] = value;
		}
	}

	public bool ZoneHive
	{
		get
		{
			return zone4[3];
		}
		set
		{
			zone4[3] = value;
		}
	}

	public bool ZoneGemCave
	{
		get
		{
			return zone4[4];
		}
		set
		{
			zone4[4] = value;
		}
	}

	public bool ZoneLihzhardTemple
	{
		get
		{
			return zone4[5];
		}
		set
		{
			zone4[5] = value;
		}
	}

	public bool ZoneGraveyard
	{
		get
		{
			return zone4[6];
		}
		set
		{
			zone4[6] = value;
		}
	}

	public bool ZoneShadowCandle
	{
		get
		{
			return zone4[7];
		}
		set
		{
			zone4[7] = value;
		}
	}

	public bool ZoneShimmer
	{
		get
		{
			return zone5[0];
		}
		set
		{
			zone5[0] = value;
		}
	}

	public bool ShoppingZone_AnyBiome
	{
		get
		{
			if (!ZoneDungeon && !ZoneCorrupt && !ZoneCrimson && !ZoneGlowshroom && !ZoneHallow && !ZoneJungle && !ZoneSnow && !ZoneBeach)
			{
				return ZoneDesert;
			}
			return true;
		}
	}

	public bool ShoppingZone_BelowSurface => (double)position.Y > Main.worldSurface * 16.0;

	public bool ShoppingZone_Forest
	{
		get
		{
			if (ShoppingZone_AnyBiome || ShoppingZone_BelowSurface)
			{
				return false;
			}
			return true;
		}
	}

	public Vector2 Directions => new Vector2(direction, gravDir);

	public Item HeldItem => inventory[selectedItem];

	public int breathCDMax
	{
		get
		{
			int num = 7;
			if (inventory[selectedItem].type == 186 && itemAnimation == 0)
			{
				num *= 2;
			}
			if (accDivingHelm)
			{
				num *= 6;
			}
			return num;
		}
	}

	public bool ShouldFloatInWater
	{
		get
		{
			if (canFloatInWater && !controlDown)
			{
				if (mount.Active)
				{
					return mount.Type == 37;
				}
				return true;
			}
			return false;
		}
	}

	public bool CanBeTalkedTo
	{
		get
		{
			if (active && !dead && !ShouldNotDraw)
			{
				return stealth == 1f;
			}
			return false;
		}
	}

	public bool IsVoidVaultEnabled
	{
		get
		{
			return voidVaultInfo[0];
		}
		set
		{
			voidVaultInfo[0] = value;
		}
	}

	public bool DeadOrGhost
	{
		get
		{
			if (!dead)
			{
				return ghost;
			}
			return true;
		}
	}

	public bool TryingToHoverUp
	{
		get
		{
			if (!controlUp)
			{
				return tryKeepingHoveringUp;
			}
			return true;
		}
	}

	public bool TryingToHoverDown
	{
		get
		{
			if (!controlDown)
			{
				return tryKeepingHoveringDown;
			}
			return true;
		}
	}

	public Vector2 DefaultSize => new Vector2(20f, 42f);

	public bool UsingBiomeTorches
	{
		get
		{
			if (!unlockedBiomeTorches)
			{
				return false;
			}
			return builderAccStatus[11] == 0;
		}
		set
		{
			builderAccStatus[11] = ((!value) ? 1 : 0);
		}
	}

	public bool UsingSuperCart
	{
		get
		{
			if (!unlockedSuperCart)
			{
				return false;
			}
			return enabledSuperCart;
		}
		set
		{
			enabledSuperCart = value;
		}
	}

	public float bowEffectiveDamage => (rangedDamage / rangedMultDamage + arrowDamageAdditiveStack) * rangedMultDamage * arrowDamage;

	public float gunEffectiveDamage => rangedDamage * bulletDamage;

	public float specialistEffectiveDamage => rangedDamage * rocketDamage;

	public bool ShouldNotDraw
	{
		get
		{
			if (invis && itemAnimation == 0)
			{
				if (!isDisplayDollOrInanimate)
				{
					return !isHatRackDoll;
				}
				return false;
			}
			return false;
		}
	}

	public int talkNPC { get; private set; }

	public bool isLockedToATile
	{
		get
		{
			if (!sitting.isSitting)
			{
				return sleeping.isSleeping;
			}
			return true;
		}
	}

	public bool PortalPhysicsEnabled
	{
		get
		{
			if (_portalPhysicsTime > 0)
			{
				return !mount.Active;
			}
			return false;
		}
	}

	public bool MountFishronSpecial
	{
		get
		{
			if (statLife >= statLifeMax2 / 2 && (!wet || lavaWet || honeyWet) && !dripping && !(MountFishronSpecialCounter > 0f))
			{
				if (Main.raining)
				{
					return WorldGen.InAPlaceWithWind(position, width, height);
				}
				return false;
			}
			return true;
		}
	}

	public bool HasMinionRestTarget => MinionRestTargetPoint != Vector2.Zero;

	public bool HasMinionAttackTargetNPC => MinionAttackTargetNPC != -1;

	public bool ItemTimeIsZero => itemTime == 0;

	public bool ItemAnimationJustStarted => itemAnimation == itemAnimationMax - 1;

	public float NormalizedLuck
	{
		get
		{
			float value = 0f;
			if (luck > 0f)
			{
				value = luck / luckMaximumCap;
			}
			else if (luck < 0f)
			{
				value = 0f - luck / luckMinimumCap;
			}
			return MathHelper.Clamp(value, -1f, 1f);
		}
	}

	public bool SlimeDontHyperJump
	{
		get
		{
			if (mount.Active && mount.IsConsideredASlimeMount && wetSlime > 0)
			{
				return !controlJump;
			}
			return false;
		}
	}

	public Vector2? MouthPosition
	{
		get
		{
			if (mount.Active)
			{
				Mount.MountDelegatesData.OverridePositionMethod mouthPosition = mount.Delegations.MouthPosition;
				if (mouthPosition != null && mouthPosition(this, out var result))
				{
					return result;
				}
			}
			Vector2 spinningpoint = new Vector2(direction * 8, gravDir * -4f);
			return RotatedRelativePoint(MountedCenter, reverseRotation: false, addGfxOffY: false) + spinningpoint.RotatedBy(fullRotation);
		}
	}

	public Vector2? HandPosition
	{
		get
		{
			if (mount.Active)
			{
				Mount.MountDelegatesData.OverridePositionMethod handPosition = mount.Delegations.HandPosition;
				if (handPosition != null && handPosition(this, out var result))
				{
					return result;
				}
			}
			Vector2 vector = Main.OffsetsPlayerOnhand[bodyFrame.Y / 56] * 2f;
			if (direction != 1)
			{
				vector.X = (float)bodyFrame.Width - vector.X;
			}
			if (gravDir != 1f)
			{
				vector.Y = (float)bodyFrame.Height - vector.Y;
			}
			vector -= new Vector2(bodyFrame.Width - width, bodyFrame.Height - 42) / 2f;
			Vector2 vector2 = -new Vector2(20f, 42f) / 2f + vector;
			return RotatedRelativePoint(MountedCenter + vector2);
		}
	}

	public void RotateRelativePoint(ref float x, ref float y)
	{
		Vector2 vector = RotatedRelativePoint(new Vector2(x, y));
		x = vector.X;
		y = vector.Y;
	}

	public Vector2 RotatedRelativePointOld(Vector2 pos, bool rotateForward = true)
	{
		Vector2 vector = position + fullRotationOrigin;
		Matrix matrix = Matrix.CreateRotationZ(fullRotation * (float)rotateForward.ToInt());
		pos -= position + fullRotationOrigin;
		pos = Vector2.Transform(pos, matrix);
		return pos + vector;
	}

	public Vector2 RotatedRelativePoint(Vector2 pos, bool reverseRotation = false, bool addGfxOffY = true)
	{
		float num = (reverseRotation ? (0f - fullRotation) : fullRotation);
		if (sleeping.isSleeping)
		{
			num = 0f;
		}
		Vector2 vector = base.Bottom + new Vector2(0f, gfxOffY);
		int num2 = mount.PlayerOffset / 2 + 4;
		Vector2 vector2 = new Vector2(0f, -num2) + new Vector2(0f, num2).RotatedBy(num);
		if (addGfxOffY)
		{
			pos.Y += gfxOffY;
		}
		pos = vector + (pos - vector).RotatedBy(num) + vector2;
		if (sleeping.isSleeping)
		{
			sleeping.GetSleepingOffsetInfo(this, out var posOffset);
			pos += posOffset;
		}
		if (sitting.isSitting)
		{
			sitting.GetSittingOffsetInfo(this, out var posOffset2, out var seatAdjustment);
			pos += posOffset2 + new Vector2(0f, seatAdjustment);
		}
		return pos;
	}

	public bool CanDemonHeartAccessoryBeShown()
	{
		if (!IsItemSlotUnlockedAndUsable(8) && armor[8].type <= 0 && armor[18].type <= 0)
		{
			return dye[8].type > 0;
		}
		return true;
	}

	public bool CanMasterModeAccessoryBeShown()
	{
		if (!IsItemSlotUnlockedAndUsable(9) && armor[9].type <= 0 && armor[19].type <= 0)
		{
			return dye[9].type > 0;
		}
		return true;
	}

	public int GetAmountOfExtraAccessorySlotsToShow()
	{
		int num = 0;
		if (CanDemonHeartAccessoryBeShown())
		{
			num++;
		}
		if (CanMasterModeAccessoryBeShown())
		{
			num++;
		}
		return num;
	}

	public EntityShadowInfo GetAdvancedShadow(int shadowIndex)
	{
		if (shadowIndex > availableAdvancedShadowsCount)
		{
			shadowIndex = availableAdvancedShadowsCount;
		}
		int num = (_lastAddedAvancedShadow - shadowIndex).ModulusPositive(60);
		return _advancedShadows[num];
	}

	public void UpdateAdvancedShadows()
	{
		availableAdvancedShadowsCount++;
		if (availableAdvancedShadowsCount > 60)
		{
			availableAdvancedShadowsCount = 60;
		}
		if (++_lastAddedAvancedShadow >= 60)
		{
			_lastAddedAvancedShadow = 0;
		}
		_advancedShadows[_lastAddedAvancedShadow].CopyPlayer(this);
	}

	public void ResetAdvancedShadows()
	{
		availableAdvancedShadowsCount = 0;
	}

	public void SetCompositeArmFront(bool enabled, CompositeArmStretchAmount stretch, float rotation)
	{
		if (gravDir == -1f)
		{
			rotation = 0f - rotation;
		}
		compositeFrontArm = new CompositeArmData(enabled, stretch, rotation);
	}

	public void SetCompositeArmBack(bool enabled, CompositeArmStretchAmount stretch, float rotation)
	{
		if (gravDir == -1f)
		{
			rotation = 0f - rotation;
		}
		compositeBackArm = new CompositeArmData(enabled, stretch, rotation);
	}

	public void SetTalkNPC(int npcIndex, bool fromNet = false)
	{
		talkNPC = npcIndex;
		if (Main.netMode != 1 && npcIndex >= 0 && npcIndex < 200)
		{
			Main.BestiaryTracker.Chats.RegisterChatStartWith(Main.npc[npcIndex]);
		}
		if (talkNPC == -1)
		{
			currentShoppingSettings = ShoppingSettings.NotInShop;
		}
		else
		{
			currentShoppingSettings = Main.ShopHelper.GetShoppingSettings(this, Main.npc[talkNPC]);
		}
		if (currentShoppingSettings.PriceAdjustment <= 0.8199999928474426)
		{
			AchievementsHelper.HandleSpecialEvent(this, 20);
		}
	}

	public void SetItemTime(int frames)
	{
		itemTime = frames;
		itemTimeMax = frames;
	}

	public void ApplyItemTime(Item sItem)
	{
		SetItemTime(sItem.useTime);
	}

	public void ApplyItemTime(Item sItem, float multiplier)
	{
		SetItemTime((int)((float)sItem.useTime * multiplier));
	}

	public void SetDummyItemTime(int frames)
	{
		itemAnimation = frames;
		itemTime = frames;
		itemTimeMax = frames + 1;
	}

	private void SetItemAnimation(int frames)
	{
		itemAnimation = frames;
		itemAnimationMax = frames;
	}

	private void ApplyItemAnimation(Item sItem)
	{
		int num = 0;
		if (sItem.autoReuse && sItem.reuseDelay == 0 && sItem.useTime <= sItem.useAnimation && sItem.shoot > 0 && sItem.useStyle == 5)
		{
			num = 1;
		}
		if (sItem.melee)
		{
			SetItemAnimation((int)((float)sItem.useAnimation * meleeSpeed));
		}
		else if (sItem.summon && ItemID.Sets.SummonerWeaponThatScalesWithAttackSpeed[sItem.type])
		{
			SetItemAnimation((int)((float)sItem.useAnimation * summonerWeaponSpeedBonus * whipUseTimeMultiplier));
		}
		else if (sItem.createTile >= 0)
		{
			SetItemAnimation((int)((float)sItem.useAnimation * tileSpeed));
		}
		else if (sItem.createWall >= 0)
		{
			SetItemAnimation((int)((float)sItem.useAnimation * wallSpeed));
		}
		else
		{
			SetItemAnimation(sItem.useAnimation + num);
		}
		reuseDelay = sItem.reuseDelay;
	}

	public void MatchItemTimeToItemAnimation()
	{
		itemTime = itemAnimation;
	}

	public bool InOpposingTeam(Player otherPlayer)
	{
		if (hostile && otherPlayer.hostile)
		{
			if (otherPlayer.team != 0)
			{
				return otherPlayer.team != team;
			}
			return true;
		}
		return false;
	}

	public bool TeamChangeAllowed()
	{
		return true;
	}

	public void HealEffect(int healAmount, bool broadcast = true)
	{
		CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), CombatText.HealLife, healAmount);
		if (broadcast && Main.netMode == 1 && whoAmI == Main.myPlayer)
		{
			NetMessage.SendData(35, -1, -1, null, whoAmI, healAmount);
		}
	}

	public void ManaEffect(int manaAmount)
	{
		CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), CombatText.HealMana, manaAmount);
		if (Main.netMode == 1 && whoAmI == Main.myPlayer)
		{
			NetMessage.SendData(43, -1, -1, null, whoAmI, manaAmount);
		}
	}

	public void InterruptItemUsageIfOverTile(int tileTypeToBeOver)
	{
		Tile tile = Main.tile[tileTargetX, tileTargetY];
		if (tile != null && tile.active() && tile.type == tileTypeToBeOver)
		{
			Main.blockMouse = true;
		}
	}

	public Vector2 GetHairDrawOffset(int hairID, bool hatHair)
	{
		Vector2 zero = Vector2.Zero;
		if (!hatHair && hairID == 163)
		{
			return new Vector2(0f, -2f) * Directions;
		}
		if (hairID == 164)
		{
			return new Vector2(-2f, 0f) * Directions;
		}
		return zero;
	}

	public Vector2 GetHelmetDrawOffset()
	{
		Vector2 headOffset = Vector2.Zero;
		if (head == 270)
		{
			headOffset = new Vector2(-10f, 0f) * Directions;
			if (direction == -1)
			{
				headOffset.X -= 2f;
			}
		}
		else if (head == 268)
		{
			headOffset = new Vector2(0f, -6f) * Directions;
		}
		else if (head == 222)
		{
			float y = 0f;
			if (hair == 15 || hair == 76 || hair == 108)
			{
				y = 4f;
			}
			headOffset = new Vector2(0f, y) * Directions;
		}
		else if (head == 272)
		{
			if (hair == 15 || hair == 76 || hair == 108)
			{
				headOffset = new Vector2(0f, 4f) * Directions;
			}
		}
		else if (head == 275)
		{
			headOffset = new Vector2(0f, -4f) * Directions;
		}
		return GetHelmetOffsetAddonFromFaceHead(headOffset);
	}

	public Vector2 GetBeardDrawOffsetFromHelmet()
	{
		Vector2 result = Vector2.Zero;
		switch (head)
		{
		case 165:
			result = new Vector2(8 * direction, 0f);
			break;
		case 146:
		case 150:
		case 152:
			result = new Vector2(2 * direction, 0f);
			break;
		case 148:
			result = new Vector2(2 * direction, 0f);
			break;
		}
		return result;
	}

	public Vector2 GetFaceHeadOffsetFromHelmet()
	{
		Vector2 vector = Vector2.Zero;
		if (faceHead == 12 || faceHead == 13 || faceHead == 10 || faceHead == 11 || faceHead == 17 || faceHead == 18 || faceHead == 15 || faceHead == 16)
		{
			switch (head)
			{
			case 20:
			case 221:
				vector = new Vector2(0f, -2f);
				break;
			case 196:
				vector = new Vector2(2f, 0f);
				break;
			}
		}
		return vector * Directions;
	}

	public Vector2 GetHelmetOffsetAddonFromFaceHead(Vector2 headOffset)
	{
		if (faceHead == 12 || faceHead == 13 || faceHead == 10 || faceHead == 11 || faceHead == 17 || faceHead == 18 || faceHead == 15 || faceHead == 16)
		{
			switch (head)
			{
			case 16:
			case 21:
			case 24:
			case 65:
			case 67:
			case 94:
			case 95:
			case 96:
			case 159:
			case 222:
			case 231:
			case 250:
				headOffset += new Vector2(2f, 0f) * Directions;
				break;
			case 59:
			case 64:
			case 106:
			case 138:
			case 181:
			case 220:
				headOffset += new Vector2(0f, -2f) * Directions;
				break;
			case 26:
			case 51:
			case 60:
			case 81:
				headOffset += new Vector2(2f, -2f) * Directions;
				break;
			case 97:
				headOffset += new Vector2(-2f, 0f) * Directions;
				break;
			case 117:
				headOffset += new Vector2(-4f, 0f) * Directions;
				break;
			}
		}
		return headOffset;
	}

	public Vector2 GetLegsDrawOffset()
	{
		Vector2 result = Vector2.Zero;
		if (legs == 226)
		{
			result = new Vector2(-6f, 0f) * Directions;
		}
		return result;
	}

	public void AccumulateGolfingScore(int score)
	{
		int num = score;
		if (golferScoreAccumulated + num > 1000000000)
		{
			num = 1000000000 - golferScoreAccumulated;
		}
		golferScoreAccumulated += num;
	}

	public static byte FindClosest(Vector2 Position, int Width, int Height)
	{
		byte result = 0;
		for (int i = 0; i < 255; i++)
		{
			if (Main.player[i].active)
			{
				result = (byte)i;
				break;
			}
		}
		float num = -1f;
		for (int j = 0; j < 255; j++)
		{
			if (Main.player[j].active && !Main.player[j].dead)
			{
				float num2 = Math.Abs(Main.player[j].position.X + (float)(Main.player[j].width / 2) - (Position.X + (float)(Width / 2))) + Math.Abs(Main.player[j].position.Y + (float)(Main.player[j].height / 2) - (Position.Y + (float)(Height / 2)));
				if (num == -1f || num2 < num)
				{
					num = num2;
					result = (byte)j;
				}
			}
		}
		return result;
	}

	public void ToggleInv()
	{
		bool grappleAndInteractAreShared = PlayerInput.GrappleAndInteractAreShared;
		if (Main.mapFullscreen)
		{
			Main.mapFullscreen = false;
			releaseInventory = false;
			SoundEngine.PlaySound(11);
			if (PlayerInput.GrappleAndInteractAreShared)
			{
				LockGamepadTileInteractions();
			}
		}
		else if (PlayerInput.InBuildingMode)
		{
			PlayerInput.ExitBuildingMode();
		}
		else if (Main.ingameOptionsWindow)
		{
			if (PlayerInput.UsingGamepadUI && UILinkPointNavigator.CurrentPage == 1002)
			{
				UILinkPointNavigator.ChangePage(1001);
			}
			else
			{
				IngameOptions.Close();
			}
		}
		else if (Main.inFancyUI)
		{
			IngameFancyUI.Close();
		}
		else if (CaptureManager.Instance.Active)
		{
			CaptureManager.Instance.Active = false;
		}
		else if (talkNPC >= 0)
		{
			SetTalkNPC(-1);
			Main.npcChatCornerItem = 0;
			Main.npcChatText = "";
			SoundEngine.PlaySound(11);
			if (PlayerInput.UsingGamepad)
			{
				Main.npcChatRelease = false;
			}
		}
		else if (sign >= 0)
		{
			sign = -1;
			Main.editSign = false;
			Main.npcChatText = "";
			SoundEngine.PlaySound(11);
		}
		else if (Main.clothesWindow)
		{
			Main.CancelClothesWindow();
		}
		else if (!Main.playerInventory)
		{
			OpenInventory();
		}
		else
		{
			Main.playerInventory = false;
			if (channel && Main.mouseItem != null && !Main.mouseItem.IsAir)
			{
				channel = false;
			}
			tileEntityAnchor.Clear();
			if (!PlayerInput.UsingGamepad)
			{
				Main.EquipPageSelected = 0;
			}
			else
			{
				PlayerInput.NavigatorUnCachePosition();
				Main.GamepadCursorAlpha = 0f;
				BlockInteractionWithProjectiles = 3;
				if (PlayerInput.GrappleAndInteractAreShared)
				{
					LockGamepadTileInteractions();
				}
			}
			SoundEngine.PlaySound(11);
			if (ItemSlot.Options.HighlightNewItems)
			{
				Item[] array = inventory;
				for (int i = 0; i < array.Length; i++)
				{
					array[i].newAndShiny = false;
				}
			}
			if (PlayerInput.UsingGamepad)
			{
				Main.npcChatRelease = false;
				tileInteractionHappened = true;
				releaseInventory = false;
				Main.mouseRight = true;
			}
		}
		if (grappleAndInteractAreShared)
		{
			GamepadEnableGrappleCooldown();
		}
	}

	private static void OpenInventory()
	{
		Recipe.FindRecipes();
		Main.playerInventory = true;
		Main.EquipPageSelected = 0;
		SoundEngine.PlaySound(10);
	}

	public void ToggleCreativeMenu()
	{
		if (dead || difficulty != 3)
		{
			return;
		}
		bool flag = false;
		if (Main.mapFullscreen)
		{
			Main.mapFullscreen = false;
			flag = true;
		}
		if (PlayerInput.InBuildingMode)
		{
			PlayerInput.ExitBuildingMode();
		}
		if (Main.ingameOptionsWindow)
		{
			IngameOptions.Close();
		}
		if (Main.inFancyUI)
		{
			IngameFancyUI.Close();
		}
		if (CaptureManager.Instance.Active)
		{
			CaptureManager.Instance.Active = false;
		}
		if (talkNPC >= 0)
		{
			SetTalkNPC(-1);
			Main.npcChatCornerItem = 0;
			Main.npcChatText = "";
			flag = true;
			if (PlayerInput.UsingGamepad)
			{
				Main.npcChatRelease = false;
			}
		}
		if (sign >= 0)
		{
			sign = -1;
			Main.editSign = false;
			Main.npcChatText = "";
			flag = true;
		}
		else if (Main.clothesWindow)
		{
			Main.CancelClothesWindow();
		}
		if (tileEntityAnchor.InUse)
		{
			Recipe.FindRecipes();
			tileEntityAnchor.Clear();
			flag = true;
		}
		if (flag)
		{
			SoundEngine.PlaySound(11);
		}
		if (!Main.playerInventory)
		{
			OpenInventory();
		}
		Main.CreativeMenu.ToggleMenu();
	}

	public void dropItemCheck()
	{
		if (!Main.playerInventory)
		{
			noThrow = 0;
		}
		if (noThrow > 0)
		{
			noThrow--;
		}
		GetItemSettings getItemInDropItemCheck = GetItemSettings.GetItemInDropItemCheck;
		if (!Main.InGuideCraftMenu && Main.guideItem.type > 0)
		{
			Main.guideItem.position = base.Center;
			Item item = GetItem(whoAmI, Main.guideItem, getItemInDropItemCheck);
			if (item.stack > 0)
			{
				int num = Item.NewItem(GetItemSource_Misc(4), (int)position.X, (int)position.Y, width, height, item.type, item.stack, noBroadcast: false, Main.guideItem.prefix, noGrabDelay: true);
				Main.item[num].newAndShiny = false;
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, num, 1f);
				}
			}
			Main.guideItem = new Item();
		}
		if (!Main.InReforgeMenu && Main.reforgeItem.type > 0)
		{
			Main.reforgeItem.position = base.Center;
			Item item2 = GetItem(whoAmI, Main.reforgeItem, getItemInDropItemCheck);
			if (item2.stack > 0)
			{
				int num2 = Item.NewItem(GetItemSource_Misc(4), (int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, Main.reforgeItem.prefix, noGrabDelay: true);
				Main.item[num2].newAndShiny = false;
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, num2, 1f);
				}
			}
			Main.reforgeItem = new Item();
		}
		if (Main.myPlayer == whoAmI)
		{
			inventory[58] = Main.mouseItem.Clone();
		}
		bool flag = true;
		if (Main.mouseItem.type > 0 && Main.mouseItem.stack > 0)
		{
			if (!Main.gamePaused)
			{
				tileTargetX = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
				tileTargetY = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
				if (gravDir == -1f)
				{
					tileTargetY = (int)((Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16f);
				}
			}
			if (selectedItem != 58)
			{
				oldSelectItem = selectedItem;
			}
			selectedItem = 58;
			flag = false;
		}
		if (flag && selectedItem == 58 && ItemTimeIsZero && itemAnimation == 0)
		{
			selectedItem = oldSelectItem;
		}
		if (Main.mouseItem.type > 0 && !Main.playerInventory)
		{
			Main.mouseItem.position = base.Center;
			Item item3 = GetItem(whoAmI, Main.mouseItem, getItemInDropItemCheck);
			if (item3.stack > 0)
			{
				int num3 = Item.NewItem(GetItemSource_Misc(4), (int)position.X, (int)position.Y, width, height, item3.type, item3.stack, noBroadcast: false, Main.mouseItem.prefix, noGrabDelay: true);
				Main.item[num3].newAndShiny = false;
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, num3, 1f);
				}
			}
			Main.mouseItem = new Item();
			inventory[58] = new Item();
			Recipe.FindRecipes();
		}
		if (((controlThrow && releaseThrow && !inventory[selectedItem].favorited && inventory[selectedItem].type > 0 && !Main.drawingPlayerChat) || (((Main.mouseRight && !mouseInterface && Main.mouseRightRelease) || !Main.playerInventory) && Main.mouseItem.type > 0 && Main.mouseItem.stack > 0)) && noThrow <= 0)
		{
			DropSelectedItem();
		}
		if (Main.gamePaused && selectedItem == 58)
		{
			selectedItem = oldSelectItem;
		}
	}

	public void DropSelectedItem()
	{
		if (Main.mouseItem != null && Main.mouseItem.type > 0 && Main.mouseItem.stack > 0)
		{
			DropSelectedItem(58, ref inventory[58]);
		}
		else
		{
			DropSelectedItem(selectedItem, ref inventory[selectedItem]);
		}
	}

	public void DropSelectedItem(int slot, ref Item theItemWeDrop)
	{
		bool flag = false;
		if (theItemWeDrop.favorited)
		{
			theItemWeDrop = GetItem(whoAmI, theItemWeDrop, GetItemSettings.GetItemInDropItemCheck);
			if (slot == 58)
			{
				Main.mouseItem = theItemWeDrop;
			}
			Recipe.FindRecipes();
			if (theItemWeDrop.type == 0)
			{
				flag = true;
			}
		}
		if (!flag)
		{
			Item item = new Item();
			if (((Main.mouseRight && !mouseInterface && Main.mouseRightRelease) || !Main.playerInventory) && Main.mouseItem.type > 0 && Main.mouseItem.stack > 0)
			{
				item = theItemWeDrop;
				theItemWeDrop = Main.mouseItem;
				delayUseItem = true;
				controlUseItem = false;
			}
			if (whoAmI == Main.myPlayer && theItemWeDrop.type == 5095)
			{
				LucyAxeMessage.Create(LucyAxeMessage.MessageSource.ThrownAway, base.Top, new Vector2(direction * 7, -2f));
			}
			int num = Item.NewItem(GetItemSource_Misc(4), (int)position.X, (int)position.Y, width, height, theItemWeDrop.type);
			theItemWeDrop.position = Main.item[num].position;
			Main.item[num] = theItemWeDrop;
			theItemWeDrop = new Item();
			if (slot == 58)
			{
				Main.mouseItem = new Item();
			}
			Item item2 = Main.item[num];
			if (Main.netMode == 0)
			{
				item2.noGrabDelay = 100;
			}
			item2.velocity.Y = -2f;
			item2.velocity.X = (float)(4 * direction) + velocity.X;
			item2.favorited = false;
			item2.newAndShiny = false;
			if (((Main.mouseRight && !mouseInterface) || !Main.playerInventory) && Main.mouseItem.type > 0)
			{
				theItemWeDrop = item;
				Main.mouseItem = new Item();
			}
			else
			{
				SetItemAnimation(10);
				JustDroppedAnItem = true;
				DropSelectedItem_InterruptActionsThatUseAnimations();
			}
			Recipe.FindRecipes();
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, num);
			}
		}
	}

	public void PlayDroppedItemAnimation(int time)
	{
		nonTorch = selectedItem;
		int num = 58;
		inventory[num].TurnToAir();
		selectedItem = num;
		JustDroppedAnItem = true;
		SetItemAnimation(time);
		SetItemTime(time);
		DropSelectedItem_InterruptActionsThatUseAnimations();
	}

	private void DropSelectedItem_InterruptActionsThatUseAnimations()
	{
		if (heldProj >= 0)
		{
			Projectile projectile = Main.projectile[heldProj];
			if (projectile.active && projectile.owner == whoAmI)
			{
				projectile.Kill();
			}
		}
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile2 = Main.projectile[i];
			if (projectile2.active && projectile2.owner == whoAmI && (projectile2.aiStyle == 61 || projectile2.aiStyle == 160))
			{
				projectile2.Kill();
			}
		}
	}

	public int FindBuffIndex(int type)
	{
		if (buffImmune[type])
		{
			return -1;
		}
		for (int i = 0; i < maxBuffs; i++)
		{
			if (buffTime[i] >= 1 && buffType[i] == type)
			{
				return i;
			}
		}
		return -1;
	}

	public void AddBuff(int type, int timeToAdd, bool quiet = true, bool foodHack = false)
	{
		if (buffImmune[type])
		{
			return;
		}
		bool flag = !quiet && Main.netMode == 1 && Main.pvpBuff[type] && Main.myPlayer != whoAmI;
		if (!flag && BuffID.Sets.IsFedState[type])
		{
			for (int i = 0; i < maxBuffs; i++)
			{
				if (BuffID.Sets.IsFedState[buffType[i]])
				{
					DelBuff(i);
				}
			}
		}
		int num = AddBuff_DetermineBuffTimeToAdd(type, timeToAdd);
		if (AddBuff_TryUpdatingExistingBuffTime(type, num))
		{
			return;
		}
		if (!quiet && Main.netMode == 1)
		{
			NetMessage.SendData(55, -1, -1, null, whoAmI, type, num);
			if (flag)
			{
				return;
			}
		}
		AddBuff_RemoveOldPetBuffsOfMatchingType(type);
		AddBuff_RemoveOldMeleeBuffsOfMatchingType(type);
		AddBuff_ActuallyTryToAddTheBuff(type, num);
	}

	private bool AddBuff_ActuallyTryToAddTheBuff(int type, int time)
	{
		int num = -1;
		while (num == -1)
		{
			int num2 = -1;
			for (int i = 0; i < maxBuffs; i++)
			{
				if (!Main.debuff[buffType[i]])
				{
					num2 = i;
					break;
				}
			}
			if (num2 == -1)
			{
				return false;
			}
			for (int j = num2; j < maxBuffs; j++)
			{
				if (buffType[j] == 0)
				{
					num = j;
					break;
				}
			}
			if (num == -1)
			{
				DelBuff(num2);
			}
		}
		buffType[num] = type;
		buffTime[num] = time;
		return true;
	}

	private void AddBuff_RemoveOldMeleeBuffsOfMatchingType(int type)
	{
		if (!Main.meleeBuff[type])
		{
			return;
		}
		for (int i = 0; i < maxBuffs; i++)
		{
			if (buffType[i] != type && Main.meleeBuff[buffType[i]])
			{
				DelBuff(i);
				i--;
			}
		}
	}

	private void AddBuff_RemoveOldPetBuffsOfMatchingType(int type)
	{
		if (Main.lightPet[type])
		{
			for (int i = 0; i < maxBuffs; i++)
			{
				if (Main.lightPet[buffType[i]])
				{
					DelBuff(i);
				}
			}
		}
		if (!Main.vanityPet[type])
		{
			return;
		}
		for (int j = 0; j < maxBuffs; j++)
		{
			if (Main.vanityPet[buffType[j]])
			{
				DelBuff(j);
			}
		}
	}

	private bool AddBuff_TryUpdatingExistingBuffTime(int type, int time)
	{
		bool result = false;
		for (int i = 0; i < maxBuffs; i++)
		{
			if (buffType[i] != type)
			{
				continue;
			}
			if (type == 94)
			{
				buffTime[i] += time;
				if (buffTime[i] > manaSickTimeMax)
				{
					buffTime[i] = manaSickTimeMax;
				}
			}
			else if (buffTime[i] < time)
			{
				buffTime[i] = time;
			}
			result = true;
			break;
		}
		return result;
	}

	private int AddBuff_DetermineBuffTimeToAdd(int type, int time1)
	{
		int num = time1;
		if (Main.expertMode && whoAmI == Main.myPlayer && (type == 20 || type == 22 || type == 23 || type == 24 || type == 30 || type == 31 || type == 32 || type == 33 || type == 35 || type == 36 || type == 39 || type == 44 || type == 46 || type == 47 || type == 69 || type == 70 || type == 80))
		{
			float debuffTimeMultiplier = Main.GameModeInfo.DebuffTimeMultiplier;
			if (Main.GameModeInfo.IsJourneyMode)
			{
				if (Main.masterMode)
				{
					debuffTimeMultiplier = Main.RegisteredGameModes[2].DebuffTimeMultiplier;
				}
				else if (Main.expertMode)
				{
					debuffTimeMultiplier = Main.RegisteredGameModes[1].DebuffTimeMultiplier;
				}
			}
			num = (int)(debuffTimeMultiplier * (float)num);
		}
		return num;
	}

	public void DelBuff(int b)
	{
		buffTime[b] = 0;
		buffType[b] = 0;
		int num = 0;
		for (int i = 0; i < maxBuffs - 1; i++)
		{
			if (buffTime[i] != 0 && buffType[i] != 0)
			{
				if (num < i)
				{
					buffTime[num] = buffTime[i];
					buffType[num] = buffType[i];
					buffTime[i] = 0;
					buffType[i] = 0;
				}
				num++;
			}
		}
	}

	public void ClearBuff(int type)
	{
		for (int i = 0; i < maxBuffs; i++)
		{
			if (buffType[i] == type)
			{
				DelBuff(i);
			}
		}
	}

	public int CountBuffs()
	{
		int num = 0;
		for (int i = 0; i < maxBuffs; i++)
		{
			if (buffType[num] > 0)
			{
				num++;
			}
		}
		return num;
	}

	public void QuickHeal()
	{
		if (cursed || CCed || dead || statLife == statLifeMax2 || potionDelay > 0)
		{
			return;
		}
		Item item = QuickHeal_GetItemToUse();
		if (item == null || !ItemCheck_CheckCanUse(item))
		{
			return;
		}
		SoundEngine.PlaySound(item.UseSound, position);
		if (item.potion)
		{
			ApplyPotionDelay(item);
		}
		ApplyLifeAndOrMana(item);
		if (item.type == 5)
		{
			TryToResetHungerToNeutral();
		}
		if (item.buffType > 0)
		{
			int num = item.buffTime;
			if (num == 0)
			{
				num = 3600;
			}
			AddBuff(item.buffType, num);
		}
		item.stack--;
		if (item.stack <= 0)
		{
			item.TurnToAir();
		}
		if (Main.myPlayer == whoAmI && item.type == 126 && breath == 0)
		{
			AchievementsHelper.HandleSpecialEvent(this, 25);
		}
		Recipe.FindRecipes();
	}

	public Item QuickHeal_GetItemToUse()
	{
		int num = statLifeMax2 - statLife;
		Item result = null;
		int num2 = -statLifeMax2;
		int num3 = 58;
		if (useVoidBag())
		{
			num3 = 98;
		}
		for (int i = 0; i < num3; i++)
		{
			Item item = ((i >= 58) ? bank4.item[i - 58] : inventory[i]);
			if (item.stack <= 0 || item.type <= 0 || !item.potion || item.healLife <= 0)
			{
				continue;
			}
			int num4 = item.healLife - num;
			if (item.type == 227 && num4 < 0)
			{
				num4 += 30;
				if (num4 > 0)
				{
					num4 = 0;
				}
			}
			if (num2 < 0)
			{
				if (num4 > num2)
				{
					result = item;
					num2 = num4;
				}
			}
			else if (num4 < num2 && num4 >= 0)
			{
				result = item;
				num2 = num4;
			}
		}
		return result;
	}

	public void QuickMana()
	{
		if (cursed || CCed || dead || statMana == statManaMax2)
		{
			return;
		}
		Item item = QuickMana_GetItemToUse();
		if (item != null && ItemCheck_CheckCanUse(item))
		{
			SoundEngine.PlaySound(item.UseSound, position);
			if (item.potion)
			{
				ApplyPotionDelay(item);
			}
			ApplyLifeAndOrMana(item);
			item.stack--;
			if (item.stack <= 0)
			{
				item.TurnToAir();
			}
			Recipe.FindRecipes();
		}
	}

	public Item QuickMana_GetItemToUse()
	{
		for (int i = 0; i < 58; i++)
		{
			if (inventory[i].stack > 0 && inventory[i].type > 0 && inventory[i].healMana > 0 && (potionDelay == 0 || !inventory[i].potion))
			{
				return inventory[i];
			}
		}
		if (useVoidBag())
		{
			for (int j = 0; j < 40; j++)
			{
				if (bank4.item[j].stack > 0 && bank4.item[j].type > 0 && bank4.item[j].healMana > 0 && (potionDelay == 0 || !bank4.item[j].potion))
				{
					return bank4.item[j];
				}
			}
		}
		return null;
	}

	public void TrySwitchingLoadout(int loadoutIndex)
	{
		bool flag = itemTime > 0 || itemAnimation > 0;
		if ((whoAmI != Main.myPlayer || (!flag && !CCed && !dead)) && loadoutIndex != CurrentLoadoutIndex && loadoutIndex >= 0 && loadoutIndex < Loadouts.Length)
		{
			Loadouts[CurrentLoadoutIndex].Swap(this);
			Loadouts[loadoutIndex].Swap(this);
			CurrentLoadoutIndex = loadoutIndex;
			if (whoAmI == Main.myPlayer)
			{
				CloneLoadouts(Main.clientPlayer);
				Main.mouseLeftRelease = false;
				ItemSlot.RecordLoadoutChange();
				SoundEngine.PlaySound(12);
				NetMessage.TrySendData(147, -1, -1, null, whoAmI, loadoutIndex);
				ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.LoadoutChange, new ParticleOrchestraSettings
				{
					PositionInWorld = base.Center,
					UniqueInfoPiece = loadoutIndex
				}, whoAmI);
			}
		}
	}

	public void QuickBuff()
	{
		if (cursed || CCed || dead)
		{
			return;
		}
		LegacySoundStyle legacySoundStyle = null;
		if (CountBuffs() == maxBuffs)
		{
			return;
		}
		Item item = QuickBuff_PickBestFoodItem();
		if (item != null && ItemCheck_CheckCanUse(item))
		{
			legacySoundStyle = item.UseSound;
			int num = item.buffTime;
			if (num == 0)
			{
				num = 3600;
			}
			AddBuff(item.buffType, num);
			if (item.consumable)
			{
				item.stack--;
				if (item.stack <= 0)
				{
					item.TurnToAir();
				}
			}
		}
		if (CountBuffs() != maxBuffs)
		{
			int num2 = 58;
			if (useVoidBag())
			{
				num2 = 98;
			}
			for (int i = 0; i < num2; i++)
			{
				Item item2 = ((i >= 58) ? bank4.item[i - 58] : inventory[i]);
				if (item2.stack <= 0 || item2.type <= 0 || item2.buffType <= 0 || item2.summon || !ItemCheck_CheckCanUse(item2))
				{
					continue;
				}
				int num3 = item2.buffType;
				bool flag = QuickBuff_ShouldBotherUsingThisBuff(num3);
				if (item2.mana > 0 && flag)
				{
					if (statMana >= (int)((float)item2.mana * manaCost))
					{
						manaRegenDelay = (int)maxRegenDelay;
						statMana -= (int)((float)item2.mana * manaCost);
					}
					else
					{
						flag = false;
					}
				}
				if (whoAmI == Main.myPlayer && item2.type == 603 && !Main.runningCollectorsEdition)
				{
					flag = false;
				}
				if (num3 == 27)
				{
					num3 = Main.rand.Next(3);
					if (num3 == 0)
					{
						num3 = 27;
					}
					if (num3 == 1)
					{
						num3 = 101;
					}
					if (num3 == 2)
					{
						num3 = 102;
					}
				}
				if (!flag)
				{
					continue;
				}
				legacySoundStyle = item2.UseSound;
				int num4 = item2.buffTime;
				if (num4 == 0)
				{
					num4 = 3600;
				}
				AddBuff(num3, num4);
				if (item2.consumable)
				{
					item2.stack--;
					if (item2.stack <= 0)
					{
						item2.TurnToAir();
					}
				}
				if (CountBuffs() == maxBuffs)
				{
					break;
				}
			}
		}
		if (legacySoundStyle != null)
		{
			SoundEngine.PlaySound(legacySoundStyle, position);
			Recipe.FindRecipes();
		}
	}

	private Item QuickBuff_PickBestFoodItem()
	{
		int num = 0;
		Item item = null;
		for (int i = 0; i < maxBuffs; i++)
		{
			if (buffTime[i] >= 1)
			{
				int num2 = QuickBuff_FindFoodPriority(buffType[i]);
				if (num <= num2)
				{
					num = num2 + 1;
				}
			}
		}
		for (int j = 0; j < 58; j++)
		{
			Item item2 = inventory[j];
			if (!item2.IsAir)
			{
				int num3 = QuickBuff_FindFoodPriority(item2.buffType);
				if (num3 >= num && (item == null || item.buffTime < item2.buffTime || num3 > num))
				{
					item = item2;
					num = num3;
				}
			}
		}
		if (useVoidBag())
		{
			for (int k = 0; k < 40; k++)
			{
				Item item3 = bank4.item[k];
				if (!item3.IsAir)
				{
					int num4 = QuickBuff_FindFoodPriority(item3.buffType);
					if (num4 >= num && (item == null || item.buffTime < item3.buffTime || num4 > num))
					{
						item = item3;
						num = num4;
					}
				}
			}
		}
		return item;
	}

	private int QuickBuff_FindFoodPriority(int buffType)
	{
		return buffType switch
		{
			26 => 1, 
			206 => 2, 
			207 => 3, 
			_ => 0, 
		};
	}

	private bool QuickBuff_ShouldBotherUsingThisBuff(int attemptedType)
	{
		bool result = true;
		for (int i = 0; i < maxBuffs; i++)
		{
			if (attemptedType == 27 && (buffType[i] == 27 || buffType[i] == 101 || buffType[i] == 102))
			{
				result = false;
				break;
			}
			if (BuffID.Sets.IsWellFed[attemptedType] && BuffID.Sets.IsWellFed[buffType[i]])
			{
				result = false;
				break;
			}
			if (buffType[i] == attemptedType)
			{
				result = false;
				break;
			}
			if (Main.meleeBuff[attemptedType] && Main.meleeBuff[buffType[i]])
			{
				result = false;
				break;
			}
		}
		if (Main.lightPet[attemptedType] || Main.vanityPet[attemptedType])
		{
			for (int j = 0; j < maxBuffs; j++)
			{
				if (Main.lightPet[buffType[j]] && Main.lightPet[attemptedType])
				{
					result = false;
				}
				if (Main.vanityPet[buffType[j]] && Main.vanityPet[attemptedType])
				{
					result = false;
				}
			}
		}
		return result;
	}

	public void QuickMount()
	{
		if (mount.Active)
		{
			mount.Dismount(this);
		}
		else
		{
			if (frozen || tongued || webbed || stoned || gravDir == -1f || dead || noItems)
			{
				return;
			}
			Item item = QuickMount_GetItemToUse();
			if (item != null && item.mountType != -1 && mount.CanMount(item.mountType, this) && ItemCheck_CheckCanUse(item))
			{
				if (!QuickMinecartSnap())
				{
					mount.SetMount(item.mountType, this);
					if (item.UseSound != null)
					{
						SoundEngine.PlaySound(item.UseSound, base.Center);
					}
				}
			}
			else
			{
				QuickMinecart();
			}
		}
	}

	public bool CanFitSpace(int heightBoost)
	{
		int num = 42 + heightBoost;
		return Collision.IsClearSpotTest(position + new Vector2(0f, height - num) + velocity, 16f, width, num, fallThrough: true, fall2: true);
	}

	private void QuickMinecart()
	{
		int num = 0;
		int value = (int)(position.X / 16f) - tileRangeX - num + 1;
		int value2 = (int)((position.X + (float)width) / 16f) + tileRangeX + num - 1;
		int value3 = (int)(position.Y / 16f) - tileRangeY - num + 1;
		int value4 = (int)((position.Y + (float)height) / 16f) + tileRangeY + num - 2;
		int num2 = Utils.Clamp(value, 10, Main.maxTilesX - 10);
		value2 = Utils.Clamp(value2, 10, Main.maxTilesX - 10);
		value3 = Utils.Clamp(value3, 10, Main.maxTilesY - 10);
		List<Point> list = Collision.GetTilesIn(BottomRight: new Vector2(value2 + 1, Utils.Clamp(value4, 10, Main.maxTilesY - 10) + 1) * 16f, TopLeft: new Vector2(num2, value3) * 16f);
		if (list.Count <= 0)
		{
			return;
		}
		Point? point = null;
		_ = base.Hitbox;
		for (int i = 0; i < list.Count; i++)
		{
			Point point2 = list[i];
			Tile tileSafely = Framing.GetTileSafely(point2.X, point2.Y);
			if (tileSafely.active() && tileSafely.type == 314)
			{
				Vector2 vector = list[i].ToVector2() * 16f + new Vector2(8f);
				if (!point.HasValue || (Distance(vector) < Distance(point.Value.ToVector2() * 16f + new Vector2(8f)) && Collision.CanHitLine(base.Center, 0, 0, vector, 0, 0)))
				{
					point = list[i];
				}
			}
		}
		if (point.HasValue)
		{
			LaunchMinecartHook(point.Value.X, point.Value.Y);
		}
	}

	private bool QuickMinecartSnap()
	{
		bool result = false;
		List<Point> tilesIn = Collision.GetTilesIn(base.TopLeft - new Vector2(24f), base.BottomRight + new Vector2(24f));
		if (tilesIn.Count > 0)
		{
			Point? point = null;
			_ = base.Hitbox;
			for (int i = 0; i < tilesIn.Count; i++)
			{
				Point point2 = tilesIn[i];
				Tile tileSafely = Framing.GetTileSafely(point2.X, point2.Y);
				if (tileSafely.active() && tileSafely.type == 314)
				{
					Vector2 vector = tilesIn[i].ToVector2() * 16f + new Vector2(8f);
					if (!point.HasValue || (Distance(vector) < Distance(point.Value.ToVector2() * 16f + new Vector2(8f)) && Collision.CanHitLine(base.Center, 0, 0, vector, 0, 0)))
					{
						point = tilesIn[i];
					}
				}
			}
			if (point.HasValue)
			{
				LaunchMinecartHook(point.Value.X, point.Value.Y);
				result = true;
			}
		}
		return result;
	}

	public Item QuickMount_GetItemToUse()
	{
		Item item = null;
		if (item == null && miscEquips[3].mountType != -1 && !MountID.Sets.Cart[miscEquips[3].mountType])
		{
			item = miscEquips[3];
		}
		if (item == null)
		{
			for (int i = 0; i < 58; i++)
			{
				if (inventory[i].mountType != -1 && !MountID.Sets.Cart[inventory[i].mountType])
				{
					item = inventory[i];
					break;
				}
			}
		}
		return item;
	}

	public void ClearGrapplingBlacklist()
	{
		_blackListedTileCoordsForGrappling.Clear();
	}

	public bool IsBlacklistedForGrappling(Point p)
	{
		return _blackListedTileCoordsForGrappling.Contains(p);
	}

	public void UpdateBlacklistedTilesForGrappling()
	{
		ClearGrapplingBlacklist();
		for (int i = 0; i < 1000; i++)
		{
			if (!Main.projectile[i].active || Main.projectile[i].owner != whoAmI || Main.projectile[i].aiStyle != 7 || Main.projectile[i].ai[0] != 2f)
			{
				continue;
			}
			Point point = Main.projectile[i].Center.ToTileCoordinates();
			for (int j = -1; j <= 1; j++)
			{
				for (int k = -1; k <= 1; k++)
				{
					if (!WorldGen.SolidTile(point.X + j, point.Y + k))
					{
						_blackListedTileCoordsForGrappling.Add(new Point(point.X + j, point.Y + k));
					}
				}
			}
		}
	}

	public void QuickGrapple()
	{
		if (frozen || tongued || webbed || stoned || dead)
		{
			return;
		}
		if (PlayerInput.GrappleAndInteractAreShared)
		{
			if (Main.HoveringOverAnNPC || Main.SmartInteractShowingGenuine || Main.SmartInteractShowingFake || (_quickGrappleCooldown > 0 && !Main.mapFullscreen) || (WiresUI.Settings.DrawToolModeUI && PlayerInput.UsingGamepad))
			{
				return;
			}
			bool num = controlUseTile;
			bool flag = releaseUseTile;
			if (!num && !flag)
			{
				return;
			}
			Tile tileSafely = Framing.GetTileSafely(tileTargetX, tileTargetY);
			if ((tileSafely.active() && (tileSafely.type == 4 || tileSafely.type == 33 || tileSafely.type == 372 || tileSafely.type == 174 || tileSafely.type == 646 || tileSafely.type == 49)) || (inventory[selectedItem].type == 3384 && PlayerInput.UsingGamepad))
			{
				return;
			}
		}
		if (noItems)
		{
			return;
		}
		if (mount.Active)
		{
			mount.Dismount(this);
		}
		Item item = QuickGrapple_GetItemToUse();
		if (item == null || !ItemCheck_CheckCanUse(item))
		{
			return;
		}
		if (item.shoot == 73)
		{
			int num2 = 0;
			for (int i = 0; i < 1000; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].owner == Main.myPlayer && (Main.projectile[i].type == 73 || Main.projectile[i].type == 74))
				{
					num2++;
				}
			}
			if (num2 > 1)
			{
				item = null;
			}
		}
		else if (item.shoot == 165)
		{
			int num3 = 0;
			for (int j = 0; j < 1000; j++)
			{
				if (Main.projectile[j].active && Main.projectile[j].owner == Main.myPlayer && Main.projectile[j].type == 165)
				{
					num3++;
				}
			}
			if (num3 > 8)
			{
				item = null;
			}
		}
		else if (item.shoot == 372)
		{
			int num4 = 0;
			for (int k = 0; k < 1000; k++)
			{
				if (Main.projectile[k].active && Main.projectile[k].owner == Main.myPlayer && Main.projectile[k].type == 372)
				{
					num4++;
				}
			}
			if (num4 > 2)
			{
				item = null;
			}
		}
		else if (item.shoot == 652)
		{
			int num5 = 0;
			for (int l = 0; l < 1000; l++)
			{
				if (Main.projectile[l].active && Main.projectile[l].owner == Main.myPlayer && Main.projectile[l].type == 652)
				{
					num5++;
				}
			}
			if (num5 > 1)
			{
				item = null;
			}
		}
		else if (item.type == 3572)
		{
			int num6 = 0;
			bool flag2 = false;
			for (int m = 0; m < 1000; m++)
			{
				if (Main.projectile[m].active && Main.projectile[m].owner == Main.myPlayer && Main.projectile[m].type >= 646 && Main.projectile[m].type <= 649)
				{
					num6++;
					if (Main.projectile[m].ai[0] == 2f)
					{
						flag2 = true;
					}
				}
			}
			if (num6 > 4 || (!flag2 && num6 > 3))
			{
				item = null;
			}
		}
		else
		{
			for (int n = 0; n < 1000; n++)
			{
				if (Main.projectile[n].active && Main.projectile[n].owner == Main.myPlayer && Main.projectile[n].type == item.shoot && Main.projectile[n].ai[0] != 2f)
				{
					item = null;
					break;
				}
			}
		}
		if (item == null)
		{
			return;
		}
		UpdateBlacklistedTilesForGrappling();
		SoundEngine.PlaySound(item.UseSound, position);
		if (Main.netMode == 1 && whoAmI == Main.myPlayer)
		{
			NetMessage.SendData(51, -1, -1, null, whoAmI, 2f);
		}
		int num7 = item.shoot;
		float shootSpeed = item.shootSpeed;
		int damage = item.damage;
		float knockBack = item.knockBack;
		if (num7 == 13 || num7 == 32 || num7 == 315 || (num7 >= 230 && num7 <= 235) || num7 == 331 || num7 == 753 || num7 == 865 || num7 == 935)
		{
			grappling[0] = -1;
			grapCount = 0;
			for (int num8 = 0; num8 < 1000; num8++)
			{
				if (Main.projectile[num8].active && Main.projectile[num8].owner == whoAmI)
				{
					switch (Main.projectile[num8].type)
					{
					case 13:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
					case 315:
					case 331:
					case 753:
					case 865:
					case 935:
						Main.projectile[num8].Kill();
						break;
					}
				}
			}
		}
		if (num7 == 256)
		{
			int num9 = 0;
			int num10 = -1;
			int num11 = 100000;
			for (int num12 = 0; num12 < 1000; num12++)
			{
				if (Main.projectile[num12].active && Main.projectile[num12].owner == whoAmI && Main.projectile[num12].type == 256)
				{
					num9++;
					if (Main.projectile[num12].timeLeft < num11)
					{
						num10 = num12;
						num11 = Main.projectile[num12].timeLeft;
					}
				}
			}
			if (num9 > 1)
			{
				Main.projectile[num10].Kill();
			}
		}
		if (num7 == 652)
		{
			int num13 = 0;
			int num14 = -1;
			int num15 = 100000;
			for (int num16 = 0; num16 < 1000; num16++)
			{
				if (Main.projectile[num16].active && Main.projectile[num16].owner == whoAmI && Main.projectile[num16].type == 652)
				{
					num13++;
					if (Main.projectile[num16].timeLeft < num15)
					{
						num14 = num16;
						num15 = Main.projectile[num16].timeLeft;
					}
				}
			}
			if (num13 > 1)
			{
				Main.projectile[num14].Kill();
			}
		}
		if (num7 == 73)
		{
			for (int num17 = 0; num17 < 1000; num17++)
			{
				if (Main.projectile[num17].active && Main.projectile[num17].owner == whoAmI && Main.projectile[num17].type == 73)
				{
					num7 = 74;
				}
			}
		}
		if (item.type == 3572)
		{
			int num18 = -1;
			int num19 = -1;
			for (int num20 = 0; num20 < 1000; num20++)
			{
				Projectile projectile = Main.projectile[num20];
				if (projectile.active && projectile.owner == whoAmI && projectile.type >= 646 && projectile.type <= 649 && (num19 == -1 || num19 < projectile.timeLeft))
				{
					num18 = projectile.type;
					num19 = projectile.timeLeft;
				}
			}
			switch (num18)
			{
			case 646:
				num7 = 647;
				break;
			case 647:
				num7 = 648;
				break;
			case 648:
				num7 = 649;
				break;
			case -1:
			case 649:
				num7 = 646;
				break;
			}
		}
		Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
		float num21 = (float)Main.mouseX + Main.screenPosition.X - vector.X;
		float num22 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
		if (gravDir == -1f)
		{
			num22 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector.Y;
		}
		float num23 = (float)Math.Sqrt(num21 * num21 + num22 * num22);
		if ((float.IsNaN(num21) && float.IsNaN(num22)) || (num21 == 0f && num22 == 0f))
		{
			num21 = direction;
			num22 = 0f;
			num23 = shootSpeed;
		}
		else
		{
			num23 = shootSpeed / num23;
		}
		num21 *= num23;
		num22 *= num23;
		Projectile.NewProjectile(GetProjectileSource_Item(item), vector.X, vector.Y, num21, num22, num7, damage, knockBack, whoAmI);
	}

	public Item QuickGrapple_GetItemToUse()
	{
		Item item = null;
		if (Main.projHook[miscEquips[4].shoot])
		{
			item = miscEquips[4];
		}
		if (item == null)
		{
			for (int i = 0; i < 58; i++)
			{
				if (Main.projHook[inventory[i].shoot])
				{
					item = inventory[i];
					break;
				}
			}
		}
		return item;
	}

	public void StatusToNPC(int type, int i)
	{
		if (meleeEnchant > 0)
		{
			if (meleeEnchant == 1)
			{
				Main.npc[i].AddBuff(70, 60 * Main.rand.Next(5, 10));
			}
			if (meleeEnchant == 2)
			{
				Main.npc[i].AddBuff(39, 60 * Main.rand.Next(3, 7));
			}
			if (meleeEnchant == 3)
			{
				Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7));
			}
			if (meleeEnchant == 5)
			{
				Main.npc[i].AddBuff(69, 60 * Main.rand.Next(10, 20));
			}
			if (meleeEnchant == 6)
			{
				Main.npc[i].AddBuff(31, 60 * Main.rand.Next(1, 4));
			}
			if (meleeEnchant == 8)
			{
				Main.npc[i].AddBuff(20, 60 * Main.rand.Next(5, 10));
			}
			if (meleeEnchant == 4)
			{
				Main.npc[i].AddBuff(72, 120);
			}
		}
		if (frostBurn)
		{
			Main.npc[i].AddBuff(324, 60 * Main.rand.Next(5, 15));
		}
		if (magmaStone)
		{
			if (Main.rand.Next(4) == 0)
			{
				Main.npc[i].AddBuff(323, 360);
			}
			else if (Main.rand.Next(2) == 0)
			{
				Main.npc[i].AddBuff(323, 240);
			}
			else
			{
				Main.npc[i].AddBuff(323, 120);
			}
		}
		if (type == 3211)
		{
			Main.npc[i].AddBuff(69, 60 * Main.rand.Next(5, 10));
		}
		if (type == 5129)
		{
			Main.npc[i].AddBuff(120, 300);
		}
		switch (type)
		{
		case 121:
			if (Main.rand.Next(2) == 0)
			{
				Main.npc[i].AddBuff(24, 180);
			}
			break;
		case 3823:
			if (Main.rand.Next(4) == 0)
			{
				Main.npc[i].AddBuff(323, 300);
			}
			break;
		case 5382:
			if (Main.rand.Next(3) == 0)
			{
				Main.npc[i].AddBuff(323, 300);
			}
			break;
		case 122:
			if (Main.rand.Next(10) == 0)
			{
				Main.npc[i].AddBuff(24, 180);
			}
			break;
		case 190:
			if (Main.rand.Next(4) == 0)
			{
				Main.npc[i].AddBuff(20, 420);
			}
			break;
		case 217:
			if (Main.rand.Next(5) == 0)
			{
				Main.npc[i].AddBuff(24, 180);
			}
			break;
		case 1123:
			if (Main.rand.Next(10) != 0)
			{
				Main.npc[i].AddBuff(31, 120);
			}
			break;
		}
	}

	public void StatusToPlayerPvP(int type, int i)
	{
		if (meleeEnchant > 0)
		{
			if (meleeEnchant == 1)
			{
				Main.player[i].AddBuff(70, 60 * Main.rand.Next(5, 10), quiet: false);
			}
			if (meleeEnchant == 2)
			{
				Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), quiet: false);
			}
			if (meleeEnchant == 3)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), quiet: false);
			}
			if (meleeEnchant == 5)
			{
				Main.player[i].AddBuff(69, 60 * Main.rand.Next(10, 20), quiet: false);
			}
			if (meleeEnchant == 6)
			{
				Main.player[i].AddBuff(31, 60 * Main.rand.Next(1, 4), quiet: false);
			}
			if (meleeEnchant == 8)
			{
				Main.player[i].AddBuff(20, 60 * Main.rand.Next(5, 10), quiet: false);
			}
		}
		if (frostBurn)
		{
			Main.player[i].AddBuff(324, 60 * Main.rand.Next(1, 8), quiet: false);
		}
		if (magmaStone)
		{
			if (Main.rand.Next(7) == 0)
			{
				Main.player[i].AddBuff(323, 360, quiet: false);
			}
			else if (Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(323, 120, quiet: false);
			}
			else
			{
				Main.player[i].AddBuff(323, 60, quiet: false);
			}
		}
		if (type == 5129)
		{
			Main.player[i].AddBuff(120, 300, quiet: false);
		}
		switch (type)
		{
		case 121:
			if (Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(24, 180, quiet: false);
			}
			break;
		case 3823:
			if (Main.rand.Next(4) == 0)
			{
				Main.player[i].AddBuff(323, 300, quiet: false);
			}
			break;
		case 5382:
			if (Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(323, 300, quiet: false);
			}
			break;
		case 122:
			if (Main.rand.Next(10) == 0)
			{
				Main.player[i].AddBuff(24, 180, quiet: false);
			}
			break;
		case 190:
			if (Main.rand.Next(4) == 0)
			{
				Main.player[i].AddBuff(20, 420, quiet: false);
			}
			break;
		case 217:
			if (Main.rand.Next(5) == 0)
			{
				Main.player[i].AddBuff(24, 180, quiet: false);
			}
			break;
		case 1123:
			if (Main.rand.Next(9) != 0)
			{
				Main.player[i].AddBuff(31, 120, quiet: false);
			}
			break;
		}
	}

	public void Ghost()
	{
		immune = false;
		immuneAlpha = 0;
		if (Main.hasFocus && whoAmI == Main.myPlayer)
		{
			controlUp = false;
			controlLeft = false;
			controlDown = false;
			controlRight = false;
			controlJump = false;
			if (!Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.blockInput)
			{
				PlayerInput.Triggers.Current.CopyInto(this);
				TrySyncingInput();
				TryOpeningInGameOptionsBasedOnInput();
			}
		}
		float num = 7f;
		float num2 = 0.2f;
		if (controlUp || controlJump)
		{
			if (velocity.Y > 0f)
			{
				velocity.Y *= 0.9f;
			}
			velocity.Y -= num2;
			if (velocity.Y < 0f - num)
			{
				velocity.Y = 0f - num;
			}
		}
		else if (controlDown)
		{
			if (velocity.Y < 0f)
			{
				velocity.Y *= 0.9f;
			}
			velocity.Y += num2;
			if (velocity.Y > num)
			{
				velocity.Y = num;
			}
		}
		else if ((double)velocity.Y < -0.1 || (double)velocity.Y > 0.1)
		{
			velocity.Y *= 0.9f;
		}
		else
		{
			velocity.Y = 0f;
		}
		if (controlLeft && !controlRight)
		{
			if (velocity.X > 0f)
			{
				velocity.X *= 0.9f;
			}
			velocity.X -= num2;
			if (velocity.X < 0f - num)
			{
				velocity.X = 0f - num;
			}
		}
		else if (controlRight && !controlLeft)
		{
			if (velocity.X < 0f)
			{
				velocity.X *= 0.9f;
			}
			velocity.X += num2;
			if (velocity.X > num)
			{
				velocity.X = num;
			}
		}
		else if (velocity.X < 0f - num2 || velocity.X > num2)
		{
			velocity.X *= 0.9f;
		}
		else
		{
			velocity.X = 0f;
		}
		position += velocity;
		ghostFrameCounter++;
		if (velocity.X < 0f)
		{
			direction = -1;
		}
		else if (velocity.X > 0f)
		{
			direction = 1;
		}
		if (ghostFrameCounter >= 8)
		{
			ghostFrameCounter = 0;
			ghostFrame++;
			if (ghostFrame >= 4)
			{
				ghostFrame = 0;
			}
		}
		if (position.X < Main.leftWorld + (float)(Lighting.OffScreenTiles * 16) + 16f)
		{
			position.X = Main.leftWorld + (float)(Lighting.OffScreenTiles * 16) + 16f;
			velocity.X = 0f;
		}
		if (position.X + (float)width > Main.rightWorld - (float)(Lighting.OffScreenTiles * 16) - 32f)
		{
			position.X = Main.rightWorld - (float)(Lighting.OffScreenTiles * 16) - 32f - (float)width;
			velocity.X = 0f;
		}
		if (position.Y < Main.topWorld + (float)(Lighting.OffScreenTiles * 16) + 16f)
		{
			position.Y = Main.topWorld + (float)(Lighting.OffScreenTiles * 16) + 16f;
			if ((double)velocity.Y < -0.1)
			{
				velocity.Y = -0.1f;
			}
		}
		if (position.Y > Main.bottomWorld - (float)(Lighting.OffScreenTiles * 16) - 32f - (float)height)
		{
			position.Y = Main.bottomWorld - (float)(Lighting.OffScreenTiles * 16) - 32f - (float)height;
			velocity.Y = 0f;
		}
	}

	private void TrySyncingInput()
	{
		if (Main.netMode == 1)
		{
			bool flag = false;
			Player clientPlayer = Main.clientPlayer;
			if (controlUp != clientPlayer.controlUp)
			{
				flag = true;
			}
			if (controlDown != clientPlayer.controlDown)
			{
				flag = true;
			}
			if (controlLeft != clientPlayer.controlLeft)
			{
				flag = true;
			}
			if (controlRight != clientPlayer.controlRight)
			{
				flag = true;
			}
			if (controlJump != clientPlayer.controlJump)
			{
				flag = true;
			}
			if (controlUseItem != clientPlayer.controlUseItem)
			{
				flag = true;
			}
			if (selectedItem != clientPlayer.selectedItem)
			{
				flag = true;
			}
			if (autoReuseAllWeapons != clientPlayer.autoReuseAllWeapons)
			{
				flag = true;
			}
			if (controlDownHold != clientPlayer.controlDownHold)
			{
				flag = true;
			}
			if (isOperatingAnotherEntity != clientPlayer.isOperatingAnotherEntity)
			{
				flag = true;
			}
			if (flag)
			{
				NetMessage.SendData(13, -1, -1, null, Main.myPlayer);
			}
		}
	}

	public void OnHit(float x, float y, Entity victim)
	{
		if (Main.myPlayer != whoAmI)
		{
			return;
		}
		bool flag = victim is NPC && (((NPC)victim).type == 488 || ((NPC)victim).SpawnedFromStatue);
		if (titaniumStormCooldown > 0)
		{
			flag = true;
		}
		if (victim is NPC)
		{
			Main.BigBossProgressBar.TryTracking(victim.whoAmI);
		}
		if (onHitTitaniumStorm && !flag)
		{
			titaniumStormCooldown = 10;
			AddBuff(306, 600);
			if (ownedProjectileCounts[908] < 7)
			{
				ownedProjectileCounts[908]++;
				Projectile.NewProjectile(GetProjectileSource_OnHit(victim, 4), base.Center, Vector2.Zero, 908, 50, 15f, whoAmI);
			}
		}
		if (onHitDodge && shadowDodgeTimer == 0)
		{
			AddBuff(59, 1800);
		}
		if (onHitRegen)
		{
			AddBuff(58, 300);
		}
		if (stardustMinion && victim is NPC)
		{
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == whoAmI && projectile.type == 613 && !(projectile.localAI[1] > 0f) && Main.rand.Next(2) == 0)
				{
					Vector2 vector = new Vector2(x, y) - projectile.Center;
					if (vector.Length() > 0f)
					{
						vector.Normalize();
					}
					vector *= 20f;
					Projectile.NewProjectile(Projectile.InheritSource(projectile), projectile.Center.X, projectile.Center.Y, vector.X, vector.Y, 614, projectile.damage / 3, 0f, projectile.owner, 0f, victim.whoAmI);
					projectile.localAI[1] = 30 + Main.rand.Next(4) * 10;
				}
			}
		}
		if (onHitPetal && petalTimer == 0)
		{
			petalTimer = 20;
			_ = position.X + (float)(width / 2);
			int num = direction;
			float num2 = Main.screenPosition.X;
			if (num < 0)
			{
				num2 += (float)Main.screenWidth;
			}
			float y2 = Main.screenPosition.Y;
			y2 += (float)Main.rand.Next(Main.screenHeight);
			Vector2 vector2 = new Vector2(num2, y2);
			float num3 = x - vector2.X;
			float num4 = y - vector2.Y;
			num3 += (float)Main.rand.Next(-50, 51) * 0.1f;
			num4 += (float)Main.rand.Next(-50, 51) * 0.1f;
			float num5 = (float)Math.Sqrt(num3 * num3 + num4 * num4);
			num5 = 24f / num5;
			num3 *= num5;
			num4 *= num5;
			Projectile.NewProjectile(GetProjectileSource_OnHit(victim, 5), num2, y2, num3, num4, 221, 36, 0f, whoAmI);
		}
		if (!crystalLeaf || petalTimer != 0)
		{
			return;
		}
		for (int j = 0; j < 1000; j++)
		{
			if (Main.projectile[j].owner != whoAmI || Main.projectile[j].type != 226)
			{
				continue;
			}
			petalTimer = 50;
			float num6 = 12f;
			Vector2 vector3 = new Vector2(Main.projectile[j].position.X + (float)width * 0.5f, Main.projectile[j].position.Y + (float)height * 0.5f);
			float num7 = x - vector3.X;
			float num8 = y - vector3.Y;
			float num9 = (float)Math.Sqrt(num7 * num7 + num8 * num8);
			int num10 = 180;
			float num11 = num6 * (float)num10;
			if (!(num9 >= num11))
			{
				num9 = num6 / num9;
				num7 *= num9;
				num8 *= num9;
				Utils.ChaseResults chaseResults = Utils.GetChaseResults(Main.projectile[j].Center, num6 * (float)num10, victim.Center, victim.velocity);
				if (chaseResults.InterceptionHappens && chaseResults.InterceptionTime <= 180f)
				{
					Vector2 vector4 = chaseResults.ChaserVelocity / num10;
					num7 = vector4.X;
					num8 = vector4.Y;
				}
				Projectile.NewProjectile(GetProjectileSource_SetBonus(6), Main.projectile[j].Center.X - 4f, Main.projectile[j].Center.Y, num7, num8, 227, crystalLeafDamage, crystalLeafKB, whoAmI);
				break;
			}
		}
	}

	public void OpenPresent(int itemType)
	{
		IEntitySource itemSource_OpenItem = GetItemSource_OpenItem(itemType);
		if (Main.rand.Next(15) == 0 && Main.hardMode)
		{
			int number = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 602);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number, 1f);
			}
			return;
		}
		if (Main.rand.Next(30) == 0)
		{
			int number2 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1922);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number2, 1f);
			}
			return;
		}
		if (Main.rand.Next(400) == 0)
		{
			int number3 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1927);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number3, 1f);
			}
			return;
		}
		if (Main.rand.Next(150) == 0)
		{
			int number4 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1870);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number4, 1f);
			}
			number4 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 97, Main.rand.Next(30, 61));
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number4, 1f);
			}
			return;
		}
		if (Main.rand.Next(150) == 0)
		{
			int number5 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1909);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number5, 1f);
			}
			return;
		}
		if (Main.rand.Next(150) == 0)
		{
			int number6 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1917);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number6, 1f);
			}
			return;
		}
		if (Main.rand.Next(150) == 0)
		{
			int number7 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1915);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number7, 1f);
			}
			return;
		}
		if (Main.rand.Next(150) == 0)
		{
			int number8 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1918);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number8, 1f);
			}
			return;
		}
		if (Main.rand.Next(150) == 0)
		{
			int number9 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1921);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number9, 1f);
			}
			return;
		}
		if (Main.rand.Next(300) == 0)
		{
			int number10 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1923);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number10, 1f);
			}
			return;
		}
		if (Main.rand.Next(40) == 0)
		{
			int number11 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1907);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number11, 1f);
			}
			return;
		}
		if (Main.rand.Next(10) == 0)
		{
			int number12 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1908);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number12, 1f);
			}
			return;
		}
		if (Main.rand.Next(15) == 0)
		{
			switch (Main.rand.Next(5))
			{
			case 0:
			{
				int number14 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1932);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number14, 1f);
				}
				number14 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1933);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number14, 1f);
				}
				number14 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1934);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number14, 1f);
				}
				break;
			}
			case 1:
			{
				int number16 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1935);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number16, 1f);
				}
				number16 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1936);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number16, 1f);
				}
				number16 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1937);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number16, 1f);
				}
				break;
			}
			case 2:
			{
				int number17 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1940);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number17, 1f);
				}
				number17 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1941);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number17, 1f);
				}
				number17 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1942);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number17, 1f);
				}
				break;
			}
			case 3:
			{
				int number15 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1938);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number15, 1f);
				}
				break;
			}
			case 4:
			{
				int number13 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1939);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number13, 1f);
				}
				break;
			}
			}
			return;
		}
		if (Main.rand.Next(7) == 0)
		{
			int num = Main.rand.Next(3);
			if (num == 0)
			{
				num = 1911;
			}
			if (num == 1)
			{
				num = 1919;
			}
			if (num == 2)
			{
				num = 1920;
			}
			int number18 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number18, 1f);
			}
			return;
		}
		if (Main.rand.Next(8) == 0)
		{
			int number19 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1912, Main.rand.Next(1, 4));
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number19, 1f);
			}
			return;
		}
		if (Main.rand.Next(9) == 0)
		{
			int number20 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1913, Main.rand.Next(20, 41));
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number20, 1f);
			}
			return;
		}
		switch (Main.rand.Next(3))
		{
		case 0:
		{
			int number22 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1872, Main.rand.Next(20, 50));
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number22, 1f);
			}
			break;
		}
		case 1:
		{
			int number23 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 586, Main.rand.Next(20, 50));
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number23, 1f);
			}
			break;
		}
		default:
		{
			int number21 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 591, Main.rand.Next(20, 50));
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number21, 1f);
			}
			break;
		}
		}
	}

	public void OpenLegacyPresent(int itemType)
	{
		IEntitySource itemSource_OpenItem = GetItemSource_OpenItem(itemType);
		int num = Main.rand.Next(14);
		if (num == 0 && Main.hardMode)
		{
			int number = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 602);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number, 1f);
			}
		}
		else if (num <= 7)
		{
			int number2 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 586, Main.rand.Next(20, 50));
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number2, 1f);
			}
		}
		else
		{
			int number3 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 591, Main.rand.Next(20, 50));
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number3, 1f);
			}
		}
	}

	public void QuickSpawnItem(IEntitySource source, int item, int stack = 1)
	{
		int number = Item.NewItem(source, (int)position.X, (int)position.Y, width, height, item, stack, noBroadcast: false, -1);
		if (Main.netMode == 1)
		{
			NetMessage.SendData(21, -1, -1, null, number, 1f);
		}
	}

	public void OpenBossBag(int type)
	{
		GameModeData gameModeInfo = Main.GameModeInfo;
		float strength = 1f;
		if (gameModeInfo.IsJourneyMode)
		{
			CreativePowers.DifficultySliderPower power = CreativePowerManager.Instance.GetPower<CreativePowers.DifficultySliderPower>();
			if (power != null && power.GetIsUnlocked())
			{
				strength = power.StrengthMultiplierToGiveNPCs;
			}
		}
		bool flag = new NPCStrengthHelper(gameModeInfo, strength, Main.getGoodWorld).IsMasterMode || Main.masterMode;
		IEntitySource itemSource_OpenItem = GetItemSource_OpenItem(type);
		switch (type)
		{
		case 3318:
		{
			if (Main.rand.Next(2) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 2430);
			}
			if (Main.rand.Next(7) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 2493);
			}
			int num4 = Main.rand.Next(256, 259);
			int num5;
			for (num5 = Main.rand.Next(256, 259); num5 == num4; num5 = Main.rand.Next(256, 259))
			{
			}
			QuickSpawnItem(itemSource_OpenItem, num4);
			QuickSpawnItem(itemSource_OpenItem, num5);
			if (Main.rand.Next(2) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 2610);
			}
			else
			{
				QuickSpawnItem(itemSource_OpenItem, 2585);
			}
			QuickSpawnItem(itemSource_OpenItem, 998);
			QuickSpawnItem(itemSource_OpenItem, 3090);
			break;
		}
		case 3319:
			if (Main.rand.Next(7) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 2112);
			}
			if (Main.rand.Next(30) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 1299);
			}
			if (WorldGen.crimson)
			{
				int num9 = Main.rand.Next(20) + 10;
				num9 += Main.rand.Next(20) + 10;
				num9 += Main.rand.Next(20) + 10;
				QuickSpawnItem(itemSource_OpenItem, 880, num9);
				num9 = Main.rand.Next(3) + 1;
				QuickSpawnItem(itemSource_OpenItem, 2171, num9);
			}
			else
			{
				int num10 = Main.rand.Next(20) + 10;
				num10 += Main.rand.Next(20) + 10;
				num10 += Main.rand.Next(20) + 10;
				QuickSpawnItem(itemSource_OpenItem, 56, num10);
				num10 = Main.rand.Next(3) + 1;
				QuickSpawnItem(itemSource_OpenItem, 59, num10);
				num10 = Main.rand.Next(30) + 20;
				QuickSpawnItem(itemSource_OpenItem, 47, num10);
			}
			QuickSpawnItem(itemSource_OpenItem, 3097);
			break;
		case 3320:
		{
			int num3 = Main.rand.Next(15, 30);
			if (flag)
			{
				num3 = Main.rand.Next(110, 136);
				QuickSpawnItem(itemSource_OpenItem, 56, num3);
			}
			else
			{
				num3 = Main.rand.Next(80, 111);
				QuickSpawnItem(itemSource_OpenItem, 56, num3);
			}
			if (flag)
			{
				num3 = Main.rand.Next(30, 51);
				QuickSpawnItem(itemSource_OpenItem, 86, num3);
			}
			else
			{
				num3 = Main.rand.Next(20, 41);
				QuickSpawnItem(itemSource_OpenItem, 86, num3);
			}
			if (Main.rand.Next(20) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 994);
			}
			if (Main.rand.Next(7) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 2111);
			}
			QuickSpawnItem(itemSource_OpenItem, 3224);
			break;
		}
		case 3321:
		{
			int num8 = Main.rand.Next(20, 46);
			if (flag)
			{
				num8 = Main.rand.Next(110, 136);
				QuickSpawnItem(itemSource_OpenItem, 880, num8);
			}
			else
			{
				num8 = Main.rand.Next(80, 111);
				QuickSpawnItem(itemSource_OpenItem, 880, num8);
			}
			if (flag)
			{
				num8 = Main.rand.Next(30, 51);
				QuickSpawnItem(itemSource_OpenItem, 1329, num8);
			}
			else
			{
				num8 = Main.rand.Next(20, 41);
				QuickSpawnItem(itemSource_OpenItem, 1329, num8);
			}
			if (Main.rand.Next(7) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 2104);
			}
			if (Main.rand.Next(20) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 3060);
			}
			QuickSpawnItem(itemSource_OpenItem, 3223);
			break;
		}
		case 3322:
		{
			if (Main.rand.Next(7) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 2108);
			}
			int num6 = Main.rand.Next(3);
			switch (num6)
			{
			case 0:
				num6 = 1121;
				break;
			case 1:
				num6 = 1123;
				break;
			case 2:
				num6 = 2888;
				break;
			}
			QuickSpawnItem(itemSource_OpenItem, num6);
			QuickSpawnItem(itemSource_OpenItem, 3333);
			if (Main.rand.Next(3) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 1132);
			}
			if (Main.rand.Next(9) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 1170);
			}
			if (Main.rand.Next(9) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 2502);
			}
			QuickSpawnItem(itemSource_OpenItem, 1129);
			QuickSpawnItem(itemSource_OpenItem, Main.rand.Next(842, 845));
			QuickSpawnItem(itemSource_OpenItem, 1130, Main.rand.Next(10, 30));
			QuickSpawnItem(itemSource_OpenItem, 2431, Main.rand.Next(17, 30));
			break;
		}
		case 3323:
			QuickSpawnItem(itemSource_OpenItem, 3245);
			switch (Main.rand.Next(3))
			{
			case 0:
				QuickSpawnItem(itemSource_OpenItem, 1281);
				break;
			case 1:
				QuickSpawnItem(itemSource_OpenItem, 1273);
				break;
			default:
				QuickSpawnItem(itemSource_OpenItem, 1313);
				break;
			}
			break;
		case 3324:
		{
			if (Main.rand.Next(7) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 2105);
			}
			QuickSpawnItem(itemSource_OpenItem, 367);
			if (!extraAccessory)
			{
				QuickSpawnItem(itemSource_OpenItem, 3335);
			}
			int num7 = Main.rand.Next(4);
			num7 = ((num7 != 3) ? (489 + num7) : 2998);
			QuickSpawnItem(itemSource_OpenItem, num7);
			switch (Main.rand.Next(4))
			{
			case 0:
				QuickSpawnItem(itemSource_OpenItem, 514);
				break;
			case 1:
				QuickSpawnItem(itemSource_OpenItem, 426);
				break;
			case 2:
				QuickSpawnItem(itemSource_OpenItem, 434);
				break;
			case 3:
				QuickSpawnItem(itemSource_OpenItem, 4912);
				break;
			}
			break;
		}
		case 3325:
			TryGettingDevArmor(itemSource_OpenItem);
			if (Main.rand.Next(7) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 2113);
			}
			QuickSpawnItem(itemSource_OpenItem, 548, Main.rand.Next(25, 41));
			QuickSpawnItem(itemSource_OpenItem, 1225, Main.rand.Next(20, 36));
			QuickSpawnItem(itemSource_OpenItem, 3355);
			break;
		case 3326:
			TryGettingDevArmor(itemSource_OpenItem);
			if (Main.rand.Next(7) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 2106);
			}
			QuickSpawnItem(itemSource_OpenItem, 549, Main.rand.Next(25, 41));
			QuickSpawnItem(itemSource_OpenItem, 1225, Main.rand.Next(20, 36));
			QuickSpawnItem(itemSource_OpenItem, 3354);
			break;
		case 3327:
			TryGettingDevArmor(itemSource_OpenItem);
			if (Main.rand.Next(7) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 2107);
			}
			QuickSpawnItem(itemSource_OpenItem, 547, Main.rand.Next(25, 41));
			QuickSpawnItem(itemSource_OpenItem, 1225, Main.rand.Next(20, 36));
			QuickSpawnItem(itemSource_OpenItem, 3356);
			break;
		case 3328:
			TryGettingDevArmor(itemSource_OpenItem);
			if (Main.rand.Next(7) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 2109);
			}
			QuickSpawnItem(itemSource_OpenItem, 1141);
			QuickSpawnItem(itemSource_OpenItem, 3336);
			if (Main.rand.Next(15) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 1182);
			}
			if (Main.rand.Next(20) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 1305);
			}
			if (Main.rand.Next(2) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 1157);
			}
			if (Main.rand.Next(10) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 3021);
			}
			switch (Main.rand.Next(7))
			{
			case 0:
				QuickSpawnItem(itemSource_OpenItem, 758);
				QuickSpawnItem(itemSource_OpenItem, 771, Main.rand.Next(50, 150));
				break;
			case 1:
				QuickSpawnItem(itemSource_OpenItem, 1255);
				break;
			case 2:
				QuickSpawnItem(itemSource_OpenItem, 788);
				break;
			case 3:
				QuickSpawnItem(itemSource_OpenItem, 1178);
				break;
			case 4:
				QuickSpawnItem(itemSource_OpenItem, 1259);
				break;
			case 5:
				QuickSpawnItem(itemSource_OpenItem, 1155);
				break;
			case 6:
				QuickSpawnItem(itemSource_OpenItem, 3018);
				break;
			}
			break;
		case 3329:
			TryGettingDevArmor(itemSource_OpenItem);
			QuickSpawnItem(itemSource_OpenItem, 3337);
			if (Main.rand.Next(7) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 2110);
			}
			if (Main.rand.Next(3) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 1294);
			}
			switch (Main.rand.Next(7))
			{
			case 0:
				QuickSpawnItem(itemSource_OpenItem, 1258);
				QuickSpawnItem(itemSource_OpenItem, 1261, Main.rand.Next(60, 100));
				break;
			case 1:
				QuickSpawnItem(itemSource_OpenItem, 1122);
				break;
			case 2:
				QuickSpawnItem(itemSource_OpenItem, 899);
				break;
			case 3:
				QuickSpawnItem(itemSource_OpenItem, 1248);
				break;
			case 4:
				QuickSpawnItem(itemSource_OpenItem, 1295);
				break;
			case 5:
				QuickSpawnItem(itemSource_OpenItem, 1296);
				break;
			default:
				QuickSpawnItem(itemSource_OpenItem, 1297);
				break;
			}
			QuickSpawnItem(itemSource_OpenItem, 2218, Main.rand.Next(18, 24));
			break;
		case 3330:
			TryGettingDevArmor(itemSource_OpenItem);
			QuickSpawnItem(itemSource_OpenItem, 3367);
			if (Main.rand.Next(7) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 2588);
			}
			if (Main.rand.Next(10) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 2609);
			}
			switch (Main.rand.Next(5))
			{
			case 0:
				QuickSpawnItem(itemSource_OpenItem, 2611);
				break;
			case 1:
				QuickSpawnItem(itemSource_OpenItem, 2624);
				break;
			case 2:
				QuickSpawnItem(itemSource_OpenItem, 2622);
				break;
			case 3:
				QuickSpawnItem(itemSource_OpenItem, 2621);
				break;
			case 4:
				if (Main.remixWorld)
				{
					QuickSpawnItem(itemSource_OpenItem, 157);
				}
				else
				{
					QuickSpawnItem(itemSource_OpenItem, 2623);
				}
				break;
			}
			break;
		case 3331:
			TryGettingDevArmor(itemSource_OpenItem);
			if (Main.rand.Next(7) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 3372);
			}
			break;
		case 3860:
			TryGettingDevArmor(itemSource_OpenItem);
			if (Main.rand.Next(7) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 3863);
			}
			switch (Main.rand.Next(4))
			{
			case 0:
				QuickSpawnItem(itemSource_OpenItem, 3859);
				break;
			case 1:
				QuickSpawnItem(itemSource_OpenItem, 3827);
				break;
			case 2:
				QuickSpawnItem(itemSource_OpenItem, 3870);
				break;
			default:
				QuickSpawnItem(itemSource_OpenItem, 3858);
				break;
			}
			if (Main.rand.Next(4) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 3883);
			}
			QuickSpawnItem(itemSource_OpenItem, 3817, Main.rand.Next(30, 50));
			break;
		case 4782:
			TryGettingDevArmor(itemSource_OpenItem);
			QuickSpawnItem(itemSource_OpenItem, 4989);
			if (Main.rand.Next(7) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 4784);
			}
			if (Main.rand.Next(10) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 4823);
			}
			if (Main.rand.Next(20) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 4715);
			}
			if (Main.rand.Next(4) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 4778);
			}
			if (Main.rand.Next(20) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 5075);
			}
			switch (Main.rand.Next(4))
			{
			case 0:
				QuickSpawnItem(itemSource_OpenItem, 4923);
				break;
			case 1:
				QuickSpawnItem(itemSource_OpenItem, 4952);
				break;
			case 2:
				QuickSpawnItem(itemSource_OpenItem, 4953);
				break;
			case 3:
				QuickSpawnItem(itemSource_OpenItem, 4914);
				break;
			}
			break;
		case 4957:
		{
			QuickSpawnItem(itemSource_OpenItem, 4987);
			QuickSpawnItem(itemSource_OpenItem, 4986, Main.rand.Next(25, 75));
			if (Main.rand.Next(7) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 4959);
			}
			if (Main.rand.Next(2) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 4981);
			}
			if (Main.rand.Next(3) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 4758);
			}
			if (Main.rand.Next(2) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 4980);
			}
			int num = Main.rand.Next(4982, 4985);
			int num2 = Main.rand.Next(4982, 4985);
			while (num2 == num)
			{
				num = Main.rand.Next(4982, 4985);
			}
			QuickSpawnItem(itemSource_OpenItem, num);
			QuickSpawnItem(itemSource_OpenItem, num2);
			break;
		}
		}
		switch (type)
		{
		case 5111:
			QuickSpawnItem(itemSource_OpenItem, 5100);
			if (Main.rand.Next(7) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 5109);
			}
			if (Main.rand.Next(14) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 5385);
			}
			if (Main.rand.Next(3) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 5098);
			}
			if (Main.rand.Next(3) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 5101);
			}
			if (Main.rand.Next(3) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 5113);
			}
			switch (Main.rand.Next(4))
			{
			case 0:
				QuickSpawnItem(itemSource_OpenItem, 5117);
				break;
			case 1:
				QuickSpawnItem(itemSource_OpenItem, 5118);
				break;
			case 2:
				QuickSpawnItem(itemSource_OpenItem, 5119);
				break;
			case 3:
				QuickSpawnItem(itemSource_OpenItem, 5095);
				break;
			}
			break;
		case 3332:
		{
			TryGettingDevArmor(itemSource_OpenItem);
			if (Main.rand.Next(7) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 3373);
			}
			if (Main.rand.Next(10) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 4469);
			}
			if (!HasItem(3384))
			{
				QuickSpawnItem(itemSource_OpenItem, 3384);
			}
			QuickSpawnItem(itemSource_OpenItem, 3460, Main.rand.Next(90, 111));
			QuickSpawnItem(itemSource_OpenItem, 1131);
			QuickSpawnItem(itemSource_OpenItem, 3577);
			QuickSpawnItem(itemSource_OpenItem, 4954);
			List<int> list = new List<int> { 3063, 3389, 3065, 1553, 3930, 3541, 3570, 3571, 3569 };
			for (int i = 0; i < 2; i++)
			{
				int index = Main.rand.Next(list.Count);
				int item = list[index];
				QuickSpawnItem(itemSource_OpenItem, item);
				list.RemoveAt(index);
			}
			break;
		}
		}
		int num11 = -1;
		if (type == 3318)
		{
			num11 = 50;
		}
		if (type == 3319)
		{
			num11 = 4;
		}
		if (type == 3320)
		{
			num11 = 13;
		}
		if (type == 3321)
		{
			num11 = 266;
		}
		if (type == 3322)
		{
			num11 = 222;
		}
		if (type == 3323)
		{
			num11 = 35;
		}
		if (type == 3324)
		{
			num11 = 113;
		}
		if (type == 3325)
		{
			num11 = 134;
		}
		if (type == 3326)
		{
			num11 = 125;
		}
		if (type == 3327)
		{
			num11 = 127;
		}
		if (type == 3328)
		{
			num11 = 262;
		}
		if (type == 3329)
		{
			num11 = 245;
		}
		if (type == 3330)
		{
			num11 = 370;
		}
		if (type == 3331)
		{
			num11 = 439;
		}
		if (type == 3332)
		{
			num11 = 398;
		}
		if (type == 3860)
		{
			num11 = 551;
		}
		if (type == 3861)
		{
			num11 = 576;
		}
		if (type == 3862)
		{
			num11 = 564;
		}
		if (type == 4782)
		{
			num11 = 636;
		}
		if (type == 4957)
		{
			num11 = 657;
		}
		if (type == 5111)
		{
			num11 = 668;
		}
		if (num11 <= 0)
		{
			return;
		}
		NPC nPC = new NPC();
		nPC.SetDefaults(num11);
		float value = nPC.value;
		value *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
		if (Main.rand.Next(5) == 0)
		{
			value *= 1f + (float)Main.rand.Next(5, 11) * 0.01f;
		}
		if (Main.rand.Next(10) == 0)
		{
			value *= 1f + (float)Main.rand.Next(10, 21) * 0.01f;
		}
		if (Main.rand.Next(15) == 0)
		{
			value *= 1f + (float)Main.rand.Next(15, 31) * 0.01f;
		}
		if (Main.rand.Next(20) == 0)
		{
			value *= 1f + (float)Main.rand.Next(20, 41) * 0.01f;
		}
		while ((int)value > 0)
		{
			if (value > 1000000f)
			{
				int num12 = (int)(value / 1000000f);
				value -= (float)(1000000 * num12);
				QuickSpawnItem(itemSource_OpenItem, 74, num12);
				continue;
			}
			if (value > 10000f)
			{
				int num13 = (int)(value / 10000f);
				value -= (float)(10000 * num13);
				QuickSpawnItem(itemSource_OpenItem, 73, num13);
				continue;
			}
			if (value > 100f)
			{
				int num14 = (int)(value / 100f);
				value -= (float)(100 * num14);
				QuickSpawnItem(itemSource_OpenItem, 72, num14);
				continue;
			}
			int num15 = (int)value;
			if (num15 < 1)
			{
				num15 = 1;
			}
			value -= (float)num15;
			QuickSpawnItem(itemSource_OpenItem, 71, num15);
		}
	}

	private void TryGettingDevArmor(IEntitySource source)
	{
		if (Main.rand.Next(Main.tenthAnniversaryWorld ? 8 : 16) == 0)
		{
			switch (Main.rand.Next(18))
			{
			case 0:
				QuickSpawnItem(source, 666);
				QuickSpawnItem(source, 667);
				QuickSpawnItem(source, 668);
				QuickSpawnItem(source, 665);
				QuickSpawnItem(source, 3287);
				break;
			case 1:
				QuickSpawnItem(source, 1554);
				QuickSpawnItem(source, 1555);
				QuickSpawnItem(source, 1556);
				QuickSpawnItem(source, 1586);
				break;
			case 2:
				QuickSpawnItem(source, 1554);
				QuickSpawnItem(source, 1587);
				QuickSpawnItem(source, 1588);
				QuickSpawnItem(source, 1586);
				break;
			case 3:
				QuickSpawnItem(source, 1557);
				QuickSpawnItem(source, 1558);
				QuickSpawnItem(source, 1559);
				QuickSpawnItem(source, 1585);
				break;
			case 4:
				QuickSpawnItem(source, 1560);
				QuickSpawnItem(source, 1561);
				QuickSpawnItem(source, 1562);
				QuickSpawnItem(source, 1584);
				break;
			case 5:
				QuickSpawnItem(source, 1563);
				QuickSpawnItem(source, 1564);
				QuickSpawnItem(source, 1565);
				QuickSpawnItem(source, 3582);
				break;
			case 6:
				QuickSpawnItem(source, 1566);
				QuickSpawnItem(source, 1567);
				QuickSpawnItem(source, 1568);
				break;
			case 7:
				QuickSpawnItem(source, 1580);
				QuickSpawnItem(source, 1581);
				QuickSpawnItem(source, 1582);
				QuickSpawnItem(source, 1583);
				break;
			case 8:
				QuickSpawnItem(source, 3226);
				QuickSpawnItem(source, 3227);
				QuickSpawnItem(source, 3228);
				QuickSpawnItem(source, 3288);
				break;
			case 9:
				QuickSpawnItem(source, 3583);
				QuickSpawnItem(source, 3581);
				QuickSpawnItem(source, 3578);
				QuickSpawnItem(source, 3579);
				QuickSpawnItem(source, 3580);
				break;
			case 10:
				QuickSpawnItem(source, 3585);
				QuickSpawnItem(source, 3586);
				QuickSpawnItem(source, 3587);
				QuickSpawnItem(source, 3588);
				QuickSpawnItem(source, 3024, 4);
				break;
			case 11:
				QuickSpawnItem(source, 3589);
				QuickSpawnItem(source, 3590);
				QuickSpawnItem(source, 3591);
				QuickSpawnItem(source, 3592);
				QuickSpawnItem(source, 3599, 4);
				break;
			case 12:
				QuickSpawnItem(source, 3368);
				QuickSpawnItem(source, 3921);
				QuickSpawnItem(source, 3922);
				QuickSpawnItem(source, 3923);
				QuickSpawnItem(source, 3924);
				break;
			case 13:
				QuickSpawnItem(source, 3925);
				QuickSpawnItem(source, 3926);
				QuickSpawnItem(source, 3927);
				QuickSpawnItem(source, 3928);
				QuickSpawnItem(source, 3929);
				break;
			case 14:
				QuickSpawnItem(source, 4732);
				QuickSpawnItem(source, 4733);
				QuickSpawnItem(source, 4734);
				QuickSpawnItem(source, 4730);
				break;
			case 15:
				QuickSpawnItem(source, 4747);
				QuickSpawnItem(source, 4748);
				QuickSpawnItem(source, 4749);
				QuickSpawnItem(source, 4746);
				break;
			case 16:
				QuickSpawnItem(source, 4751);
				QuickSpawnItem(source, 4752);
				QuickSpawnItem(source, 4753);
				QuickSpawnItem(source, 4750);
				break;
			case 17:
				QuickSpawnItem(source, 4755);
				QuickSpawnItem(source, 4756);
				QuickSpawnItem(source, 4757);
				QuickSpawnItem(source, 4754);
				break;
			}
		}
	}

	public void OpenFishingCrate(int crateItemID)
	{
		IEntitySource itemSource_OpenItem = GetItemSource_OpenItem(crateItemID);
		bool flag = ItemID.Sets.IsFishingCrateHardmode[crateItemID];
		switch (crateItemID)
		{
		case 2334:
		case 3979:
		{
			bool flag2 = true;
			while (flag2)
			{
				if (flag && flag2 && Main.rand.Next(200) == 0)
				{
					int number = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 3064);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number, 1f);
					}
					flag2 = false;
				}
				if (flag2 && Main.rand.Next(40) == 0)
				{
					int type = 3200;
					int stack = 1;
					int number2 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type, stack, noBroadcast: false, -1);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number2, 1f);
					}
					flag2 = false;
				}
				if (flag2 && Main.rand.Next(40) == 0)
				{
					int type2 = 3201;
					int stack2 = 1;
					int number3 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type2, stack2, noBroadcast: false, -1);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number3, 1f);
					}
					flag2 = false;
				}
				if (flag && flag2 && Main.rand.Next(25) == 0)
				{
					int type3 = 2424;
					int stack3 = 1;
					int number4 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type3, stack3, noBroadcast: false, -1);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number4, 1f);
					}
					flag2 = false;
				}
				if (Main.rand.Next(20) == 0)
				{
					int num = Main.rand.Next(5);
					switch (num)
					{
					case 0:
						num = 285;
						break;
					case 1:
						num = 953;
						break;
					case 2:
						num = 4341;
						break;
					case 3:
						num = 3068;
						break;
					case 4:
						num = 3084;
						break;
					}
					int number5 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num, 1, noBroadcast: false, -1);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number5, 1f);
					}
					flag2 = false;
				}
				if (!flag && flag2 && Main.rand.Next(50) == 0)
				{
					int type4 = 997;
					int stack4 = 1;
					int number6 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type4, stack4);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number6, 1f);
					}
					flag2 = false;
				}
				if (Main.rand.Next(7) == 0)
				{
					int type5;
					int stack5;
					if (Main.rand.Next(3) == 0)
					{
						type5 = 73;
						stack5 = Main.rand.Next(1, 6);
					}
					else
					{
						type5 = 72;
						stack5 = Main.rand.Next(20, 91);
					}
					int number7 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type5, stack5);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number7, 1f);
					}
					flag2 = false;
				}
				if (Main.rand.Next(7) == 0)
				{
					int num2 = Main.rand.Next(4);
					switch (num2)
					{
					case 0:
						num2 = 12;
						break;
					case 1:
						num2 = 699;
						break;
					case 2:
						num2 = 11;
						break;
					case 3:
						num2 = 700;
						break;
					}
					if (Main.rand.Next(2) == 0 && flag)
					{
						num2 = Main.rand.Next(2);
						switch (num2)
						{
						case 0:
							num2 = 364;
							break;
						case 1:
							num2 = 1104;
							break;
						}
					}
					int stack6 = Main.rand.Next(4, 16);
					int number8 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num2, stack6);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number8, 1f);
					}
					flag2 = false;
				}
				else if (Main.rand.Next(8) == 0)
				{
					int num3 = Main.rand.Next(4);
					switch (num3)
					{
					case 0:
						num3 = 20;
						break;
					case 1:
						num3 = 703;
						break;
					case 2:
						num3 = 22;
						break;
					case 3:
						num3 = 704;
						break;
					case 4:
						num3 = 21;
						break;
					case 5:
						num3 = 705;
						break;
					case 6:
						num3 = 19;
						break;
					case 7:
						num3 = 706;
						break;
					}
					int stack7 = Main.rand.Next(2, 6);
					if (Main.rand.Next(2) == 0 && flag)
					{
						num3 = Main.rand.Next(2);
						switch (num3)
						{
						case 0:
							num3 = 381;
							break;
						case 1:
							num3 = 1184;
							break;
						case 2:
							num3 = 382;
							break;
						case 3:
							num3 = 1191;
							break;
						case 4:
							num3 = 391;
							break;
						case 5:
							num3 = 1198;
							break;
						}
						stack7 = Main.rand.Next(2, 4);
					}
					int number9 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num3, stack7);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number9, 1f);
					}
					flag2 = false;
				}
				if (Main.rand.Next(7) == 0)
				{
					int num4 = Main.rand.Next(10);
					switch (num4)
					{
					case 0:
						num4 = 288;
						break;
					case 1:
						num4 = 290;
						break;
					case 2:
						num4 = 292;
						break;
					case 3:
						num4 = 299;
						break;
					case 4:
						num4 = 298;
						break;
					case 5:
						num4 = 304;
						break;
					case 6:
						num4 = 291;
						break;
					case 7:
						num4 = 2322;
						break;
					case 8:
						num4 = 2323;
						break;
					case 9:
						num4 = 2329;
						break;
					}
					int stack8 = Main.rand.Next(1, 4);
					int number10 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num4, stack8);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number10, 1f);
					}
					flag2 = false;
				}
			}
			if (Main.rand.Next(3) == 0)
			{
				int num5 = Main.rand.Next(2);
				switch (num5)
				{
				case 0:
					num5 = 28;
					break;
				case 1:
					num5 = 110;
					break;
				}
				int stack9 = Main.rand.Next(5, 16);
				int number11 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num5, stack9);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number11, 1f);
				}
			}
			if (Main.rand.Next(3) == 0)
			{
				int type6 = ((Main.rand.Next(3) != 0) ? 2674 : 2675);
				int stack10 = Main.rand.Next(1, 5);
				int number12 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type6, stack10);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number12, 1f);
				}
			}
			return;
		}
		case 2335:
		case 3980:
		{
			bool flag4 = true;
			while (flag4)
			{
				if (flag && flag4 && Main.rand.Next(60) == 0)
				{
					int number24 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 3064);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number24, 1f);
					}
					flag4 = false;
				}
				if (flag4 && Main.rand.Next(25) == 0)
				{
					int type12 = 2501;
					int stack19 = 1;
					int number25 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type12, stack19);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number25, 1f);
					}
					flag4 = false;
				}
				if (flag4 && Main.rand.Next(20) == 0)
				{
					int type13 = 2587;
					int stack20 = 1;
					int number26 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type13, stack20);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number26, 1f);
					}
					flag4 = false;
				}
				if (flag4 && Main.rand.Next(15) == 0)
				{
					int type14 = 2608;
					int stack21 = 1;
					int number27 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type14, stack21, noBroadcast: false, -1);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number27, 1f);
					}
					flag4 = false;
				}
				if (flag4 && Main.rand.Next(20) == 0)
				{
					int type15 = 3200;
					int stack22 = 1;
					int number28 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type15, stack22, noBroadcast: false, -1);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number28, 1f);
					}
					flag4 = false;
				}
				if (flag4 && Main.rand.Next(20) == 0)
				{
					int type16 = 3201;
					int stack23 = 1;
					int number29 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type16, stack23, noBroadcast: false, -1);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number29, 1f);
					}
					flag4 = false;
				}
				if (Main.rand.Next(4) == 0)
				{
					int type17 = 73;
					int stack24 = Main.rand.Next(5, 11);
					int number30 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type17, stack24);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number30, 1f);
					}
					flag4 = false;
				}
				if (Main.rand.Next(6) == 0)
				{
					int num9 = Main.rand.Next(6);
					switch (num9)
					{
					case 0:
						num9 = 12;
						break;
					case 1:
						num9 = 699;
						break;
					case 2:
						num9 = 11;
						break;
					case 3:
						num9 = 700;
						break;
					case 4:
						num9 = 14;
						break;
					case 5:
						num9 = 701;
						break;
					}
					if (Main.rand.Next(2) == 0 && flag)
					{
						num9 = Main.rand.Next(4);
						switch (num9)
						{
						case 0:
							num9 = 364;
							break;
						case 1:
							num9 = 1104;
							break;
						case 2:
							num9 = 365;
							break;
						case 3:
							num9 = 1105;
							break;
						}
					}
					int stack25 = Main.rand.Next(12, 22);
					int number31 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num9, stack25);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number31, 1f);
					}
					flag4 = false;
				}
				else if (Main.rand.Next(4) == 0)
				{
					int num10 = Main.rand.Next(6);
					switch (num10)
					{
					case 0:
						num10 = 20;
						break;
					case 1:
						num10 = 703;
						break;
					case 2:
						num10 = 22;
						break;
					case 3:
						num10 = 704;
						break;
					case 4:
						num10 = 21;
						break;
					case 5:
						num10 = 705;
						break;
					}
					int num11 = Main.rand.Next(4, 8);
					if (Main.rand.Next(3) != 0 && flag)
					{
						num10 = Main.rand.Next(4);
						switch (num10)
						{
						case 0:
							num10 = 381;
							break;
						case 1:
							num10 = 1184;
							break;
						case 2:
							num10 = 382;
							break;
						case 3:
							num10 = 1191;
							break;
						}
						num11 -= Main.rand.Next(2);
					}
					int number32 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num10, num11);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number32, 1f);
					}
					flag4 = false;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num12 = Main.rand.Next(8);
					switch (num12)
					{
					case 0:
						num12 = 288;
						break;
					case 1:
						num12 = 296;
						break;
					case 2:
						num12 = 304;
						break;
					case 3:
						num12 = 305;
						break;
					case 4:
						num12 = 2322;
						break;
					case 5:
						num12 = 2323;
						break;
					case 6:
						num12 = 2324;
						break;
					case 7:
						num12 = 2327;
						break;
					}
					int stack26 = Main.rand.Next(2, 5);
					int number33 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num12, stack26);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number33, 1f);
					}
					flag4 = false;
				}
			}
			if (Main.rand.Next(2) == 0)
			{
				int type18 = Main.rand.Next(188, 190);
				int stack27 = Main.rand.Next(5, 16);
				int number34 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type18, stack27);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number34, 1f);
				}
			}
			if (Main.rand.Next(2) == 0)
			{
				int type19 = ((Main.rand.Next(3) != 0) ? 2675 : 2676);
				int stack28 = Main.rand.Next(2, 5);
				int number35 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type19, stack28);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number35, 1f);
				}
			}
			return;
		}
		case 2336:
		case 3981:
		{
			bool flag3 = true;
			while (flag3)
			{
				if (flag && flag3 && Main.rand.Next(20) == 0)
				{
					int number13 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 3064);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number13, 1f);
					}
					flag3 = false;
				}
				if (flag3 && Main.rand.Next(8) == 0)
				{
					int type7 = 29;
					int stack11 = 1;
					int number14 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type7, stack11);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number14, 1f);
					}
					flag3 = false;
				}
				if (flag3 && Main.rand.Next(10) == 0)
				{
					int type8 = 2491;
					int stack12 = 1;
					int number15 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type8, stack12);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number15, 1f);
					}
					flag3 = false;
				}
				if (Main.rand.Next(3) == 0)
				{
					int type9 = 73;
					int stack13 = Main.rand.Next(8, 21);
					int number16 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type9, stack13);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number16, 1f);
					}
					flag3 = false;
				}
				if (Main.rand.Next(5) == 0)
				{
					int num6 = Main.rand.Next(4);
					switch (num6)
					{
					case 0:
						num6 = 14;
						break;
					case 1:
						num6 = 701;
						break;
					case 2:
						num6 = 13;
						break;
					case 3:
						num6 = 702;
						break;
					}
					if (Main.rand.Next(2) == 0 && flag)
					{
						num6 = Main.rand.Next(4);
						switch (num6)
						{
						case 0:
							num6 = 365;
							break;
						case 1:
							num6 = 1105;
							break;
						case 2:
							num6 = 366;
							break;
						case 3:
							num6 = 1106;
							break;
						}
					}
					int stack14 = Main.rand.Next(25, 35);
					int number17 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num6, stack14);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number17, 1f);
					}
					flag3 = false;
				}
				else
				{
					if (Main.rand.Next(3) != 0)
					{
						continue;
					}
					int num7 = Main.rand.Next(4);
					switch (num7)
					{
					case 0:
						num7 = 21;
						break;
					case 1:
						num7 = 19;
						break;
					case 2:
						num7 = 705;
						break;
					case 3:
						num7 = 706;
						break;
					}
					if (Main.rand.Next(3) != 0 && flag)
					{
						num7 = Main.rand.Next(4);
						switch (num7)
						{
						case 0:
							num7 = 382;
							break;
						case 1:
							num7 = 391;
							break;
						case 2:
							num7 = 1191;
							break;
						case 3:
							num7 = 1198;
							break;
						}
					}
					int stack15 = Main.rand.Next(8, 12);
					int number18 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num7, stack15);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number18, 1f);
					}
					flag3 = false;
				}
			}
			if (Main.rand.Next(3) == 0)
			{
				int num8 = Main.rand.Next(5);
				switch (num8)
				{
				case 0:
					num8 = 288;
					break;
				case 1:
					num8 = 296;
					break;
				case 2:
					num8 = 305;
					break;
				case 3:
					num8 = 2322;
					break;
				case 4:
					num8 = 2323;
					break;
				}
				int stack16 = Main.rand.Next(2, 6);
				int number19 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num8, stack16);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number19, 1f);
				}
			}
			if (Main.rand.Next(2) == 0)
			{
				int type10 = Main.rand.Next(188, 190);
				int stack17 = Main.rand.Next(5, 21);
				int number20 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type10, stack17);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number20, 1f);
				}
			}
			if (Main.rand.Next(3) != 0)
			{
				int type11 = 2676;
				int stack18 = Main.rand.Next(3, 8);
				int number21 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type11, stack18);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number21, 1f);
				}
			}
			if (Main.rand.Next(30) == 0 && !flag)
			{
				int number22 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 989);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number22, 1f);
				}
			}
			if (Main.rand.Next(15) == 0 && flag)
			{
				int number23 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 989);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number23, 1f);
				}
			}
			return;
		}
		}
		int maxValue = 1;
		bool flag5 = true;
		while (flag5)
		{
			if ((crateItemID == 5002 || crateItemID == 5003) && flag5 && Main.rand.Next(maxValue) == 0)
			{
				int num13 = Main.rand.Next(4);
				int number36 = Item.NewItem(Type: (Main.rand.Next(10) == 0) ? 863 : (num13 switch
				{
					0 => 186, 
					1 => 4404, 
					2 => 277, 
					_ => 187, 
				}), source: itemSource_OpenItem, X: (int)position.X, Y: (int)position.Y, Width: width, Height: height, Stack: 1, noBroadcast: false, pfix: -1);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number36, 1f);
				}
				flag5 = false;
			}
			if ((crateItemID == 3203 || crateItemID == 3982) && flag5 && Main.rand.Next(maxValue) == 0)
			{
				int num14 = Main.rand.Next(5);
				int number37 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num14 switch
				{
					0 => 162, 
					1 => 111, 
					2 => 96, 
					3 => 115, 
					_ => 64, 
				}, 1, noBroadcast: false, -1);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number37, 1f);
				}
				flag5 = false;
			}
			if ((crateItemID == 3204 || crateItemID == 3983) && flag5 && Main.rand.Next(maxValue) == 0)
			{
				int num15 = Main.rand.Next(5);
				int number38 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num15 switch
				{
					0 => 800, 
					1 => 802, 
					2 => 1256, 
					3 => 1290, 
					_ => 3062, 
				}, 1, noBroadcast: false, -1);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number38, 1f);
				}
				flag5 = false;
			}
			if ((crateItemID == 3205 || crateItemID == 3984) && flag5 && Main.rand.Next(maxValue) == 0)
			{
				int type21 = 3085;
				int number39 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type21, 1, noBroadcast: false, -1);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number39, 1f);
				}
				flag5 = false;
				if (Main.rand.Next(2) == 0)
				{
					number39 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 149, Main.rand.Next(5, 16), noBroadcast: false, -1);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number39, 1f);
					}
				}
			}
			if ((crateItemID == 3206 || crateItemID == 3985) && flag5 && Main.rand.Next(maxValue) == 0)
			{
				int num16 = Main.rand.Next(4);
				int number40 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num16 switch
				{
					0 => 158, 
					1 => 65, 
					2 => 159, 
					_ => 2219, 
				}, 1, noBroadcast: false, -1);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number40, 1f);
				}
				flag5 = false;
			}
			if ((crateItemID == 3208 || crateItemID == 3987) && flag5 && Main.rand.Next(maxValue) == 0)
			{
				if (Main.rand.Next(20) == 0)
				{
					int num17 = Main.rand.Next(5);
					num17 = 3017;
					int number41 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num17, 1, noBroadcast: false, -1);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number41, 1f);
					}
					flag5 = false;
				}
				else
				{
					int num18 = Main.rand.Next(5);
					int number42 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num18 switch
					{
						0 => 212, 
						1 => 964, 
						2 => 211, 
						3 => 213, 
						_ => 2292, 
					}, 1, noBroadcast: false, -1);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number42, 1f);
					}
					flag5 = false;
				}
			}
			if ((crateItemID == 4405 || crateItemID == 4406) && flag5 && Main.rand.Next(maxValue) == 0)
			{
				int number43 = Item.NewItem(Type: Main.rand.Next(6) switch
				{
					0 => 670, 
					1 => 724, 
					2 => 950, 
					3 => (!Main.remixWorld) ? 1319 : 725, 
					4 => 987, 
					_ => 1579, 
				}, source: itemSource_OpenItem, X: (int)position.X, Y: (int)position.Y, Width: width, Height: height, Stack: 1, noBroadcast: false, pfix: -1);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number43, 1f);
				}
				flag5 = false;
			}
			if (crateItemID == 4407 || crateItemID == 4408)
			{
				if (flag5 && Main.rand.Next(maxValue) == 0)
				{
					int num19 = Main.rand.Next(8);
					int number44 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num19 switch
					{
						0 => 4056, 
						1 => 4442, 
						2 => 4055, 
						3 => 4061, 
						4 => 4062, 
						5 => 4276, 
						6 => 4262, 
						_ => 4263, 
					}, 1, noBroadcast: false, -1);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number44, 1f);
					}
					flag5 = false;
				}
				if (Main.rand.Next(4) == 0)
				{
					int type23 = 4423;
					int stack29 = Main.rand.Next(4, 7);
					int number45 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type23, stack29);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number45, 1f);
					}
					flag5 = false;
				}
				if (Main.rand.Next(2) == 0)
				{
					int type24 = 3380;
					int stack30 = Main.rand.Next(10, 17);
					int number46 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type24, stack30);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number46, 1f);
					}
					flag5 = false;
				}
				if (Main.rand.Next(35) == 0)
				{
					int type25 = 857;
					int number47 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type25);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number47, 1f);
					}
					flag5 = false;
				}
			}
			if (crateItemID == 4877 || crateItemID == 4878)
			{
				if (flag5 && Main.rand.Next(maxValue) == 0)
				{
					if (Main.rand.Next(20) == 0)
					{
						int num20 = Main.rand.Next(5);
						num20 = 906;
						int number48 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num20, 1, noBroadcast: false, -1);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number48, 1f);
						}
						flag5 = false;
					}
					else
					{
						int num21 = Main.rand.Next(5);
						int number49 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num21 switch
						{
							0 => 4822, 
							1 => 4828, 
							2 => 4880, 
							3 => 4881, 
							_ => 4868, 
						}, 1, noBroadcast: false, -1);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number49, 1f);
						}
						flag5 = false;
					}
					if (Main.rand.Next(4) == 0)
					{
						int type26 = 4858;
						int stack31 = 2;
						int number50 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type26, stack31);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, number50, 1f);
						}
						flag5 = false;
					}
				}
				int type27 = 4879;
				int number51 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type27, 1, noBroadcast: false, -1);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number51, 1f);
				}
				flag5 = false;
				if (Main.rand.Next(3) == 0)
				{
					int type28 = 4824;
					int stack32 = Main.rand.Next(7, 11);
					int number52 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type28, stack32);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number52, 1f);
					}
					flag5 = false;
				}
				if (Main.rand.Next(2) == 0)
				{
					int num22 = Main.rand.Next(5);
					switch (num22)
					{
					case 0:
						num22 = 4902;
						break;
					case 1:
						num22 = 4903;
						break;
					case 2:
						num22 = 4904;
						break;
					case 3:
						num22 = 4905;
						break;
					case 4:
						num22 = 4906;
						break;
					}
					int number53 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num22, 1, noBroadcast: false, -1);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(21, -1, -1, null, number53, 1f);
					}
					flag5 = false;
				}
			}
			if (Main.rand.Next(4) == 0)
			{
				int type29 = 73;
				int stack33 = Main.rand.Next(5, 13);
				int number54 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type29, stack33);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number54, 1f);
				}
				flag5 = false;
			}
			if (Main.rand.Next(7) == 0)
			{
				int num23 = Main.rand.Next(8);
				switch (num23)
				{
				case 0:
					num23 = 12;
					break;
				case 1:
					num23 = 699;
					break;
				case 2:
					num23 = 11;
					break;
				case 3:
					num23 = 700;
					break;
				case 4:
					num23 = 14;
					break;
				case 5:
					num23 = 701;
					break;
				case 6:
					num23 = 13;
					break;
				case 7:
					num23 = 702;
					break;
				}
				if (Main.rand.Next(2) == 0 && flag)
				{
					num23 = Main.rand.Next(6);
					switch (num23)
					{
					case 0:
						num23 = 364;
						break;
					case 1:
						num23 = 1104;
						break;
					case 2:
						num23 = 365;
						break;
					case 3:
						num23 = 1105;
						break;
					case 4:
						num23 = 366;
						break;
					case 5:
						num23 = 1106;
						break;
					}
				}
				int stack34 = Main.rand.Next(20, 36);
				int number55 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num23, stack34);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number55, 1f);
				}
				flag5 = false;
			}
			if (Main.rand.Next(4) != 0)
			{
				continue;
			}
			int num24 = Main.rand.Next(6);
			switch (num24)
			{
			case 0:
				num24 = 22;
				break;
			case 1:
				num24 = 21;
				break;
			case 2:
				num24 = 19;
				break;
			case 3:
				num24 = 704;
				break;
			case 4:
				num24 = 705;
				break;
			case 5:
				num24 = 706;
				break;
			}
			int num25 = Main.rand.Next(6, 17);
			if (Main.rand.Next(3) != 0 && flag)
			{
				num24 = Main.rand.Next(6);
				switch (num24)
				{
				case 0:
					num24 = 381;
					break;
				case 1:
					num24 = 382;
					break;
				case 2:
					num24 = 391;
					break;
				case 3:
					num24 = 1184;
					break;
				case 4:
					num24 = 1191;
					break;
				case 5:
					num24 = 1198;
					break;
				}
				num25 -= Main.rand.Next(2);
			}
			int number56 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num24, num25);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number56, 1f);
			}
			flag5 = false;
		}
		if (Main.rand.Next(4) == 0)
		{
			int num26 = Main.rand.Next(6);
			switch (num26)
			{
			case 0:
				num26 = 288;
				break;
			case 1:
				num26 = 296;
				break;
			case 2:
				num26 = 304;
				break;
			case 3:
				num26 = 305;
				break;
			case 4:
				num26 = 2322;
				break;
			case 5:
				num26 = 2323;
				break;
			}
			int stack35 = Main.rand.Next(2, 5);
			int number57 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num26, stack35);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number57, 1f);
			}
			flag5 = false;
		}
		if (Main.rand.Next(2) == 0)
		{
			int type30 = Main.rand.Next(188, 190);
			int stack36 = Main.rand.Next(5, 18);
			int number58 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type30, stack36);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number58, 1f);
			}
		}
		if (Main.rand.Next(2) == 0)
		{
			int type31 = ((Main.rand.Next(2) != 0) ? 2675 : 2676);
			int stack37 = Main.rand.Next(2, 7);
			int number59 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type31, stack37);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number59, 1f);
			}
		}
		if (crateItemID == 5002 || crateItemID == 5003)
		{
			if (Main.rand.Next(3) == 0)
			{
				int type32 = 4090;
				int stack38 = Main.rand.Next(20, 51);
				int number60 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type32, stack38);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number60, 1f);
				}
			}
			if (Main.rand.Next(10) == 0)
			{
				int type33 = 4460;
				int number61 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type33);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number61, 1f);
				}
			}
			if (Main.rand.Next(10) == 0)
			{
				int type34 = 4425;
				int number62 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type34);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number62, 1f);
				}
			}
		}
		if (crateItemID == 3208 || crateItemID == 3987)
		{
			if (Main.rand.Next(3) == 0)
			{
				int type35 = 4564;
				int stack39 = Main.rand.Next(20, 51);
				int number63 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type35, stack39);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number63, 1f);
				}
			}
			if (Main.rand.Next(20) == 0)
			{
				int type36 = 753;
				int number64 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type36);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number64, 1f);
				}
			}
		}
		if ((crateItemID == 4405 || crateItemID == 4406) && Main.rand.Next(20) == 0)
		{
			int type37 = 669;
			int number65 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type37);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number65, 1f);
			}
		}
		if (crateItemID == 3206 || crateItemID == 3985)
		{
			if (Main.rand.Next(2) == 0)
			{
				int type38 = 751;
				int stack40 = Main.rand.Next(50, 101);
				int number66 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type38, stack40);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number66, 1f);
				}
			}
			if (Main.rand.Next(2) == 0)
			{
				int num27 = Main.rand.Next(6);
				switch (num27)
				{
				case 0:
					num27 = 5226;
					break;
				case 1:
					num27 = 5254;
					break;
				case 2:
					num27 = 5238;
					break;
				case 3:
					num27 = 5258;
					break;
				case 4:
					num27 = 5255;
					break;
				case 5:
					num27 = 5388;
					break;
				}
				num27 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num27);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, num27, 1f);
				}
			}
			if (Main.rand.Next(40) == 0)
			{
				int type39 = 4978;
				int number67 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type39);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number67, 1f);
				}
			}
		}
		if (crateItemID == 4877 || crateItemID == 4878)
		{
			if (Main.rand.Next(20) == 0)
			{
				int type40 = 4443;
				int number68 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type40);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number68, 1f);
				}
			}
			if (Main.rand.Next(20) == 0)
			{
				int type41 = 4737;
				int number69 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type41);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number69, 1f);
				}
			}
			if (Main.rand.Next(20) == 0)
			{
				int type42 = 4551;
				int number70 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type42);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number70, 1f);
				}
			}
		}
		if (!flag || (crateItemID != 3982 && crateItemID != 3986 && crateItemID != 3983))
		{
			return;
		}
		if (Main.rand.Next(2) == 0)
		{
			int type43 = 521;
			if (crateItemID == 3986)
			{
				type43 = 520;
			}
			int stack41 = Main.rand.Next(2, 6);
			int number71 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type43, stack41);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number71, 1f);
			}
		}
		if (Main.rand.Next(2) == 0)
		{
			int type44 = 522;
			int stack42 = Main.rand.Next(2, 6);
			switch (crateItemID)
			{
			case 3983:
				type44 = 1332;
				break;
			case 3986:
				type44 = 502;
				stack42 = Main.rand.Next(4, 11);
				break;
			}
			int number72 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type44, stack42);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number72, 1f);
			}
		}
	}

	public int CountItem(int type, int stopCountingAt = 0)
	{
		int num = 0;
		for (int i = 0; i != 58; i++)
		{
			if (inventory[i].stack > 0 && inventory[i].type == type)
			{
				num += inventory[i].stack;
				if (num >= stopCountingAt)
				{
					return num;
				}
			}
		}
		return num;
	}

	public bool ConsumeItem(int type, bool reverseOrder = false, bool includeVoidBag = false)
	{
		int num = 0;
		int num2 = 58;
		int num3 = 1;
		if (reverseOrder)
		{
			num = 57;
			num2 = -1;
			num3 = -1;
		}
		for (int i = num; i != num2; i += num3)
		{
			if (inventory[i].stack > 0 && inventory[i].type == type)
			{
				inventory[i].stack--;
				if (inventory[i].stack <= 0)
				{
					inventory[i].SetDefaults();
				}
				return true;
			}
		}
		if (includeVoidBag && useVoidBag())
		{
			int num4 = FindItem(type, bank4.item);
			if (num4 == -1)
			{
				return false;
			}
			Item item = bank4.item[num4];
			item.stack--;
			if (item.stack <= 0)
			{
				item.TurnToAir();
			}
			return true;
		}
		return false;
	}

	public void OpenShadowLockbox(int boxType)
	{
		bool flag = true;
		IEntitySource itemSource_OpenItem = GetItemSource_OpenItem(boxType);
		while (flag)
		{
			flag = false;
			int type = Main.rand.NextFromList(new short[5] { 274, 220, 112, 218, 3019 });
			if (Main.remixWorld)
			{
				type = Main.rand.NextFromList(new short[5] { 274, 220, 683, 218, 3019 });
			}
			int number = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, type, 1, noBroadcast: false, -1);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number, 1f);
			}
			if (Main.rand.Next(5) == 0)
			{
				number = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 5010, 1, noBroadcast: false, -1);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number, 1f);
				}
			}
		}
	}

	public void OpenLockBox(int lockboxItemType)
	{
		bool flag = true;
		IEntitySource itemSource_OpenItem = GetItemSource_OpenItem(lockboxItemType);
		while (flag)
		{
			flag = false;
			int num = 0;
			int number = Item.NewItem(Type: Main.rand.Next(7) switch
			{
				1 => 3317, 
				2 => 155, 
				3 => 156, 
				4 => (!Main.remixWorld) ? 157 : 2623, 
				5 => 163, 
				6 => 113, 
				_ => 164, 
			}, source: itemSource_OpenItem, X: (int)position.X, Y: (int)position.Y, Width: width, Height: height, Stack: 1, noBroadcast: false, pfix: -1);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number, 1f);
			}
			if (Main.rand.Next(3) == 0)
			{
				int number2 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 329, 1, noBroadcast: false, -1);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number2, 1f);
				}
			}
		}
	}

	public void OpenHerbBag(int bagType)
	{
		IEntitySource itemSource_OpenItem = GetItemSource_OpenItem(bagType);
		int num = Main.rand.Next(2, 5);
		if (Main.rand.Next(3) == 0)
		{
			num++;
		}
		for (int i = 0; i < num; i++)
		{
			int num2 = Main.rand.Next(14);
			if (num2 == 0)
			{
				num2 = 313;
			}
			if (num2 == 1)
			{
				num2 = 314;
			}
			if (num2 == 2)
			{
				num2 = 315;
			}
			if (num2 == 3)
			{
				num2 = 317;
			}
			if (num2 == 4)
			{
				num2 = 316;
			}
			if (num2 == 5)
			{
				num2 = 318;
			}
			if (num2 == 6)
			{
				num2 = 2358;
			}
			if (num2 == 7)
			{
				num2 = 307;
			}
			if (num2 == 8)
			{
				num2 = 308;
			}
			if (num2 == 9)
			{
				num2 = 309;
			}
			if (num2 == 10)
			{
				num2 = 311;
			}
			if (num2 == 11)
			{
				num2 = 310;
			}
			if (num2 == 12)
			{
				num2 = 312;
			}
			if (num2 == 13)
			{
				num2 = 2357;
			}
			int num3 = Main.rand.Next(2, 5);
			if (Main.rand.Next(3) == 0)
			{
				num3 += Main.rand.Next(1, 5);
			}
			int number = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, num2, num3);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number, 1f);
			}
		}
	}

	public void OpenCanofWorms(int sourceItemType)
	{
		IEntitySource itemSource_OpenItem = GetItemSource_OpenItem(sourceItemType);
		QuickSpawnItem(itemSource_OpenItem, 2002, Main.rand.Next(5, 9));
		if (Main.rand.Next(10) < 3)
		{
			QuickSpawnItem(itemSource_OpenItem, 3191, Main.rand.Next(1, 3));
		}
		if (Main.rand.Next(20) == 0)
		{
			QuickSpawnItem(itemSource_OpenItem, 2895);
		}
	}

	public void OpenOyster(int sourceItemType)
	{
		IEntitySource itemSource_OpenItem = GetItemSource_OpenItem(sourceItemType);
		if (Main.rand.Next(5) == 0)
		{
			if (Main.rand.Next(15) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 4414);
			}
			else if (Main.rand.Next(3) == 0)
			{
				QuickSpawnItem(itemSource_OpenItem, 4413);
			}
			else
			{
				QuickSpawnItem(itemSource_OpenItem, 4412);
			}
		}
		QuickSpawnItem(itemSource_OpenItem, 4411);
	}

	public void OpenGoodieBag(int itemType)
	{
		IEntitySource itemSource_OpenItem = GetItemSource_OpenItem(itemType);
		if (Main.rand.Next(150) == 0)
		{
			int number = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1810);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number, 1f);
			}
			return;
		}
		if (Main.rand.Next(150) == 0)
		{
			int number2 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1800);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number2, 1f);
			}
			return;
		}
		if (Main.rand.Next(4) == 0)
		{
			int number3 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1809, Main.rand.Next(10, 41));
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number3, 1f);
			}
			return;
		}
		if (Main.rand.Next(10) == 0)
		{
			int number4 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, Main.rand.Next(1846, 1851));
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number4, 1f);
			}
			return;
		}
		switch (Main.rand.Next(19))
		{
		case 0:
		{
			int number6 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1749);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number6, 1f);
			}
			number6 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1750);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number6, 1f);
			}
			number6 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1751);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number6, 1f);
			}
			break;
		}
		case 1:
		{
			int number17 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1746);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number17, 1f);
			}
			number17 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1747);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number17, 1f);
			}
			number17 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1748);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number17, 1f);
			}
			break;
		}
		case 2:
		{
			int number18 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1752);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number18, 1f);
			}
			number18 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1753);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number18, 1f);
			}
			break;
		}
		case 3:
		{
			int number19 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1767);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number19, 1f);
			}
			number19 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1768);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number19, 1f);
			}
			number19 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1769);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number19, 1f);
			}
			break;
		}
		case 4:
		{
			int number11 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1770);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number11, 1f);
			}
			number11 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1771);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number11, 1f);
			}
			break;
		}
		case 5:
		{
			int number8 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1772);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number8, 1f);
			}
			number8 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1773);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number8, 1f);
			}
			break;
		}
		case 6:
		{
			int number22 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1754);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number22, 1f);
			}
			number22 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1755);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number22, 1f);
			}
			number22 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1756);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number22, 1f);
			}
			break;
		}
		case 7:
		{
			int number10 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1757);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number10, 1f);
			}
			number10 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1758);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number10, 1f);
			}
			number10 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1759);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number10, 1f);
			}
			break;
		}
		case 8:
		{
			int number12 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1760);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number12, 1f);
			}
			number12 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1761);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number12, 1f);
			}
			number12 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1762);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number12, 1f);
			}
			break;
		}
		case 9:
		{
			int number20 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1763);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number20, 1f);
			}
			number20 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1764);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number20, 1f);
			}
			number20 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1765);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number20, 1f);
			}
			break;
		}
		case 10:
		{
			int number14 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1766);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number14, 1f);
			}
			number14 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1775);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number14, 1f);
			}
			number14 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1776);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number14, 1f);
			}
			break;
		}
		case 11:
		{
			int number7 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1777);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number7, 1f);
			}
			number7 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1778);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number7, 1f);
			}
			break;
		}
		case 12:
		{
			int number16 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1779);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number16, 1f);
			}
			number16 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1780);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number16, 1f);
			}
			number16 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1781);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number16, 1f);
			}
			break;
		}
		case 13:
		{
			int number13 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1819);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number13, 1f);
			}
			number13 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1820);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number13, 1f);
			}
			break;
		}
		case 14:
		{
			int number23 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1821);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number23, 1f);
			}
			number23 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1822);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number23, 1f);
			}
			number23 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1823);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number23, 1f);
			}
			break;
		}
		case 15:
		{
			int number21 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1824);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number21, 1f);
			}
			break;
		}
		case 16:
		{
			int number15 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1838);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number15, 1f);
			}
			number15 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1839);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number15, 1f);
			}
			number15 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1840);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number15, 1f);
			}
			break;
		}
		case 17:
		{
			int number9 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1841);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number9, 1f);
			}
			number9 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1842);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number9, 1f);
			}
			number9 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1843);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number9, 1f);
			}
			break;
		}
		case 18:
		{
			int number5 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1851);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number5, 1f);
			}
			number5 = Item.NewItem(itemSource_OpenItem, (int)position.X, (int)position.Y, width, height, 1852);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number5, 1f);
			}
			break;
		}
		}
	}

	public void UpdateDyes()
	{
		cShieldFallback = -1;
		cHead = (cBody = (cLegs = (cHandOn = (cHandOff = (cBack = (cFront = (cShoe = (cWaist = (cShield = (cNeck = (cFace = (cFaceHead = (cFaceFlower = (cBalloon = (cBalloon = (cWings = (cCarpet = (cFloatingTube = (cBackpack = (cTail = 0))))))))))))))))))));
		cGrapple = (cMount = (cMinecart = (cPet = (cLight = (cYorai = (cPortableStool = (cUnicornHorn = (cAngelHalo = (cBeard = (cMinion = (cLeinShampoo = (cFlameWaker = 0))))))))))));
		skinDyePacked = 0;
		cHead = dye[0].dye;
		cBody = dye[1].dye;
		cLegs = dye[2].dye;
		if (wearsRobe)
		{
			cLegs = cBody;
		}
		cPet = miscDyes[0].dye;
		cLight = miscDyes[1].dye;
		cMinecart = miscDyes[2].dye;
		cMount = miscDyes[3].dye;
		cGrapple = miscDyes[4].dye;
		for (int i = 0; i < 20; i++)
		{
			if (IsItemSlotUnlockedAndUsable(i))
			{
				int num = i % 10;
				UpdateItemDye(i < 10, hideVisibleAccessory[num], armor[i], dye[num]);
			}
		}
		cYorai = cPet;
	}

	private void UpdateItemDye(bool isNotInVanitySlot, bool isSetToHidden, Item armorItem, Item dyeItem)
	{
		if (armorItem.IsAir)
		{
			return;
		}
		bool num = armorItem.wingSlot > 0 || armorItem.type == 934 || armorItem.type == 4341 || armorItem.type == 5126 || armorItem.type == 4563 || armorItem.type == 1987;
		bool flag = isNotInVanitySlot && isSetToHidden;
		if (armorItem.shieldSlot > 0 && armorItem.shieldSlot < ArmorIDs.Shield.Count && (cShieldFallback == -1 || !flag))
		{
			cShieldFallback = dyeItem.dye;
		}
		if (!num && flag)
		{
			return;
		}
		if (armorItem.handOnSlot > 0 && armorItem.handOnSlot < ArmorIDs.HandOn.Count)
		{
			cHandOn = dyeItem.dye;
		}
		if (armorItem.handOffSlot > 0 && armorItem.handOffSlot < ArmorIDs.HandOff.Count)
		{
			cHandOff = dyeItem.dye;
		}
		if (armorItem.backSlot > 0 && armorItem.backSlot < ArmorIDs.Back.Count)
		{
			if (ArmorIDs.Back.Sets.DrawInBackpackLayer[armorItem.backSlot])
			{
				cBackpack = dyeItem.dye;
			}
			else if (ArmorIDs.Back.Sets.DrawInTailLayer[armorItem.backSlot])
			{
				cTail = dyeItem.dye;
			}
			else
			{
				cBack = dyeItem.dye;
			}
		}
		if (armorItem.frontSlot > 0 && armorItem.frontSlot < ArmorIDs.Front.Count)
		{
			cFront = dyeItem.dye;
		}
		if (armorItem.shoeSlot > 0 && armorItem.shoeSlot < ArmorIDs.Shoe.Count)
		{
			if (armorItem.type == 4822 || armorItem.type == 4874)
			{
				cFlameWaker = dyeItem.dye;
			}
			else
			{
				cShoe = dyeItem.dye;
			}
		}
		if (armorItem.waistSlot > 0 && armorItem.waistSlot < ArmorIDs.Waist.Count)
		{
			cWaist = dyeItem.dye;
		}
		if (armorItem.shieldSlot > 0 && armorItem.shieldSlot < ArmorIDs.Shield.Count)
		{
			cShield = dyeItem.dye;
		}
		if (armorItem.neckSlot > 0 && armorItem.neckSlot < ArmorIDs.Neck.Count)
		{
			cNeck = dyeItem.dye;
		}
		if (armorItem.faceSlot > 0 && armorItem.faceSlot < ArmorIDs.Face.Count)
		{
			if (ArmorIDs.Face.Sets.DrawInFaceHeadLayer[armorItem.faceSlot])
			{
				cFaceHead = dyeItem.dye;
			}
			else if (ArmorIDs.Face.Sets.DrawInFaceFlowerLayer[armorItem.faceSlot])
			{
				cFaceFlower = dyeItem.dye;
			}
			else
			{
				cFace = dyeItem.dye;
			}
		}
		if (armorItem.beardSlot > 0 && armorItem.beardSlot < ArmorIDs.Beard.Count)
		{
			cBeard = dyeItem.dye;
		}
		if (armorItem.balloonSlot > 0 && armorItem.balloonSlot < ArmorIDs.Balloon.Count)
		{
			if (ArmorIDs.Balloon.Sets.DrawInFrontOfBackArmLayer[armorItem.balloonSlot])
			{
				cBalloonFront = dyeItem.dye;
			}
			else
			{
				cBalloon = dyeItem.dye;
			}
		}
		if (armorItem.wingSlot > 0 && armorItem.wingSlot < ArmorIDs.Wing.Count)
		{
			cWings = dyeItem.dye;
		}
		if (armorItem.type == 934)
		{
			cCarpet = dyeItem.dye;
		}
		if (armorItem.type == 4404)
		{
			cFloatingTube = dyeItem.dye;
		}
		if (armorItem.type == 4341 || armorItem.type == 5126)
		{
			cPortableStool = dyeItem.dye;
		}
		if (armorItem.type == 4563)
		{
			cUnicornHorn = dyeItem.dye;
		}
		if (armorItem.type == 1987)
		{
			cAngelHalo = dyeItem.dye;
		}
		if (armorItem.type == 4762)
		{
			cMinion = dyeItem.dye;
		}
		if (armorItem.type == 3929)
		{
			cLeinShampoo = dyeItem.dye;
		}
	}

	public int ArmorSetDye()
	{
		return Main.rand.Next(3) switch
		{
			0 => cHead, 
			1 => cBody, 
			2 => cLegs, 
			_ => cBody, 
		};
	}

	public IEntitySource GetProjectileSource_Buff(int buffIndex)
	{
		int buffId = buffType[buffIndex];
		return new EntitySource_Buff(this, buffId, buffIndex);
	}

	public IEntitySource GetProjectileSource_Item(Item item)
	{
		return new EntitySource_ItemUse(this, item);
	}

	public IEntitySource GetItemSource_OpenItem(int itemType)
	{
		return new EntitySource_ItemOpen(this, itemType);
	}

	public IEntitySource GetItemSource_Death()
	{
		return new EntitySource_ByItemSourceId(this, 3);
	}

	public IEntitySource GetItemSource_Misc(int itemSourceId)
	{
		return new EntitySource_ByItemSourceId(this, itemSourceId);
	}

	public IEntitySource GetProjectileSource_Item_WithPotentialAmmo(Item item, int ammoItemId)
	{
		return new EntitySource_ItemUse_WithAmmo(this, item, ammoItemId);
	}

	public IEntitySource GetProjectileSource_SetBonus(int projectileSourceId)
	{
		return new EntitySource_ByProjectileSourceId(projectileSourceId);
	}

	public IEntitySource GetProjectileSource_OnHit(Entity victim, int projectileSourceId)
	{
		return new EntitySource_OnHit_ByProjectileSourceID(this, victim, projectileSourceId);
	}

	public IEntitySource GetProjectileSource_OnHurt(Entity attacker, int projectileSourceId)
	{
		return new EntitySource_OnHit_ByProjectileSourceID(attacker, this, projectileSourceId);
	}

	public IEntitySource GetProjectileSource_Accessory(Item item)
	{
		return new EntitySource_ItemUse(this, item);
	}

	public IEntitySource GetProjectileSource_Misc(int projectileSourceId)
	{
		return new EntitySource_ByProjectileSourceId(projectileSourceId);
	}

	public IEntitySource GetProjectileSource_TileInteraction(int tileCoordsX, int tileCoordsY)
	{
		return new EntitySource_TileInteraction(this, tileCoordsX, tileCoordsY);
	}

	public IEntitySource GetItemSource_TileInteraction(int tileCoordsX, int tileCoordsY)
	{
		return new EntitySource_TileInteraction(this, tileCoordsX, tileCoordsY);
	}

	public IEntitySource GetNPCSource_TileInteraction(int tileCoordsX, int tileCoordsY)
	{
		return new EntitySource_TileInteraction(this, tileCoordsX, tileCoordsY);
	}

	public IEntitySource GetItemSource_OnHit(Entity victim, int itemSourceId)
	{
		return new EntitySource_OnHit_ByItemSourceID(this, victim, itemSourceId);
	}

	public void UpdateBuffs(int i)
	{
		if (soulDrain > 0 && whoAmI == Main.myPlayer)
		{
			AddBuff(151, 2);
		}
		if (Main.dontStarveWorld)
		{
			UpdateStarvingState(withEmote: true);
		}
		for (int j = 0; j < maxBuffs; j++)
		{
			if (buffType[j] <= 0 || buffTime[j] <= 0)
			{
				continue;
			}
			if (whoAmI == Main.myPlayer && !BuffID.Sets.TimeLeftDoesNotDecrease[buffType[j]])
			{
				buffTime[j]--;
			}
			if (buffType[j] == 1)
			{
				lavaImmune = true;
				fireWalk = true;
				buffImmune[24] = true;
			}
			else if (BuffID.Sets.BasicMountData[buffType[j]] != null)
			{
				BuffID.Sets.BuffMountData buffMountData = BuffID.Sets.BasicMountData[buffType[j]];
				mount.SetMount(buffMountData.mountID, this, buffMountData.faceLeft);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 158)
			{
				manaRegenDelayBonus += 0.5f;
				manaRegenBonus += 10;
			}
			else if (buffType[j] == 159 && inventory[selectedItem].melee)
			{
				armorPenetration += 12;
			}
			else if (buffType[j] == 192)
			{
				pickSpeed -= 0.2f;
				moveSpeed += 0.2f;
			}
			else if (buffType[j] == 321)
			{
				int num = 10;
				meleeCrit += num;
				rangedCrit += num;
				magicCrit += num;
				minionDamage += (float)num / 100f;
			}
			else if (buffType[j] == 2)
			{
				lifeRegen += 4;
			}
			else if (buffType[j] == 3)
			{
				moveSpeed += 0.25f;
			}
			else if (buffType[j] == 4)
			{
				gills = true;
			}
			else if (buffType[j] == 5)
			{
				statDefense += 8;
			}
			else if (buffType[j] == 6)
			{
				manaRegenBuff = true;
			}
			else if (buffType[j] == 7)
			{
				magicDamage += 0.2f;
			}
			else if (buffType[j] == 8)
			{
				slowFall = true;
			}
			else if (buffType[j] == 9)
			{
				findTreasure = true;
			}
			else if (buffType[j] == 343)
			{
				biomeSight = true;
			}
			else if (buffType[j] == 10)
			{
				invis = true;
			}
			else if (buffType[j] == 11)
			{
				Lighting.AddLight((int)(position.X + (float)(width / 2)) / 16, (int)(position.Y + (float)(height / 2)) / 16, 0.8f, 0.95f, 1f);
			}
			else if (buffType[j] == 12)
			{
				nightVision = true;
			}
			else if (buffType[j] == 13)
			{
				enemySpawns = true;
			}
			else if (buffType[j] == 14)
			{
				if (thorns < 1f)
				{
					thorns = 1f;
				}
			}
			else if (buffType[j] == 15)
			{
				waterWalk = true;
			}
			else if (buffType[j] == 16)
			{
				archery = true;
			}
			else if (buffType[j] == 17)
			{
				detectCreature = true;
			}
			else if (buffType[j] == 18)
			{
				gravControl = true;
			}
			else if (buffType[j] == 30)
			{
				bleed = true;
			}
			else if (buffType[j] == 31)
			{
				confused = true;
			}
			else if (buffType[j] == 32)
			{
				slow = true;
			}
			else if (buffType[j] == 35)
			{
				silence = true;
			}
			else if (buffType[j] == 160)
			{
				dazed = true;
			}
			else if (buffType[j] == 46)
			{
				chilled = true;
			}
			else if (buffType[j] == 47)
			{
				frozen = true;
			}
			else if (buffType[j] == 156)
			{
				stoned = true;
			}
			else if (buffType[j] == 69)
			{
				ichor = true;
				statDefense -= 15;
			}
			else if (buffType[j] == 36)
			{
				brokenArmor = true;
			}
			else if (buffType[j] == 48)
			{
				honey = true;
			}
			else if (buffType[j] == 59)
			{
				shadowDodge = true;
			}
			else if (buffType[j] == 93)
			{
				ammoBox = true;
			}
			else if (buffType[j] == 58)
			{
				palladiumRegen = true;
			}
			else if (buffType[j] == 306)
			{
				hasTitaniumStormBuff = true;
			}
			else if (buffType[j] == 88)
			{
				chaosState = true;
			}
			else if (buffType[j] == 215)
			{
				statDefense += 5;
			}
			else if (buffType[j] == 311)
			{
				summonerWeaponSpeedBonus += 0.35f;
			}
			else if (buffType[j] == 308)
			{
				summonerWeaponSpeedBonus += 0.25f;
			}
			else if (buffType[j] == 314)
			{
				summonerWeaponSpeedBonus += 0.12f;
			}
			else if (buffType[j] == 312)
			{
				coolWhipBuff = true;
			}
			else if (buffType[j] == 63)
			{
				moveSpeed += 1f;
			}
			else if (buffType[j] == 104)
			{
				pickSpeed -= 0.25f;
			}
			else if (buffType[j] == 105)
			{
				lifeMagnet = true;
			}
			else if (buffType[j] == 106)
			{
				calmed = true;
			}
			else if (buffType[j] == 121)
			{
				fishingSkill += 15;
			}
			else if (buffType[j] == 122)
			{
				sonarPotion = true;
			}
			else if (buffType[j] == 123)
			{
				cratePotion = true;
			}
			else if (buffType[j] == 107)
			{
				tileSpeed += 0.25f;
				wallSpeed += 0.25f;
				blockRange++;
			}
			else if (buffType[j] == 108)
			{
				kbBuff = true;
			}
			else if (buffType[j] == 109)
			{
				ignoreWater = true;
				accFlipper = true;
			}
			else if (buffType[j] == 110)
			{
				maxMinions++;
			}
			else if (buffType[j] == 150)
			{
				maxMinions++;
			}
			else if (buffType[j] == 348)
			{
				maxTurrets++;
			}
			else if (buffType[j] == 111)
			{
				dangerSense = true;
			}
			else if (buffType[j] == 112)
			{
				ammoPotion = true;
			}
			else if (buffType[j] == 113)
			{
				lifeForce = true;
				statLifeMax2 += statLifeMax / 5 / 20 * 20;
			}
			else if (buffType[j] == 114)
			{
				endurance += 0.1f;
			}
			else if (buffType[j] == 115)
			{
				meleeCrit += 10;
				rangedCrit += 10;
				magicCrit += 10;
			}
			else if (buffType[j] == 116)
			{
				inferno = true;
				Lighting.AddLight((int)(base.Center.X / 16f), (int)(base.Center.Y / 16f), 0.65f, 0.4f, 0.1f);
				int num2 = 323;
				float num3 = 200f;
				bool flag = infernoCounter % 60 == 0;
				int damage = 20;
				if (whoAmI != Main.myPlayer)
				{
					continue;
				}
				for (int k = 0; k < 200; k++)
				{
					NPC nPC = Main.npc[k];
					if (nPC.active && !nPC.friendly && nPC.damage > 0 && !nPC.dontTakeDamage && !nPC.buffImmune[num2] && CanNPCBeHitByPlayerOrPlayerProjectile(nPC) && Vector2.Distance(base.Center, nPC.Center) <= num3)
					{
						if (nPC.FindBuffIndex(num2) == -1)
						{
							nPC.AddBuff(num2, 120);
						}
						if (flag)
						{
							ApplyDamageToNPC(nPC, damage, 0f, 0, crit: false);
						}
					}
				}
				if (!hostile)
				{
					continue;
				}
				for (int l = 0; l < 255; l++)
				{
					Player player = Main.player[l];
					if (player == this || !player.active || player.dead || !player.hostile || player.buffImmune[num2] || (player.team == team && player.team != 0) || !(Vector2.Distance(base.Center, player.Center) <= num3))
					{
						continue;
					}
					if (player.FindBuffIndex(num2) == -1)
					{
						player.AddBuff(num2, 120);
					}
					if (flag)
					{
						player.Hurt(PlayerDeathReason.LegacyEmpty(), damage, 0, pvp: true);
						if (Main.netMode != 0)
						{
							PlayerDeathReason reason = PlayerDeathReason.ByOther(16);
							NetMessage.SendPlayerHurt(l, reason, damage, 0, critical: false, pvp: true, -1);
						}
					}
				}
			}
			else if (buffType[j] == 117)
			{
				meleeDamage += 0.1f;
				rangedDamage += 0.1f;
				magicDamage += 0.1f;
				minionDamage += 0.1f;
			}
			else if (buffType[j] == 119)
			{
				loveStruck = true;
			}
			else if (buffType[j] == 120)
			{
				stinky = true;
			}
			else if (buffType[j] == 124)
			{
				resistCold = true;
			}
			else if (buffType[j] == 257)
			{
				if (Main.myPlayer == whoAmI)
				{
					if (buffTime[j] > 36000)
					{
						luckPotion = 3;
					}
					else if (buffTime[j] > 18000)
					{
						luckPotion = 2;
					}
					else
					{
						luckPotion = 1;
					}
				}
			}
			else if (buffType[j] == 165)
			{
				lifeRegen += 6;
				statDefense += 8;
				dryadWard = true;
				if (thorns < 1f)
				{
					thorns += 0.5f;
				}
			}
			else if (buffType[j] == 144)
			{
				electrified = true;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 0.8f, 1.1f);
			}
			else if (buffType[j] == 94)
			{
				manaSick = true;
				manaSickReduction = manaSickLessDmg * ((float)buffTime[j] / (float)manaSickTime);
			}
			else if (buffType[j] >= 95 && buffType[j] <= 97)
			{
				buffTime[j] = 5;
				int num4 = (byte)(1 + buffType[j] - 95);
				if (beetleOrbs > 0 && beetleOrbs != num4)
				{
					if (beetleOrbs > num4)
					{
						DelBuff(j);
						j--;
					}
					else
					{
						for (int m = 0; m < maxBuffs; m++)
						{
							if (buffType[m] >= 95 && buffType[m] <= 95 + num4 - 1)
							{
								DelBuff(m);
								m--;
							}
						}
					}
				}
				beetleOrbs = num4;
				if (!beetleDefense)
				{
					beetleOrbs = 0;
					DelBuff(j);
					j--;
				}
				else
				{
					beetleBuff = true;
				}
			}
			else if (buffType[j] >= 170 && buffType[j] <= 172)
			{
				buffTime[j] = 5;
				int num5 = (byte)(1 + buffType[j] - 170);
				if (solarShields > 0 && solarShields != num5)
				{
					if (solarShields > num5)
					{
						DelBuff(j);
						j--;
					}
					else
					{
						for (int n = 0; n < maxBuffs; n++)
						{
							if (buffType[n] >= 170 && buffType[n] <= 170 + num5 - 1)
							{
								DelBuff(n);
								n--;
							}
						}
					}
				}
				solarShields = num5;
				if (!setSolar)
				{
					solarShields = 0;
					DelBuff(j);
					j--;
				}
			}
			else if (buffType[j] >= 98 && buffType[j] <= 100)
			{
				int num6 = (byte)(1 + buffType[j] - 98);
				if (beetleOrbs > 0 && beetleOrbs != num6)
				{
					if (beetleOrbs > num6)
					{
						DelBuff(j);
						j--;
					}
					else
					{
						for (int num7 = 0; num7 < maxBuffs; num7++)
						{
							if (buffType[num7] >= 98 && buffType[num7] <= 98 + num6 - 1)
							{
								DelBuff(num7);
								num7--;
							}
						}
					}
				}
				beetleOrbs = num6;
				meleeDamage += 0.1f * (float)beetleOrbs;
				meleeSpeed += 0.1f * (float)beetleOrbs;
				if (!beetleOffense)
				{
					beetleOrbs = 0;
					DelBuff(j);
					j--;
				}
				else
				{
					beetleBuff = true;
				}
			}
			else if (buffType[j] >= 176 && buffType[j] <= 178)
			{
				int num8 = nebulaLevelMana;
				int num9 = (byte)(1 + buffType[j] - 176);
				if (num8 > 0 && num8 != num9)
				{
					if (num8 > num9)
					{
						DelBuff(j);
						j--;
					}
					else
					{
						for (int num10 = 0; num10 < maxBuffs; num10++)
						{
							if (buffType[num10] >= 176 && buffType[num10] <= 178 + num9 - 1)
							{
								DelBuff(num10);
								num10--;
							}
						}
					}
				}
				nebulaLevelMana = num9;
				if (buffTime[j] == 2 && nebulaLevelMana > 1)
				{
					nebulaLevelMana--;
					buffType[j]--;
					buffTime[j] = 480;
				}
			}
			else if (buffType[j] >= 173 && buffType[j] <= 175)
			{
				int num11 = nebulaLevelLife;
				int num12 = (byte)(1 + buffType[j] - 173);
				if (num11 > 0 && num11 != num12)
				{
					if (num11 > num12)
					{
						DelBuff(j);
						j--;
					}
					else
					{
						for (int num13 = 0; num13 < maxBuffs; num13++)
						{
							if (buffType[num13] >= 173 && buffType[num13] <= 175 + num12 - 1)
							{
								DelBuff(num13);
								num13--;
							}
						}
					}
				}
				nebulaLevelLife = num12;
				if (buffTime[j] == 2 && nebulaLevelLife > 1)
				{
					nebulaLevelLife--;
					buffType[j]--;
					buffTime[j] = 480;
				}
				lifeRegen += 6 * nebulaLevelLife;
			}
			else if (buffType[j] >= 179 && buffType[j] <= 181)
			{
				int num14 = nebulaLevelDamage;
				int num15 = (byte)(1 + buffType[j] - 179);
				if (num14 > 0 && num14 != num15)
				{
					if (num14 > num15)
					{
						DelBuff(j);
						j--;
					}
					else
					{
						for (int num16 = 0; num16 < maxBuffs; num16++)
						{
							if (buffType[num16] >= 179 && buffType[num16] <= 181 + num15 - 1)
							{
								DelBuff(num16);
								num16--;
							}
						}
					}
				}
				nebulaLevelDamage = num15;
				if (buffTime[j] == 2 && nebulaLevelDamage > 1)
				{
					nebulaLevelDamage--;
					buffType[j]--;
					buffTime[j] = 480;
				}
				float num17 = 0.15f * (float)nebulaLevelDamage;
				meleeDamage += num17;
				rangedDamage += num17;
				magicDamage += num17;
				minionDamage += num17;
			}
			else if (buffType[j] == 62)
			{
				if ((double)statLife <= (double)statLifeMax2 * 0.5)
				{
					Lighting.AddLight((int)(base.Center.X / 16f), (int)(base.Center.Y / 16f), 0.1f, 0.2f, 0.45f);
					iceBarrier = true;
					endurance += 0.25f;
					iceBarrierFrameCounter++;
					if (iceBarrierFrameCounter > 2)
					{
						iceBarrierFrameCounter = 0;
						iceBarrierFrame++;
						if (iceBarrierFrame >= 12)
						{
							iceBarrierFrame = 0;
						}
					}
				}
				else
				{
					DelBuff(j);
					j--;
				}
			}
			else if (buffType[j] == 49)
			{
				for (int num18 = 191; num18 <= 194; num18++)
				{
					if (ownedProjectileCounts[num18] > 0)
					{
						pygmy = true;
					}
				}
				if (!pygmy)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 83)
			{
				if (ownedProjectileCounts[317] > 0)
				{
					raven = true;
				}
				if (!raven)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 64)
			{
				if (ownedProjectileCounts[266] > 0)
				{
					slime = true;
				}
				if (!slime)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 125)
			{
				if (ownedProjectileCounts[373] > 0)
				{
					hornetMinion = true;
				}
				if (!hornetMinion)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 126)
			{
				if (ownedProjectileCounts[375] > 0)
				{
					impMinion = true;
				}
				if (!impMinion)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 133)
			{
				if (ownedProjectileCounts[390] > 0 || ownedProjectileCounts[391] > 0 || ownedProjectileCounts[392] > 0)
				{
					spiderMinion = true;
				}
				if (!spiderMinion)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 134)
			{
				if (ownedProjectileCounts[387] > 0 || ownedProjectileCounts[388] > 0)
				{
					twinsMinion = true;
				}
				if (!twinsMinion)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 135)
			{
				if (ownedProjectileCounts[393] > 0 || ownedProjectileCounts[394] > 0 || ownedProjectileCounts[395] > 0)
				{
					pirateMinion = true;
				}
				if (!pirateMinion)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 214)
			{
				if (ownedProjectileCounts[758] > 0)
				{
					vampireFrog = true;
				}
				if (!vampireFrog)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 139)
			{
				if (ownedProjectileCounts[407] > 0)
				{
					sharknadoMinion = true;
				}
				if (!sharknadoMinion)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 140)
			{
				if (ownedProjectileCounts[423] > 0)
				{
					UFOMinion = true;
				}
				if (!UFOMinion)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 182)
			{
				if (ownedProjectileCounts[613] > 0)
				{
					stardustMinion = true;
				}
				if (!stardustMinion)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 213)
			{
				if (ownedProjectileCounts[755] > 0)
				{
					batsOfLight = true;
				}
				if (!batsOfLight)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 216)
			{
				bool flag2 = true;
				if (ownedProjectileCounts[759] > 0)
				{
					babyBird = true;
				}
				else if (whoAmI == Main.myPlayer)
				{
					if (numMinions < maxMinions)
					{
						int num19 = FindItem(4281);
						if (num19 != -1)
						{
							Item item = inventory[num19];
							int num20 = Projectile.NewProjectile(GetProjectileSource_Item(item), base.Top, Vector2.Zero, item.shoot, item.damage, item.knockBack, whoAmI);
							Main.projectile[num20].originalDamage = item.damage;
							babyBird = true;
						}
					}
					if (!babyBird)
					{
						DelBuff(j);
						j--;
						flag2 = false;
					}
				}
				if (flag2)
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 325)
			{
				if (ownedProjectileCounts[951] > 0)
				{
					flinxMinion = true;
				}
				if (!flinxMinion)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 335)
			{
				if (ownedProjectileCounts[970] > 0)
				{
					abigailMinion = true;
				}
				if (!abigailMinion)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
				if (whoAmI == Main.myPlayer)
				{
					UpdateAbigailStatus();
				}
			}
			else if (buffType[j] == 263)
			{
				if (ownedProjectileCounts[831] > 0)
				{
					stormTiger = true;
				}
				if (!stormTiger)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
				if (whoAmI == Main.myPlayer)
				{
					UpdateStormTigerStatus();
				}
			}
			else if (buffType[j] == 271)
			{
				if (ownedProjectileCounts[864] > 0)
				{
					smolstar = true;
				}
				if (!smolstar)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 322)
			{
				if (ownedProjectileCounts[946] > 0)
				{
					empressBlade = true;
				}
				if (!empressBlade)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 187)
			{
				if (ownedProjectileCounts[623] > 0)
				{
					stardustGuardian = true;
				}
				if (!stardustGuardian)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 188)
			{
				if (ownedProjectileCounts[625] > 0)
				{
					stardustDragon = true;
				}
				if (!stardustDragon)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 161)
			{
				if (ownedProjectileCounts[533] > 0)
				{
					DeadlySphereMinion = true;
				}
				if (!DeadlySphereMinion)
				{
					DelBuff(j);
					j--;
				}
				else
				{
					buffTime[j] = 18000;
				}
			}
			else if (buffType[j] == 90)
			{
				mount.SetMount(0, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 128)
			{
				mount.SetMount(1, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 129)
			{
				mount.SetMount(2, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 130)
			{
				mount.SetMount(3, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 131)
			{
				ignoreWater = true;
				accFlipper = true;
				mount.SetMount(4, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 132)
			{
				mount.SetMount(5, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 168)
			{
				ignoreWater = true;
				accFlipper = true;
				mount.SetMount(12, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 141)
			{
				mount.SetMount(7, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 142)
			{
				mount.SetMount(8, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 143)
			{
				mount.SetMount(9, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 162)
			{
				mount.SetMount(10, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 193)
			{
				mount.SetMount(14, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 212)
			{
				mount.SetMount(17, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 230)
			{
				mount.SetMount(23, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 265)
			{
				canFloatInWater = true;
				accFlipper = true;
				mount.SetMount(37, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 275)
			{
				mount.SetMount(40, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 276)
			{
				mount.SetMount(41, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 277)
			{
				mount.SetMount(42, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 278)
			{
				mount.SetMount(43, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 279)
			{
				ignoreWater = true;
				accFlipper = true;
				mount.SetMount(44, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 280)
			{
				mount.SetMount(45, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 281)
			{
				mount.SetMount(46, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 282)
			{
				mount.SetMount(47, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 283)
			{
				mount.SetMount(48, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 305)
			{
				ignoreWater = true;
				accFlipper = true;
				lavaImmune = true;
				mount.SetMount(49, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 318)
			{
				mount.SetMount(50, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 342)
			{
				mount.SetMount(52, this);
				buffTime[j] = 10;
			}
			else if (buffType[j] == 37)
			{
				if (Main.wofNPCIndex >= 0 && Main.npc[Main.wofNPCIndex].type == 113)
				{
					gross = true;
					buffTime[j] = 10;
				}
				else
				{
					DelBuff(j);
					j--;
				}
			}
			else if (buffType[j] == 38)
			{
				buffTime[j] = 10;
				tongued = true;
			}
			else if (buffType[j] == 146)
			{
				moveSpeed += 0.1f;
				moveSpeed *= 1.1f;
				sunflower = true;
			}
			else if (buffType[j] == 19)
			{
				buffTime[j] = 18000;
				lightOrb = true;
				bool flag3 = true;
				if (ownedProjectileCounts[18] > 0)
				{
					flag3 = false;
				}
				if (flag3 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 18, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 155)
			{
				buffTime[j] = 18000;
				crimsonHeart = true;
				bool flag4 = true;
				if (ownedProjectileCounts[500] > 0)
				{
					flag4 = false;
				}
				if (flag4 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 500, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 191)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref companionCube, 653);
			}
			else if (buffType[j] == 202)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagDD2Dragon, 701);
			}
			else if (buffType[j] == 217)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagUpbeatStar, 764);
			}
			else if (buffType[j] == 219)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagBabyShark, 774);
			}
			else if (buffType[j] == 258)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagLilHarpy, 815);
			}
			else if (buffType[j] == 259)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagFennecFox, 816);
			}
			else if (buffType[j] == 260)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagGlitteryButterfly, 817);
			}
			else if (buffType[j] == 261)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagBabyImp, 821);
			}
			else if (buffType[j] == 262)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagBabyRedPanda, 825);
			}
			else if (buffType[j] == 264)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagPlantero, 854);
			}
			else if (buffType[j] == 266)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagDynamiteKitten, 858);
			}
			else if (buffType[j] == 267)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagBabyWerewolf, 859);
			}
			else if (buffType[j] == 268)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagShadowMimic, 860);
			}
			else if (buffType[j] == 274)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagVoltBunny, 875);
			}
			else if (buffType[j] == 284)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagKingSlimePet, 881);
			}
			else if (buffType[j] == 285)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagEyeOfCthulhuPet, 882);
			}
			else if (buffType[j] == 286)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagEaterOfWorldsPet, 883);
			}
			else if (buffType[j] == 287)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagBrainOfCthulhuPet, 884);
			}
			else if (buffType[j] == 288)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagSkeletronPet, 885);
			}
			else if (buffType[j] == 289)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagQueenBeePet, 886);
			}
			else if (buffType[j] == 290)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagDestroyerPet, 887);
			}
			else if (buffType[j] == 291)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagTwinsPet, 888);
			}
			else if (buffType[j] == 292)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagSkeletronPrimePet, 889);
			}
			else if (buffType[j] == 293)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagPlanteraPet, 890);
			}
			else if (buffType[j] == 294)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagGolemPet, 891);
			}
			else if (buffType[j] == 295)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagDukeFishronPet, 892);
			}
			else if (buffType[j] == 296)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagLunaticCultistPet, 893);
			}
			else if (buffType[j] == 297)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagMoonLordPet, 894);
			}
			else if (buffType[j] == 298)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagFairyQueenPet, 895);
			}
			else if (buffType[j] == 299)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagPumpkingPet, 896);
			}
			else if (buffType[j] == 300)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagEverscreamPet, 897);
			}
			else if (buffType[j] == 301)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagIceQueenPet, 898);
			}
			else if (buffType[j] == 302)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagMartianPet, 899);
			}
			else if (buffType[j] == 303)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagDD2OgrePet, 900);
			}
			else if (buffType[j] == 304)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagDD2BetsyPet, 901);
			}
			else if (buffType[j] == 317)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagQueenSlimePet, 934);
			}
			else if (buffType[j] == 327)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagBerniePet, 956);
			}
			else if (buffType[j] == 328)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagGlommerPet, 957);
			}
			else if (buffType[j] == 329)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagDeerclopsPet, 958);
			}
			else if (buffType[j] == 330)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagPigPet, 959);
			}
			else if (buffType[j] == 331)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagChesterPet, 960);
			}
			else if (buffType[j] == 341)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagKingSlimePet, 881);
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagQueenSlimePet, 934);
			}
			else if (buffType[j] == 345)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagJunimoPet, 994);
			}
			else if (buffType[j] == 349)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagBlueChickenPet, 998);
			}
			else if (buffType[j] == 351)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagSpiffo, 1003);
			}
			else if (buffType[j] == 352)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagCaveling, 1004);
			}
			else if (buffType[j] == 354)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagDirtiestBlock, 1018);
			}
			else if (buffType[j] == 200)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagDD2Gato, 703);
			}
			else if (buffType[j] == 201)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagDD2Ghost, 702);
			}
			else if (buffType[j] == 218)
			{
				BuffHandle_SpawnPetIfNeededAndSetTime(j, ref petFlagSugarGlider, 765);
			}
			else if (buffType[j] == 190)
			{
				buffTime[j] = 18000;
				suspiciouslookingTentacle = true;
				bool flag5 = true;
				if (ownedProjectileCounts[650] > 0)
				{
					flag5 = false;
				}
				if (flag5 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 650, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 27 || buffType[j] == 101 || buffType[j] == 102)
			{
				buffTime[j] = 18000;
				bool flag6 = true;
				int num21 = 72;
				if (buffType[j] == 27)
				{
					blueFairy = true;
				}
				if (buffType[j] == 101)
				{
					num21 = 86;
					redFairy = true;
				}
				if (buffType[j] == 102)
				{
					num21 = 87;
					greenFairy = true;
				}
				if (head == 45 && body == 26 && legs == 25)
				{
					num21 = 72;
				}
				if (ownedProjectileCounts[num21] > 0)
				{
					flag6 = false;
				}
				if (flag6 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, num21, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 40)
			{
				buffTime[j] = 18000;
				bunny = true;
				bool flag7 = true;
				if (ownedProjectileCounts[111] > 0)
				{
					flag7 = false;
				}
				if (flag7 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 111, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 148)
			{
				rabid = true;
				if (Main.rand.Next(1200) == 0)
				{
					int num22 = Main.rand.Next(6);
					float num23 = (float)Main.rand.Next(60, 100) * 0.01f;
					switch (num22)
					{
					case 0:
						AddBuff(22, (int)(60f * num23 * 3f));
						break;
					case 1:
						AddBuff(23, (int)(60f * num23 * 0.75f));
						break;
					case 2:
						AddBuff(31, (int)(60f * num23 * 1.5f));
						break;
					case 3:
						AddBuff(32, (int)(60f * num23 * 3.5f));
						break;
					case 4:
						AddBuff(33, (int)(60f * num23 * 5f));
						break;
					case 5:
						AddBuff(35, (int)(60f * num23 * 1f));
						break;
					}
				}
				meleeDamage += 0.2f;
				magicDamage += 0.2f;
				rangedDamage += 0.2f;
				minionDamage += 0.2f;
			}
			else if (buffType[j] == 41)
			{
				buffTime[j] = 18000;
				penguin = true;
				bool flag8 = true;
				if (ownedProjectileCounts[112] > 0)
				{
					flag8 = false;
				}
				if (flag8 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 112, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 152)
			{
				buffTime[j] = 18000;
				magicLantern = true;
				if (ownedProjectileCounts[492] == 0 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 492, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 91)
			{
				buffTime[j] = 18000;
				puppy = true;
				bool flag9 = true;
				if (ownedProjectileCounts[334] > 0)
				{
					flag9 = false;
				}
				if (flag9 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 334, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 92)
			{
				buffTime[j] = 18000;
				grinch = true;
				bool flag10 = true;
				if (ownedProjectileCounts[353] > 0)
				{
					flag10 = false;
				}
				if (flag10 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 353, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 84)
			{
				buffTime[j] = 18000;
				blackCat = true;
				bool flag11 = true;
				if (ownedProjectileCounts[319] > 0)
				{
					flag11 = false;
				}
				if (flag11 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 319, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 61)
			{
				buffTime[j] = 18000;
				dino = true;
				bool flag12 = true;
				if (ownedProjectileCounts[236] > 0)
				{
					flag12 = false;
				}
				if (flag12 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 236, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 154)
			{
				buffTime[j] = 18000;
				babyFaceMonster = true;
				bool flag13 = true;
				if (ownedProjectileCounts[499] > 0)
				{
					flag13 = false;
				}
				if (flag13 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 499, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 65)
			{
				buffTime[j] = 18000;
				eyeSpring = true;
				bool flag14 = true;
				if (ownedProjectileCounts[268] > 0)
				{
					flag14 = false;
				}
				if (flag14 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 268, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 66)
			{
				buffTime[j] = 18000;
				snowman = true;
				bool flag15 = true;
				if (ownedProjectileCounts[269] > 0)
				{
					flag15 = false;
				}
				if (flag15 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 269, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 42)
			{
				buffTime[j] = 18000;
				turtle = true;
				bool flag16 = true;
				if (ownedProjectileCounts[127] > 0)
				{
					flag16 = false;
				}
				if (flag16 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 127, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 45)
			{
				buffTime[j] = 18000;
				eater = true;
				bool flag17 = true;
				if (ownedProjectileCounts[175] > 0)
				{
					flag17 = false;
				}
				if (flag17 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 175, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 50)
			{
				buffTime[j] = 18000;
				skeletron = true;
				bool flag18 = true;
				if (ownedProjectileCounts[197] > 0)
				{
					flag18 = false;
				}
				if (flag18 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 197, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 51)
			{
				buffTime[j] = 18000;
				hornet = true;
				bool flag19 = true;
				if (ownedProjectileCounts[198] > 0)
				{
					flag19 = false;
				}
				if (flag19 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 198, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 52)
			{
				buffTime[j] = 18000;
				tiki = true;
				bool flag20 = true;
				if (ownedProjectileCounts[199] > 0)
				{
					flag20 = false;
				}
				if (flag20 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 199, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 53)
			{
				buffTime[j] = 18000;
				lizard = true;
				bool flag21 = true;
				if (ownedProjectileCounts[200] > 0)
				{
					flag21 = false;
				}
				if (flag21 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 200, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 54)
			{
				buffTime[j] = 18000;
				parrot = true;
				bool flag22 = true;
				if (ownedProjectileCounts[208] > 0)
				{
					flag22 = false;
				}
				if (flag22 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 208, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 55)
			{
				buffTime[j] = 18000;
				truffle = true;
				bool flag23 = true;
				if (ownedProjectileCounts[209] > 0)
				{
					flag23 = false;
				}
				if (flag23 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 209, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 56)
			{
				buffTime[j] = 18000;
				sapling = true;
				bool flag24 = true;
				if (ownedProjectileCounts[210] > 0)
				{
					flag24 = false;
				}
				if (flag24 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 210, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 85)
			{
				buffTime[j] = 18000;
				cSapling = true;
				bool flag25 = true;
				if (ownedProjectileCounts[324] > 0)
				{
					flag25 = false;
				}
				if (flag25 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 324, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 81)
			{
				buffTime[j] = 18000;
				spider = true;
				bool flag26 = true;
				if (ownedProjectileCounts[313] > 0)
				{
					flag26 = false;
				}
				if (flag26 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 313, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 82)
			{
				buffTime[j] = 18000;
				squashling = true;
				bool flag27 = true;
				if (ownedProjectileCounts[314] > 0)
				{
					flag27 = false;
				}
				if (flag27 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 314, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 57)
			{
				buffTime[j] = 18000;
				wisp = true;
				bool flag28 = true;
				if (ownedProjectileCounts[211] > 0)
				{
					flag28 = false;
				}
				if (flag28 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 211, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 60)
			{
				buffTime[j] = 18000;
				crystalLeaf = true;
				bool flag29 = true;
				for (int num24 = 0; num24 < 1000; num24++)
				{
					if (Main.projectile[num24].active && Main.projectile[num24].owner == whoAmI && Main.projectile[num24].type == 226)
					{
						if (!flag29)
						{
							Main.projectile[num24].Kill();
						}
						flag29 = false;
					}
				}
				if (flag29 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 226, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 127)
			{
				buffTime[j] = 18000;
				zephyrfish = true;
				bool flag30 = true;
				if (ownedProjectileCounts[380] > 0)
				{
					flag30 = false;
				}
				if (flag30 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 380, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 136)
			{
				buffTime[j] = 18000;
				miniMinotaur = true;
				bool flag31 = true;
				if (ownedProjectileCounts[398] > 0)
				{
					flag31 = false;
				}
				if (flag31 && whoAmI == Main.myPlayer)
				{
					Projectile.NewProjectile(GetProjectileSource_Buff(j), position.X + (float)(width / 2), position.Y + (float)(height / 2), 0f, 0f, 398, 0, 0f, whoAmI);
				}
			}
			else if (buffType[j] == 70)
			{
				venom = true;
			}
			else if (buffType[j] == 20)
			{
				poisoned = true;
			}
			else if (buffType[j] == 21)
			{
				potionDelay = buffTime[j];
			}
			else if (buffType[j] == 22)
			{
				blind = true;
			}
			else if (buffType[j] == 80)
			{
				blackout = true;
			}
			else if (buffType[j] == 23)
			{
				noItems = true;
				cursed = true;
			}
			else if (buffType[j] == 24)
			{
				onFire = true;
			}
			else if (buffType[j] == 103)
			{
				dripping = true;
			}
			else if (buffType[j] == 137)
			{
				drippingSlime = true;
			}
			else if (buffType[j] == 320)
			{
				drippingSparkleSlime = true;
			}
			else if (buffType[j] == 67)
			{
				burned = true;
			}
			else if (buffType[j] == 68)
			{
				suffocating = true;
			}
			else if (buffType[j] == 39)
			{
				onFire2 = true;
			}
			else if (buffType[j] == 323)
			{
				onFire3 = true;
			}
			else if (buffType[j] == 44)
			{
				onFrostBurn = true;
			}
			else if (buffType[j] == 324)
			{
				onFrostBurn2 = true;
			}
			else if (buffType[j] == 353)
			{
				shimmering = true;
				frozen = true;
				fallStart = (int)(position.Y / 16f);
				if (Main.myPlayer != whoAmI)
				{
					continue;
				}
				if (position.Y / 16f > (float)Main.UnderworldLayer)
				{
					if (Main.myPlayer == whoAmI)
					{
						DelBuff(j);
					}
					continue;
				}
				if (shimmerWet)
				{
					buffTime[j] = 60;
					continue;
				}
				bool flag32 = false;
				for (int num25 = (int)(position.X / 16f); (float)num25 <= (position.X + (float)width) / 16f; num25++)
				{
					for (int num26 = (int)(position.Y / 16f); (float)num26 <= (position.Y + (float)height) / 16f; num26++)
					{
						if (WorldGen.SolidTile3(num25, num26))
						{
							flag32 = true;
						}
					}
				}
				if (flag32)
				{
					buffTime[j] = 6;
				}
				else
				{
					DelBuff(j);
				}
			}
			else if (buffType[j] == 163)
			{
				headcovered = true;
				bleed = true;
			}
			else if (buffType[j] == 164)
			{
				vortexDebuff = true;
			}
			else if (buffType[j] == 194)
			{
				windPushed = true;
			}
			else if (buffType[j] == 195)
			{
				witheredArmor = true;
			}
			else if (buffType[j] == 205)
			{
				ballistaPanic = true;
			}
			else if (buffType[j] == 196)
			{
				witheredWeapon = true;
			}
			else if (buffType[j] == 197)
			{
				slowOgreSpit = true;
			}
			else if (buffType[j] == 198)
			{
				parryDamageBuff = true;
			}
			else if (buffType[j] == 145)
			{
				moonLeech = true;
			}
			else if (buffType[j] == 149)
			{
				webbed = true;
				if (velocity.Y != 0f)
				{
					velocity = new Vector2(0f, 1E-06f);
				}
				else
				{
					velocity = Vector2.Zero;
				}
				jumpHeight = 0;
				gravity = 0f;
				moveSpeed = 0f;
				dash = 0;
				dashType = 0;
				noKnockback = true;
				RemoveAllGrapplingHooks();
			}
			else if (buffType[j] == 43)
			{
				defendedByPaladin = true;
			}
			else if (buffType[j] == 29)
			{
				magicCrit += 2;
				magicDamage += 0.05f;
				statManaMax2 += 20;
				manaCost -= 0.02f;
			}
			else if (buffType[j] == 28)
			{
				if (!Main.dayTime && wolfAcc && !merman)
				{
					lifeRegen++;
					wereWolf = true;
					meleeCrit += 2;
					meleeDamage += 0.051f;
					meleeSpeed += 0.051f;
					statDefense += 3;
					moveSpeed += 0.05f;
				}
				else
				{
					DelBuff(j);
					j--;
				}
			}
			else if (buffType[j] == 33)
			{
				meleeDamage -= 0.051f;
				meleeSpeed -= 0.051f;
				statDefense -= 4;
				moveSpeed -= 0.1f;
			}
			else if (buffType[j] == 25)
			{
				tipsy = true;
				statDefense -= 4;
				meleeCrit += 2;
				meleeDamage += 0.1f;
				meleeSpeed += 0.1f;
			}
			else if (buffType[j] == 26)
			{
				wellFed = true;
				statDefense += 2;
				meleeCrit += 2;
				meleeDamage += 0.05f;
				meleeSpeed += 0.05f;
				magicCrit += 2;
				magicDamage += 0.05f;
				rangedCrit += 2;
				rangedDamage += 0.05f;
				minionDamage += 0.05f;
				minionKB += 0.5f;
				moveSpeed += 0.2f;
				pickSpeed -= 0.05f;
			}
			else if (buffType[j] == 206)
			{
				wellFed = true;
				statDefense += 3;
				meleeCrit += 3;
				meleeDamage += 0.075f;
				meleeSpeed += 0.075f;
				magicCrit += 3;
				magicDamage += 0.075f;
				rangedCrit += 3;
				rangedDamage += 0.075f;
				minionDamage += 0.075f;
				minionKB += 0.75f;
				moveSpeed += 0.3f;
				pickSpeed -= 0.1f;
			}
			else if (buffType[j] == 207)
			{
				wellFed = true;
				statDefense += 4;
				meleeCrit += 4;
				meleeDamage += 0.1f;
				meleeSpeed += 0.1f;
				magicCrit += 4;
				magicDamage += 0.1f;
				rangedCrit += 4;
				rangedDamage += 0.1f;
				minionDamage += 0.1f;
				minionKB += 1f;
				moveSpeed += 0.4f;
				pickSpeed -= 0.15f;
			}
			else if (buffType[j] == 333)
			{
				hungry = true;
				statDefense -= 2;
				meleeCrit -= 2;
				meleeDamage -= 0.05f;
				meleeSpeed -= 0.05f;
				magicCrit -= 2;
				magicDamage -= 0.05f;
				rangedCrit -= 2;
				rangedDamage -= 0.05f;
				minionDamage -= 0.05f;
				minionKB -= 0.5f;
				pickSpeed += 0.05f;
			}
			else if (buffType[j] == 334)
			{
				starving = true;
				statDefense -= 4;
				meleeCrit -= 4;
				meleeDamage -= 0.1f;
				meleeSpeed -= 0.1f;
				magicCrit -= 4;
				magicDamage -= 0.1f;
				rangedCrit -= 4;
				rangedDamage -= 0.1f;
				minionDamage -= 0.1f;
				minionKB -= 1f;
				pickSpeed += 0.15f;
			}
			else if (buffType[j] == 336)
			{
				heartyMeal = true;
			}
			else if (buffType[j] == 71)
			{
				meleeEnchant = 1;
			}
			else if (buffType[j] == 73)
			{
				meleeEnchant = 2;
			}
			else if (buffType[j] == 74)
			{
				meleeEnchant = 3;
			}
			else if (buffType[j] == 75)
			{
				meleeEnchant = 4;
			}
			else if (buffType[j] == 76)
			{
				meleeEnchant = 5;
			}
			else if (buffType[j] == 77)
			{
				meleeEnchant = 6;
			}
			else if (buffType[j] == 78)
			{
				meleeEnchant = 7;
			}
			else if (buffType[j] == 79)
			{
				meleeEnchant = 8;
			}
		}
		UpdateHungerBuffs();
		if (whoAmI == Main.myPlayer && luckPotion != oldLuckPotion)
		{
			luckNeedsSync = true;
			oldLuckPotion = luckPotion;
		}
	}

	public void TryToResetHungerToNeutral()
	{
		bool flag = false;
		for (int i = 0; i < maxBuffs; i++)
		{
			if (buffType[i] > 0 && buffTime[i] > 0 && (buffType[i] == 332 || buffType[i] == 333 || buffType[i] == 334))
			{
				buffTime[i] = 0;
				flag = true;
			}
		}
		if (flag)
		{
			UpdateHungerBuffs();
		}
	}

	public void UpdateHungerBuffs()
	{
		for (int i = 0; i < maxBuffs; i++)
		{
			if (buffType[i] <= 0 || buffTime[i] <= 0)
			{
				continue;
			}
			if (buffType[i] == 332)
			{
				if (buffTime[i] <= 2 && whoAmI == Main.myPlayer)
				{
					if (Main.remixWorld && Main.dontStarveWorld)
					{
						AddBuff(333, 28800);
					}
					else
					{
						AddBuff(333, 18000);
					}
					EmoteBubble.MakeLocalPlayerEmote(147);
				}
				if (!Main.dontStarveWorld)
				{
					buffTime[i] = 0;
				}
			}
			else if (buffType[i] == 333)
			{
				if (buffTime[i] <= 2 && whoAmI == Main.myPlayer)
				{
					if (Main.remixWorld && Main.dontStarveWorld)
					{
						AddBuff(334, 5);
					}
					else
					{
						AddBuff(334, 5);
					}
					EmoteBubble.MakeLocalPlayerEmote(148);
				}
				if (!Main.dontStarveWorld)
				{
					buffTime[i] = 0;
				}
			}
			else if (buffType[i] == 334 && !Main.dontStarveWorld)
			{
				buffTime[i] = 0;
			}
		}
	}

	public void UpdateStarvingState(bool withEmote)
	{
		if (whoAmI != Main.myPlayer)
		{
			return;
		}
		bool flag = false;
		for (int i = 0; i < maxBuffs; i++)
		{
			if (buffTime[i] > 0 && BuffID.Sets.IsFedState[buffType[i]])
			{
				flag = true;
				break;
			}
		}
		if (!flag)
		{
			if (Main.remixWorld && Main.dontStarveWorld)
			{
				AddBuff(332, 28800);
			}
			else
			{
				AddBuff(332, 18000);
			}
			if (withEmote)
			{
				EmoteBubble.MakeLocalPlayerEmote(146);
			}
		}
	}

	private void UpdateProjectileCaches(int i)
	{
		for (int j = 0; j < 1000; j++)
		{
			if (!Main.projectile[j].active || Main.projectile[j].owner != i)
			{
				continue;
			}
			ownedProjectileCounts[Main.projectile[j].type]++;
			switch (Main.projectile[j].type)
			{
			case 831:
			{
				int originalDamage2 = Main.projectile[j].originalDamage;
				if (highestStormTigerGemOriginalDamage < originalDamage2)
				{
					highestStormTigerGemOriginalDamage = originalDamage2;
				}
				break;
			}
			case 970:
			{
				int originalDamage = Main.projectile[j].originalDamage;
				if (highestAbigailCounterOriginalDamage < originalDamage)
				{
					highestAbigailCounterOriginalDamage = originalDamage;
				}
				break;
			}
			}
		}
	}

	private void ResetProjectileCaches()
	{
		highestStormTigerGemOriginalDamage = 0;
		highestAbigailCounterOriginalDamage = 0;
		for (int i = 0; i < ownedProjectileCounts.Length; i++)
		{
			ownedProjectileCounts[i] = 0;
		}
	}

	public void BuffHandle_SpawnPetIfNeededAndSetTime(int buffIndex, ref bool petBool, int petProjID, int buffTimeToGive = 18000)
	{
		buffTime[buffIndex] = buffTimeToGive;
		BuffHandle_SpawnPetIfNeeded(ref petBool, petProjID, buffIndex);
	}

	public void BuffHandle_SpawnPetIfNeeded(ref bool petBool, int petProjID, int buffIndex)
	{
		petBool = true;
		bool flag = true;
		if (ownedProjectileCounts[petProjID] > 0)
		{
			flag = false;
		}
		Vector2 center = base.Center;
		if (buffType[buffIndex] == 341)
		{
			float num = 10f;
			if (petProjID == 934)
			{
				center += new Vector2(num * (float)direction, 0f);
			}
			else
			{
				center -= new Vector2(num * (float)direction, 0f);
			}
		}
		if (flag && whoAmI == Main.myPlayer)
		{
			Projectile.NewProjectile(GetProjectileSource_Buff(buffIndex), center.X, center.Y, 0f, 0f, petProjID, 0, 0f, whoAmI);
		}
	}

	private void UpdateAbigailStatus()
	{
		int num = 963;
		if (ownedProjectileCounts[970] < 1)
		{
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == whoAmI && projectile.type == num)
				{
					projectile.Kill();
				}
			}
		}
		else if (ownedProjectileCounts[num] < 1)
		{
			Projectile.NewProjectile(GetProjectileSource_Misc(14), base.Center, Vector2.Zero, num, 0, 0f, whoAmI);
		}
	}

	private void UpdateStormTigerStatus()
	{
		int num = GetDesiredStormTigerMinionRank() switch
		{
			1 => 833, 
			2 => 834, 
			3 => 835, 
			_ => -1, 
		};
		bool flag = false;
		if (num == -1)
		{
			flag = true;
		}
		for (int i = 0; i < ProjectileID.Sets.StormTigerIds.Length; i++)
		{
			int num2 = ProjectileID.Sets.StormTigerIds[i];
			if (num2 != num && ownedProjectileCounts[num2] >= 1)
			{
				flag = true;
				break;
			}
		}
		if (flag)
		{
			for (int j = 0; j < 1000; j++)
			{
				Projectile projectile = Main.projectile[j];
				if (projectile.active && projectile.owner == whoAmI && projectile.type != num && ProjectileID.Sets.StormTiger[projectile.type])
				{
					projectile.Kill();
				}
			}
		}
		else if (ownedProjectileCounts[num] < 1)
		{
			int num3 = Projectile.NewProjectile(GetProjectileSource_Misc(13), base.Center, Vector2.Zero, num, 0, 0f, whoAmI, 0f, 1f);
			Main.projectile[num3].localAI[0] = 60f;
		}
	}

	private int GetDesiredStormTigerMinionRank()
	{
		int result = 0;
		int num = ownedProjectileCounts[831];
		if (num > 0)
		{
			result = 1;
		}
		if (num > 3)
		{
			result = 2;
		}
		if (num > 6)
		{
			result = 3;
		}
		return result;
	}

	public void Counterweight(Vector2 hitPos, int dmg, float kb)
	{
		if (!yoyoGlove && counterWeight <= 0)
		{
			return;
		}
		int num = -1;
		int num2 = 0;
		int num3 = 0;
		for (int i = 0; i < 1000; i++)
		{
			if (Main.projectile[i].active && Main.projectile[i].owner == whoAmI)
			{
				if (Main.projectile[i].counterweight)
				{
					num3++;
				}
				else if (Main.projectile[i].aiStyle == 99)
				{
					num2++;
					num = i;
				}
			}
		}
		if (yoyoGlove && num2 < 2)
		{
			if (num >= 0)
			{
				Vector2 vector = hitPos - base.Center;
				vector.Normalize();
				vector *= 16f;
				Projectile.NewProjectile(Projectile.InheritSource(Main.projectile[num]), base.Center.X, base.Center.Y, vector.X, vector.Y, Main.projectile[num].type, Main.projectile[num].damage, Main.projectile[num].knockBack, whoAmI, 1f);
			}
		}
		else if (num3 < num2)
		{
			Vector2 vector2 = hitPos - base.Center;
			vector2.Normalize();
			vector2 *= 16f;
			float knockBack = (kb + 6f) / 2f;
			IEntitySource spawnSource = Projectile.InheritSource(Main.projectile[num]);
			if (num3 > 0)
			{
				Projectile.NewProjectile(spawnSource, base.Center.X, base.Center.Y, vector2.X, vector2.Y, counterWeight, (int)((double)dmg * 0.8), knockBack, whoAmI, 1f);
			}
			else
			{
				Projectile.NewProjectile(spawnSource, base.Center.X, base.Center.Y, vector2.X, vector2.Y, counterWeight, (int)((double)dmg * 0.8), knockBack, whoAmI);
			}
		}
	}

	public int beeType()
	{
		if (strongBees && Main.rand.Next(2) == 0)
		{
			makeStrongBee = true;
			return 566;
		}
		makeStrongBee = false;
		return 181;
	}

	public int beeDamage(int dmg)
	{
		if (makeStrongBee)
		{
			return dmg + Main.rand.Next(1, 4);
		}
		return dmg + Main.rand.Next(2);
	}

	public float beeKB(float KB)
	{
		if (makeStrongBee)
		{
			return 0.5f + KB * 1.1f;
		}
		return KB;
	}

	public void Yoraiz0rEye()
	{
		int num = 0;
		num += bodyFrame.Y / 56;
		if (num >= Main.OffsetsPlayerHeadgear.Length)
		{
			num = 0;
		}
		Vector2 vector = Main.OffsetsPlayerHeadgear[num];
		vector *= Directions;
		Vector2 vector2 = new Vector2(width / 2, height / 2) + vector + (MountedCenter - base.Center);
		sitting.GetSittingOffsetInfo(this, out var posOffset, out var seatAdjustment);
		vector2 += posOffset + new Vector2(0f, seatAdjustment);
		if (face == 19)
		{
			vector2.Y -= 5f * gravDir;
		}
		if (head == 276)
		{
			vector2.X += 2.5f * (float)direction;
		}
		if (mount.Active && mount.Type == 52)
		{
			vector2.X += 14f * (float)direction;
			vector2.Y -= 2f * gravDir;
		}
		float y = -11.5f * gravDir;
		Vector2 vector3 = new Vector2(3 * direction - ((direction == 1) ? 1 : 0), y) + Vector2.UnitY * gfxOffY + vector2;
		Vector2 vector4 = new Vector2(3 * shadowDirection[1] - ((direction == 1) ? 1 : 0), y) + vector2;
		Vector2 vector5 = Vector2.Zero;
		if (mount.Active && mount.Cart)
		{
			int num2 = Math.Sign(velocity.X);
			if (num2 == 0)
			{
				num2 = direction;
			}
			vector5 = new Vector2(MathHelper.Lerp(0f, -8f, fullRotation / ((float)Math.PI / 4f)), MathHelper.Lerp(0f, 2f, Math.Abs(fullRotation / ((float)Math.PI / 4f)))).RotatedBy(fullRotation);
			if (num2 == Math.Sign(fullRotation))
			{
				vector5 *= MathHelper.Lerp(1f, 0.6f, Math.Abs(fullRotation / ((float)Math.PI / 4f)));
			}
		}
		if (fullRotation != 0f)
		{
			vector3 = vector3.RotatedBy(fullRotation, fullRotationOrigin);
			vector4 = vector4.RotatedBy(fullRotation, fullRotationOrigin);
		}
		float num3 = 0f;
		Vector2 vector6 = position + vector3 + vector5;
		Vector2 vector7 = oldPosition + vector4 + vector5;
		vector7.Y -= num3 / 2f;
		vector6.Y -= num3 / 2f;
		float num4 = 1f;
		switch (yoraiz0rEye % 10)
		{
		case 1:
			return;
		case 2:
			num4 = 0.5f;
			break;
		case 3:
			num4 = 0.625f;
			break;
		case 4:
			num4 = 0.75f;
			break;
		case 5:
			num4 = 0.875f;
			break;
		case 6:
			num4 = 1f;
			break;
		case 7:
			num4 = 1.1f;
			break;
		}
		if (yoraiz0rEye < 7)
		{
			DelegateMethods.v3_1 = Main.hslToRgb(Main.rgbToHsl(eyeColor).X, 1f, 0.5f).ToVector3() * 0.5f * num4;
			if (velocity != Vector2.Zero)
			{
				Utils.PlotTileLine(base.Center, base.Center + velocity * 2f, 4f, DelegateMethods.CastLightOpen);
			}
			else
			{
				Utils.PlotTileLine(base.Left, base.Right, 4f, DelegateMethods.CastLightOpen);
			}
		}
		int num5 = (int)Vector2.Distance(vector6, vector7) / 3 + 1;
		if (Vector2.Distance(vector6, vector7) % 3f != 0f)
		{
			num5++;
		}
		for (float num6 = 1f; num6 <= (float)num5; num6 += 1f)
		{
			Dust obj = Main.dust[Dust.NewDust(base.Center, 0, 0, 182)];
			obj.position = Vector2.Lerp(vector7, vector6, num6 / (float)num5);
			obj.noGravity = true;
			obj.velocity = Vector2.Zero;
			obj.customData = this;
			obj.scale = num4;
			obj.shader = GameShaders.Armor.GetSecondaryShader(cYorai, this);
		}
	}

	public bool IsItemSlotUnlockedAndUsable(int slot)
	{
		switch (slot)
		{
		default:
			return true;
		case 8:
		case 18:
		{
			bool result2 = extraAccessory;
			if (!Main.expertMode && !Main.gameMenu)
			{
				result2 = false;
			}
			return result2;
		}
		case 9:
		case 19:
		{
			bool result = true;
			if (!Main.masterMode && !Main.gameMenu)
			{
				result = false;
			}
			return result;
		}
		}
	}

	public void RefreshInfoAccs()
	{
		bool flag = false;
		accWatch = 0;
		accCompass = 0;
		accDepthMeter = 0;
		accFishFinder = false;
		accWeatherRadio = false;
		accCalendar = false;
		accThirdEye = false;
		accJarOfSouls = false;
		accCritterGuide = false;
		accStopwatch = false;
		accOreFinder = false;
		accDreamCatcher = false;
		for (int i = 0; i < 58; i++)
		{
			int type = inventory[i].type;
			RefreshInfoAccsFromItemType(type);
			if (type == 4131)
			{
				flag = true;
			}
		}
		for (int j = 0; j < 10; j++)
		{
			int type2 = armor[j].type;
			RefreshInfoAccsFromItemType(type2);
		}
		if (flag)
		{
			for (int k = 0; k < 40; k++)
			{
				int type3 = bank4.item[k].type;
				if (type3 < 0 || type3 > ItemID.Count || ItemID.Sets.WorksInVoidBag[type3])
				{
					RefreshInfoAccsFromItemType(type3);
				}
			}
		}
		RefreshInfoAccsFromTeamPlayers();
	}

	public void RefreshInfoAccsFromTeamPlayers()
	{
		if (Main.netMode != 1 || whoAmI != Main.myPlayer)
		{
			return;
		}
		for (int i = 0; i < 255; i++)
		{
			if (i == whoAmI || !Main.player[i].active || Main.player[i].dead || Main.player[i].team != team || Main.player[i].team == 0)
			{
				continue;
			}
			int num = 800;
			if ((Main.player[i].Center - base.Center).Length() < (float)num)
			{
				if (Main.player[i].accWatch > accWatch)
				{
					accWatch = Main.player[i].accWatch;
				}
				if (Main.player[i].accCompass > accCompass)
				{
					accCompass = Main.player[i].accCompass;
				}
				if (Main.player[i].accDepthMeter > accDepthMeter)
				{
					accDepthMeter = Main.player[i].accDepthMeter;
				}
				if (Main.player[i].accFishFinder)
				{
					accFishFinder = true;
				}
				if (Main.player[i].accWeatherRadio)
				{
					accWeatherRadio = true;
				}
				if (Main.player[i].accThirdEye)
				{
					accThirdEye = true;
				}
				if (Main.player[i].accJarOfSouls)
				{
					accJarOfSouls = true;
				}
				if (Main.player[i].accCalendar)
				{
					accCalendar = true;
				}
				if (Main.player[i].accStopwatch)
				{
					accStopwatch = true;
				}
				if (Main.player[i].accOreFinder)
				{
					accOreFinder = true;
				}
				if (Main.player[i].accCritterGuide)
				{
					accCritterGuide = true;
				}
				if (Main.player[i].accDreamCatcher)
				{
					accDreamCatcher = true;
				}
				if (Main.player[i].hasLuck_LuckyHorseshoe)
				{
					hasLuck_LuckyHorseshoe = true;
				}
				if (Main.player[i].hasLuck_LuckyCoin)
				{
					hasLuck_LuckyCoin = true;
				}
			}
		}
	}

	public void RefreshInfoAccsFromItemType(int accType)
	{
		if ((accType == 15 || accType == 707) && accWatch < 1)
		{
			accWatch = 1;
		}
		if ((accType == 16 || accType == 708) && accWatch < 2)
		{
			accWatch = 2;
		}
		if ((accType == 17 || accType == 709) && accWatch < 3)
		{
			accWatch = 3;
		}
		if (accType == 393)
		{
			accCompass = 1;
		}
		if (accType == 18)
		{
			accDepthMeter = 1;
		}
		if (accType == 395 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
		{
			accWatch = 3;
			accDepthMeter = 1;
			accCompass = 1;
		}
		if (accType == 3120 || accType == 3036 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
		{
			accFishFinder = true;
		}
		if (accType == 3037 || accType == 3036 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
		{
			accWeatherRadio = true;
		}
		if (accType == 3096 || accType == 3036 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
		{
			accCalendar = true;
		}
		if (accType == 3084 || accType == 3122 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
		{
			accThirdEye = true;
		}
		if (accType == 3095 || accType == 3122 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
		{
			accJarOfSouls = true;
		}
		if (accType == 3118 || accType == 3122 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
		{
			accCritterGuide = true;
		}
		if (accType == 3099 || accType == 3121 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
		{
			accStopwatch = true;
		}
		if (accType == 3102 || accType == 3121 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
		{
			accOreFinder = true;
		}
		if (accType == 3119 || accType == 3121 || accType == 3123 || accType == 3124 || accType == 5358 || accType == 5359 || accType == 5360 || accType == 5361)
		{
			accDreamCatcher = true;
		}
	}

	public void RefreshMechanicalAccsFromItemType(int accType)
	{
		if (accType == 3619 || accType == 3611)
		{
			InfoAccMechShowWires = true;
		}
		if (accType == 486 || accType == 3611)
		{
			rulerLine = true;
		}
		if (accType == 2799 || accType == 3611)
		{
			rulerGrid = true;
		}
		if (accType == 2216 || accType == 3061 || accType == 5126)
		{
			autoPaint = true;
		}
		if (accType == 3624)
		{
			autoActuator = true;
		}
		if (accType == 4346)
		{
			preventAllItemPickups = true;
		}
		if (accType == 4767 || accType == 5323)
		{
			dontHurtCritters = true;
		}
		if (accType == 5309 || accType == 5323)
		{
			dontHurtNature = true;
		}
		if (accType == 5095)
		{
			hasLucyTheAxe = true;
		}
	}

	public void UpdatePermanentBoosters()
	{
		if (usedAegisFruit)
		{
			statDefense += 4;
		}
		if (usedGummyWorm)
		{
			fishingSkill += 3;
		}
		if (usedAmbrosia)
		{
			pickSpeed -= 0.05f;
			tileSpeed += 0.05f;
			wallSpeed += 0.05f;
		}
	}

	private bool UpdateEquips_CanItemGrantBenefits(int itemSlot, Item item)
	{
		switch (itemSlot)
		{
		default:
			return true;
		case 0:
			return item.headSlot > -1;
		case 1:
			return item.bodySlot > -1;
		case 2:
			return item.legSlot > -1;
		case 3:
		case 4:
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			return item.accessory;
		}
	}

	public void UpdateEquips(int i)
	{
		if (inventory[selectedItem].type == 277 && (!mount.Active || !mount.Cart))
		{
			trident = true;
		}
		bool flag = false;
		for (int j = 0; j < 58; j++)
		{
			int type = inventory[j].type;
			RefreshInfoAccsFromItemType(type);
			RefreshMechanicalAccsFromItemType(type);
			if (type == 4743)
			{
				hasFootball = true;
			}
			if (type == 4131)
			{
				flag = true;
			}
		}
		if (inventory[58].type == 4743)
		{
			hasFootball = true;
		}
		for (int k = 0; k < 10; k++)
		{
			Item item = armor[k];
			if (!item.IsAir && IsItemSlotUnlockedAndUsable(k) && (!item.expertOnly || Main.expertMode) && UpdateEquips_CanItemGrantBenefits(k, item))
			{
				if (item.accessory)
				{
					GrantPrefixBenefits(item);
				}
				GrantArmorBenefits(item);
			}
		}
		if (flag)
		{
			for (int l = 0; l < 40; l++)
			{
				int type2 = bank4.item[l].type;
				if (type2 < 0 || type2 > ItemID.Count || ItemID.Sets.WorksInVoidBag[type2])
				{
					RefreshInfoAccsFromItemType(type2);
					RefreshMechanicalAccsFromItemType(type2);
				}
			}
		}
		equippedAnyWallSpeedAcc = false;
		equippedAnyTileSpeedAcc = false;
		equippedAnyTileRangeAcc = false;
		if (whoAmI == Main.myPlayer)
		{
			Main.musicBoxNotModifiedByVolume = -1;
		}
		for (int m = 3; m < 10; m++)
		{
			if (IsItemSlotUnlockedAndUsable(m))
			{
				ApplyEquipFunctional(m, armor[m]);
			}
		}
		if (accFishingBobber)
		{
			fishingSkill += 10;
		}
		if (skyStoneEffects)
		{
			lifeRegen += 2;
			statDefense += 4;
			meleeSpeed += 0.1f;
			meleeDamage += 0.1f;
			meleeCrit += 2;
			rangedDamage += 0.1f;
			rangedCrit += 2;
			magicDamage += 0.1f;
			magicCrit += 2;
			pickSpeed -= 0.15f;
			minionDamage += 0.1f;
			minionKB += 0.5f;
		}
		if (dd2Accessory)
		{
			minionDamage += 0.1f;
			maxTurrets++;
		}
		for (int n = 3; n < 10; n++)
		{
			if (armor[n].wingSlot > 0 && IsItemSlotUnlockedAndUsable(n))
			{
				if (!hideVisibleAccessory[n] || (velocity.Y != 0f && !mount.Active))
				{
					wings = armor[n].wingSlot;
				}
				wingsLogic = armor[n].wingSlot;
			}
		}
		for (int num = 13; num < 20; num++)
		{
			if (IsItemSlotUnlockedAndUsable(num))
			{
				ApplyEquipVanity(num, armor[num]);
			}
		}
		if (wet && ShouldFloatInWater)
		{
			accFlipper = true;
		}
		if (whoAmI == Main.myPlayer && Main.SceneMetrics.HasClock && accWatch < 3)
		{
			accWatch++;
		}
		if (equippedAnyTileSpeedAcc && inventory[selectedItem].createTile != 4)
		{
			tileSpeed += 0.5f;
		}
		if (chiselSpeed)
		{
			pickSpeed -= 0.25f;
		}
		if (equippedAnyWallSpeedAcc)
		{
			wallSpeed += 0.5f;
		}
		if (equippedAnyTileRangeAcc && whoAmI == Main.myPlayer)
		{
			tileRangeX += 3;
			tileRangeY += 2;
		}
		if (!accThirdEye)
		{
			accThirdEyeCounter = 0;
		}
		RefreshInfoAccsFromTeamPlayers();
		if (whoAmI == Main.myPlayer && hasLuck_LuckyHorseshoe)
		{
			equipmentBasedLuckBonus += 0.05f;
		}
		if (whoAmI == Main.myPlayer && hasLuck_LuckyCoin)
		{
			equipmentBasedLuckBonus += 0.05f;
		}
		if (!accDreamCatcher && dpsStarted)
		{
			dpsStarted = false;
			dpsEnd = DateTime.Now;
		}
		if (HeldItem.type == 4760 && ownedProjectileCounts[866] < 1)
		{
			hasRaisableShield = true;
		}
		int num2 = 0;
		int num3 = 10 + num2;
		if (armor[num2].type == 5101 || armor[num3].type == 5101)
		{
			DoEyebrellaRainEffect();
			eyebrellaCloud = true;
		}
		if (lastEquipmentBasedLuckBonus != equipmentBasedLuckBonus)
		{
			lastEquipmentBasedLuckBonus = equipmentBasedLuckBonus;
			luckNeedsSync = true;
		}
	}

	private void GrantArmorBenefits(Item armorPiece)
	{
		int type = armorPiece.type;
		RefreshInfoAccsFromItemType(type);
		RefreshMechanicalAccsFromItemType(type);
		if (armorPiece.type == 3017 || armorPiece.type == 3993)
		{
			flowerBoots = true;
			if (whoAmI == Main.myPlayer)
			{
				DoBootsEffect(DoBootsEffect_PlaceFlowersOnTile);
			}
		}
		if (armorPiece.type == 5001)
		{
			moveSpeed += 0.25f;
			moonLordLegs = true;
		}
		statDefense += armorPiece.defense;
		lifeRegen += armorPiece.lifeRegen;
		if (armorPiece.shieldSlot > 0)
		{
			hasRaisableShield = true;
		}
		switch (armorPiece.type)
		{
		case 3797:
			maxTurrets++;
			manaCost -= 0.1f;
			magicDamage += 0.1f;
			break;
		case 3798:
			magicDamage += 0.1f;
			minionDamage += 0.2f;
			break;
		case 3799:
			minionDamage += 0.1f;
			magicCrit += 20;
			moveSpeed += 0.2f;
			break;
		case 3800:
			maxTurrets++;
			lifeRegen += 4;
			break;
		case 3801:
			meleeDamage += 0.15f;
			minionDamage += 0.15f;
			break;
		case 3802:
			minionDamage += 0.15f;
			meleeCrit += 15;
			moveSpeed += 0.15f;
			break;
		case 3806:
			maxTurrets++;
			meleeSpeed += 0.2f;
			break;
		case 3807:
			meleeDamage += 0.2f;
			minionDamage += 0.2f;
			break;
		case 3808:
			minionDamage += 0.1f;
			meleeCrit += 15;
			moveSpeed += 0.2f;
			break;
		case 3803:
			maxTurrets++;
			rangedCrit += 10;
			break;
		case 3804:
			rangedDamage += 0.2f;
			minionDamage += 0.2f;
			huntressAmmoCost90 = true;
			break;
		case 3805:
			minionDamage += 0.1f;
			moveSpeed += 0.2f;
			break;
		case 3871:
			maxTurrets += 2;
			meleeDamage += 0.1f;
			minionDamage += 0.1f;
			break;
		case 3872:
			minionDamage += 0.3f;
			lifeRegen += 8;
			break;
		case 3873:
			minionDamage += 0.2f;
			meleeCrit += 20;
			moveSpeed += 0.2f;
			break;
		case 3874:
			maxTurrets += 2;
			magicDamage += 0.15f;
			minionDamage += 0.15f;
			break;
		case 3875:
			minionDamage += 0.25f;
			magicDamage += 0.1f;
			manaCost -= 0.15f;
			break;
		case 3876:
			minionDamage += 0.2f;
			magicCrit += 25;
			moveSpeed += 0.2f;
			break;
		case 3877:
			maxTurrets += 2;
			minionDamage += 0.1f;
			rangedCrit += 10;
			break;
		case 3878:
			minionDamage += 0.25f;
			rangedDamage += 0.25f;
			ammoCost80 = true;
			break;
		case 3879:
			minionDamage += 0.25f;
			rangedCrit += 10;
			moveSpeed += 0.2f;
			break;
		case 3880:
			maxTurrets += 2;
			minionDamage += 0.2f;
			meleeDamage += 0.2f;
			break;
		case 3881:
			meleeSpeed += 0.2f;
			meleeCrit += 5;
			minionDamage += 0.2f;
			break;
		case 3882:
			minionDamage += 0.2f;
			meleeCrit += 20;
			moveSpeed += 0.3f;
			break;
		}
		if (armorPiece.type == 5100)
		{
			SpawnHallucination(armorPiece);
		}
		if (armorPiece.type == 268)
		{
			accDivingHelm = true;
		}
		if (armorPiece.type == 238)
		{
			magicDamage += 0.05f;
			if (Main.tenthAnniversaryWorld)
			{
				maxMinions++;
			}
		}
		if (armorPiece.type == 3770)
		{
			slowFall = true;
		}
		if (armorPiece.type == 4404)
		{
			canFloatInWater = true;
		}
		if (armorPiece.type == 3776)
		{
			magicDamage += 0.15f;
			minionDamage += 0.15f;
		}
		if (armorPiece.type == 3777)
		{
			statManaMax2 += 40;
			minionDamage += 0.1f;
			maxMinions++;
		}
		if (armorPiece.type == 3778)
		{
			statManaMax2 += 40;
			magicDamage += 0.1f;
			maxMinions++;
		}
		if (armorPiece.type == 3212)
		{
			armorPenetration += 5;
		}
		if (armorPiece.type == 2277)
		{
			magicDamage += 0.05f;
			meleeDamage += 0.05f;
			rangedDamage += 0.05f;
			minionDamage += 0.05f;
			magicCrit += 5;
			rangedCrit += 5;
			meleeCrit += 5;
			meleeSpeed += 0.1f;
			moveSpeed += 0.1f;
		}
		if (armorPiece.type == 2279)
		{
			magicDamage += 0.06f;
			magicCrit += 6;
			manaCost -= 0.1f;
		}
		if (armorPiece.type == 3109 || armorPiece.type == 4008)
		{
			nightVision = true;
		}
		if (armorPiece.type == 256 || armorPiece.type == 257 || armorPiece.type == 258)
		{
			rangedCrit += 3;
			meleeCrit += 3;
			magicCrit += 3;
		}
		if (armorPiece.type == 3374)
		{
			rangedCrit += 4;
		}
		if (armorPiece.type == 3375)
		{
			rangedDamage += 0.05f;
		}
		if (armorPiece.type == 3376)
		{
			rangedCrit += 4;
		}
		if (armorPiece.type == 151 || armorPiece.type == 959 || armorPiece.type == 152 || armorPiece.type == 153)
		{
			rangedDamage += 0.05f;
		}
		if (armorPiece.type == 2275)
		{
			magicDamage += 0.06f;
			magicCrit += 6;
		}
		if (armorPiece.type == 123 || armorPiece.type == 124 || armorPiece.type == 125)
		{
			magicDamage += 0.09f;
		}
		if (armorPiece.type == 228 || armorPiece.type == 960)
		{
			statManaMax2 += 40;
			magicCrit += 6;
		}
		if (armorPiece.type == 229 || armorPiece.type == 961)
		{
			statManaMax2 += 20;
			magicDamage += 0.06f;
		}
		if (armorPiece.type == 230 || armorPiece.type == 962)
		{
			statManaMax2 += 20;
			magicCrit += 6;
		}
		if (armorPiece.type == 100 || armorPiece.type == 101 || armorPiece.type == 102)
		{
			magicCrit += 5;
			meleeCrit += 5;
			rangedCrit += 5;
		}
		if (armorPiece.type == 956 || armorPiece.type == 957 || armorPiece.type == 958)
		{
			magicCrit += 5;
			meleeCrit += 5;
			rangedCrit += 5;
		}
		if (armorPiece.type == 792 || armorPiece.type == 793 || armorPiece.type == 794)
		{
			meleeDamage += 0.03f;
			rangedDamage += 0.03f;
			magicDamage += 0.03f;
			minionDamage += 0.03f;
		}
		if (armorPiece.type == 231)
		{
			meleeCrit += 7;
		}
		if (armorPiece.type == 232)
		{
			meleeDamage += 0.07f;
		}
		if (armorPiece.type == 233)
		{
			meleeSpeed += 0.07f;
		}
		if (armorPiece.type == 371)
		{
			magicCrit += 9;
			magicDamage += 0.1f;
			statManaMax2 += 40;
		}
		if (armorPiece.type == 372)
		{
			moveSpeed += 0.1f;
			meleeDamage += 0.15f;
		}
		if (armorPiece.type == 373)
		{
			rangedDamage += 0.1f;
			rangedCrit += 10;
		}
		if (armorPiece.type == 374)
		{
			magicCrit += 5;
			meleeCrit += 5;
			rangedCrit += 5;
		}
		if (armorPiece.type == 375)
		{
			rangedDamage += 0.03f;
			meleeDamage += 0.03f;
			magicDamage += 0.03f;
			minionDamage += 0.03f;
			moveSpeed += 0.1f;
		}
		if (armorPiece.type == 376)
		{
			magicDamage += 0.15f;
			statManaMax2 += 60;
		}
		if (armorPiece.type == 377)
		{
			meleeCrit += 8;
			meleeDamage += 0.1f;
		}
		if (armorPiece.type == 378)
		{
			rangedDamage += 0.12f;
			rangedCrit += 7;
		}
		if (armorPiece.type == 379)
		{
			rangedDamage += 0.07f;
			meleeDamage += 0.07f;
			magicDamage += 0.07f;
			minionDamage += 0.07f;
		}
		if (armorPiece.type == 380)
		{
			magicCrit += 10;
			meleeCrit += 10;
			rangedCrit += 10;
		}
		if (armorPiece.type >= 2367 && armorPiece.type <= 2369)
		{
			fishingSkill += 5;
		}
		if (armorPiece.type == 400)
		{
			magicDamage += 0.12f;
			magicCrit += 12;
			statManaMax2 += 80;
		}
		if (armorPiece.type == 401)
		{
			meleeCrit += 7;
			meleeDamage += 0.14f;
		}
		if (armorPiece.type == 402)
		{
			rangedDamage += 0.14f;
			rangedCrit += 10;
		}
		if (armorPiece.type == 403)
		{
			rangedDamage += 0.08f;
			meleeDamage += 0.08f;
			magicDamage += 0.08f;
			minionDamage += 0.08f;
		}
		if (armorPiece.type == 404)
		{
			magicCrit += 7;
			meleeCrit += 7;
			rangedCrit += 7;
			moveSpeed += 0.05f;
		}
		if (armorPiece.type == 1205)
		{
			meleeDamage += 0.12f;
			meleeSpeed += 0.12f;
		}
		if (armorPiece.type == 1206)
		{
			rangedDamage += 0.09f;
			rangedCrit += 9;
		}
		if (armorPiece.type == 1207)
		{
			magicDamage += 0.09f;
			magicCrit += 9;
			statManaMax2 += 60;
		}
		if (armorPiece.type == 1208)
		{
			meleeDamage += 0.03f;
			rangedDamage += 0.03f;
			magicDamage += 0.03f;
			minionDamage += 0.03f;
			magicCrit += 2;
			meleeCrit += 2;
			rangedCrit += 2;
		}
		if (armorPiece.type == 1209)
		{
			meleeDamage += 0.02f;
			rangedDamage += 0.02f;
			magicDamage += 0.02f;
			minionDamage += 0.02f;
			magicCrit++;
			meleeCrit++;
			rangedCrit++;
		}
		if (armorPiece.type == 1210)
		{
			meleeDamage += 0.11f;
			meleeSpeed += 0.11f;
			moveSpeed += 0.07f;
		}
		if (armorPiece.type == 1211)
		{
			rangedCrit += 15;
			moveSpeed += 0.08f;
		}
		if (armorPiece.type == 1212)
		{
			magicCrit += 18;
			statManaMax2 += 80;
		}
		if (armorPiece.type == 1213)
		{
			magicCrit += 6;
			meleeCrit += 6;
			rangedCrit += 6;
		}
		if (armorPiece.type == 1214)
		{
			moveSpeed += 0.11f;
			meleeDamage += 0.08f;
			rangedDamage += 0.08f;
			magicDamage += 0.08f;
			minionDamage += 0.08f;
		}
		if (armorPiece.type == 1215)
		{
			meleeDamage += 0.09f;
			meleeCrit += 9;
			meleeSpeed += 0.09f;
		}
		if (armorPiece.type == 1216)
		{
			rangedDamage += 0.16f;
			rangedCrit += 7;
		}
		if (armorPiece.type == 1217)
		{
			magicDamage += 0.16f;
			magicCrit += 7;
			statManaMax2 += 100;
		}
		if (armorPiece.type == 1218)
		{
			meleeDamage += 0.04f;
			rangedDamage += 0.04f;
			magicDamage += 0.04f;
			minionDamage += 0.04f;
			magicCrit += 3;
			meleeCrit += 3;
			rangedCrit += 3;
		}
		if (armorPiece.type == 1219)
		{
			meleeDamage += 0.03f;
			rangedDamage += 0.03f;
			magicDamage += 0.03f;
			minionDamage += 0.03f;
			magicCrit += 3;
			meleeCrit += 3;
			rangedCrit += 3;
			moveSpeed += 0.06f;
		}
		if (armorPiece.type == 558 || armorPiece.type == 4898)
		{
			magicDamage += 0.12f;
			magicCrit += 12;
			statManaMax2 += 100;
		}
		if (armorPiece.type == 559 || armorPiece.type == 4896)
		{
			meleeCrit += 10;
			meleeDamage += 0.1f;
			meleeSpeed += 0.1f;
		}
		if (armorPiece.type == 553 || armorPiece.type == 4897)
		{
			rangedDamage += 0.15f;
			rangedCrit += 8;
		}
		if (armorPiece.type == 4873 || armorPiece.type == 4899)
		{
			minionDamage += 0.1f;
			maxMinions++;
		}
		if (armorPiece.type == 551 || armorPiece.type == 4900)
		{
			magicCrit += 7;
			meleeCrit += 7;
			rangedCrit += 7;
		}
		if (armorPiece.type == 552 || armorPiece.type == 4901)
		{
			rangedDamage += 0.07f;
			meleeDamage += 0.07f;
			magicDamage += 0.07f;
			minionDamage += 0.07f;
			moveSpeed += 0.08f;
		}
		if (armorPiece.type == 4982)
		{
			rangedCrit += 5;
			meleeCrit += 5;
			magicCrit += 5;
			manaCost -= 0.1f;
		}
		if (armorPiece.type == 4983)
		{
			rangedDamage += 0.05f;
			meleeDamage += 0.05f;
			magicDamage += 0.05f;
			minionDamage += 0.05f;
			huntressAmmoCost90 = true;
		}
		if (armorPiece.type == 4984)
		{
			meleeSpeed += 0.1f;
			moveSpeed += 0.2f;
		}
		if (armorPiece.type == 1001)
		{
			meleeDamage += 0.16f;
			meleeCrit += 6;
		}
		if (armorPiece.type == 1002)
		{
			rangedDamage += 0.16f;
			chloroAmmoCost80 = true;
		}
		if (armorPiece.type == 1003)
		{
			statManaMax2 += 80;
			manaCost -= 0.17f;
			magicDamage += 0.16f;
		}
		if (armorPiece.type == 1004)
		{
			meleeDamage += 0.05f;
			magicDamage += 0.05f;
			rangedDamage += 0.05f;
			minionDamage += 0.05f;
			magicCrit += 7;
			meleeCrit += 7;
			rangedCrit += 7;
		}
		if (armorPiece.type == 1005)
		{
			magicCrit += 8;
			meleeCrit += 8;
			rangedCrit += 8;
			moveSpeed += 0.05f;
		}
		if (armorPiece.type == 2189)
		{
			statManaMax2 += 60;
			manaCost -= 0.13f;
			magicDamage += 0.1f;
			magicCrit += 10;
		}
		if (armorPiece.type == 1504)
		{
			magicDamage += 0.07f;
			magicCrit += 7;
		}
		if (armorPiece.type == 1505)
		{
			magicDamage += 0.08f;
			moveSpeed += 0.08f;
		}
		if (armorPiece.type == 1546)
		{
			rangedCrit += 5;
			arrowDamage *= 1.15f;
		}
		if (armorPiece.type == 1547)
		{
			rangedCrit += 5;
			bulletDamage *= 1.15f;
		}
		if (armorPiece.type == 1548)
		{
			rangedCrit += 5;
			rocketDamage *= 1.15f;
		}
		if (armorPiece.type == 1549)
		{
			rangedCrit += 13;
			rangedDamage += 0.13f;
			ammoCost80 = true;
		}
		if (armorPiece.type == 1550)
		{
			rangedCrit += 7;
			moveSpeed += 0.12f;
		}
		if (armorPiece.type == 1282)
		{
			statManaMax2 += 20;
			manaCost -= 0.05f;
		}
		if (armorPiece.type == 1283)
		{
			statManaMax2 += 40;
			manaCost -= 0.07f;
		}
		if (armorPiece.type == 1284)
		{
			statManaMax2 += 40;
			manaCost -= 0.09f;
		}
		if (armorPiece.type == 1285)
		{
			statManaMax2 += 60;
			manaCost -= 0.11f;
		}
		if (armorPiece.type == 1286 || armorPiece.type == 4256)
		{
			statManaMax2 += 60;
			manaCost -= 0.13f;
		}
		if (armorPiece.type == 1287)
		{
			statManaMax2 += 80;
			manaCost -= 0.15f;
		}
		if (armorPiece.type == 1316 || armorPiece.type == 1317 || armorPiece.type == 1318)
		{
			aggro += 250;
		}
		if (armorPiece.type == 1316)
		{
			meleeDamage += 0.06f;
		}
		if (armorPiece.type == 1317)
		{
			meleeDamage += 0.08f;
			meleeCrit += 8;
		}
		if (armorPiece.type == 1318)
		{
			meleeCrit += 4;
		}
		if (armorPiece.type == 2199 || armorPiece.type == 2202)
		{
			aggro += 250;
		}
		if (armorPiece.type == 2201)
		{
			aggro += 400;
		}
		if (armorPiece.type == 2199)
		{
			meleeDamage += 0.06f;
		}
		if (armorPiece.type == 2200)
		{
			meleeDamage += 0.08f;
			meleeCrit += 8;
			meleeSpeed += 0.06f;
			moveSpeed += 0.06f;
		}
		if (armorPiece.type == 2201)
		{
			meleeDamage += 0.05f;
			meleeCrit += 5;
		}
		if (armorPiece.type == 2202)
		{
			meleeSpeed += 0.06f;
			moveSpeed += 0.06f;
		}
		if (armorPiece.type == 684)
		{
			rangedDamage += 0.16f;
			meleeDamage += 0.16f;
		}
		if (armorPiece.type == 685)
		{
			meleeCrit += 11;
			rangedCrit += 11;
		}
		if (armorPiece.type == 686)
		{
			moveSpeed += 0.08f;
			meleeSpeed += 0.1f;
		}
		if (armorPiece.type == 5068)
		{
			maxMinions++;
			minionDamage += 0.05f;
		}
		if (armorPiece.type == 2361)
		{
			maxMinions++;
			minionDamage += 0.04f;
		}
		if (armorPiece.type == 2362)
		{
			maxMinions++;
			minionDamage += 0.04f;
		}
		if (armorPiece.type == 2363)
		{
			minionDamage += 0.05f;
		}
		if (armorPiece.type == 3266)
		{
			minionDamage += 0.08f;
		}
		if (armorPiece.type == 3267)
		{
			maxMinions++;
		}
		if (armorPiece.type == 3268)
		{
			minionDamage += 0.08f;
		}
		if (armorPiece.type == 410)
		{
			pickSpeed -= 0.1f;
		}
		if (armorPiece.type == 411)
		{
			pickSpeed -= 0.1f;
		}
		if (armorPiece.type >= 1158 && armorPiece.type <= 1161)
		{
			maxMinions++;
		}
		if (armorPiece.type == 1159)
		{
			whipRangeMultiplier += 0.1f;
		}
		if (armorPiece.type >= 1159 && armorPiece.type <= 1161)
		{
			minionDamage += 0.1f;
		}
		if (armorPiece.type >= 2370 && armorPiece.type <= 2371)
		{
			minionDamage += 0.05f;
			maxMinions++;
		}
		if (armorPiece.type == 2372)
		{
			minionDamage += 0.06f;
			maxMinions++;
		}
		if (armorPiece.type == 3381)
		{
			maxMinions++;
			maxTurrets++;
			minionDamage += 0.22f;
		}
		if (armorPiece.type == 3382 || armorPiece.type == 3383)
		{
			maxMinions += 2;
			whipRangeMultiplier += 0.15f;
			minionDamage += 0.22f;
		}
		if (armorPiece.type == 2763)
		{
			aggro += 300;
			meleeCrit += 26;
			lifeRegen += 2;
		}
		if (armorPiece.type == 2764)
		{
			aggro += 300;
			meleeDamage += 0.29f;
			lifeRegen += 2;
		}
		if (armorPiece.type == 2765)
		{
			aggro += 300;
			meleeSpeed += 0.15f;
			moveSpeed += 0.15f;
			lifeRegen += 2;
		}
		if (armorPiece.type == 2757)
		{
			rangedCrit += 7;
			rangedDamage += 0.16f;
		}
		if (armorPiece.type == 2758)
		{
			ammoCost75 = true;
			rangedCrit += 12;
			rangedDamage += 0.12f;
		}
		if (armorPiece.type == 2759)
		{
			rangedCrit += 8;
			rangedDamage += 0.08f;
			moveSpeed += 0.1f;
		}
		if (armorPiece.type == 2760)
		{
			statManaMax2 += 60;
			manaCost -= 0.15f;
			magicCrit += 7;
			magicDamage += 0.07f;
		}
		if (armorPiece.type == 2761)
		{
			magicDamage += 0.09f;
			magicCrit += 9;
		}
		if (armorPiece.type == 2762)
		{
			moveSpeed += 0.1f;
			magicDamage += 0.1f;
		}
		if (armorPiece.type == 1832)
		{
			maxMinions++;
			minionDamage += 0.11f;
		}
		if (armorPiece.type == 1833)
		{
			maxMinions += 2;
			minionDamage += 0.11f;
		}
		if (armorPiece.type == 1834)
		{
			moveSpeed += 0.2f;
			maxMinions++;
			minionDamage += 0.11f;
		}
	}

	private void GrantPrefixBenefits(Item item)
	{
		if (item.prefix == 62)
		{
			statDefense++;
		}
		if (item.prefix == 63)
		{
			statDefense += 2;
		}
		if (item.prefix == 64)
		{
			statDefense += 3;
		}
		if (item.prefix == 65)
		{
			statDefense += 4;
		}
		if (item.prefix == 66)
		{
			statManaMax2 += 20;
		}
		if (item.prefix == 67)
		{
			meleeCrit += 2;
			rangedCrit += 2;
			magicCrit += 2;
		}
		if (item.prefix == 68)
		{
			meleeCrit += 4;
			rangedCrit += 4;
			magicCrit += 4;
		}
		if (item.prefix == 69)
		{
			meleeDamage += 0.01f;
			rangedDamage += 0.01f;
			magicDamage += 0.01f;
			minionDamage += 0.01f;
		}
		if (item.prefix == 70)
		{
			meleeDamage += 0.02f;
			rangedDamage += 0.02f;
			magicDamage += 0.02f;
			minionDamage += 0.02f;
		}
		if (item.prefix == 71)
		{
			meleeDamage += 0.03f;
			rangedDamage += 0.03f;
			magicDamage += 0.03f;
			minionDamage += 0.03f;
		}
		if (item.prefix == 72)
		{
			meleeDamage += 0.04f;
			rangedDamage += 0.04f;
			magicDamage += 0.04f;
			minionDamage += 0.04f;
		}
		if (item.prefix == 73)
		{
			moveSpeed += 0.01f;
		}
		if (item.prefix == 74)
		{
			moveSpeed += 0.02f;
		}
		if (item.prefix == 75)
		{
			moveSpeed += 0.03f;
		}
		if (item.prefix == 76)
		{
			moveSpeed += 0.04f;
		}
		if (item.prefix == 77)
		{
			meleeSpeed += 0.01f;
		}
		if (item.prefix == 78)
		{
			meleeSpeed += 0.02f;
		}
		if (item.prefix == 79)
		{
			meleeSpeed += 0.03f;
		}
		if (item.prefix == 80)
		{
			meleeSpeed += 0.04f;
		}
	}

	private void SpawnHallucination(Item item)
	{
		if (whoAmI != Main.myPlayer)
		{
			return;
		}
		insanityShadowCooldown = Utils.Clamp(insanityShadowCooldown - 1, 0, 100);
		if (insanityShadowCooldown > 0)
		{
			return;
		}
		insanityShadowCooldown = Main.rand.Next(20, 101);
		float num = 500f;
		int damage = 18;
		_hallucinationCandidates.Clear();
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.CanBeChasedBy(this) && !(Distance(nPC.Center) > num) && Collision.CanHitLine(position, width, height, nPC.position, nPC.width, nPC.height))
			{
				_hallucinationCandidates.Add(nPC);
			}
		}
		if (_hallucinationCandidates.Count != 0)
		{
			Projectile.RandomizeInsanityShadowFor(Main.rand.NextFromCollection(_hallucinationCandidates), isHostile: false, out var spawnposition, out var spawnvelocity, out var ai, out var ai2);
			Projectile.NewProjectile(new EntitySource_ItemUse(this, item), spawnposition, spawnvelocity, 964, damage, 0f, whoAmI, ai, ai2);
		}
	}

	public void DoBootsEffect(Utils.TileActionAttempt theEffectMethod)
	{
		if (miscCounter % 2 == 0 && velocity.Y == 0f && grappling[0] == -1 && velocity.X != 0f)
		{
			int x = (int)base.Center.X / 16;
			int y = (int)(position.Y + (float)height - 1f) / 16;
			theEffectMethod(x, y);
		}
	}

	public bool DoBootsEffect_PlaceFlamesOnTile(int X, int Y)
	{
		Tile tile = Main.tile[X, Y + 1];
		if (tile == null || !tile.active() || tile.liquid > 0 || !WorldGen.SolidTileAllowBottomSlope(X, Y + 1))
		{
			return false;
		}
		ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.FlameWaders, new ParticleOrchestraSettings
		{
			PositionInWorld = new Vector2(X * 16 + 8, Y * 16 + 16)
		}, whoAmI);
		return true;
	}

	public bool DoBootsEffect_PlaceFlowersOnTile(int X, int Y)
	{
		Tile tile = Main.tile[X, Y];
		if (tile == null)
		{
			return false;
		}
		if (!tile.active() && tile.liquid == 0 && Main.tile[X, Y + 1] != null && WorldGen.SolidTile(X, Y + 1))
		{
			tile.frameY = 0;
			tile.slope(0);
			tile.halfBrick(halfBrick: false);
			if (Main.tile[X, Y + 1].type == 2 || Main.tile[X, Y + 1].type == 477)
			{
				int num = Main.rand.NextFromList<int>(6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27, 30, 33, 36, 39, 42);
				switch (num)
				{
				case 21:
				case 24:
				case 27:
				case 30:
				case 33:
				case 36:
				case 39:
				case 42:
					num += Main.rand.Next(3);
					break;
				}
				tile.active(active: true);
				tile.type = 3;
				tile.frameX = (short)(num * 18);
				tile.CopyPaintAndCoating(Main.tile[X, Y + 1]);
				if (Main.netMode == 1)
				{
					NetMessage.SendTileSquare(-1, X, Y);
				}
				return true;
			}
			if (Main.tile[X, Y + 1].type == 109 || Main.tile[X, Y + 1].type == 492)
			{
				if (Main.rand.Next(2) == 0)
				{
					tile.active(active: true);
					tile.type = 110;
					tile.frameX = (short)(18 * Main.rand.Next(4, 7));
					tile.CopyPaintAndCoating(Main.tile[X, Y + 1]);
					while (tile.frameX == 90)
					{
						tile.frameX = (short)(18 * Main.rand.Next(4, 7));
					}
				}
				else
				{
					tile.active(active: true);
					tile.type = 113;
					tile.frameX = (short)(18 * Main.rand.Next(2, 8));
					tile.CopyPaintAndCoating(Main.tile[X, Y + 1]);
					while (tile.frameX == 90)
					{
						tile.frameX = (short)(18 * Main.rand.Next(2, 8));
					}
				}
				if (Main.netMode == 1)
				{
					NetMessage.SendTileSquare(-1, X, Y);
				}
				return true;
			}
			if (Main.tile[X, Y + 1].type == 60)
			{
				tile.active(active: true);
				tile.type = 74;
				tile.frameX = (short)(18 * Main.rand.Next(9, 17));
				tile.CopyPaintAndCoating(Main.tile[X, Y + 1]);
				if (Main.netMode == 1)
				{
					NetMessage.SendTileSquare(-1, X, Y);
				}
				return true;
			}
			if (Main.tile[X, Y + 1].type == 633)
			{
				tile.active(active: true);
				tile.type = 637;
				tile.frameX = (short)(18 * Main.rand.Next(6, 11));
				tile.CopyPaintAndCoating(Main.tile[X, Y + 1]);
				if (Main.netMode == 1)
				{
					NetMessage.SendTileSquare(-1, X, Y);
				}
				return true;
			}
		}
		return false;
	}

	private void ApplyEquipVanity(int itemSlot, Item currentItem)
	{
		int type = currentItem.type;
		if (currentItem.wingSlot > 0)
		{
			wings = currentItem.wingSlot;
		}
		if (type == 861 || type == 3110 || type == 485)
		{
			hideWolf = false;
			forceWerewolf = true;
		}
		switch (type)
		{
		case 5452:
			remoteVisionForDrone = true;
			break;
		case 3538:
			stardustMonolithShader = true;
			break;
		case 3537:
			nebulaMonolithShader = true;
			break;
		case 3536:
			vortexMonolithShader = true;
			break;
		case 3539:
			solarMonolithShader = true;
			break;
		case 4318:
			moonLordMonolithShader = true;
			break;
		case 4054:
			bloodMoonMonolithShader = true;
			break;
		case 5345:
			CanSeeInvisibleBlocks = true;
			break;
		case 5347:
			shimmerMonolithShader = true;
			break;
		}
		if (type == 5113)
		{
			dontStarveShader = !dontStarveShader;
		}
		if (((wet && !lavaWet && (!mount.Active || !mount.IsConsideredASlimeMount)) || !forceWerewolf) && (type == 861 || type == 3110 || type == 497))
		{
			hideMerman = false;
			forceMerman = true;
		}
		if ((!mount.Active || mount.Type != 47) && (type == 4822 || type == 4874))
		{
			DoBootsEffect(DoBootsEffect_PlaceFlamesOnTile);
		}
		if (Main.myPlayer == whoAmI)
		{
			ApplyMusicBox(currentItem);
		}
		UpdateBootVisualEffects(currentItem);
		UpdateFishingBobber(currentItem);
	}

	private void DoEyebrellaRainEffect()
	{
		if (Main.netMode == 2 || Main.dedServ || Main.rand.Next(4) != 0)
		{
			return;
		}
		Vector2 vector = MountedCenter - new Vector2(0f, (float)height * 0.5f) + new Vector2((-0.5f + Main.rand.NextFloat()) * (float)(width + 18), -30f);
		int num = (int)(vector.X / 16f);
		int num2 = (int)(vector.Y / 16f);
		if (WorldGen.InWorld(num, num2))
		{
			Tile tile = Main.tile[num, num2];
			if (tile != null && !WorldGen.SolidTile3(tile) && tile.liquid <= 0)
			{
				Rain.NewRainForced(Velocity: new Vector2(Main.windSpeedCurrent * 3f, 9f), Position: vector);
			}
		}
	}

	public WingStats GetWingStats(int wingID)
	{
		if (wingID <= 0 || wingID >= ArmorIDs.Wing.Sets.Stats.Length)
		{
			return default(WingStats);
		}
		return ArmorIDs.Wing.Sets.Stats[wingID];
	}

	private void ApplyEquipFunctional(int itemSlot, Item currentItem)
	{
		if (currentItem.expertOnly && !Main.expertMode)
		{
			return;
		}
		if (currentItem.type == 3810 || currentItem.type == 3809 || currentItem.type == 3812 || currentItem.type == 3811)
		{
			dd2Accessory = true;
		}
		if (!hideVisibleAccessory[itemSlot])
		{
			UpdateBootVisualEffects(currentItem);
			UpdateFishingBobber(currentItem);
		}
		switch (currentItem.type)
		{
		case 4056:
			chiselSpeed = true;
			break;
		case 3990:
			accRunSpeed = 6f;
			autoJump = true;
			jumpSpeedBoost += 1.6f;
			extraFall += 10;
			break;
		case 3991:
			manaFlower = true;
			manaCost -= 0.08f;
			aggro -= 400;
			break;
		case 3992:
			kbGlove = true;
			autoReuseGlove = true;
			meleeScaleGlove = true;
			meleeSpeed += 0.12f;
			aggro += 400;
			break;
		case 3993:
			accRunSpeed = 6f;
			rocketBoots = (vanityRocketBoots = 2);
			break;
		case 4055:
			accRunSpeed = 6f;
			desertBoots = true;
			break;
		case 3994:
			autoJump = true;
			jumpSpeedBoost += 1.6f;
			extraFall += 10;
			accFlipper = true;
			break;
		case 3995:
			autoJump = true;
			jumpSpeedBoost += 1.6f;
			extraFall += 10;
			accFlipper = true;
			spikedBoots += 2;
			break;
		case 3996:
			autoJump = true;
			jumpSpeedBoost += 1.6f;
			extraFall += 10;
			spikedBoots += 2;
			break;
		case 3998:
			aggro += 400;
			break;
		case 4038:
			fireWalk = true;
			break;
		case 4003:
			fireWalk = true;
			lavaRose = true;
			break;
		case 4000:
			manaFlower = true;
			manaCost -= 0.08f;
			manaMagnet = true;
			break;
		case 4001:
			manaFlower = true;
			manaCost -= 0.08f;
			starCloakItem = currentItem;
			starCloakItem_manaCloakOverrideItem = currentItem;
			break;
		case 4002:
			magicQuiver = true;
			arrowDamageAdditiveStack += 0.1f;
			hasMoltenQuiver = true;
			break;
		case 4004:
			fireWalk = true;
			lavaRose = true;
			break;
		case 3999:
			fireWalk = true;
			break;
		case 4005:
			rangedCrit += 10;
			rangedDamage += 0.1f;
			aggro -= 400;
			break;
		case 4006:
			aggro -= 400;
			magicQuiver = true;
			arrowDamageAdditiveStack += 0.1f;
			break;
		case 4007:
			honeyCombItem = currentItem;
			armorPenetration += 5;
			break;
		case 4341:
		case 5126:
			portableStoolInfo.SetStats(26, 26, 26);
			break;
		case 4409:
			CanSeeInvisibleBlocks = true;
			break;
		case 5010:
			treasureMagnet = true;
			break;
		case 3245:
			boneGloveItem = currentItem;
			break;
		case 5107:
			hasMagiluminescence = true;
			MountedCenter.ToTileCoordinates();
			DelegateMethods.v3_1 = new Vector3(0.9f, 0.8f, 0.5f);
			Utils.PlotTileLine(base.Center, base.Center + velocity * 6f, 20f, DelegateMethods.CastLightOpen);
			Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
			break;
		}
		if (currentItem.type == 3015)
		{
			aggro -= 400;
			meleeCrit += 5;
			magicCrit += 5;
			rangedCrit += 5;
			meleeDamage += 0.05f;
			magicDamage += 0.05f;
			rangedDamage += 0.05f;
			minionDamage += 0.05f;
		}
		if (currentItem.type == 3016)
		{
			aggro += 400;
		}
		if (currentItem.type == 2373)
		{
			accFishingLine = true;
		}
		if (currentItem.type == 2374)
		{
			fishingSkill += 10;
		}
		if (currentItem.type == 5139 || currentItem.type == 5144 || currentItem.type == 5142 || currentItem.type == 5141 || currentItem.type == 5146 || currentItem.type == 5140 || currentItem.type == 5145 || currentItem.type == 5143)
		{
			accFishingBobber = true;
		}
		if (currentItem.type == 2375)
		{
			accTackleBox = true;
		}
		if (currentItem.type == 4881)
		{
			accLavaFishing = true;
		}
		if (currentItem.type == 3721)
		{
			accFishingLine = true;
			accTackleBox = true;
			fishingSkill += 10;
		}
		if (currentItem.type == 5064)
		{
			accFishingLine = true;
			accTackleBox = true;
			fishingSkill += 10;
			accLavaFishing = true;
		}
		if (currentItem.type == 3090)
		{
			npcTypeNoAggro[1] = true;
			npcTypeNoAggro[16] = true;
			npcTypeNoAggro[59] = true;
			npcTypeNoAggro[71] = true;
			npcTypeNoAggro[81] = true;
			npcTypeNoAggro[138] = true;
			npcTypeNoAggro[121] = true;
			npcTypeNoAggro[122] = true;
			npcTypeNoAggro[141] = true;
			npcTypeNoAggro[147] = true;
			npcTypeNoAggro[183] = true;
			npcTypeNoAggro[184] = true;
			npcTypeNoAggro[204] = true;
			npcTypeNoAggro[225] = true;
			npcTypeNoAggro[244] = true;
			npcTypeNoAggro[302] = true;
			npcTypeNoAggro[333] = true;
			npcTypeNoAggro[335] = true;
			npcTypeNoAggro[334] = true;
			npcTypeNoAggro[336] = true;
			npcTypeNoAggro[537] = true;
			npcTypeNoAggro[676] = true;
			npcTypeNoAggro[667] = true;
		}
		if (currentItem.stringColor > 0)
		{
			yoyoString = true;
		}
		if (currentItem.type == 3366)
		{
			counterWeight = 556 + Main.rand.Next(6);
			yoyoGlove = true;
			yoyoString = true;
		}
		if (currentItem.type >= 3309 && currentItem.type <= 3314)
		{
			counterWeight = 556 + currentItem.type - 3309;
		}
		if (currentItem.type == 3334)
		{
			yoyoGlove = true;
		}
		if (currentItem.type == 3337)
		{
			shinyStone = true;
		}
		if (currentItem.type == 4989)
		{
			empressBrooch = true;
			moveSpeed += 0.075f;
		}
		if (currentItem.type == 3336)
		{
			SporeSac(currentItem);
			sporeSac = true;
		}
		if (currentItem.type == 4987)
		{
			VolatileGelatin(currentItem);
			volatileGelatin = true;
		}
		switch (currentItem.type)
		{
		case 3538:
			stardustMonolithShader = true;
			break;
		case 3537:
			nebulaMonolithShader = true;
			break;
		case 3536:
			vortexMonolithShader = true;
			break;
		case 3539:
			solarMonolithShader = true;
			break;
		case 4318:
			moonLordMonolithShader = true;
			break;
		case 4054:
			bloodMoonMonolithShader = true;
			break;
		case 5345:
			CanSeeInvisibleBlocks = true;
			break;
		case 5347:
			shimmerMonolithShader = true;
			break;
		}
		if (currentItem.type == 5113)
		{
			dontStarveShader = !dontStarveShader;
		}
		if (currentItem.type == 2423)
		{
			autoJump = true;
			jumpSpeedBoost += 1.6f;
			extraFall += 10;
		}
		if (currentItem.type == 857)
		{
			hasJumpOption_Sandstorm = true;
		}
		if (currentItem.type == 983)
		{
			hasJumpOption_Sandstorm = true;
			jumpBoost = true;
		}
		if (currentItem.type == 987)
		{
			hasJumpOption_Blizzard = true;
		}
		if (currentItem.type == 1163)
		{
			hasJumpOption_Blizzard = true;
			jumpBoost = true;
		}
		if (currentItem.type == 1724)
		{
			hasJumpOption_Fart = true;
		}
		if (currentItem.type == 1863)
		{
			hasJumpOption_Fart = true;
			jumpBoost = true;
		}
		if (currentItem.type == 1164)
		{
			hasJumpOption_Cloud = true;
			hasJumpOption_Sandstorm = true;
			hasJumpOption_Blizzard = true;
			jumpBoost = true;
		}
		if (currentItem.type == 5331)
		{
			hasJumpOption_Cloud = true;
			hasJumpOption_Sandstorm = true;
			hasJumpOption_Blizzard = true;
			jumpBoost = true;
			noFallDmg = true;
			hasLuck_LuckyHorseshoe = true;
		}
		if (currentItem.type == 1250)
		{
			jumpBoost = true;
			hasJumpOption_Cloud = true;
			noFallDmg = true;
			hasLuck_LuckyHorseshoe = true;
		}
		if (currentItem.type == 1252)
		{
			hasJumpOption_Sandstorm = true;
			jumpBoost = true;
			noFallDmg = true;
			hasLuck_LuckyHorseshoe = true;
		}
		if (currentItem.type == 1251)
		{
			hasJumpOption_Blizzard = true;
			jumpBoost = true;
			noFallDmg = true;
			hasLuck_LuckyHorseshoe = true;
		}
		if (currentItem.type == 3250)
		{
			hasJumpOption_Fart = true;
			jumpBoost = true;
			noFallDmg = true;
			hasLuck_LuckyHorseshoe = true;
		}
		if (currentItem.type == 3252)
		{
			hasJumpOption_Sail = true;
			jumpBoost = true;
			noFallDmg = true;
			hasLuck_LuckyHorseshoe = true;
		}
		if (currentItem.type == 3251)
		{
			jumpBoost = true;
			honeyCombItem = currentItem;
			noFallDmg = true;
			hasLuck_LuckyHorseshoe = true;
		}
		if (currentItem.type == 1249)
		{
			jumpBoost = true;
			honeyCombItem = currentItem;
		}
		if (currentItem.type == 3241)
		{
			jumpBoost = true;
			hasJumpOption_Sail = true;
		}
		if ((currentItem.type == 1253 || currentItem.type == 3997) && (double)statLife <= (double)statLifeMax2 * 0.5)
		{
			AddBuff(62, 5);
		}
		if (currentItem.type == 1290)
		{
			panic = true;
		}
		if ((currentItem.type == 1300 || currentItem.type == 1858 || currentItem.type == 4005) && (inventory[selectedItem].useAmmo == AmmoID.Bullet || inventory[selectedItem].useAmmo == AmmoID.CandyCorn || inventory[selectedItem].useAmmo == AmmoID.Stake || inventory[selectedItem].useAmmo == 23 || inventory[selectedItem].useAmmo == AmmoID.Solution))
		{
			scope = true;
		}
		if (currentItem.type == 1858)
		{
			rangedCrit += 10;
			rangedDamage += 0.1f;
		}
		if (currentItem.type == 1301)
		{
			meleeCrit += 8;
			rangedCrit += 8;
			magicCrit += 8;
			meleeDamage += 0.1f;
			rangedDamage += 0.1f;
			magicDamage += 0.1f;
			minionDamage += 0.1f;
		}
		if (currentItem.type == 111)
		{
			statManaMax2 += 20;
		}
		if (currentItem.type == 982)
		{
			statManaMax2 += 20;
			manaRegenDelayBonus += 1f;
			manaRegenBonus += 25;
		}
		if (currentItem.type == 1595)
		{
			statManaMax2 += 20;
			magicCuffs = true;
		}
		if (currentItem.type == 2219)
		{
			manaMagnet = true;
		}
		if (currentItem.type == 2220)
		{
			manaMagnet = true;
			magicDamage += 0.15f;
		}
		if (currentItem.type == 2221)
		{
			manaMagnet = true;
			statManaMax2 += 20;
			magicCuffs = true;
		}
		if (whoAmI == Main.myPlayer && currentItem.type == 1923)
		{
			tileRangeX++;
			tileRangeY++;
		}
		if (currentItem.type == 1247)
		{
			starCloakItem = currentItem;
			honeyCombItem = currentItem;
			starCloakItem_beeCloakOverrideItem = currentItem;
		}
		if (currentItem.type == 1248)
		{
			meleeCrit += 10;
			rangedCrit += 10;
			magicCrit += 10;
		}
		if (currentItem.type == 854)
		{
			discountEquipped = true;
		}
		if (currentItem.type == 855)
		{
			hasLuckyCoin = true;
			hasLuck_LuckyCoin = true;
		}
		if (currentItem.type == 3033)
		{
			goldRing = true;
		}
		if (currentItem.type == 3034)
		{
			goldRing = true;
			hasLuckyCoin = true;
			hasLuck_LuckyCoin = true;
		}
		if (currentItem.type == 3035)
		{
			goldRing = true;
			hasLuckyCoin = true;
			hasLuck_LuckyCoin = true;
			discountEquipped = true;
		}
		if (currentItem.type == 53)
		{
			hasJumpOption_Cloud = true;
		}
		if (currentItem.type == 3201)
		{
			hasJumpOption_Sail = true;
		}
		if (currentItem.type == 54)
		{
			accRunSpeed = 6f;
		}
		if (currentItem.type == 3068)
		{
			cordage = true;
		}
		if (currentItem.type == 1579)
		{
			accRunSpeed = 6f;
		}
		if (currentItem.type == 3200)
		{
			accRunSpeed = 6f;
		}
		if (currentItem.type == 128)
		{
			rocketBoots = (vanityRocketBoots = 1);
		}
		if (currentItem.type == 156)
		{
			noKnockback = true;
		}
		if (currentItem.type == 158)
		{
			noFallDmg = true;
			hasLuck_LuckyHorseshoe = true;
		}
		if (currentItem.type == 934)
		{
			carpet = true;
		}
		if (currentItem.type == 953)
		{
			spikedBoots++;
		}
		if (currentItem.type == 975)
		{
			spikedBoots++;
		}
		if (currentItem.type == 976)
		{
			spikedBoots += 2;
		}
		if (currentItem.type == 977)
		{
			dashType = 1;
		}
		if (currentItem.type == 3097)
		{
			dashType = 2;
		}
		if (currentItem.type == 963)
		{
			blackBelt = true;
		}
		if (currentItem.type == 984)
		{
			blackBelt = true;
			dashType = 1;
			spikedBoots = 2;
		}
		if (currentItem.type == 1131)
		{
			gravControl2 = true;
		}
		if (currentItem.type == 1132)
		{
			honeyCombItem = currentItem;
		}
		if (currentItem.type == 1578)
		{
			honeyCombItem = currentItem;
			panic = true;
		}
		if (currentItem.type == 3224)
		{
			endurance += 0.17f;
		}
		if (currentItem.type == 3223)
		{
			brainOfConfusionItem = currentItem;
		}
		if (currentItem.type == 950)
		{
			iceSkate = true;
		}
		if (currentItem.type == 159)
		{
			jumpBoost = true;
		}
		if (currentItem.type == 3225)
		{
			jumpBoost = true;
		}
		if (currentItem.type == 187)
		{
			accFlipper = true;
		}
		if (currentItem.type == 211)
		{
			autoReuseGlove = true;
			meleeSpeed += 0.12f;
		}
		if (currentItem.type == 223)
		{
			manaCost -= 0.06f;
		}
		if (currentItem.type == 285)
		{
			moveSpeed += 0.05f;
		}
		if (currentItem.type == 212)
		{
			moveSpeed += 0.1f;
		}
		if (currentItem.type == 267)
		{
			killGuide = true;
		}
		if (currentItem.type == 1307)
		{
			killClothier = true;
		}
		if (currentItem.type == 193)
		{
			fireWalk = true;
		}
		if (currentItem.type == 861)
		{
			accMerman = true;
			wolfAcc = true;
			if (hideVisibleAccessory[itemSlot])
			{
				hideMerman = true;
				hideWolf = true;
			}
		}
		if (currentItem.type == 862)
		{
			starCloakItem = currentItem;
			longInvince = true;
			starCloakItem_starVeilOverrideItem = currentItem;
		}
		if (currentItem.type == 860)
		{
			pStone = true;
		}
		if (currentItem.type == 863)
		{
			waterWalk2 = true;
		}
		if (currentItem.type == 907)
		{
			waterWalk2 = true;
			fireWalk = true;
		}
		if (currentItem.type == 5044)
		{
			hasCreditsSceneMusicBox = true;
		}
		if (currentItem.type == 908 || currentItem.type == 5000)
		{
			waterWalk = true;
			fireWalk = true;
			lavaMax += 420;
			lavaRose = true;
		}
		if ((!mount.Active || mount.Type != 47) && !hideVisibleAccessory[itemSlot] && (currentItem.type == 4822 || currentItem.type == 4874))
		{
			DoBootsEffect(DoBootsEffect_PlaceFlamesOnTile);
		}
		if (currentItem.type == 906 || currentItem.type == 4038 || currentItem.type == 3999 || currentItem.type == 4003)
		{
			lavaMax += 420;
		}
		if (currentItem.type == 485)
		{
			wolfAcc = true;
			if (hideVisibleAccessory[itemSlot])
			{
				hideWolf = true;
			}
		}
		if (currentItem.type == 486)
		{
			rulerLine = true;
		}
		if (currentItem.type == 2799)
		{
			rulerGrid = true;
		}
		if (currentItem.type == 394)
		{
			accFlipper = true;
			accDivingHelm = true;
		}
		if (currentItem.type == 396)
		{
			noFallDmg = true;
			fireWalk = true;
			hasLuck_LuckyHorseshoe = true;
		}
		if (currentItem.type == 397)
		{
			noKnockback = true;
			fireWalk = true;
		}
		if (currentItem.type == 399)
		{
			jumpBoost = true;
			hasJumpOption_Cloud = true;
		}
		if (currentItem.type == 405)
		{
			accRunSpeed = 6f;
			rocketBoots = (vanityRocketBoots = 2);
		}
		if (currentItem.type == 1303)
		{
			if (!wet)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.225f, 0.05f, 0.15f);
			}
			if (wet)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 1.8f, 0.4f, 1.2f);
			}
		}
		if (currentItem.type == 1860)
		{
			accFlipper = true;
			accDivingHelm = true;
			if (!wet)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.225f, 0.05f, 0.15f);
			}
			if (wet)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 1.8f, 0.4f, 1.2f);
			}
		}
		if (currentItem.type == 1861)
		{
			arcticDivingGear = true;
			accFlipper = true;
			accDivingHelm = true;
			iceSkate = true;
			if (!wet)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.05f, 0.15f, 0.225f);
			}
			if (wet)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 1.2f, 1.8f);
			}
		}
		if (currentItem.type == 2214)
		{
			equippedAnyTileSpeedAcc = true;
		}
		if (currentItem.type == 2215)
		{
			equippedAnyTileRangeAcc = true;
		}
		if (currentItem.type == 2216)
		{
			autoPaint = true;
		}
		if (currentItem.type == 2217)
		{
			equippedAnyWallSpeedAcc = true;
		}
		if (currentItem.type == 3061)
		{
			equippedAnyWallSpeedAcc = true;
			equippedAnyTileSpeedAcc = true;
			autoPaint = true;
			equippedAnyTileRangeAcc = true;
		}
		if (currentItem.type == 5126)
		{
			equippedAnyWallSpeedAcc = true;
			equippedAnyTileSpeedAcc = true;
			autoPaint = true;
			equippedAnyTileRangeAcc = true;
			treasureMagnet = true;
			chiselSpeed = true;
		}
		if (currentItem.type == 3624)
		{
			autoActuator = true;
		}
		if (currentItem.type == 897)
		{
			kbGlove = true;
			autoReuseGlove = true;
			meleeScaleGlove = true;
			meleeSpeed += 0.12f;
		}
		if (currentItem.type == 1343)
		{
			kbGlove = true;
			autoReuseGlove = true;
			meleeScaleGlove = true;
			meleeSpeed += 0.12f;
			meleeDamage += 0.12f;
			magmaStone = true;
		}
		if (currentItem.type == 1167)
		{
			minionKB += 2f;
			minionDamage += 0.15f;
		}
		if (currentItem.type == 1864)
		{
			minionKB += 2f;
			minionDamage += 0.15f;
			maxMinions++;
		}
		if (currentItem.type == 1845)
		{
			minionDamage += 0.1f;
			maxMinions++;
		}
		if (currentItem.type == 1321)
		{
			magicQuiver = true;
			arrowDamageAdditiveStack += 0.1f;
		}
		if (currentItem.type == 1322)
		{
			magmaStone = true;
		}
		if (currentItem.type == 1323)
		{
			lavaRose = true;
		}
		if (currentItem.type == 3333)
		{
			strongBees = true;
		}
		if (currentItem.type == 938 || currentItem.type == 3997 || currentItem.type == 3998)
		{
			noKnockback = true;
			if ((float)statLife > (float)statLifeMax2 * 0.25f)
			{
				hasPaladinShield = true;
				if (whoAmI != Main.myPlayer && miscCounter % 10 == 0)
				{
					int myPlayer = Main.myPlayer;
					if (Main.player[myPlayer].team == team && team != 0)
					{
						float num = position.X - Main.player[myPlayer].position.X;
						float num2 = position.Y - Main.player[myPlayer].position.Y;
						if ((float)Math.Sqrt(num * num + num2 * num2) < 800f)
						{
							Main.player[myPlayer].AddBuff(43, 20);
						}
					}
				}
			}
		}
		if (currentItem.type == 936)
		{
			kbGlove = true;
			autoReuseGlove = true;
			meleeScaleGlove = true;
			meleeSpeed += 0.12f;
			meleeDamage += 0.12f;
		}
		if (currentItem.type == 898)
		{
			accRunSpeed = 6.75f;
			rocketBoots = (vanityRocketBoots = 2);
			moveSpeed += 0.08f;
		}
		if (currentItem.type == 1862)
		{
			accRunSpeed = 6.75f;
			rocketBoots = (vanityRocketBoots = 3);
			moveSpeed += 0.08f;
			iceSkate = true;
		}
		if (currentItem.type == 5000)
		{
			accRunSpeed = 6.75f;
			rocketBoots = (vanityRocketBoots = 4);
			moveSpeed += 0.08f;
			iceSkate = true;
		}
		if (currentItem.type == 4874)
		{
			accRunSpeed = 6f;
			rocketBoots = (vanityRocketBoots = 5);
		}
		if (currentItem.type == 3110)
		{
			accMerman = true;
			wolfAcc = true;
			if (hideVisibleAccessory[itemSlot])
			{
				hideMerman = true;
				hideWolf = true;
			}
		}
		if (currentItem.type == 1865 || currentItem.type == 3110)
		{
			skyStoneEffects = true;
		}
		if (currentItem.type == 899 && Main.dayTime)
		{
			skyStoneEffects = true;
		}
		if (currentItem.type == 900 && (!Main.dayTime || Main.eclipse))
		{
			skyStoneEffects = true;
		}
		if (currentItem.type == 407)
		{
			blockRange++;
		}
		if (currentItem.type == 489)
		{
			magicDamage += 0.15f;
		}
		if (currentItem.type == 490)
		{
			meleeDamage += 0.15f;
		}
		if (currentItem.type == 491)
		{
			rangedDamage += 0.15f;
		}
		if (currentItem.type == 2998)
		{
			minionDamage += 0.15f;
		}
		if (currentItem.type == 935)
		{
			magicDamage += 0.12f;
			meleeDamage += 0.12f;
			rangedDamage += 0.12f;
			minionDamage += 0.12f;
		}
		if (currentItem.wingSlot != -1)
		{
			wingTimeMax = GetWingStats(currentItem.wingSlot).FlyTime;
		}
		if (currentItem.wingSlot == 26)
		{
			ignoreWater = true;
		}
		if (currentItem.type == 5452)
		{
			remoteVisionForDrone = true;
		}
		if (currentItem.type == 885)
		{
			buffImmune[30] = true;
		}
		if (currentItem.type == 886)
		{
			buffImmune[36] = true;
		}
		if (currentItem.type == 887)
		{
			buffImmune[20] = true;
		}
		if (currentItem.type == 888)
		{
			buffImmune[22] = true;
		}
		if (currentItem.type == 889)
		{
			buffImmune[32] = true;
		}
		if (currentItem.type == 890)
		{
			buffImmune[35] = true;
		}
		if (currentItem.type == 891)
		{
			buffImmune[23] = true;
		}
		if (currentItem.type == 892)
		{
			buffImmune[33] = true;
		}
		if (currentItem.type == 893)
		{
			buffImmune[31] = true;
		}
		if (currentItem.type == 3781)
		{
			buffImmune[156] = true;
		}
		if (currentItem.type == 901)
		{
			buffImmune[33] = true;
			buffImmune[36] = true;
		}
		if (currentItem.type == 902)
		{
			buffImmune[30] = true;
			buffImmune[20] = true;
		}
		if (currentItem.type == 903)
		{
			buffImmune[32] = true;
			buffImmune[31] = true;
		}
		if (currentItem.type == 904)
		{
			buffImmune[35] = true;
			buffImmune[23] = true;
		}
		if (currentItem.type == 5354)
		{
			buffImmune[22] = true;
			buffImmune[156] = true;
		}
		if (currentItem.type == 5355 && !controlDownHold)
		{
			shimmerImmune = true;
		}
		if (currentItem.type == 1921)
		{
			buffImmune[46] = true;
			buffImmune[47] = true;
		}
		if (currentItem.type == 1612)
		{
			buffImmune[33] = true;
			buffImmune[36] = true;
			buffImmune[30] = true;
			buffImmune[20] = true;
			buffImmune[32] = true;
			buffImmune[31] = true;
			buffImmune[35] = true;
			buffImmune[23] = true;
			buffImmune[22] = true;
			buffImmune[156] = true;
		}
		if (currentItem.type == 1613)
		{
			buffImmune[46] = true;
			noKnockback = true;
			fireWalk = true;
			buffImmune[33] = true;
			buffImmune[36] = true;
			buffImmune[30] = true;
			buffImmune[20] = true;
			buffImmune[32] = true;
			buffImmune[31] = true;
			buffImmune[35] = true;
			buffImmune[23] = true;
			buffImmune[22] = true;
			buffImmune[156] = true;
		}
		if (currentItem.type == 497)
		{
			accMerman = true;
			if (hideVisibleAccessory[itemSlot])
			{
				hideMerman = true;
			}
		}
		if (currentItem.type == 535)
		{
			pStone = true;
		}
		if (currentItem.type == 536)
		{
			kbGlove = true;
			meleeScaleGlove = true;
		}
		if (currentItem.type == 532)
		{
			starCloakItem = currentItem;
		}
		if (currentItem.type == 554)
		{
			longInvince = true;
		}
		if (currentItem.type == 555)
		{
			manaFlower = true;
			manaCost -= 0.08f;
		}
		if (Main.myPlayer != whoAmI)
		{
			return;
		}
		if (currentItem.type == 5104 || currentItem.type == 5105)
		{
			ApplyWilsonBeard(currentItem);
		}
		else if (currentItem.type == 576 && Main.rand.Next(540) == 0 && Main.curMusic > 0 && Main.curMusic <= Main.maxMusic)
		{
			SoundEngine.PlaySound(SoundID.Item166, base.Center);
			int num3 = -1;
			if (Main.curMusic == 1)
			{
				num3 = 0;
			}
			if (Main.curMusic == 2)
			{
				num3 = 1;
			}
			if (Main.curMusic == 3)
			{
				num3 = 2;
			}
			if (Main.curMusic == 4)
			{
				num3 = 4;
			}
			if (Main.curMusic == 5)
			{
				num3 = 5;
			}
			if (Main.curMusic == 6)
			{
				num3 = 3;
			}
			if (Main.curMusic == 7)
			{
				num3 = 6;
			}
			if (Main.curMusic == 8)
			{
				num3 = 7;
			}
			if (Main.curMusic == 9)
			{
				num3 = 9;
			}
			if (Main.curMusic == 10)
			{
				num3 = 8;
			}
			if (Main.curMusic == 11)
			{
				num3 = 11;
			}
			if (Main.curMusic == 12)
			{
				num3 = 10;
			}
			if (Main.curMusic == 13)
			{
				num3 = 12;
			}
			if (Main.curMusic == 28)
			{
				currentItem.SetDefaults(1963);
			}
			else if (Main.curMusic == 29)
			{
				currentItem.SetDefaults(1610);
			}
			else if (Main.curMusic == 30)
			{
				currentItem.SetDefaults(1963);
			}
			else if (Main.curMusic == 31)
			{
				currentItem.SetDefaults(1964);
			}
			else if (Main.curMusic == 32)
			{
				currentItem.SetDefaults(1965);
			}
			else if (Main.curMusic == 33)
			{
				currentItem.SetDefaults(2742);
			}
			else if (Main.curMusic == 34)
			{
				currentItem.SetDefaults(3370);
			}
			else if (Main.curMusic == 35)
			{
				currentItem.SetDefaults(3236);
			}
			else if (Main.curMusic == 36)
			{
				currentItem.SetDefaults(3237);
			}
			else if (Main.curMusic == 37)
			{
				currentItem.SetDefaults(3235);
			}
			else if (Main.curMusic == 38)
			{
				currentItem.SetDefaults(3044);
			}
			else if (Main.curMusic == 39)
			{
				currentItem.SetDefaults(3371);
			}
			else if (Main.curMusic == 40)
			{
				currentItem.SetDefaults(3796);
			}
			else if (Main.curMusic == 41)
			{
				currentItem.SetDefaults(3869);
			}
			else if (Main.curMusic == 42)
			{
				currentItem.SetDefaults(4079);
			}
			else if (Main.curMusic == 43)
			{
				currentItem.SetDefaults(4077);
			}
			else if (Main.curMusic == 44)
			{
				currentItem.SetDefaults(4082);
			}
			else if (Main.curMusic == 46)
			{
				currentItem.SetDefaults(4080);
			}
			else if (Main.curMusic == 47)
			{
				currentItem.SetDefaults(4081);
			}
			else if (Main.curMusic == 48)
			{
				currentItem.SetDefaults(4078);
			}
			else if (Main.curMusic == 49)
			{
				currentItem.SetDefaults(4237);
			}
			else if (Main.curMusic == 51)
			{
				currentItem.SetDefaults(4356);
			}
			else if (Main.curMusic == 52)
			{
				currentItem.SetDefaults(4357);
			}
			else if (Main.curMusic == 53)
			{
				currentItem.SetDefaults(4358);
			}
			else if (Main.curMusic == 54)
			{
				currentItem.SetDefaults(4421);
			}
			else if (Main.curMusic == 55)
			{
				currentItem.SetDefaults(4606);
			}
			else if (Main.curMusic == 56)
			{
				currentItem.SetDefaults(4979);
			}
			else if (Main.curMusic == 57)
			{
				currentItem.SetDefaults(4985);
			}
			else if (Main.curMusic == 58)
			{
				currentItem.SetDefaults(4990);
			}
			else if (Main.curMusic == 59)
			{
				currentItem.SetDefaults(4991);
			}
			else if (Main.curMusic == 60)
			{
				currentItem.SetDefaults(4992);
			}
			else if (Main.curMusic == 61)
			{
				currentItem.SetDefaults(5006);
			}
			else if (Main.curMusic == 62)
			{
				currentItem.SetDefaults(5014);
			}
			else if (Main.curMusic == 63)
			{
				currentItem.SetDefaults(5015);
			}
			else if (Main.curMusic == 64)
			{
				currentItem.SetDefaults(5016);
			}
			else if (Main.curMusic == 65)
			{
				currentItem.SetDefaults(5017);
			}
			else if (Main.curMusic == 66)
			{
				currentItem.SetDefaults(5018);
			}
			else if (Main.curMusic == 67)
			{
				currentItem.SetDefaults(5019);
			}
			else if (Main.curMusic == 68)
			{
				currentItem.SetDefaults(5020);
			}
			else if (Main.curMusic == 69)
			{
				currentItem.SetDefaults(5021);
			}
			else if (Main.curMusic == 70)
			{
				currentItem.SetDefaults(5022);
			}
			else if (Main.curMusic == 71)
			{
				currentItem.SetDefaults(5023);
			}
			else if (Main.curMusic == 72)
			{
				currentItem.SetDefaults(5024);
			}
			else if (Main.curMusic == 73)
			{
				currentItem.SetDefaults(5025);
			}
			else if (Main.curMusic == 74)
			{
				currentItem.SetDefaults(5026);
			}
			else if (Main.curMusic == 75)
			{
				currentItem.SetDefaults(5027);
			}
			else if (Main.curMusic == 76)
			{
				currentItem.SetDefaults(5028);
			}
			else if (Main.curMusic == 77)
			{
				currentItem.SetDefaults(5029);
			}
			else if (Main.curMusic == 78)
			{
				currentItem.SetDefaults(5030);
			}
			else if (Main.curMusic == 79)
			{
				currentItem.SetDefaults(5031);
			}
			else if (Main.curMusic == 80)
			{
				currentItem.SetDefaults(5032);
			}
			else if (Main.curMusic == 81)
			{
				currentItem.SetDefaults(5033);
			}
			else if (Main.curMusic == 82)
			{
				currentItem.SetDefaults(5034);
			}
			else if (Main.curMusic == 83)
			{
				currentItem.SetDefaults(5035);
			}
			else if (Main.curMusic == 84)
			{
				currentItem.SetDefaults(5036);
			}
			else if (Main.curMusic == 85)
			{
				currentItem.SetDefaults(5037);
			}
			else if (Main.curMusic == 86)
			{
				currentItem.SetDefaults(5038);
			}
			else if (Main.curMusic == 87)
			{
				currentItem.SetDefaults(5039);
			}
			else if (Main.curMusic == 88)
			{
				currentItem.SetDefaults(5040);
			}
			else if (Main.curMusic == 89)
			{
				currentItem.SetDefaults(5044);
			}
			else if (Main.curMusic == 90)
			{
				currentItem.SetDefaults(5112);
			}
			else if (Main.curMusic == 91)
			{
				currentItem.SetDefaults(5362);
			}
			else if (Main.curMusic > 13)
			{
				currentItem.SetDefaults(1596 + Main.curMusic - 14);
			}
			else if (num3 != -1)
			{
				currentItem.SetDefaults(num3 + 562);
			}
		}
		ApplyMusicBox(currentItem);
	}

	private void ApplyWilsonBeard(Item currentItem)
	{
		beardGrowthTimer++;
		if (beardGrowthTimer >= 43200 && Main.rand.Next(540) == 0)
		{
			beardGrowthTimer = 0;
			short defaults = 5105;
			if (currentItem.type == 5105)
			{
				defaults = 5106;
			}
			SoundEngine.PlaySound(SoundID.Item60, base.Center);
			currentItem.SetDefaults(defaults);
		}
	}

	private void ApplyMusicBox(Item currentItem)
	{
		if (currentItem.type >= 562 && currentItem.type <= 574)
		{
			Main.musicBox2 = currentItem.type - 562;
		}
		if (currentItem.type >= 1596 && currentItem.type <= 1609)
		{
			Main.musicBox2 = currentItem.type - 1596 + 13;
		}
		if (currentItem.type == 1610)
		{
			Main.musicBox2 = 27;
		}
		if (currentItem.type == 1963)
		{
			Main.musicBox2 = 28;
		}
		if (currentItem.type == 1964)
		{
			Main.musicBox2 = 29;
		}
		if (currentItem.type == 1965)
		{
			Main.musicBox2 = 30;
		}
		if (currentItem.type == 2742)
		{
			Main.musicBox2 = 31;
		}
		if (currentItem.type == 3044)
		{
			Main.musicBox2 = 32;
		}
		if (currentItem.type == 3235)
		{
			Main.musicBox2 = 33;
		}
		if (currentItem.type == 3236)
		{
			Main.musicBox2 = 34;
		}
		if (currentItem.type == 3237)
		{
			Main.musicBox2 = 35;
		}
		if (currentItem.type == 3370)
		{
			Main.musicBox2 = 36;
		}
		if (currentItem.type == 3371)
		{
			Main.musicBox2 = 37;
		}
		if (currentItem.type == 3796)
		{
			Main.musicBox2 = 38;
		}
		if (currentItem.type == 3869)
		{
			Main.musicBox2 = 39;
		}
		if (currentItem.type == 4082)
		{
			Main.musicBox2 = 40;
		}
		if (currentItem.type == 4078)
		{
			Main.musicBox2 = 41;
		}
		if (currentItem.type == 4079)
		{
			Main.musicBox2 = 42;
		}
		if (currentItem.type == 4077)
		{
			Main.musicBox2 = 43;
		}
		if (currentItem.type == 4080)
		{
			Main.musicBox2 = 44;
		}
		if (currentItem.type == 4081)
		{
			Main.musicBox2 = 45;
		}
		if (currentItem.type == 4237)
		{
			Main.musicBox2 = 46;
		}
		if (currentItem.type == 4356)
		{
			Main.musicBox2 = 47;
		}
		if (currentItem.type == 4357)
		{
			Main.musicBox2 = 48;
		}
		if (currentItem.type == 4358)
		{
			Main.musicBox2 = 49;
		}
		if (currentItem.type == 4421)
		{
			Main.musicBox2 = 50;
		}
		if (currentItem.type == 4606)
		{
			Main.musicBox2 = 51;
		}
		if (currentItem.type == 4979)
		{
			Main.musicBox2 = 52;
		}
		if (currentItem.type == 4985)
		{
			Main.musicBox2 = 53;
		}
		if (currentItem.type == 4990)
		{
			Main.musicBox2 = 54;
		}
		if (currentItem.type == 4991)
		{
			Main.musicBox2 = 55;
		}
		if (currentItem.type == 4992)
		{
			Main.musicBox2 = 56;
		}
		if (currentItem.type == 5006)
		{
			Main.musicBox2 = 57;
		}
		if (currentItem.type == 5014)
		{
			Main.musicBox2 = 58;
		}
		if (currentItem.type == 5015)
		{
			Main.musicBox2 = 59;
		}
		if (currentItem.type == 5016)
		{
			Main.musicBox2 = 60;
		}
		if (currentItem.type == 5017)
		{
			Main.musicBox2 = 61;
		}
		if (currentItem.type == 5018)
		{
			Main.musicBox2 = 62;
		}
		if (currentItem.type == 5019)
		{
			Main.musicBox2 = 63;
		}
		if (currentItem.type == 5020)
		{
			Main.musicBox2 = 64;
		}
		if (currentItem.type == 5021)
		{
			Main.musicBox2 = 65;
		}
		if (currentItem.type == 5022)
		{
			Main.musicBox2 = 66;
		}
		if (currentItem.type == 5023)
		{
			Main.musicBox2 = 67;
		}
		if (currentItem.type == 5024)
		{
			Main.musicBox2 = 68;
		}
		if (currentItem.type == 5025)
		{
			Main.musicBox2 = 69;
		}
		if (currentItem.type == 5026)
		{
			Main.musicBox2 = 70;
		}
		if (currentItem.type == 5027)
		{
			Main.musicBox2 = 71;
		}
		if (currentItem.type == 5028)
		{
			Main.musicBox2 = 72;
		}
		if (currentItem.type == 5029)
		{
			Main.musicBox2 = 73;
		}
		if (currentItem.type == 5030)
		{
			Main.musicBox2 = 74;
		}
		if (currentItem.type == 5031)
		{
			Main.musicBox2 = 75;
		}
		if (currentItem.type == 5032)
		{
			Main.musicBox2 = 76;
		}
		if (currentItem.type == 5033)
		{
			Main.musicBox2 = 77;
		}
		if (currentItem.type == 5034)
		{
			Main.musicBox2 = 78;
		}
		if (currentItem.type == 5035)
		{
			Main.musicBox2 = 79;
		}
		if (currentItem.type == 5036)
		{
			Main.musicBox2 = 80;
		}
		if (currentItem.type == 5037)
		{
			Main.musicBox2 = 81;
		}
		if (currentItem.type == 5038)
		{
			Main.musicBox2 = 82;
		}
		if (currentItem.type == 5039)
		{
			Main.musicBox2 = 83;
		}
		if (currentItem.type == 5040)
		{
			Main.musicBox2 = 84;
		}
		if (currentItem.type == 5044)
		{
			Main.musicBox2 = 85;
		}
		if (currentItem.type == 5112)
		{
			Main.musicBox2 = 86;
		}
		if (currentItem.type == 5362)
		{
			Main.musicBox2 = 87;
		}
		Main.musicBoxNotModifiedByVolume = Main.musicBox2;
	}

	public void UpdateArmorSets(int i)
	{
		setBonus = "";
		if (body == 67 && legs == 56 && head >= 103 && head <= 105)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Shroomite");
			shroomiteStealth = true;
		}
		if ((head == 52 && body == 32 && legs == 31) || (head == 53 && body == 33 && legs == 32) || (head == 54 && body == 34 && legs == 33) || (head == 55 && body == 35 && legs == 34) || (head == 71 && body == 47 && legs == 43) || (head == 166 && body == 173 && legs == 108) || (head == 167 && body == 174 && legs == 109))
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Wood");
			statDefense++;
		}
		if (head == 278 && body == 246 && legs == 234)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.AshWood");
			ashWoodBonus = true;
		}
		if ((head == 1 && body == 1 && legs == 1) || ((head == 72 || head == 2) && body == 2 && legs == 2) || (head == 47 && body == 28 && legs == 27))
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.MetalTier1");
			statDefense += 2;
		}
		if ((head == 3 && body == 3 && legs == 3) || ((head == 73 || head == 4) && body == 4 && legs == 4) || (head == 48 && body == 29 && legs == 28) || (head == 49 && body == 30 && legs == 29))
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.MetalTier2");
			statDefense += 3;
		}
		if (head == 50 && body == 31 && legs == 30)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Platinum");
			statDefense += 4;
		}
		if (head == 112 && body == 75 && legs == 64)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Pumpkin");
			meleeDamage += 0.1f;
			magicDamage += 0.1f;
			rangedDamage += 0.1f;
			minionDamage += 0.1f;
		}
		if (head == 180 && body == 182 && legs == 122)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Gladiator");
			noKnockback = true;
		}
		if (head == 22 && body == 14 && legs == 14)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Ninja");
			moveSpeed += 0.2f;
		}
		if (head == 188 && body == 189 && legs == 129)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Fossil");
			ammoCost80 = true;
		}
		if ((head == 75 || head == 7) && body == 7 && legs == 7)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Bone");
			rangedCrit += 10;
		}
		if (head == 157 && body == 105 && legs == 98)
		{
			int num = 0;
			setBonus = Language.GetTextValue("ArmorSetBonus.BeetleDamage");
			beetleOffense = true;
			beetleCounter -= 3f;
			beetleCounter -= beetleCountdown / 20;
			beetleCountdown++;
			if (beetleCounter < 0f)
			{
				beetleCounter = 0f;
			}
			int num2 = 400;
			int num3 = 1200;
			int num4 = 3600;
			if (beetleCounter > (float)(num2 + num3 + num4 + num3))
			{
				beetleCounter = num2 + num3 + num4 + num3;
			}
			if (beetleCounter > (float)(num2 + num3 + num4))
			{
				AddBuff(100, 5, quiet: false);
				num = 3;
			}
			else if (beetleCounter > (float)(num2 + num3))
			{
				AddBuff(99, 5, quiet: false);
				num = 2;
			}
			else if (beetleCounter > (float)num2)
			{
				AddBuff(98, 5, quiet: false);
				num = 1;
			}
			if (num < beetleOrbs)
			{
				beetleCountdown = 0;
			}
			else if (num > beetleOrbs)
			{
				beetleCounter += 200f;
			}
			if (num != beetleOrbs && beetleOrbs > 0)
			{
				for (int j = 0; j < maxBuffs; j++)
				{
					if (buffType[j] >= 98 && buffType[j] <= 100 && buffType[j] != 97 + num)
					{
						DelBuff(j);
					}
				}
			}
		}
		else if (head == 157 && body == 106 && legs == 98)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.BeetleDefense");
			beetleDefense = true;
			beetleCounter += 1f;
			int num5 = 180;
			if (beetleCounter >= (float)num5)
			{
				if (beetleOrbs > 0 && beetleOrbs < 3)
				{
					for (int k = 0; k < maxBuffs; k++)
					{
						if (buffType[k] >= 95 && buffType[k] <= 96)
						{
							DelBuff(k);
						}
					}
				}
				if (beetleOrbs < 3)
				{
					AddBuff(95 + beetleOrbs, 5, quiet: false);
					beetleCounter = 0f;
				}
				else
				{
					beetleCounter = num5;
				}
			}
		}
		if (!beetleDefense && !beetleOffense)
		{
			beetleCounter = 0f;
		}
		else
		{
			beetleFrameCounter++;
			if (beetleFrameCounter >= 1)
			{
				beetleFrameCounter = 0;
				beetleFrame++;
				if (beetleFrame > 2)
				{
					beetleFrame = 0;
				}
			}
			for (int l = beetleOrbs; l < 3; l++)
			{
				beetlePos[l].X = 0f;
				beetlePos[l].Y = 0f;
			}
			for (int m = 0; m < beetleOrbs; m++)
			{
				beetlePos[m] += beetleVel[m];
				beetleVel[m].X += (float)Main.rand.Next(-100, 101) * 0.005f;
				beetleVel[m].Y += (float)Main.rand.Next(-100, 101) * 0.005f;
				float x = beetlePos[m].X;
				float y = beetlePos[m].Y;
				float num6 = (float)Math.Sqrt(x * x + y * y);
				if (num6 > 100f)
				{
					num6 = 20f / num6;
					x *= 0f - num6;
					y *= 0f - num6;
					int num7 = 10;
					beetleVel[m].X = (beetleVel[m].X * (float)(num7 - 1) + x) / (float)num7;
					beetleVel[m].Y = (beetleVel[m].Y * (float)(num7 - 1) + y) / (float)num7;
				}
				else if (num6 > 30f)
				{
					num6 = 10f / num6;
					x *= 0f - num6;
					y *= 0f - num6;
					int num8 = 20;
					beetleVel[m].X = (beetleVel[m].X * (float)(num8 - 1) + x) / (float)num8;
					beetleVel[m].Y = (beetleVel[m].Y * (float)(num8 - 1) + y) / (float)num8;
				}
				x = beetleVel[m].X;
				y = beetleVel[m].Y;
				num6 = (float)Math.Sqrt(x * x + y * y);
				if (num6 > 2f)
				{
					beetleVel[m] *= 0.9f;
				}
				beetlePos[m] -= velocity * 0.25f;
			}
		}
		if (head == 14 && ((body >= 58 && body <= 63) || body == 167 || body == 213))
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Wizard");
			magicCrit += 10;
		}
		if (head == 159 && ((body >= 58 && body <= 63) || body == 167 || body == 213))
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.MagicHat");
			statManaMax2 += 60;
		}
		if ((head == 5 || head == 74) && (body == 5 || body == 48) && (legs == 5 || legs == 44))
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.ShadowScale");
			shadowArmor = true;
		}
		if (head == 57 && body == 37 && legs == 35)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Crimson");
			crimsonRegen = true;
		}
		if (head == 101 && body == 66 && legs == 55)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.SpectreHealing");
			ghostHeal = true;
			magicDamage -= 0.4f;
		}
		if (head == 156 && body == 66 && legs == 55)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.SpectreDamage");
			ghostHurt = true;
		}
		if (head == 6 && body == 6 && legs == 6)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Meteor");
			spaceGun = true;
		}
		if (head == 46 && body == 27 && legs == 26)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Frost");
			frostBurn = true;
			meleeDamage += 0.1f;
			rangedDamage += 0.1f;
		}
		if ((head == 76 || head == 8) && (body == 49 || body == 8) && (legs == 45 || legs == 8))
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Jungle");
			manaCost -= 0.16f;
		}
		if (head == 9 && body == 9 && legs == 9)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Molten");
			meleeDamage += 0.1f;
			buffImmune[24] = true;
		}
		if ((head == 58 || head == 77) && (body == 38 || body == 50) && (legs == 36 || legs == 46))
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Snow");
			buffImmune[46] = true;
			buffImmune[47] = true;
		}
		if (head == 11 && body == 20 && legs == 19)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Mining");
			pickSpeed -= 0.1f;
		}
		if (head == 216 && body == 20 && legs == 19)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Mining");
			pickSpeed -= 0.1f;
		}
		if (head == 78 && body == 51 && legs == 47)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.ChlorophyteMelee");
			AddBuff(60, 18000);
			endurance += 0.05f;
		}
		else if ((head == 80 || head == 79) && body == 51 && legs == 47)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Chlorophyte");
			AddBuff(60, 18000);
		}
		else if (crystalLeaf)
		{
			for (int n = 0; n < maxBuffs; n++)
			{
				if (buffType[n] == 60)
				{
					DelBuff(n);
				}
			}
		}
		if (head == 161 && body == 169 && legs == 104)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Angler");
			anglerSetSpawnReduction = true;
		}
		if (head == 70 && body == 46 && legs == 42)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Cactus");
			cactusThorns = true;
		}
		if (head == 99 && body == 65 && legs == 54)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Turtle");
			endurance += 0.15f;
			thorns = 1f;
			turtleThorns = true;
		}
		if (body == 17 && legs == 16)
		{
			if (head == 29)
			{
				setBonus = Language.GetTextValue("ArmorSetBonus.CobaltCaster");
				manaCost -= 0.14f;
			}
			else if (head == 30)
			{
				setBonus = Language.GetTextValue("ArmorSetBonus.CobaltMelee");
				meleeSpeed += 0.15f;
			}
			else if (head == 31)
			{
				setBonus = Language.GetTextValue("ArmorSetBonus.CobaltRanged");
				ammoCost80 = true;
			}
		}
		if (body == 18 && legs == 17)
		{
			if (head == 32)
			{
				setBonus = Language.GetTextValue("ArmorSetBonus.MythrilCaster");
				manaCost -= 0.17f;
			}
			else if (head == 33)
			{
				setBonus = Language.GetTextValue("ArmorSetBonus.MythrilMelee");
				meleeCrit += 10;
			}
			else if (head == 34)
			{
				setBonus = Language.GetTextValue("ArmorSetBonus.MythrilRanged");
				ammoCost80 = true;
			}
		}
		if (body == 19 && legs == 18)
		{
			if (head == 35)
			{
				setBonus = Language.GetTextValue("ArmorSetBonus.AdamantiteCaster");
				manaCost -= 0.19f;
			}
			else if (head == 36)
			{
				setBonus = Language.GetTextValue("ArmorSetBonus.AdamantiteMelee");
				meleeSpeed += 0.2f;
				moveSpeed += 0.2f;
			}
			else if (head == 37)
			{
				setBonus = Language.GetTextValue("ArmorSetBonus.AdamantiteRanged");
				ammoCost75 = true;
			}
		}
		if (body == 54 && legs == 49 && (head == 83 || head == 84 || head == 85))
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Palladium");
			onHitRegen = true;
		}
		if (body == 55 && legs == 50 && (head == 86 || head == 87 || head == 88))
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Orichalcum");
			onHitPetal = true;
		}
		if (body == 56 && legs == 51)
		{
			bool flag = false;
			if (head == 91)
			{
				setBonus = Language.GetTextValue("ArmorSetBonus.Titanium");
				flag = true;
			}
			else if (head == 89)
			{
				setBonus = Language.GetTextValue("ArmorSetBonus.Titanium");
				flag = true;
			}
			else if (head == 90)
			{
				setBonus = Language.GetTextValue("ArmorSetBonus.Titanium");
				flag = true;
			}
			if (flag)
			{
				onHitTitaniumStorm = true;
			}
		}
		if ((body == 24 || body == 229) && (legs == 23 || legs == 212) && (head == 42 || head == 41 || head == 43 || head == 254 || head == 257 || head == 256 || head == 255 || head == 258))
		{
			if (head == 254 || head == 258)
			{
				setBonus = Language.GetTextValue("ArmorSetBonus.HallowedSummoner");
				maxMinions += 2;
			}
			else
			{
				setBonus = Language.GetTextValue("ArmorSetBonus.Hallowed");
			}
			onHitDodge = true;
		}
		if (head == 261 && body == 230 && legs == 213)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.CrystalNinja");
			rangedDamage += 0.1f;
			meleeDamage += 0.1f;
			magicDamage += 0.1f;
			minionDamage += 0.1f;
			rangedCrit += 10;
			meleeCrit += 10;
			magicCrit += 10;
			dashType = 5;
		}
		if (head == 82 && body == 53 && legs == 48)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Tiki");
			maxMinions++;
			whipRangeMultiplier += 0.2f;
		}
		if (head == 134 && body == 95 && legs == 79)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Spooky");
			minionDamage += 0.25f;
		}
		if (head == 160 && body == 168 && legs == 103)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Bee");
			minionDamage += 0.1f;
			if (itemAnimation > 0 && inventory[selectedItem].type == 1121)
			{
				AchievementsHelper.HandleSpecialEvent(this, 3);
			}
		}
		if (head == 162 && body == 170 && legs == 105)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Spider");
			minionDamage += 0.12f;
		}
		if (head == 171 && body == 177 && legs == 112)
		{
			endurance += 0.12f;
			setSolar = true;
			setBonus = Language.GetTextValue("ArmorSetBonus.Solar");
			solarCounter++;
			int num9 = 180;
			if (solarCounter >= num9)
			{
				if (solarShields > 0 && solarShields < 3)
				{
					for (int num10 = 0; num10 < maxBuffs; num10++)
					{
						if (buffType[num10] >= 170 && buffType[num10] <= 171)
						{
							DelBuff(num10);
						}
					}
				}
				if (solarShields < 3)
				{
					AddBuff(170 + solarShields, 5, quiet: false);
					for (int num11 = 0; num11 < 16; num11++)
					{
						Dust obj = Main.dust[Dust.NewDust(position, width, height, 6, 0f, 0f, 100)];
						obj.noGravity = true;
						obj.scale = 1.7f;
						obj.fadeIn = 0.5f;
						obj.velocity *= 5f;
						obj.shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
					}
					solarCounter = 0;
				}
				else
				{
					solarCounter = num9;
				}
			}
			for (int num12 = solarShields; num12 < 3; num12++)
			{
				solarShieldPos[num12] = Vector2.Zero;
			}
			for (int num13 = 0; num13 < solarShields; num13++)
			{
				solarShieldPos[num13] += solarShieldVel[num13];
				Vector2 vector = ((float)miscCounter / 100f * ((float)Math.PI * 2f) + (float)num13 * ((float)Math.PI * 2f / (float)solarShields)).ToRotationVector2() * 6f;
				vector.X = direction * 20;
				if (mount.Active && mount.Type == 52)
				{
					vector.X = direction * 50;
				}
				solarShieldVel[num13] = (vector - solarShieldPos[num13]) * 0.2f;
			}
			if (dashDelay >= 0)
			{
				solarDashing = false;
				solarDashConsumedFlare = false;
			}
			bool flag2 = solarDashing && dashDelay < 0;
			if (solarShields > 0 || flag2)
			{
				dashType = 3;
			}
		}
		else
		{
			solarCounter = 0;
		}
		if (head == 169 && body == 175 && legs == 110)
		{
			setVortex = true;
			setBonus = Language.GetTextValue("ArmorSetBonus.Vortex", Language.GetTextValue(Main.ReversedUpDownArmorSetBonuses ? "Key.UP" : "Key.DOWN"));
		}
		else
		{
			vortexStealthActive = false;
		}
		if (head == 170 && body == 176 && legs == 111)
		{
			if (nebulaCD > 0)
			{
				nebulaCD--;
			}
			setNebula = true;
			setBonus = Language.GetTextValue("ArmorSetBonus.Nebula");
		}
		if (head == 189 && body == 190 && legs == 130)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Stardust", Language.GetTextValue(Main.ReversedUpDownArmorSetBonuses ? "Key.UP" : "Key.DOWN"));
			setStardust = true;
			if (whoAmI == Main.myPlayer)
			{
				if (FindBuffIndex(187) == -1)
				{
					AddBuff(187, 3600);
				}
				if (ownedProjectileCounts[623] < 1)
				{
					int num14 = 10;
					int num15 = 30;
					int num16 = Projectile.NewProjectile(GetProjectileSource_SetBonus(7), base.Center.X, base.Center.Y, 0f, -1f, 623, num15, num14, Main.myPlayer);
					Main.projectile[num16].originalDamage = num15;
				}
			}
		}
		else if (FindBuffIndex(187) != -1)
		{
			DelBuff(FindBuffIndex(187));
		}
		if (head == 200 && body == 198 && legs == 142)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.Forbidden", Language.GetTextValue(Main.ReversedUpDownArmorSetBonuses ? "Key.UP" : "Key.DOWN"));
			setForbidden = true;
			UpdateForbiddenSetLock();
			Lighting.AddLight(base.Center, 0.8f, 0.7f, 0.2f);
		}
		if (head == 204 && body == 201 && legs == 145)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.SquireTier2");
			setSquireT2 = true;
			maxTurrets++;
		}
		if (head == 203 && body == 200 && legs == 144)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.ApprenticeTier2");
			setApprenticeT2 = true;
			maxTurrets++;
		}
		if (head == 205 && body == 202 && (legs == 147 || legs == 146))
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.HuntressTier2");
			setHuntressT2 = true;
			maxTurrets++;
		}
		if (head == 206 && body == 203 && legs == 148)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.MonkTier2");
			setMonkT2 = true;
			maxTurrets++;
		}
		if (head == 210 && body == 204 && legs == 152)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.SquireTier3");
			setSquireT3 = true;
			setSquireT2 = true;
			maxTurrets++;
		}
		if (head == 211 && body == 205 && legs == 153)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.ApprenticeTier3");
			setApprenticeT3 = true;
			setApprenticeT2 = true;
			maxTurrets++;
		}
		if (head == 212 && body == 206 && (legs == 154 || legs == 155))
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.HuntressTier3");
			setHuntressT3 = true;
			setHuntressT2 = true;
			maxTurrets++;
		}
		if (head == 213 && body == 207 && legs == 156)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.MonkTier3");
			setMonkT3 = true;
			setMonkT2 = true;
			maxTurrets++;
		}
		if (head == 185 && body == 187 && legs == 127)
		{
			setBonus = Language.GetTextValue("ArmorSetBonus.ObsidianOutlaw");
			minionDamage += 0.15f;
			whipRangeMultiplier += 0.3f;
			float num17 = 1.15f;
			float num18 = 1f / num17;
			whipUseTimeMultiplier *= num18;
		}
		ApplyArmorSoundAndDustChanges();
	}

	public void UpdateSocialShadow()
	{
		for (int num = 2; num > 0; num--)
		{
			shadowDirection[num] = shadowDirection[num - 1];
		}
		shadowDirection[0] = direction;
		shadowCount++;
		if (shadowCount == 1)
		{
			shadowPos[2] = shadowPos[1];
			shadowRotation[2] = shadowRotation[1];
			shadowOrigin[2] = shadowOrigin[1];
		}
		else if (shadowCount == 2)
		{
			shadowPos[1] = shadowPos[0];
			shadowRotation[1] = shadowRotation[0];
			shadowOrigin[1] = shadowOrigin[0];
		}
		else if (shadowCount >= 3)
		{
			shadowCount = 0;
			shadowPos[0] = position;
			shadowPos[0].Y += gfxOffY;
			shadowRotation[0] = fullRotation;
			shadowOrigin[0] = fullRotationOrigin;
		}
	}

	public void UpdateTeleportVisuals()
	{
		if (!(teleportTime > 0f))
		{
			return;
		}
		if (teleportStyle == 0)
		{
			if ((float)Main.rand.Next(100) <= 100f * teleportTime * 2f)
			{
				int num = Dust.NewDust(new Vector2(getRect().X, getRect().Y), getRect().Width, getRect().Height, 159);
				Main.dust[num].scale = teleportTime * 1.5f;
				Main.dust[num].noGravity = true;
				Main.dust[num].velocity *= 1.1f;
			}
		}
		else if (teleportStyle == 1)
		{
			if ((float)Main.rand.Next(100) <= 100f * teleportTime)
			{
				int num2 = Dust.NewDust(new Vector2(getRect().X, getRect().Y), getRect().Width, getRect().Height, 164);
				Main.dust[num2].scale = teleportTime * 1.5f;
				Main.dust[num2].noGravity = true;
				Main.dust[num2].velocity *= 1.1f;
			}
		}
		else if (teleportStyle == 2)
		{
			teleportTime = 0.005f;
		}
		else if (teleportStyle == 3)
		{
			teleportTime = 0.005f;
		}
		else if (teleportStyle == 4)
		{
			teleportTime -= 0.02f;
			if ((float)Main.rand.Next(100) <= 100f * teleportTime)
			{
				Dust obj = Main.dust[Dust.NewDust(position, width, height, 263)];
				obj.color = PortalHelper.GetPortalColor(lastPortalColorIndex);
				obj.noLight = true;
				obj.noGravity = true;
				obj.scale = 1.2f;
				obj.fadeIn = 0.4f;
			}
		}
		else if (teleportStyle == 9)
		{
			Rectangle hitbox = base.Hitbox;
			hitbox.Inflate(5, 5);
			if ((float)Main.rand.Next(100) <= 100f * teleportTime)
			{
				TeleportPylonsSystem.SpawnInWorldDust(lastTeleportPylonStyleUsed, hitbox);
			}
		}
		teleportTime -= 0.005f;
	}

	private void UpdateGraveyard(bool now = false)
	{
		float lerpValue = Utils.GetLerpValue(SceneMetrics.GraveyardTileMin, SceneMetrics.GraveyardTileMax, Main.SceneMetrics.GraveyardTileCount, clamped: true);
		if (now)
		{
			graveImmediateTime = 30;
		}
		if (graveImmediateTime > 0)
		{
			graveImmediateTime--;
			Main.GraveyardVisualIntensity = lerpValue;
		}
		else if (Main.GraveyardVisualIntensity < lerpValue)
		{
			Main.GraveyardVisualIntensity += 0.02f;
			if (Main.GraveyardVisualIntensity > lerpValue)
			{
				Main.GraveyardVisualIntensity = lerpValue;
			}
		}
		else if (Main.GraveyardVisualIntensity > lerpValue)
		{
			Main.GraveyardVisualIntensity -= 0.01f;
			if (Main.GraveyardVisualIntensity < lerpValue)
			{
				Main.GraveyardVisualIntensity = lerpValue;
			}
		}
	}

	public void ForceUpdateBiomes()
	{
		if (whoAmI == Main.myPlayer)
		{
			Main.GetAreaToLight(out var firstTileX, out var lastTileX, out var firstTileY, out var lastTileY);
			Rectangle value = new Rectangle(firstTileX, firstTileY, lastTileX - firstTileX, lastTileY - firstTileY);
			int num = 28;
			value.Inflate(num, num);
			Main.SceneMetrics.ScanAndExportToMain(new SceneMetricsScanSettings
			{
				VisualScanArea = value,
				BiomeScanCenterPositionInWorld = base.Center,
				ScanOreFinderData = accOreFinder
			});
			UpdateBiomes();
		}
	}

	public bool CanSeeShimmerEffects()
	{
		if (Main.SceneMetrics.ShimmerMonolithState == 2)
		{
			return false;
		}
		if (ZoneShimmer)
		{
			return true;
		}
		if (shimmerMonolithShader || Main.SceneMetrics.ShimmerMonolithState == 1)
		{
			return true;
		}
		if (!((double)(Main.screenPosition.Y / 16f) > Main.worldSurface + 50.0) || !(Main.screenPosition.Y / 16f < (float)(Main.maxTilesY - 330 - 100)))
		{
			return false;
		}
		return shimmering;
	}

	public void UpdateBiomes()
	{
		//IL_11ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_11b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_11c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_11ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_1255: Unknown result type (might be due to invalid IL or missing references)
		//IL_1261: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_11f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_11dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_11e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_12f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_1282: Unknown result type (might be due to invalid IL or missing references)
		//IL_1287: Unknown result type (might be due to invalid IL or missing references)
		//IL_128c: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_12b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_12ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_130b: Unknown result type (might be due to invalid IL or missing references)
		//IL_1310: Unknown result type (might be due to invalid IL or missing references)
		Point point = base.Center.ToTileCoordinates();
		ZoneDungeon = false;
		if (Main.SceneMetrics.DungeonTileCount >= 250 && (double)base.Center.Y > Main.worldSurface * 16.0)
		{
			int num = (int)base.Center.X / 16;
			int num2 = (int)base.Center.Y / 16;
			if (Main.tile[num, num2] != null && Main.wallDungeon[Main.tile[num, num2].wall])
			{
				ZoneDungeon = true;
			}
		}
		ZoneLihzhardTemple = false;
		int num3 = (int)base.Center.X / 16;
		int num4 = (int)base.Center.Y / 16;
		if (Main.tile[num3, num4] != null && Main.tile[num3, num4].wall == 87)
		{
			ZoneLihzhardTemple = true;
		}
		Tile tileSafely = Framing.GetTileSafely(base.Center);
		if (tileSafely != null)
		{
			behindBackWall = tileSafely.wall > 0;
		}
		if (behindBackWall && ZoneDesert && (double)base.Center.Y > Main.worldSurface)
		{
			if (WallID.Sets.Conversion.Sandstone[tileSafely.wall] || WallID.Sets.Conversion.HardenedSand[tileSafely.wall])
			{
				ZoneUndergroundDesert = true;
			}
		}
		else
		{
			ZoneUndergroundDesert = false;
		}
		if (behindBackWall && (tileSafely.wall == 184 || tileSafely.wall == 180))
		{
			ZoneGranite = true;
		}
		else
		{
			ZoneGranite = false;
		}
		if (behindBackWall && (tileSafely.wall == 183 || tileSafely.wall == 178))
		{
			ZoneMarble = true;
		}
		else
		{
			ZoneMarble = false;
		}
		if (behindBackWall && (tileSafely.wall == 108 || tileSafely.wall == 86))
		{
			ZoneHive = true;
		}
		else
		{
			ZoneHive = false;
		}
		if (behindBackWall && tileSafely.wall >= 48 && tileSafely.wall <= 53)
		{
			ZoneGemCave = true;
		}
		else
		{
			ZoneGemCave = false;
		}
		bool flag = (double)(Main.screenPosition.Y / 16f) > Main.worldSurface + 50.0 && Main.screenPosition.Y / 16f < (float)(Main.maxTilesY - 330 - 100);
		ZoneShimmer = Main.SceneMetrics.EnoughTilesForShimmer && flag;
		ZoneCorrupt = Main.SceneMetrics.EnoughTilesForCorruption;
		ZoneCrimson = Main.SceneMetrics.EnoughTilesForCrimson;
		ZoneHallow = Main.SceneMetrics.EnoughTilesForHallow;
		ZoneJungle = Main.SceneMetrics.EnoughTilesForJungle && position.Y / 16f < (float)Main.UnderworldLayer;
		ZoneSnow = Main.SceneMetrics.EnoughTilesForSnow;
		ZoneDesert = Main.SceneMetrics.EnoughTilesForDesert;
		ZoneGlowshroom = Main.SceneMetrics.EnoughTilesForGlowingMushroom;
		ZoneMeteor = Main.SceneMetrics.EnoughTilesForMeteor;
		ZoneWaterCandle = Main.SceneMetrics.WaterCandleCount > 0;
		ZonePeaceCandle = Main.SceneMetrics.PeaceCandleCount > 0;
		ZoneShadowCandle = Main.SceneMetrics.ShadowCandleCount > 0;
		ZoneGraveyard = Main.SceneMetrics.EnoughTilesForGraveyard;
		UpdateGraveyard();
		if (HasGardenGnomeNearby != Main.SceneMetrics.HasGardenGnome)
		{
			luckNeedsSync = true;
			HasGardenGnomeNearby = Main.SceneMetrics.HasGardenGnome;
		}
		ZoneUnderworldHeight = point.Y > Main.UnderworldLayer;
		ZoneRockLayerHeight = point.Y <= Main.UnderworldLayer && (double)point.Y > Main.rockLayer;
		ZoneDirtLayerHeight = (double)point.Y <= Main.rockLayer && (double)point.Y > Main.worldSurface;
		ZoneOverworldHeight = (double)point.Y <= Main.worldSurface && (double)point.Y > Main.worldSurface * 0.3499999940395355;
		ZoneSkyHeight = (double)point.Y <= Main.worldSurface * 0.3499999940395355;
		ZoneBeach = WorldGen.oceanDepths(point.X, point.Y);
		ZoneRain = Main.raining && (double)point.Y <= Main.worldSurface;
		if (Main.remixWorld)
		{
			ZoneSandstorm = (double)point.Y >= Main.rockLayer && ZoneDesert && !ZoneBeach && Sandstorm.Happening;
		}
		else
		{
			ZoneSandstorm = (double)point.Y <= Main.worldSurface && ZoneDesert && !ZoneBeach && Sandstorm.Happening;
		}
		bool flag3 = (ZoneTowerStardust = false);
		bool flag5 = (ZoneTowerNebula = flag3);
		bool zoneTowerSolar = (ZoneTowerVortex = flag5);
		ZoneTowerSolar = zoneTowerSolar;
		ZoneOldOneArmy = false;
		Vector2 vector = Vector2.Zero;
		Vector2 vector2 = Vector2.Zero;
		Vector2 vector3 = Vector2.Zero;
		Vector2 vector4 = Vector2.Zero;
		_ = Vector2.Zero;
		for (int i = 0; i < 200; i++)
		{
			if (!Main.npc[i].active)
			{
				continue;
			}
			if (Main.npc[i].type == 493)
			{
				if (Distance(Main.npc[i].Center) <= 4000f)
				{
					ZoneTowerStardust = true;
					vector4 = Main.npc[i].Center;
				}
			}
			else if (Main.npc[i].type == 507)
			{
				if (Distance(Main.npc[i].Center) <= 4000f)
				{
					ZoneTowerNebula = true;
					vector3 = Main.npc[i].Center;
				}
			}
			else if (Main.npc[i].type == 422)
			{
				if (Distance(Main.npc[i].Center) <= 4000f)
				{
					ZoneTowerVortex = true;
					vector2 = Main.npc[i].Center;
				}
			}
			else if (Main.npc[i].type == 517)
			{
				if (Distance(Main.npc[i].Center) <= 4000f)
				{
					ZoneTowerSolar = true;
					vector = Main.npc[i].Center;
				}
			}
			else if (Main.npc[i].type == 549 && Distance(Main.npc[i].Center) <= 4000f)
			{
				ZoneOldOneArmy = true;
				vector = Main.npc[i].Center;
			}
		}
		float num5 = 1f;
		float num6 = 1f;
		float num7 = Main.shimmerAlpha;
		if (CanSeeShimmerEffects())
		{
			num5 *= 1f;
			num6 *= 0.7f;
			if (num7 < 1f)
			{
				num7 += 0.025f;
				if (num7 > 1f)
				{
					num7 = 1f;
				}
			}
			if (num7 >= 0.5f)
			{
				Main.shimmerDarken = MathHelper.Clamp(Main.shimmerDarken + 0.025f, 0f, 1f);
				Main.shimmerBrightenDelay = 4f;
			}
		}
		else if (num7 > 0f)
		{
			Main.shimmerDarken = MathHelper.Clamp(Main.shimmerDarken - 0.05f, 0f, 1f);
			if (Main.shimmerDarken == 0f && Main.shimmerBrightenDelay > 0f)
			{
				Main.shimmerBrightenDelay -= 1f;
			}
			if (Main.shimmerBrightenDelay == 0f)
			{
				num7 -= 0.05f;
			}
			if (num7 < 0f)
			{
				num7 = 0f;
			}
		}
		Main.shimmerAlpha = num7;
		if (Main.getGoodWorld)
		{
			bool flag7 = false;
			int num8 = NPC.FindFirstNPC(245);
			if (num8 >= 0 && Vector2.Distance(base.Center, Main.npc[num8].Center) < 2000f)
			{
				flag7 = true;
			}
			if (flag7)
			{
				num5 *= 0.6f;
				num6 *= 0.6f;
			}
			else if (ZoneLihzhardTemple)
			{
				num5 *= 0.88f;
				num6 *= 0.88f;
			}
			else if (ZoneDungeon)
			{
				num5 *= 0.94f;
				num6 *= 0.94f;
			}
		}
		if (num5 != airLightDecay)
		{
			if (airLightDecay >= num5)
			{
				airLightDecay -= 0.005f;
				if (airLightDecay < num5)
				{
					airLightDecay = num5;
				}
			}
			else
			{
				airLightDecay += 0.005f;
				if (airLightDecay > num5)
				{
					airLightDecay = num5;
				}
			}
		}
		if (num6 != solidLightDecay)
		{
			if (solidLightDecay >= num6)
			{
				solidLightDecay -= 0.005f;
				if (solidLightDecay < num6)
				{
					solidLightDecay = num6;
				}
			}
			else
			{
				solidLightDecay += 0.005f;
				if (solidLightDecay > num6)
				{
					solidLightDecay = num6;
				}
			}
		}
		bool flag8 = ZoneRain && ZoneSnow;
		if (Main.remixWorld)
		{
			flag8 = (double)(position.Y / 16f) > Main.worldSurface && Main.raining && ZoneSnow;
		}
		bool flag9 = point.Y > Main.maxTilesY - 320;
		bool flag10 = ZoneOverworldHeight && (point.X < 380 || point.X > Main.maxTilesX - 380);
		ManageSpecialBiomeVisuals("Stardust", ZoneTowerStardust, vector4 - new Vector2(0f, 10f));
		ManageSpecialBiomeVisuals("Nebula", ZoneTowerNebula, vector3 - new Vector2(0f, 10f));
		ManageSpecialBiomeVisuals("Vortex", ZoneTowerVortex, vector2 - new Vector2(0f, 10f));
		ManageSpecialBiomeVisuals("Solar", ZoneTowerSolar, vector - new Vector2(0f, 10f));
		ManageSpecialBiomeVisuals("MoonLord", NPC.AnyNPCs(398));
		ManageSpecialBiomeVisuals("BloodMoon", Main.bloodMoon || Main.SceneMetrics.BloodMoonMonolith || bloodMoonMonolithShader);
		ManageSpecialBiomeVisuals("Blizzard", Main.UseStormEffects && flag8);
		ManageSpecialBiomeVisuals("HeatDistortion", Main.UseHeatDistortion && (flag9 || ((double)point.Y < Main.worldSurface && ZoneDesert && !flag10 && !Main.raining && !Filters.Scene["Sandstorm"].IsActive())));
		if (Main.GraveyardVisualIntensity > 0f)
		{
			if (!Filters.Scene["Graveyard"].IsActive())
			{
				Filters.Scene.Activate("Graveyard", default(Vector2));
			}
			else
			{
				Filters.Scene["Graveyard"].GetShader().UseTargetPosition(base.Center);
				float progress = MathHelper.Lerp(0f, 0.75f, Main.GraveyardVisualIntensity);
				Filters.Scene["Graveyard"].GetShader().UseProgress(progress);
				Filters.Scene["Graveyard"].GetShader().UseIntensity(1.2f);
			}
		}
		else if (Filters.Scene["Graveyard"].IsActive())
		{
			Filters.Scene.Deactivate("Graveyard");
		}
		if (!Filters.Scene["Sepia"].IsActive() && dontStarveShader)
		{
			Filters.Scene.Activate("Sepia", default(Vector2));
		}
		else if (Filters.Scene["Sepia"].IsActive() && !dontStarveShader)
		{
			Filters.Scene.Deactivate("Sepia");
		}
		if (!Filters.Scene["WaterDistortion"].IsActive() && Main.WaveQuality > 0)
		{
			Filters.Scene.Activate("WaterDistortion", default(Vector2));
		}
		else if (Filters.Scene["WaterDistortion"].IsActive() && Main.WaveQuality == 0)
		{
			Filters.Scene.Deactivate("WaterDistortion");
		}
		if (Filters.Scene["WaterDistortion"].IsActive())
		{
			float num9 = (float)Main.maxTilesX * 0.5f - Math.Abs((float)point.X - (float)Main.maxTilesX * 0.5f);
			float num10 = 1f;
			float num11 = Math.Abs(Main.windSpeedCurrent);
			num10 += num11 * 1.25f;
			float num12 = MathHelper.Clamp(Main.maxRaining, 0f, 1f);
			num10 += num12 * 1.25f;
			float num13 = 0f - (MathHelper.Clamp((num9 - 380f) / 100f, 0f, 1f) * 0.5f - 0.25f);
			num10 += num13;
			float num14 = 1f - MathHelper.Clamp(3f * ((float)((double)point.Y - Main.worldSurface) / (float)(Main.rockLayer - Main.worldSurface)), 0f, 1f);
			num10 *= num14;
			float num15 = 0.9f - MathHelper.Clamp((float)(Main.maxTilesY - point.Y - 200) / 300f, 0f, 1f) * 0.9f;
			num10 += num15;
			num10 += (1f - num14) * 0.75f;
			num10 = MathHelper.Clamp(num10, 0f, 2.5f);
			Filters.Scene["WaterDistortion"].GetShader().UseIntensity(num10);
		}
		if (flag9)
		{
			float val = (float)(point.Y - (Main.maxTilesY - 320)) / 120f;
			val = Math.Min(1f, val) * 2f;
			Filters.Scene["HeatDistortion"].GetShader().UseIntensity(val);
		}
		_shaderObstructionInternalValue = Utils.Clamp(_shaderObstructionInternalValue + (float)behindBackWall.ToDirectionInt() * -0.005f, -0.1f, 1.1f);
		_stormShaderObstruction = Utils.Clamp(_shaderObstructionInternalValue, 0f, 1f);
		if (Filters.Scene["Sandstorm"].IsActive())
		{
			Filters.Scene["Sandstorm"].GetShader().UseIntensity(_stormShaderObstruction * 0.4f * Math.Min(1f, Sandstorm.Severity));
			Filters.Scene["Sandstorm"].GetShader().UseOpacity(Math.Min(1f, Sandstorm.Severity * 1.5f) * _stormShaderObstruction);
			((SimpleOverlay)Overlays.Scene["Sandstorm"]).GetShader().UseOpacity(Math.Min(1f, Sandstorm.Severity * 1.5f) * (1f - _stormShaderObstruction));
		}
		else if (ZoneDesert && !flag10 && !Main.raining && !flag9)
		{
			Vector3 vector5 = Main.tileColor.ToVector3();
			float num16 = (vector5.X + vector5.Y + vector5.Z) / 3f;
			float num17 = _stormShaderObstruction * 4f * Math.Max(0f, 0.5f - Main.cloudAlpha) * num16;
			Filters.Scene["HeatDistortion"].GetShader().UseIntensity(num17);
			if (num17 <= 0f)
			{
				Filters.Scene["HeatDistortion"].IsHidden = true;
			}
			else
			{
				Filters.Scene["HeatDistortion"].IsHidden = false;
			}
		}
		if (!disabledBlizzardGraphic)
		{
			try
			{
				if (flag8)
				{
					float cloudAlpha = Main.cloudAlpha;
					if (Main.remixWorld)
					{
						Main.cloudAlpha = 0.4f;
					}
					bool value = NPC.IsADeerclopsNearScreen();
					_deerclopsBlizzardSmoothedEffect = MathHelper.Clamp(_deerclopsBlizzardSmoothedEffect + (float)value.ToDirectionInt() * 0.0033333334f, 0f, 1f);
					float num18 = Math.Min(1f, Main.cloudAlpha * 2f) * _stormShaderObstruction;
					float num19 = _stormShaderObstruction * 0.4f * Math.Min(1f, Main.cloudAlpha * 2f) * 0.9f + 0.1f;
					num19 = MathHelper.Lerp(num19, num19 * 0.5f, _deerclopsBlizzardSmoothedEffect);
					num18 = MathHelper.Lerp(num18, num18 * 0.5f, _deerclopsBlizzardSmoothedEffect);
					Filters.Scene["Blizzard"].GetShader().UseIntensity(num19);
					Filters.Scene["Blizzard"].GetShader().UseOpacity(num18);
					((SimpleOverlay)Overlays.Scene["Blizzard"]).GetShader().UseOpacity(1f - num18);
					if (Main.remixWorld)
					{
						Main.cloudAlpha = cloudAlpha;
					}
				}
			}
			catch
			{
				disabledBlizzardGraphic = true;
			}
		}
		if (!disabledBlizzardSound)
		{
			try
			{
				if (flag8)
				{
					ActiveSound activeSound = SoundEngine.GetActiveSound(_strongBlizzardSound);
					ActiveSound activeSound2 = SoundEngine.GetActiveSound(_insideBlizzardSound);
					if (activeSound == null)
					{
						_strongBlizzardSound = SoundEngine.PlayTrackedSound(SoundID.BlizzardStrongLoop);
					}
					if (activeSound2 == null)
					{
						_insideBlizzardSound = SoundEngine.PlayTrackedSound(SoundID.BlizzardInsideBuildingLoop);
					}
					SoundEngine.GetActiveSound(_strongBlizzardSound);
					activeSound2 = SoundEngine.GetActiveSound(_insideBlizzardSound);
				}
				if (flag8)
				{
					_blizzardSoundVolume = Math.Min(_blizzardSoundVolume + 0.01f, 1f);
				}
				else
				{
					_blizzardSoundVolume = Math.Max(_blizzardSoundVolume - 0.01f, 0f);
				}
				float num20 = Math.Min(1f, Main.cloudAlpha * 2f) * _stormShaderObstruction;
				ActiveSound activeSound3 = SoundEngine.GetActiveSound(_strongBlizzardSound);
				ActiveSound activeSound4 = SoundEngine.GetActiveSound(_insideBlizzardSound);
				if (_blizzardSoundVolume > 0f)
				{
					if (activeSound3 == null)
					{
						_strongBlizzardSound = SoundEngine.PlayTrackedSound(SoundID.BlizzardStrongLoop);
						activeSound3 = SoundEngine.GetActiveSound(_strongBlizzardSound);
					}
					activeSound3.Volume = num20 * _blizzardSoundVolume;
					if (activeSound4 == null)
					{
						_insideBlizzardSound = SoundEngine.PlayTrackedSound(SoundID.BlizzardInsideBuildingLoop);
						activeSound4 = SoundEngine.GetActiveSound(_insideBlizzardSound);
					}
					activeSound4.Volume = (1f - num20) * _blizzardSoundVolume;
				}
				else
				{
					if (activeSound3 != null)
					{
						activeSound3.Volume = 0f;
					}
					else
					{
						_strongBlizzardSound = SlotId.Invalid;
					}
					if (activeSound4 != null)
					{
						activeSound4.Volume = 0f;
					}
					else
					{
						_insideBlizzardSound = SlotId.Invalid;
					}
				}
			}
			catch
			{
				disabledBlizzardSound = true;
			}
		}
		if (!dead)
		{
			Point point2 = base.Center.ToTileCoordinates();
			if (WorldGen.InWorld(point2.X, point2.Y, 1))
			{
				int num21 = 0;
				if (Main.tile[point2.X, point2.Y] != null)
				{
					num21 = Main.tile[point2.X, point2.Y].wall;
				}
				switch (num21)
				{
				case 86:
					AchievementsHelper.HandleSpecialEvent(this, 12);
					break;
				case 62:
					AchievementsHelper.HandleSpecialEvent(this, 13);
					break;
				}
			}
			if (_funkytownAchievementCheckCooldown > 0)
			{
				_funkytownAchievementCheckCooldown--;
			}
			if (Main.specialSeedWorld)
			{
				AchievementsHelper.HandleSpecialEvent(this, 26);
			}
			if (position.Y / 16f > (float)Main.UnderworldLayer)
			{
				AchievementsHelper.HandleSpecialEvent(this, 14);
			}
			else if (_funkytownAchievementCheckCooldown == 0 && (double)(position.Y / 16f) < Main.worldSurface && ZoneGlowshroom)
			{
				AchievementsHelper.HandleSpecialEvent(this, 15);
			}
			else if (_funkytownAchievementCheckCooldown == 0 && ZoneGraveyard)
			{
				AchievementsHelper.HandleSpecialEvent(this, 18);
			}
		}
		else
		{
			_funkytownAchievementCheckCooldown = 100;
		}
	}

	private void TrySpawningFaelings()
	{
		if (!_wasInShimmerZone && ZoneShimmer && Main.netMode != 1)
		{
			NPC.SpawnFaelings(whoAmI);
		}
		_wasInShimmerZone = ZoneShimmer;
	}

	public void ManageSpecialBiomeVisuals(string biomeName, bool inZone, Vector2 activationSource = default(Vector2))
	{
		if (SkyManager.Instance[biomeName] != null && inZone != SkyManager.Instance[biomeName].IsActive())
		{
			if (inZone)
			{
				SkyManager.Instance.Activate(biomeName, activationSource);
			}
			else
			{
				SkyManager.Instance.Deactivate(biomeName);
			}
		}
		if (inZone != Filters.Scene[biomeName].IsActive())
		{
			if (inZone)
			{
				Filters.Scene.Activate(biomeName, activationSource);
			}
			else
			{
				Filters.Scene[biomeName].Deactivate();
			}
		}
		else if (inZone)
		{
			Filters.Scene[biomeName].GetShader().UseTargetPosition(activationSource);
		}
		if (Overlays.Scene[biomeName] != null && inZone != (Overlays.Scene[biomeName].Mode != OverlayMode.Inactive))
		{
			if (inZone)
			{
				Overlays.Scene.Activate(biomeName, activationSource);
			}
			else
			{
				Overlays.Scene[biomeName].Deactivate();
			}
		}
	}

	public void GetHairSettings(out bool fullHair, out bool hatHair, out bool hideHair, out bool backHairDraw, out bool drawsBackHairWithoutHeadgear)
	{
		fullHair = (hatHair = (hideHair = (drawsBackHairWithoutHeadgear = false)));
		switch (head)
		{
		case 0:
		case 259:
			drawsBackHairWithoutHeadgear = true;
			break;
		case 10:
		case 12:
		case 28:
		case 42:
		case 62:
		case 97:
		case 106:
		case 113:
		case 116:
		case 119:
		case 133:
		case 138:
		case 139:
		case 163:
		case 178:
		case 181:
		case 191:
		case 198:
		case 217:
		case 218:
		case 220:
		case 222:
		case 224:
		case 225:
		case 228:
		case 229:
		case 230:
		case 232:
		case 235:
		case 238:
		case 242:
		case 243:
		case 244:
		case 245:
		case 272:
		case 273:
		case 274:
		case 277:
			fullHair = true;
			break;
		case 13:
		case 14:
		case 15:
		case 16:
		case 18:
		case 21:
		case 24:
		case 25:
		case 26:
		case 29:
		case 40:
		case 44:
		case 51:
		case 56:
		case 59:
		case 60:
		case 63:
		case 64:
		case 65:
		case 67:
		case 68:
		case 69:
		case 81:
		case 92:
		case 94:
		case 95:
		case 100:
		case 114:
		case 121:
		case 126:
		case 130:
		case 136:
		case 140:
		case 143:
		case 145:
		case 158:
		case 159:
		case 161:
		case 182:
		case 184:
		case 190:
		case 195:
		case 215:
		case 216:
		case 219:
		case 223:
		case 226:
		case 227:
		case 231:
		case 233:
		case 234:
		case 262:
		case 263:
		case 264:
		case 265:
		case 267:
		case 275:
		case 279:
		case 280:
		case 281:
			hatHair = true;
			break;
		}
		if (face > -1 && ArmorIDs.Face.Sets.PreventHairDraw[face])
		{
			hideHair = true;
		}
		if (faceHead > -1 && head != 0)
		{
			hideHair = true;
		}
		int num = hair;
		backHairDraw = num > 50 && (num < 56 || num > 63) && (num < 74 || num > 77) && (num < 88 || num > 89) && num != 100 && num != 104 && num != 112 && num < 116;
		if (num == 133 || num == 134 || num == 146 || num == 162 || num == 6)
		{
			backHairDraw = true;
		}
	}

	public void UpdateDead()
	{
		shimmerUnstuckHelper.Clear();
		timeShimmering = 0;
		forcedGravity = 0;
		_portalPhysicsTime = 0;
		MountFishronSpecialCounter = 0f;
		gem = -1;
		ownedLargeGems = (byte)0;
		brainOfConfusionDodgeAnimationCounter = 0;
		ResetFloorFlags();
		wings = 0;
		wingsLogic = 0;
		ResetVisibleAccessories();
		poisoned = false;
		venom = false;
		onFire = false;
		dripping = false;
		drippingSlime = false;
		drippingSparkleSlime = false;
		hungry = false;
		heartyMeal = false;
		starving = false;
		burned = false;
		suffocating = false;
		onFire2 = false;
		onFire3 = false;
		onFrostBurn = false;
		onFrostBurn2 = false;
		shimmering = false;
		blind = false;
		blackout = false;
		loveStruck = false;
		dryadWard = false;
		stinky = false;
		resistCold = false;
		electrified = false;
		moonLeech = false;
		headcovered = false;
		vortexDebuff = false;
		windPushed = false;
		setForbidden = false;
		setMonkT3 = false;
		setHuntressT3 = false;
		setApprenticeT3 = false;
		setSquireT3 = false;
		setForbiddenCooldownLocked = false;
		setSolar = (setVortex = (setNebula = (setStardust = false)));
		nebulaLevelDamage = (nebulaLevelLife = (nebulaLevelMana = 0));
		trapDebuffSource = false;
		yoraiz0rEye = 0;
		yoraiz0rDarkness = false;
		hasFloatingTube = false;
		hasUnicornHorn = false;
		hasAngelHalo = false;
		hasRainbowCursor = false;
		leinforsHair = false;
		overrideFishingBobber = -1;
		gravDir = 1f;
		for (int i = 0; i < maxBuffs; i++)
		{
			if (buffType[i] <= 0 || !Main.persistentBuff[buffType[i]])
			{
				buffTime[i] = 0;
				buffType[i] = 0;
			}
		}
		if (whoAmI == Main.myPlayer)
		{
			Main.npcChatText = "";
			Main.editSign = false;
			Main.npcChatCornerItem = 0;
		}
		numMinions = 0;
		grappling[0] = -1;
		grappling[1] = -1;
		grappling[2] = -1;
		sign = -1;
		SetTalkNPC(-1);
		statLife = 0;
		channel = false;
		potionDelay = 0;
		chest = -1;
		tileEntityAnchor.Clear();
		changeItem = -1;
		itemAnimation = 0;
		immuneAlpha += 2;
		if (immuneAlpha > 255)
		{
			immuneAlpha = 255;
		}
		headPosition += headVelocity;
		bodyPosition += bodyVelocity;
		legPosition += legVelocity;
		headRotation += headVelocity.X * 0.1f;
		bodyRotation += bodyVelocity.X * 0.1f;
		legRotation += legVelocity.X * 0.1f;
		headVelocity.Y += 0.1f;
		bodyVelocity.Y += 0.1f;
		legVelocity.Y += 0.1f;
		headVelocity.X *= 0.99f;
		bodyVelocity.X *= 0.99f;
		legVelocity.X *= 0.99f;
		for (int j = 0; j < npcTypeNoAggro.Length; j++)
		{
			npcTypeNoAggro[j] = false;
		}
		if (difficulty == 2)
		{
			if (respawnTimer > 0)
			{
				respawnTimer = Utils.Clamp(respawnTimer - 1, 0, 3600);
			}
			else if (whoAmI == Main.myPlayer || Main.netMode == 2)
			{
				ghost = true;
			}
		}
		else
		{
			respawnTimer = Utils.Clamp(respawnTimer - 1, 0, 3600);
			if (respawnTimer <= 0 && Main.myPlayer == whoAmI)
			{
				if (Main.mouseItem.type > 0)
				{
					Main.playerInventory = true;
				}
				Spawn(PlayerSpawnContext.ReviveFromDeath);
			}
		}
		if (whoAmI == Main.myPlayer && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.blockInput)
		{
			PlayerInput.Triggers.Current.CopyInto(this);
			TryOpeningInGameOptionsBasedOnInput();
		}
	}

	private void TryOpeningInGameOptionsBasedOnInput()
	{
		if (controlInv)
		{
			if (releaseInventory)
			{
				releaseInventory = false;
				if (Main.ingameOptionsWindow)
				{
					IngameOptions.Close();
				}
				else
				{
					IngameOptions.Open();
				}
			}
		}
		else
		{
			releaseInventory = true;
		}
	}

	public void UpdatePet(int i)
	{
		if (i == Main.myPlayer && miscEquips[0].buffType >= 1 && miscEquips[0].stack >= 1)
		{
			int num = miscEquips[0].buffType;
			if ((Main.vanityPet[num] || Main.lightPet[num]) && !hideMisc[0] && (miscEquips[0].type != 603 || Main.runningCollectorsEdition) && FindBuffIndex(num) == -1)
			{
				AddBuff(num, 3600);
				SoundEngine.PlaySound(miscEquips[0].UseSound, position);
			}
		}
	}

	public void UpdatePetLight(int i)
	{
		if (i != Main.myPlayer || miscEquips[1].buffType < 1 || miscEquips[1].stack < 1)
		{
			return;
		}
		int num = miscEquips[1].buffType;
		if ((!Main.vanityPet[num] && !Main.lightPet[num]) || hideMisc[1] || (miscEquips[1].type == 603 && !Main.runningCollectorsEdition))
		{
			return;
		}
		int num2 = FindBuffIndex(num);
		if (num == 27 && num2 == -1)
		{
			num2 = FindBuffIndex(102);
		}
		if (num == 27 && num2 == -1)
		{
			num2 = FindBuffIndex(101);
		}
		if (num2 == -1)
		{
			if (num == 27)
			{
				num = Utils.SelectRandom<int>(Main.rand, 27, 102, 101);
			}
			AddBuff(num, 3600);
			SoundEngine.PlaySound(miscEquips[1].UseSound, position);
		}
	}

	public void TogglePet()
	{
		hideMisc[0] = !hideMisc[0];
		if (hideMisc[0])
		{
			ClearBuff(miscEquips[0].buffType);
		}
	}

	public void ToggleLight()
	{
		hideMisc[1] = !hideMisc[1];
		if (hideMisc[1])
		{
			ClearBuff(miscEquips[1].buffType);
			if (miscEquips[1].buffType == 27)
			{
				ClearBuff(102);
				ClearBuff(101);
			}
		}
	}

	public bool IsWithinSnappngRangeToTile(int x, int y, int distanceInPixels)
	{
		if ((new Vector2(x * 16 + 8, y * 16 + 8) - new Vector2(base.Center.X, base.Bottom.Y - 16f)).Length() <= (float)distanceInPixels)
		{
			return true;
		}
		return false;
	}

	public void SmartInteractLookup()
	{
		Main.ClearSmartInteract();
		if (UILinkPointNavigator.InUse || (PlayerInput.UsingGamepad && Main.HoveringOverAnNPC))
		{
			Main.SmartInteractTileCoordsSelected.Clear();
		}
		bool showGamepadHints = PlayerInput.SettingsForUI.ShowGamepadHints;
		bool flag = showGamepadHints || Main.SmartCursorIsUsed;
		if (!flag && !showGamepadHints)
		{
			_smartInteractSys.Clear();
			return;
		}
		SmartInteractLookup_PrepareCommonlyUsedInfo(out var mousevec, out var LX, out var HX, out var LY, out var HY);
		_smartInteractSys.RunQuery(new SmartInteractScanSettings
		{
			DemandOnlyZeroDistanceTargets = (PlayerInput.SettingsForUI.ShowGamepadHints && !Main.SmartCursorIsUsed),
			FullInteraction = flag,
			HX = HX,
			HY = HY,
			LX = LX,
			LY = LY,
			mousevec = mousevec,
			player = this
		});
	}

	private void SmartInteractLookup_PrepareCommonlyUsedInfo(out Vector2 mousevec, out int LX, out int HX, out int LY, out int HY)
	{
		mousevec = Main.ReverseGravitySupport(Main.MouseScreen) + Main.screenPosition;
		int num = 0;
		LX = (int)(position.X / 16f) - tileRangeX - num + 1;
		HX = (int)((position.X + (float)width) / 16f) + tileRangeX + num - 1;
		LY = (int)(position.Y / 16f) - tileRangeY - num + 1;
		HY = (int)((position.Y + (float)height) / 16f) + tileRangeY + num - 2;
		LX = Utils.Clamp(LX, 10, Main.maxTilesX - 10);
		HX = Utils.Clamp(HX, 10, Main.maxTilesX - 10);
		LY = Utils.Clamp(LY, 10, Main.maxTilesY - 10);
		HY = Utils.Clamp(HY, 10, Main.maxTilesY - 10);
	}

	public void SmartSelectLookup()
	{
		if (mouseInterface)
		{
			controlTorch = false;
		}
		if (controlTorch && itemAnimation == 0)
		{
			PlayerInput.smartSelectPointer.SmartSelectLookup_GetTargetTile(this, out var tX, out var tY);
			SmartSelect_GetToolStrategy(tX, tY, out var toolStrategy, out var wetTile);
			if (PlayerInput.UsingGamepad && _lastSmartCursorToolStrategy != -1)
			{
				toolStrategy = _lastSmartCursorToolStrategy;
			}
			if (toolStrategy == 0 || toolStrategy == 4)
			{
				float num = Math.Abs((float)Main.mouseX + Main.screenPosition.X - (position.X + (float)(width / 2)));
				float num2 = Math.Abs((float)Main.mouseY + Main.screenPosition.Y - (position.Y + (float)(height / 2))) * 1.3f;
				if ((float)Math.Sqrt(num * num + num2 * num2) > 200f)
				{
					toolStrategy = 5;
				}
			}
			SmartSelect_PickToolForStrategy(tX, tY, toolStrategy, wetTile);
			_lastSmartCursorToolStrategy = toolStrategy;
		}
		else if (itemAnimation == 0 && DpadRadial.SelectedItem != -1 && inventory[DpadRadial.SelectedItem].stack > 0)
		{
			if (nonTorch == -1)
			{
				nonTorch = selectedItem;
			}
			selectedItem = DpadRadial.SelectedItem;
			_lastSmartCursorToolStrategy = -1;
		}
		else if (itemAnimation == 0 && CircularRadial.SelectedItem != -1 && inventory[CircularRadial.SelectedItem].stack > 0)
		{
			if (nonTorch == -1)
			{
				nonTorch = selectedItem;
			}
			selectedItem = CircularRadial.SelectedItem;
			_lastSmartCursorToolStrategy = -1;
		}
		else if (nonTorch > -1 && itemAnimation == 0)
		{
			selectedItem = nonTorch;
			nonTorch = -1;
			_lastSmartCursorToolStrategy = -1;
		}
	}

	private void SmartSelectLookup_GetTargetTile(out int tX, out int tY)
	{
		tX = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
		tY = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
		if (gravDir == -1f)
		{
			tY = (int)((Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16f);
		}
	}

	private void SmartSelect_PickToolForStrategy(int tX, int tY, int toolStrategy, bool wetTile)
	{
		for (int i = 0; i < 50; i++)
		{
			int type = inventory[i].type;
			switch (toolStrategy)
			{
			case 0:
				if (ItemID.Sets.Torches[type])
				{
					SmartSelect_SelectItem(i);
					return;
				}
				if (type == 282 || type == 286 || type == 3002 || type == 3112 || type == 4776)
				{
					SmartSelect_SelectItem(i);
				}
				break;
			case 1:
				if (inventory[i].hammer > 0)
				{
					SmartSelect_SelectItem(i);
					return;
				}
				break;
			case 2:
				if (inventory[i].axe > 0)
				{
					SmartSelect_SelectItem(i);
					return;
				}
				break;
			case 3:
				if (inventory[i].pick > 0)
				{
					SmartSelect_SelectItem(i);
					return;
				}
				break;
			case 4:
				if (inventory[i].type != 282 && inventory[i].type != 286 && inventory[i].type != 3002 && inventory[i].type != 3112 && inventory[i].type != 4776 && inventory[i].type != 930 && ItemID.Sets.Torches[type] && !ItemID.Sets.WaterTorches[type])
				{
					if (nonTorch == -1)
					{
						nonTorch = selectedItem;
					}
					if (inventory[selectedItem].createTile != 4)
					{
						selectedItem = i;
					}
					break;
				}
				if ((type == 282 || type == 286 || type == 3002 || type == 3112 || type == 4776) && wetTile)
				{
					SmartSelect_SelectItem(i);
					return;
				}
				if (type == 930 && wetTile)
				{
					bool flag = false;
					for (int num = 57; num >= 0; num--)
					{
						if (inventory[num].ammo == inventory[i].useAmmo && inventory[num].stack > 0)
						{
							flag = true;
							break;
						}
					}
					if (flag)
					{
						SmartSelect_SelectItem(i);
						return;
					}
				}
				else if (ItemID.Sets.WaterTorches[type])
				{
					SmartSelect_SelectItem(i);
					return;
				}
				break;
			case 5:
				if (ItemID.Sets.Torches[type])
				{
					if (nonTorch == -1)
					{
						nonTorch = selectedItem;
					}
					if (inventory[selectedItem].createTile != 4)
					{
						selectedItem = i;
					}
					break;
				}
				switch (type)
				{
				case 930:
				{
					bool flag2 = false;
					for (int num2 = 57; num2 >= 0; num2--)
					{
						if (inventory[num2].ammo == inventory[i].useAmmo && inventory[num2].stack > 0)
						{
							flag2 = true;
							break;
						}
					}
					if (flag2)
					{
						SmartSelect_SelectItem(i);
						return;
					}
					break;
				}
				case 282:
				case 286:
				case 3002:
				case 3112:
				case 4776:
					SmartSelect_SelectItem(i);
					return;
				}
				break;
			case 6:
			{
				int num3 = Main.tile[tX, tY].frameX / 72;
				int num4 = -1;
				switch (num3)
				{
				case 0:
					num4 = 929;
					break;
				case 1:
					num4 = 1338;
					break;
				case 2:
					num4 = 1345;
					break;
				}
				if (type == num4)
				{
					SmartSelect_SelectItem(i);
					return;
				}
				break;
			}
			case 7:
			{
				ItemTrader itemTrader = TryGettingItemTraderFromBlock(Main.tile[tX, tY]);
				if (itemTrader != null && itemTrader.TryGetTradeOption(inventory[i], out var _))
				{
					SmartSelect_SelectItem(i);
					return;
				}
				if (ItemID.Sets.ExtractinatorMode[type] >= 0)
				{
					SmartSelect_SelectItem(i);
					return;
				}
				break;
			}
			case 8:
				if (ItemID.Sets.IsPaintScraper[type])
				{
					SmartSelect_SelectItem(i);
					return;
				}
				break;
			}
		}
	}

	private void SmartSelect_SelectItem(int t)
	{
		if (nonTorch == -1)
		{
			nonTorch = selectedItem;
		}
		selectedItem = t;
	}

	private void SmartSelect_GetToolStrategy(int tX, int tY, out int toolStrategy, out bool wetTile)
	{
		toolStrategy = 0;
		bool flag = false;
		wetTile = false;
		try
		{
			int num = 0;
			int num2 = 0;
			if (position.X / 16f >= (float)tX)
			{
				num = (int)(position.X / 16f) - tX;
			}
			if ((position.X + (float)width) / 16f <= (float)tX)
			{
				num = tX - (int)((position.X + (float)width) / 16f);
			}
			if (position.Y / 16f >= (float)tY)
			{
				num2 = (int)(position.Y / 16f) - tY;
			}
			if ((position.Y + (float)height) / 16f <= (float)tY)
			{
				num2 = tY - (int)((position.Y + (float)height) / 16f);
			}
			SmartSelect_GetAvailableToolRanges(out var pickRange, out var axeRange, out var hammerRange, out var cannonRange, out var extractItemRange, out var paintScraperRange);
			wetTile = Main.tile[tX, tY].liquid > 0;
			if (Main.tile[tX, tY].active())
			{
				int type = Main.tile[tX, tY].type;
				if ((type == 219 || type == 642) && num <= extractItemRange + tileRangeX && num2 <= extractItemRange + tileRangeY)
				{
					toolStrategy = 7;
					flag = true;
				}
				else if (type == 209 && num <= cannonRange + tileRangeX && num2 <= cannonRange + tileRangeY)
				{
					toolStrategy = 6;
					flag = true;
				}
				else if (Main.tileHammer[type] && num <= hammerRange + tileRangeX && num2 <= hammerRange + tileRangeY)
				{
					toolStrategy = 1;
					flag = true;
				}
				else if (Main.tileAxe[type] && num <= axeRange + tileRangeX && num2 <= axeRange + tileRangeY)
				{
					toolStrategy = 2;
					flag = true;
				}
				else if (type == 184 && num <= paintScraperRange + tileRangeX && num2 <= paintScraperRange + tileRangeY)
				{
					toolStrategy = 8;
					flag = true;
				}
				else if (num <= pickRange + tileRangeX && num2 <= pickRange + tileRangeY)
				{
					toolStrategy = 3;
					flag = true;
				}
			}
			else if (wetTile && wet)
			{
				toolStrategy = 4;
				flag = true;
			}
		}
		catch
		{
		}
		if (!flag && wet)
		{
			toolStrategy = 4;
		}
	}

	private void SmartSelect_GetAvailableToolRanges(out int pickRange, out int axeRange, out int hammerRange, out int cannonRange, out int extractItemRange, out int paintScraperRange)
	{
		pickRange = -10;
		axeRange = -10;
		hammerRange = -10;
		cannonRange = -10;
		extractItemRange = -10;
		paintScraperRange = -10;
		for (int i = 0; i < 50; i++)
		{
			if (inventory[i].pick > 0 && pickRange == -10)
			{
				pickRange = inventory[i].tileBoost;
			}
			if (inventory[i].axe > 0 && axeRange == -10)
			{
				axeRange = inventory[i].tileBoost;
			}
			if (inventory[i].hammer > 0 && hammerRange == -10)
			{
				hammerRange = inventory[i].tileBoost;
			}
			if ((inventory[i].type == 929 || inventory[i].type == 1338 || inventory[i].type == 1345) && cannonRange == -10)
			{
				cannonRange = inventory[i].tileBoost;
			}
			if (ItemID.Sets.IsPaintScraper[inventory[i].type] && paintScraperRange == -10)
			{
				paintScraperRange = inventory[i].tileBoost;
			}
			if (ItemID.Sets.ExtractinatorMode[inventory[i].type] != -1 && extractItemRange == -10)
			{
				extractItemRange = inventory[i].tileBoost;
			}
		}
	}

	private void EndOngoingTorchGodEvent()
	{
		if (happyFunTorchTime)
		{
			RelightTorches();
			happyFunTorchTime = false;
			if (Main.netMode == 1)
			{
				NetMessage.SendData(4, -1, -1, null, whoAmI);
			}
		}
	}

	private void TryRecalculatingTorchLuck()
	{
		if (happyFunTorchTime)
		{
			luckyTorchCounter = 0;
			TorchAttack();
			return;
		}
		if (torchGodCooldown > 0)
		{
			torchGodCooldown--;
		}
		Vector2 nextTorchLuckCheckCenter = _nextTorchLuckCheckCenter;
		if (false | ((double)nextTorchLuckCheckCenter.Y < Main.worldSurface * 16.0) | dead)
		{
			UpdateTorchLuck_ConsumeCountersAndCalculate();
			return;
		}
		int num = 1;
		int num2 = 40;
		int num3 = (int)nextTorchLuckCheckCenter.Y / 16 - num2;
		int value = (int)nextTorchLuckCheckCenter.X / 16 - num2;
		int value2 = (int)nextTorchLuckCheckCenter.X / 16 + num2;
		value = Utils.Clamp(value, 10, Main.maxTilesX - 10);
		value2 = Utils.Clamp(value2, 10, Main.maxTilesX - 10);
		for (int i = 0; i < num; i++)
		{
			int num4 = num3 + i + luckyTorchCounter * num;
			if (num4 < 10 || num4 > Main.maxTilesY - 10)
			{
				continue;
			}
			for (int j = value; j <= value2; j++)
			{
				Tile tile = Main.tile[j, num4];
				if (tile == null)
				{
					return;
				}
				if (!tile.active() || tile.type != 4 || tile.frameX < 0 || tile.frameY < 0)
				{
					continue;
				}
				if (tile.frameX < 66)
				{
					nearbyTorches++;
				}
				int num5 = tile.frameY / 22;
				if (num5 < TorchID.Count)
				{
					nearbyTorch[num5] = true;
					if (num5 == 17 && (tile.liquid == 0 || tile.liquidType() != 0))
					{
						dryCoralTorch = true;
					}
				}
			}
			if (num4 >= (int)nextTorchLuckCheckCenter.Y / 16 + num2)
			{
				UpdateTorchLuck_ConsumeCountersAndCalculate();
				return;
			}
		}
		luckyTorchCounter++;
	}

	private void RelightTorches()
	{
		torchGodCooldown = 3600;
		for (int i = 0; i < numberOfTorchAttacksMade; i++)
		{
			int num = unlitTorchX[i];
			int num2 = unlitTorchY[i];
			if (Main.tile[num, num2].type == 4 && Main.tile[num, num2].frameX >= 66)
			{
				Main.tile[num, num2].frameX -= 66;
				NetMessage.SendTileSquare(-1, num, num2);
			}
		}
	}

	private void TorchAttack()
	{
		if (whoAmI != Main.myPlayer)
		{
			return;
		}
		if ((double)position.Y < Main.worldSurface * 16.0)
		{
			EndOngoingTorchGodEvent();
			return;
		}
		AddBuff(80, 2);
		torchFunTimer++;
		if (torchFunTimer <= 20)
		{
			return;
		}
		torchFunTimer = 0;
		int num = 0;
		int num2 = 100;
		int value = (int)base.Center.X / 16 - num2;
		int value2 = (int)base.Center.X / 16 + num2;
		int value3 = (int)base.Center.Y / 16 - num2;
		int value4 = (int)base.Center.Y / 16 + num2;
		int num3 = Utils.Clamp(value, 10, Main.maxTilesX - 10);
		value2 = Utils.Clamp(value2, 10, Main.maxTilesX - 10);
		value3 = Utils.Clamp(value3, 10, Main.maxTilesY - 10);
		value4 = Utils.Clamp(value4, 10, Main.maxTilesY - 10);
		for (int i = num3; i <= value2; i++)
		{
			for (int j = value3; j <= value4; j++)
			{
				Tile tile = Main.tile[i, j];
				if (tile != null && (tile.active() & (tile.type == 4)) && tile.frameX < 66)
				{
					_torchAttackPosX[num] = i;
					_torchAttackPosY[num] = j;
					num++;
					if (num >= _torchAttackPosX.Length)
					{
						break;
					}
				}
			}
			if (num >= _torchAttackPosX.Length)
			{
				break;
			}
		}
		if (num == 0 || numberOfTorchAttacksMade >= maxTorchAttacks)
		{
			RelightTorches();
			happyFunTorchTime = false;
			if (Main.netMode == 1)
			{
				NetMessage.SendData(4, -1, -1, null, whoAmI);
			}
			if (numberOfTorchAttacksMade >= 95)
			{
				int number = Item.NewItem(new EntitySource_ByItemSourceId(this, 6), (int)position.X, (int)position.Y, width, height, 5043);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number, 1f);
				}
			}
		}
		else
		{
			if (num <= 0)
			{
				return;
			}
			int num4 = Main.rand.Next(num);
			int num5 = _torchAttackPosX[num4];
			int num6 = _torchAttackPosY[num4];
			if (Main.tile[num5, num6].type == 4 && Main.tile[num5, num6].frameX < 66)
			{
				float num7 = 8f;
				int num8 = 20;
				if (num8 < 10)
				{
					num8 = 10;
				}
				int num9 = (int)MathHelper.Clamp(Main.tile[num5, num6].frameY / 22, 0f, TorchID.Count - 1);
				num9 = TorchID.Dust[num9];
				Main.tile[num5, num6].frameX += 66;
				unlitTorchX[numberOfTorchAttacksMade] = num5;
				unlitTorchY[numberOfTorchAttacksMade] = num6;
				numberOfTorchAttacksMade++;
				NetMessage.SendTileSquare(-1, num5, num6);
				Vector2 vector = new Vector2(num5 * 16 + 8, num6 * 16);
				Vector2 vector2 = base.Center - vector;
				float num10 = vector2.Length();
				vector2.Normalize();
				vector2 *= num7;
				int num11 = Projectile.NewProjectile(GetProjectileSource_Misc(10), vector, vector2, 949, num8, 1f, whoAmI, num9, num10);
				Main.projectile[num11].ai[0] = num9;
				Main.projectile[num11].ai[1] = num10;
				Main.projectile[num11].netUpdate = true;
				if ((num == 1 && numberOfTorchAttacksMade >= 95) || numberOfTorchAttacksMade >= maxTorchAttacks)
				{
					torchFunTimer = -180;
				}
			}
		}
	}

	private void UpdateTorchLuck_ConsumeCountersAndCalculate()
	{
		luckyTorchCounter = 0;
		torchLuck = 0f;
		_nextTorchLuckCheckCenter = base.Center;
		if (inventory[selectedItem].createTile == 4 && inventory[selectedItem].placeStyle < TorchID.Count)
		{
			nearbyTorch[inventory[selectedItem].placeStyle] = true;
		}
		float num = 0f;
		float num2 = 0f;
		if (!ZoneDungeon && !ZoneLihzhardTemple)
		{
			if (nearbyTorch[9])
			{
				if (ZoneSnow)
				{
					num2 += 1f;
				}
				else
				{
					num += 1f;
				}
			}
			if (nearbyTorch[16])
			{
				if (ZoneDesert)
				{
					num2 += 1f;
				}
				else
				{
					num += 1f;
				}
			}
			if (nearbyTorch[17])
			{
				if (WorldGen.oceanDepths((int)base.Center.X / 16, (int)base.Center.Y / 16))
				{
					num2 += 1f;
				}
				else if (dryCoralTorch)
				{
					num += 1f;
				}
			}
			if (nearbyTorch[21])
			{
				if (ZoneJungle)
				{
					num2 += 1f;
				}
				else
				{
					num += 1f;
				}
			}
			if (nearbyTorch[22])
			{
				if (ZoneGlowshroom)
				{
					num2 += 1f;
				}
				else
				{
					num += 1f;
				}
			}
			if (nearbyTorch[18])
			{
				if (ZoneCorrupt)
				{
					num2 += 1f;
				}
				else
				{
					num += 1f;
				}
			}
			if (nearbyTorch[8] && ZoneCorrupt)
			{
				num2 += 1f;
			}
			if (nearbyTorch[19])
			{
				if (ZoneCrimson)
				{
					num2 += 1f;
				}
				else
				{
					num += 1f;
				}
			}
			if (nearbyTorch[11] && ZoneCrimson)
			{
				num2 += 1f;
			}
			if (nearbyTorch[20])
			{
				if (ZoneHallow)
				{
					num2 += 1f;
				}
				else
				{
					num += 1f;
				}
			}
			if (nearbyTorch[13] && !ZoneSnow && !ZoneDesert && !ZoneCorrupt && !ZoneCrimson && !ZoneHallow && !ZoneJungle)
			{
				num2 += 0.5f;
			}
			if (nearbyTorch[0])
			{
				if (ZoneSnow)
				{
					num += 2f;
				}
				else if (ZoneDesert || ZoneCorrupt || ZoneCrimson || ZoneHallow)
				{
					num += 0.5f;
				}
			}
		}
		if (num2 >= 1f)
		{
			torchLuck += 1f;
		}
		else if (num2 > 0f)
		{
			torchLuck += 0.5f;
		}
		if (num >= 2f)
		{
			torchLuck += -1.5f;
		}
		else if (num >= 1f)
		{
			torchLuck += -1f;
		}
		else if (num > 0f)
		{
			torchLuck += -0.5f;
		}
		dryCoralTorch = false;
		for (int i = 0; i < TorchID.Count; i++)
		{
			nearbyTorch[i] = false;
		}
		if (torchLuck < 0f)
		{
			torchLuck = 0f;
		}
		if (torchGodCooldown <= 0 && !unlockedBiomeTorches && nearbyTorches > 100 && !happyFunTorchTime && (double)position.Y > Main.worldSurface * 16.0)
		{
			bool flag = false;
			for (int j = 0; j < inventory.Length; j++)
			{
				if (inventory[j].type == 5043)
				{
					flag = true;
					break;
				}
			}
			if (!flag)
			{
				happyFunTorchTime = true;
				numberOfTorchAttacksMade = 0;
			}
		}
		nearbyTorches = 0;
	}

	public void AddCoinLuck(Vector2 coinPosition, int coinAmount)
	{
		if (!dead && Vector2.Distance(coinPosition, base.Center) < 1000f)
		{
			coinLuck += coinAmount;
			if (coinLuck > 1000000f)
			{
				coinLuck = 1000000f;
			}
			luckNeedsSync = true;
		}
	}

	private void UpdateCoinLuck()
	{
		if (!(coinLuck <= 0f))
		{
			coinLuck *= 0.9999f;
			if ((double)coinLuck < 0.25)
			{
				coinLuck = 0f;
			}
		}
	}

	private float CalculateCoinLuck()
	{
		if (coinLuck == 0f)
		{
			return 0f;
		}
		if (coinLuck > 249000f)
		{
			return 0.2f;
		}
		if (coinLuck > 24900f)
		{
			return 0.175f;
		}
		if (coinLuck > 24900f)
		{
			return 0.175f;
		}
		if (coinLuck > 2490f)
		{
			return 0.15f;
		}
		if (coinLuck > 249f)
		{
			return 0.125f;
		}
		if ((double)coinLuck > 24.9)
		{
			return 0.1f;
		}
		if ((double)coinLuck > 2.49)
		{
			return 0.075f;
		}
		if ((double)coinLuck > 0.249)
		{
			return 0.05f;
		}
		return 0.025f;
	}

	private float GetLadyBugLuck()
	{
		if (ladyBugLuckTimeLeft > 0)
		{
			return (float)ladyBugLuckTimeLeft / (float)NPC.ladyBugGoodLuckTime;
		}
		if (ladyBugLuckTimeLeft < 0)
		{
			return (0f - (float)ladyBugLuckTimeLeft) / (float)NPC.ladyBugBadLuckTime;
		}
		return 0f;
	}

	public static float GetClosestPlayersLuck(Point Position)
	{
		return Main.player[FindClosest(new Vector2(Position.X * 16, Position.Y * 16), 1, 1)].luck;
	}

	public static float GetClosestPlayersLuck(Vector2 Position)
	{
		return Main.player[FindClosest(Position, 1, 1)].luck;
	}

	public int RollLuck(int range)
	{
		if (luck > 0f && Main.rand.NextFloat() < luck)
		{
			return Main.rand.Next(Main.rand.Next(range / 2, range));
		}
		if (luck < 0f && Main.rand.NextFloat() < 0f - luck)
		{
			return Main.rand.Next(Main.rand.Next(range, range * 2));
		}
		return Main.rand.Next(range);
	}

	public static float GetClosestRollLuck(Vector2 position, int range)
	{
		return Main.player[FindClosest(position, 1, 1)].RollLuck(range);
	}

	public static float GetClosestRollLuck(int x, int y, int range)
	{
		return Main.player[FindClosest(new Vector2(x * 16, y * 16), 1, 1)].RollLuck(range);
	}

	public void ResetEffects()
	{
		if (extraAccessory && (Main.expertMode || Main.gameMenu))
		{
			extraAccessorySlots = 1;
		}
		else
		{
			extraAccessorySlots = 0;
		}
		if (shimmering)
		{
			shimmerTransparency += 0.015f;
			if (shimmerTransparency > 0.8f)
			{
				shimmerTransparency = 0.8f;
			}
		}
		else if (shimmerTransparency > 0f)
		{
			if (shimmerTransparency == 0.8f)
			{
				SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 3);
			}
			shimmerTransparency -= 0.015f;
			if (shimmerTransparency < 0f)
			{
				shimmerTransparency = 0f;
			}
		}
		shimmering = false;
		fairyBoots = false;
		hellfireTreads = false;
		moonLordLegs = false;
		flowerBoots = false;
		arcticDivingGear = false;
		noBuilding = false;
		strongBees = false;
		armorPenetration = 0;
		ashWoodBonus = false;
		shroomiteStealth = false;
		statDefense = 0;
		accWatch = 0;
		accCompass = 0;
		accDepthMeter = 0;
		accDivingHelm = false;
		canFloatInWater = false;
		lifeRegen = 0;
		manaCost = 1f;
		meleeSpeed = 1f;
		meleeDamage = 1f;
		rangedDamage = 1f;
		rangedMultDamage = 1f;
		magicDamage = 1f;
		minionDamage = 1f;
		summonerWeaponSpeedBonus = 0f;
		meleeCrit = 4;
		rangedCrit = 4;
		magicCrit = 4;
		hasFootball = false;
		drawingFootball = false;
		minionKB = 0f;
		moveSpeed = 1f;
		boneArmor = false;
		honey = false;
		frostArmor = false;
		rocketBoots = 0;
		vanityRocketBoots = 0;
		fireWalk = false;
		noKnockback = false;
		jumpBoost = false;
		frogLegJumpBoost = false;
		skyStoneEffects = false;
		noFallDmg = false;
		accFlipper = false;
		spawnMax = false;
		spaceGun = false;
		killGuide = false;
		killClothier = false;
		lavaImmune = false;
		gills = false;
		slowFall = false;
		findTreasure = false;
		biomeSight = false;
		invis = false;
		nightVision = false;
		enemySpawns = false;
		hasTitaniumStormBuff = false;
		thorns = 0f;
		aggro = 0;
		waterWalk = false;
		waterWalk2 = false;
		detectCreature = false;
		gravControl = false;
		if (forcedGravity > 0)
		{
			forcedGravity--;
		}
		honeyCombItem = null;
		gravControl2 = false;
		statLifeMax2 = statLifeMax;
		statManaMax2 = statManaMax;
		chloroAmmoCost80 = false;
		huntressAmmoCost90 = false;
		ammoCost80 = false;
		ammoCost75 = false;
		manaRegenBuff = false;
		hasCreditsSceneMusicBox = false;
		arrowDamage = 1f;
		arrowDamageAdditiveStack = 0f;
		bulletDamage = 1f;
		rocketDamage = 1f;
		coolWhipBuff = false;
		yoraiz0rEye = 0;
		yoraiz0rDarkness = false;
		hasFloatingTube = false;
		hasUnicornHorn = false;
		hasAngelHalo = false;
		hasRainbowCursor = false;
		leinforsHair = false;
		overrideFishingBobber = -1;
		suspiciouslookingTentacle = false;
		crimsonHeart = false;
		lightOrb = false;
		blueFairy = false;
		redFairy = false;
		greenFairy = false;
		wisp = false;
		bunny = false;
		turtle = false;
		eater = false;
		trident = false;
		skeletron = false;
		hornet = false;
		zephyrfish = false;
		tiki = false;
		lizard = false;
		parrot = false;
		sapling = false;
		cSapling = false;
		truffle = false;
		yoyoGlove = false;
		counterWeight = 0;
		stringColor = 0;
		yoyoString = false;
		shadowDodge = false;
		palladiumRegen = false;
		chaosState = false;
		onHitDodge = false;
		onHitRegen = false;
		onHitPetal = false;
		iceBarrier = false;
		onHitTitaniumStorm = false;
		maxMinions = 1;
		maxTurrets = 1;
		ammoBox = false;
		ammoPotion = false;
		penguin = false;
		sporeSac = false;
		shinyStone = false;
		empressBrooch = false;
		volatileGelatin = false;
		hasMagiluminescence = false;
		shadowArmor = false;
		if (Main.dontStarveWorld && Main.remixWorld)
		{
			dontStarveShader = false;
		}
		else
		{
			dontStarveShader = Main.dontStarveWorld;
		}
		eyebrellaCloud = false;
		stardustMonolithShader = false;
		nebulaMonolithShader = false;
		vortexMonolithShader = false;
		solarMonolithShader = false;
		moonLordMonolithShader = false;
		bloodMoonMonolithShader = false;
		shimmerMonolithShader = false;
		dd2Accessory = false;
		magicLantern = false;
		rabid = false;
		sunflower = false;
		wellFed = false;
		inferno = false;
		manaMagnet = false;
		lifeMagnet = false;
		treasureMagnet = false;
		chiselSpeed = false;
		lifeForce = false;
		dangerSense = false;
		endurance = 0f;
		whipRangeMultiplier = 1f;
		whipUseTimeMultiplier = 1f;
		calmed = false;
		beetleOrbs = 0;
		beetleBuff = false;
		miniMinotaur = false;
		goldRing = false;
		solarShields = 0;
		GoingDownWithGrapple = false;
		fishingSkill = 0;
		cratePotion = false;
		sonarPotion = false;
		accTackleBox = false;
		accFishingBobber = false;
		accFishingLine = false;
		accLavaFishing = false;
		accFishFinder = false;
		accWeatherRadio = false;
		accThirdEye = false;
		InfoAccMechShowWires = false;
		accJarOfSouls = false;
		accCalendar = false;
		accStopwatch = false;
		accOreFinder = false;
		accCritterGuide = false;
		accDreamCatcher = false;
		wallSpeed = 1f;
		tileSpeed = 1f;
		autoPaint = false;
		autoActuator = false;
		petFlagKingSlimePet = false;
		petFlagEyeOfCthulhuPet = false;
		petFlagEaterOfWorldsPet = false;
		petFlagBrainOfCthulhuPet = false;
		petFlagSkeletronPet = false;
		petFlagQueenBeePet = false;
		petFlagDestroyerPet = false;
		petFlagTwinsPet = false;
		petFlagSkeletronPrimePet = false;
		petFlagPlanteraPet = false;
		petFlagGolemPet = false;
		petFlagDukeFishronPet = false;
		petFlagLunaticCultistPet = false;
		petFlagMoonLordPet = false;
		petFlagFairyQueenPet = false;
		petFlagPumpkingPet = false;
		petFlagEverscreamPet = false;
		petFlagIceQueenPet = false;
		petFlagMartianPet = false;
		petFlagDD2OgrePet = false;
		petFlagDD2BetsyPet = false;
		petFlagQueenSlimePet = false;
		petFlagVoltBunny = false;
		petFlagShadowMimic = false;
		petFlagBabyWerewolf = false;
		petFlagDynamiteKitten = false;
		petFlagPlantero = false;
		petFlagBabyRedPanda = false;
		petFlagLilHarpy = false;
		petFlagFennecFox = false;
		petFlagGlitteryButterfly = false;
		petFlagBabyImp = false;
		petFlagBabyShark = false;
		petFlagUpbeatStar = false;
		petFlagDD2Gato = false;
		petFlagDD2Dragon = false;
		petFlagDD2Ghost = false;
		petFlagBerniePet = false;
		petFlagGlommerPet = false;
		petFlagDeerclopsPet = false;
		petFlagPigPet = false;
		petFlagChesterPet = false;
		petFlagJunimoPet = false;
		petFlagBlueChickenPet = false;
		petFlagSpiffo = false;
		petFlagCaveling = false;
		petFlagDirtiestBlock = false;
		companionCube = false;
		petFlagSugarGlider = false;
		babyFaceMonster = false;
		manaSick = false;
		puppy = false;
		grinch = false;
		blackCat = false;
		spider = false;
		squashling = false;
		magicCuffs = false;
		coldDash = false;
		desertDash = false;
		desertBoots = false;
		sailDash = false;
		cordage = false;
		magicQuiver = false;
		shimmerImmune = false;
		hasMoltenQuiver = false;
		magmaStone = false;
		hasRaisableShield = false;
		lavaRose = false;
		eyeSpring = false;
		snowman = false;
		scope = false;
		panic = false;
		brainOfConfusionItem = null;
		dino = false;
		crystalLeaf = false;
		pygmy = false;
		raven = false;
		slime = false;
		hornetMinion = false;
		impMinion = false;
		twinsMinion = false;
		spiderMinion = false;
		pirateMinion = false;
		sharknadoMinion = false;
		stardustMinion = false;
		batsOfLight = false;
		babyBird = false;
		stormTiger = false;
		flinxMinion = false;
		abigailMinion = false;
		smolstar = false;
		empressBlade = false;
		stardustGuardian = false;
		stardustDragon = false;
		UFOMinion = false;
		DeadlySphereMinion = false;
		chilled = false;
		tipsy = false;
		dazed = false;
		frozen = false;
		stoned = false;
		webbed = false;
		ichor = false;
		manaRegenBonus = 0;
		manaRegenDelayBonus = 0f;
		carpet = false;
		iceSkate = false;
		dashType = 0;
		spikedBoots = 0;
		blackBelt = false;
		lavaMax = 0;
		archery = false;
		poisoned = false;
		venom = false;
		blind = false;
		blackout = false;
		onFire = false;
		dripping = false;
		hungry = false;
		heartyMeal = false;
		starving = false;
		drippingSlime = false;
		drippingSparkleSlime = false;
		burned = false;
		suffocating = false;
		onFire2 = false;
		onFire3 = false;
		onFrostBurn = false;
		onFrostBurn2 = false;
		frostBurn = false;
		noItems = false;
		cursed = false;
		blockRange = 0;
		pickSpeed = 1f;
		wereWolf = false;
		rulerGrid = false;
		rulerLine = true;
		bleed = false;
		confused = false;
		witheredArmor = false;
		witheredWeapon = false;
		parryDamageBuff = false;
		slowOgreSpit = false;
		wings = 0;
		wingsLogic = 0;
		wingTimeMax = 0;
		brokenArmor = false;
		silence = false;
		slow = false;
		gross = false;
		tongued = false;
		kbGlove = false;
		autoReuseGlove = false;
		meleeScaleGlove = false;
		remoteVisionForDrone = false;
		kbBuff = false;
		starCloakItem = null;
		starCloakItem_manaCloakOverrideItem = null;
		starCloakItem_starVeilOverrideItem = null;
		starCloakItem_beeCloakOverrideItem = null;
		longInvince = false;
		pStone = false;
		manaFlower = false;
		crimsonRegen = false;
		ghostHeal = false;
		ghostHurt = false;
		turtleArmor = false;
		turtleThorns = false;
		cactusThorns = false;
		spiderArmor = false;
		anglerSetSpawnReduction = false;
		loveStruck = false;
		stinky = false;
		dryadWard = false;
		resistCold = false;
		electrified = false;
		moonLeech = false;
		headcovered = false;
		vortexDebuff = false;
		windPushed = false;
		ballistaPanic = false;
		vampireFrog = false;
		CanSeeInvisibleBlocks = false;
		setVortex = (setNebula = (setStardust = false));
		setForbidden = false;
		setHuntressT3 = false;
		setSquireT3 = false;
		setMonkT3 = false;
		setApprenticeT3 = false;
		setHuntressT2 = false;
		setSquireT2 = false;
		setMonkT2 = false;
		setApprenticeT2 = false;
		setForbiddenCooldownLocked = false;
		nebulaLevelDamage = (nebulaLevelLife = (nebulaLevelMana = 0));
		ignoreWater = false;
		meleeEnchant = 0;
		discountEquipped = false;
		hasLuckyCoin = false;
		boneGloveItem = null;
		hasLuck_LuckyCoin = false;
		hasLuck_LuckyHorseshoe = false;
		hasJumpOption_Cloud = false;
		hasJumpOption_Sail = false;
		hasJumpOption_Sandstorm = false;
		hasJumpOption_Blizzard = false;
		hasJumpOption_Fart = false;
		hasJumpOption_Unicorn = false;
		hasJumpOption_Santank = false;
		hasJumpOption_WallOfFleshGoat = false;
		hasJumpOption_Basilisk = false;
		defendedByPaladin = false;
		hasPaladinShield = false;
		hasLucyTheAxe = false;
		preventAllItemPickups = false;
		dontHurtCritters = false;
		dontHurtNature = false;
		portableStoolInfo.Reset();
		ResizeHitbox();
		autoJump = false;
		justJumped = false;
		jumpSpeedBoost = 0f;
		extraFall = 0;
		creativeGodMode = false;
		if (phantasmTime > 0)
		{
			phantasmTime--;
		}
		if (brainOfConfusionDodgeAnimationCounter > 0)
		{
			brainOfConfusionDodgeAnimationCounter--;
		}
		if (wireOperationsCooldown > 0)
		{
			wireOperationsCooldown--;
		}
		if (releaseUseItem)
		{
			ActuationRodLock = false;
		}
		for (int i = 0; i < npcTypeNoAggro.Length; i++)
		{
			npcTypeNoAggro[i] = false;
		}
		ResetProjectileCaches();
		if (whoAmI == Main.myPlayer && !isDisplayDollOrInanimate)
		{
			equipmentBasedLuckBonus = 0f;
			luckPotion = 0;
			tileRangeX = 5;
			tileRangeY = 4;
			if (Main.GameModeInfo.IsJourneyMode)
			{
				CreativePowers.FarPlacementRangePower power = CreativePowerManager.Instance.GetPower<CreativePowers.FarPlacementRangePower>();
				if (power.GetIsUnlocked() && power.IsEnabledForPlayer(whoAmI))
				{
					tileRangeX *= 2;
					tileRangeY *= 2;
					tileRangeX += 8;
					tileRangeY += 8;
				}
			}
		}
		mount.CheckMountBuff(this);
	}

	private void UpdateLadyBugLuckTime()
	{
		if (ladyBugLuckTimeLeft > 0)
		{
			ladyBugLuckTimeLeft -= Main.dayRate;
			if (ladyBugLuckTimeLeft < 0)
			{
				ladyBugLuckTimeLeft = 0;
			}
		}
		else if (ladyBugLuckTimeLeft < 0)
		{
			ladyBugLuckTimeLeft += Main.dayRate;
			if (ladyBugLuckTimeLeft > 0)
			{
				ladyBugLuckTimeLeft = 0;
			}
		}
	}

	public void UpdateImmunity()
	{
		if (immune)
		{
			immuneTime--;
			if (immuneTime <= 0)
			{
				immune = false;
				immuneNoBlink = false;
			}
			if (immuneNoBlink)
			{
				immuneAlpha = 0;
			}
			else
			{
				immuneAlpha += immuneAlphaDirection * 50;
				if (immuneAlpha <= 50)
				{
					immuneAlphaDirection = 1;
				}
				else if (immuneAlpha >= 205)
				{
					immuneAlphaDirection = -1;
				}
			}
		}
		else
		{
			immuneAlpha = 0;
		}
		for (int i = 0; i < hurtCooldowns.Length; i++)
		{
			if (hurtCooldowns[i] > 0)
			{
				hurtCooldowns[i]--;
			}
		}
	}

	private void TryToPoop()
	{
		if (whoAmI != Main.myPlayer || !wellFed)
		{
			return;
		}
		int maxValue = 600;
		if (Main.rand.Next(maxValue) != 0)
		{
			return;
		}
		int num = 3;
		int num2 = FindBuffIndex(207);
		if (num2 == -1)
		{
			num = 2;
			num2 = FindBuffIndex(206);
		}
		if (num2 == -1)
		{
			num = 1;
			num2 = FindBuffIndex(26);
		}
		if (num2 != -1)
		{
			int num3 = buffTime[num2];
			DelBuff(num2);
			int stack = Utils.Clamp(num3 / 3600 * num, num, 999);
			Vector2 mountedCenter = MountedCenter;
			ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.Digestion, new ParticleOrchestraSettings
			{
				PositionInWorld = mountedCenter,
				MovementVector = new Vector2(-direction, 0f)
			}, whoAmI);
			int num4 = Item.NewItem(GetItemSource_Misc(9), mountedCenter, Vector2.Zero, 5395, stack, noBroadcast: false, 0, noGrabDelay: true);
			if (Main.netMode == 0)
			{
				Main.item[num4].noGrabDelay = 100;
			}
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, num4);
			}
		}
	}

	public void UpdateLifeRegen()
	{
		bool flag = false;
		if (shinyStone && IsStandingStillForSpecialEffects && itemAnimation == 0)
		{
			flag = true;
		}
		if (poisoned)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegenTime = 0f;
			lifeRegen -= 4;
		}
		if (venom)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegenTime = 0f;
			lifeRegen -= 30;
		}
		if (onFire)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegenTime = 0f;
			lifeRegen -= 8;
		}
		if (onFire3)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegenTime = 0f;
			lifeRegen -= 8;
		}
		if (onFrostBurn)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegenTime = 0f;
			lifeRegen -= 16;
		}
		if (onFrostBurn2)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegenTime = 0f;
			lifeRegen -= 16;
		}
		if (onFire2)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegenTime = 0f;
			lifeRegen -= 24;
		}
		if (burned)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegenTime = 0f;
			lifeRegen -= 60;
			moveSpeed *= 0.5f;
		}
		if (suffocating)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegenTime = 0f;
			lifeRegen -= 40;
		}
		if (electrified)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegenTime = 0f;
			lifeRegen -= 8;
			if (controlLeft || controlRight)
			{
				lifeRegen -= 32;
			}
		}
		if (tongued && Main.expertMode)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			lifeRegenTime = 0f;
			lifeRegen -= 100;
		}
		if (honey && lifeRegen < 0)
		{
			lifeRegen += 4;
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
		}
		if (lifeRegen < 0 && nebulaLevelLife > 0)
		{
			lifeRegen = 0;
		}
		if (flag && lifeRegen < 0)
		{
			lifeRegen /= 2;
		}
		lifeRegenTime += 1f;
		if (usedAegisCrystal)
		{
			lifeRegenTime += 0.2f;
		}
		if (crimsonRegen)
		{
			lifeRegenTime += 1f;
		}
		if (soulDrain > 0)
		{
			lifeRegenTime += 2f;
		}
		if (flag)
		{
			if (lifeRegenTime > 90f && lifeRegenTime < 1800f)
			{
				lifeRegenTime = 1800f;
			}
			lifeRegenTime += 4f;
			lifeRegen += 4;
		}
		if (honey)
		{
			lifeRegenTime += 2f;
			lifeRegen += 2;
		}
		if (starving)
		{
			if (lifeRegen > 0)
			{
				lifeRegen = 0;
			}
			if (lifeRegenCount > 0)
			{
				lifeRegenCount = 0;
			}
			if (lifeRegenTime > 0f)
			{
				lifeRegenTime = 0f;
			}
			int num = 3000;
			int num2 = 120 * statLifeMax2 / num;
			if (num2 < 4)
			{
				num2 = 4;
			}
			lifeRegen = -num2;
		}
		if (soulDrain > 0)
		{
			int num3 = (5 + soulDrain) / 2;
			lifeRegenTime += num3;
			lifeRegen += num3;
		}
		if (heartyMeal)
		{
			int num4 = 3 * 120 / 60;
			lifeRegen += num4;
		}
		if (whoAmI == Main.myPlayer && Main.SceneMetrics.HasCampfire)
		{
			lifeRegen++;
		}
		if (whoAmI == Main.myPlayer && Main.SceneMetrics.HasHeartLantern)
		{
			lifeRegen += 2;
		}
		if (bleed)
		{
			lifeRegenTime = 0f;
		}
		float num5 = 0f;
		if (lifeRegenTime >= 300f)
		{
			num5 += 1f;
		}
		if (lifeRegenTime >= 600f)
		{
			num5 += 1f;
		}
		if (lifeRegenTime >= 900f)
		{
			num5 += 1f;
		}
		if (lifeRegenTime >= 1200f)
		{
			num5 += 1f;
		}
		if (lifeRegenTime >= 1500f)
		{
			num5 += 1f;
		}
		if (lifeRegenTime >= 1800f)
		{
			num5 += 1f;
		}
		if (lifeRegenTime >= 2400f)
		{
			num5 += 1f;
		}
		if (lifeRegenTime >= 3000f)
		{
			num5 += 1f;
		}
		if (flag)
		{
			float num6 = lifeRegenTime - 3000f;
			num6 /= 300f;
			if (num6 > 0f)
			{
				if (num6 > 30f)
				{
					num6 = 30f;
				}
				num5 += num6;
			}
		}
		else if (lifeRegenTime >= 3600f)
		{
			num5 += 1f;
			lifeRegenTime = 3600f;
		}
		if (sitting.isSitting || sleeping.isSleeping)
		{
			lifeRegenTime += 3f;
			num5 *= 1.3f;
		}
		if (sitting.isSitting && sitting.details.IsAToilet)
		{
			TryToPoop();
		}
		num5 = ((velocity.X != 0f && grappling[0] <= 0) ? (num5 * 0.5f) : (num5 * 1.25f));
		if (crimsonRegen)
		{
			num5 *= 1.5f;
		}
		if (shinyStone)
		{
			num5 *= 1.1f;
		}
		if (whoAmI == Main.myPlayer && Main.SceneMetrics.HasCampfire)
		{
			num5 *= 1.1f;
		}
		if (Main.expertMode && !wellFed)
		{
			num5 = ((!shinyStone) ? (num5 / 2f) : (num5 * 0.75f));
		}
		if (rabid)
		{
			num5 = ((!shinyStone) ? (num5 / 2f) : (num5 * 0.75f));
		}
		float num7 = (float)statLifeMax2 / 400f * 0.85f + 0.15f;
		num5 *= num7;
		lifeRegen += (int)Math.Round(num5);
		lifeRegenCount += lifeRegen;
		if (palladiumRegen)
		{
			lifeRegenCount += 4;
		}
		if (flag && lifeRegen > 0 && statLife < statLifeMax2)
		{
			lifeRegenCount++;
			if (flag && ((float)Main.rand.Next(30000) < lifeRegenTime || Main.rand.Next(30) == 0))
			{
				int num8 = Dust.NewDust(position, width, height, 55, 0f, 0f, 200, default(Color), 0.5f);
				Main.dust[num8].noGravity = true;
				Main.dust[num8].velocity *= 0.75f;
				Main.dust[num8].fadeIn = 1.3f;
				Vector2 vector = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
				vector.Normalize();
				vector *= (float)Main.rand.Next(50, 100) * 0.04f;
				Main.dust[num8].velocity = vector;
				vector.Normalize();
				vector *= 34f;
				Main.dust[num8].position = base.Center - vector;
			}
		}
		while (lifeRegenCount >= 120)
		{
			lifeRegenCount -= 120;
			if (statLife < statLifeMax2)
			{
				statLife++;
				if (crimsonRegen)
				{
					for (int i = 0; i < 10; i++)
					{
						int num9 = Dust.NewDust(position, width, height, 5, 0f, 0f, 175, default(Color), 1.75f);
						Main.dust[num9].noGravity = true;
						Main.dust[num9].velocity *= 0.75f;
						int num10 = Main.rand.Next(-40, 41);
						int num11 = Main.rand.Next(-40, 41);
						Main.dust[num9].position.X += num10;
						Main.dust[num9].position.Y += num11;
						Main.dust[num9].velocity.X = (float)(-num10) * 0.075f;
						Main.dust[num9].velocity.Y = (float)(-num11) * 0.075f;
					}
				}
			}
			if (statLife > statLifeMax2)
			{
				statLife = statLifeMax2;
			}
		}
		if (burned || suffocating || (tongued && Main.expertMode))
		{
			while (lifeRegenCount <= -600)
			{
				lifeRegenCount += 600;
				statLife -= 5;
				CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), CombatText.LifeRegen, 5, dramatic: false, dot: true);
				if (statLife <= 0 && whoAmI == Main.myPlayer)
				{
					if (suffocating)
					{
						KillMe(PlayerDeathReason.ByOther(7), 10.0, 0);
					}
					else if (tongued)
					{
						KillMe(PlayerDeathReason.ByOther(12), 10.0, 0);
					}
					else
					{
						KillMe(PlayerDeathReason.ByOther(8), 10.0, 0);
					}
				}
			}
			return;
		}
		if (starving)
		{
			int num12 = statLifeMax2 / 50;
			if (num12 < 2)
			{
				num12 = 2;
			}
			int num13 = ((ZoneDesert || ZoneSnow) ? (num12 * 2) : num12);
			int num14 = 120 * num12;
			while (lifeRegenCount <= -num14)
			{
				lifeRegenCount += num14;
				statLife -= num13;
				CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), CombatText.LifeRegen, num13, dramatic: false, dot: true);
				if (statLife <= 0 && whoAmI == Main.myPlayer)
				{
					KillMe(PlayerDeathReason.ByOther(18), 10.0, 0);
				}
			}
			return;
		}
		while (lifeRegenCount <= -120)
		{
			if (lifeRegenCount <= -480)
			{
				lifeRegenCount += 480;
				statLife -= 4;
				CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), CombatText.LifeRegen, 4, dramatic: false, dot: true);
			}
			else if (lifeRegenCount <= -360)
			{
				lifeRegenCount += 360;
				statLife -= 3;
				CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), CombatText.LifeRegen, 3, dramatic: false, dot: true);
			}
			else if (lifeRegenCount <= -240)
			{
				lifeRegenCount += 240;
				statLife -= 2;
				CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), CombatText.LifeRegen, 2, dramatic: false, dot: true);
			}
			else
			{
				lifeRegenCount += 120;
				statLife--;
				CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), CombatText.LifeRegen, 1, dramatic: false, dot: true);
			}
			if (statLife <= 0 && whoAmI == Main.myPlayer)
			{
				if (poisoned || venom)
				{
					KillMe(PlayerDeathReason.ByOther(9), 10.0, 0);
				}
				else if (electrified)
				{
					KillMe(PlayerDeathReason.ByOther(10), 10.0, 0);
				}
				else
				{
					KillMe(PlayerDeathReason.ByOther(8), 10.0, 0);
				}
			}
		}
	}

	public void UpdateManaRegen()
	{
		if (nebulaLevelMana > 0)
		{
			int num = 6;
			nebulaManaCounter += nebulaLevelMana;
			if (nebulaManaCounter >= num)
			{
				nebulaManaCounter -= num;
				statMana++;
				if (statMana >= statManaMax2)
				{
					statMana = statManaMax2;
				}
			}
		}
		else
		{
			nebulaManaCounter = 0;
		}
		if (manaRegenDelay > 0f)
		{
			manaRegenDelay -= 1f;
			manaRegenDelay -= manaRegenDelayBonus;
			if (IsStandingStillForSpecialEffects || grappling[0] >= 0 || manaRegenBuff)
			{
				manaRegenDelay -= 1f;
			}
			if (usedArcaneCrystal)
			{
				manaRegenDelay -= 0.05f;
			}
		}
		if (manaRegenBuff && manaRegenDelay > 20f)
		{
			manaRegenDelay = 20f;
		}
		if (manaRegenDelay <= 0f)
		{
			manaRegenDelay = 0f;
			manaRegen = statManaMax2 / 3 + 1 + manaRegenBonus;
			if (IsStandingStillForSpecialEffects || grappling[0] >= 0 || manaRegenBuff)
			{
				manaRegen += statManaMax2 / 3;
			}
			if (usedArcaneCrystal)
			{
				manaRegen += statManaMax2 / 50;
			}
			float num2 = (float)statMana / (float)statManaMax2 * 0.8f + 0.2f;
			if (manaRegenBuff)
			{
				num2 = 1f;
			}
			manaRegen = (int)((double)((float)manaRegen * num2) * 1.15);
		}
		else
		{
			manaRegen = 0;
		}
		manaRegenCount += manaRegen;
		while (manaRegenCount >= 120)
		{
			bool flag = false;
			manaRegenCount -= 120;
			if (statMana < statManaMax2)
			{
				statMana++;
				flag = true;
			}
			if (statMana < statManaMax2)
			{
				continue;
			}
			if (whoAmI == Main.myPlayer && flag)
			{
				SoundEngine.PlaySound(25);
				for (int i = 0; i < 5; i++)
				{
					int num3 = Dust.NewDust(position, width, height, 45, 0f, 0f, 255, default(Color), (float)Main.rand.Next(20, 26) * 0.1f);
					Main.dust[num3].noLight = true;
					Main.dust[num3].noGravity = true;
					Main.dust[num3].velocity *= 0.5f;
				}
			}
			statMana = statManaMax2;
		}
	}

	public void UpdateJumpHeight()
	{
		if (mount.Active)
		{
			jumpHeight = mount.JumpHeight(velocity.X);
			jumpSpeed = mount.JumpSpeed(velocity.X);
		}
		else
		{
			if (jumpBoost)
			{
				jumpHeight = 20;
				jumpSpeed = 6.51f;
			}
			if (empressBrooch)
			{
				jumpSpeedBoost += 1.8f;
			}
			if (frogLegJumpBoost)
			{
				jumpSpeedBoost += 2.4f;
				extraFall += 15;
			}
			if (moonLordLegs)
			{
				jumpSpeedBoost += 1.8f;
				extraFall += 10;
				jumpHeight++;
			}
			if (wereWolf)
			{
				jumpHeight += 2;
				jumpSpeed += 0.2f;
			}
			if (portableStoolInfo.IsInUse)
			{
				jumpHeight += 5;
			}
			jumpSpeed += jumpSpeedBoost;
		}
		if (sticky)
		{
			jumpHeight /= 10;
			jumpSpeed /= 5f;
		}
		if (dazed)
		{
			jumpHeight /= 5;
			jumpSpeed /= 2f;
		}
	}

	public void FindPulley()
	{
		if (portableStoolInfo.IsInUse || (!controlUp && !controlDown))
		{
			return;
		}
		int num = (int)(position.X + (float)(width / 2)) / 16;
		int num2 = (int)(position.Y - 8f) / 16;
		if (!WorldGen.IsRope(num, num2))
		{
			return;
		}
		float num3 = position.Y;
		if (Main.tile[num, num2 - 1] == null)
		{
			Main.tile[num, num2 - 1] = new Tile();
		}
		if (Main.tile[num, num2 + 1] == null)
		{
			Main.tile[num, num2 + 1] = new Tile();
		}
		if ((!Main.tile[num, num2 - 1].active() || !Main.tileRope[Main.tile[num, num2 - 1].type]) && (!Main.tile[num, num2 + 1].active() || !Main.tileRope[Main.tile[num, num2 + 1].type]))
		{
			num3 = num2 * 16 + 22;
		}
		float num4 = num * 16 + 8 - width / 2 + 6 * direction;
		int num5 = num * 16 + 8 - width / 2 + 6;
		int num6 = num * 16 + 8 - width / 2;
		int num7 = num * 16 + 8 - width / 2 + -6;
		int num8 = 1;
		float num9 = Math.Abs(position.X - (float)num5);
		if (Math.Abs(position.X - (float)num6) < num9)
		{
			num8 = 2;
			num9 = Math.Abs(position.X - (float)num6);
		}
		if (Math.Abs(position.X - (float)num7) < num9)
		{
			num8 = 3;
			num9 = Math.Abs(position.X - (float)num7);
		}
		if (num8 == 1)
		{
			num4 = num5;
			pulleyDir = 2;
			direction = 1;
		}
		if (num8 == 2)
		{
			num4 = num6;
			pulleyDir = 1;
		}
		if (num8 == 3)
		{
			num4 = num7;
			pulleyDir = 2;
			direction = -1;
		}
		if (!Collision.SolidCollision(new Vector2(num4, position.Y), width, height))
		{
			if (whoAmI == Main.myPlayer)
			{
				Main.cameraX = Main.cameraX + position.X - num4;
			}
			pulley = true;
			position.X = num4;
			gfxOffY = position.Y - num3;
			stepSpeed = 2.5f;
			position.Y = num3;
			velocity.X = 0f;
			return;
		}
		num4 = num5;
		pulleyDir = 2;
		direction = 1;
		if (!Collision.SolidCollision(new Vector2(num4, position.Y), width, height))
		{
			if (whoAmI == Main.myPlayer)
			{
				Main.cameraX = Main.cameraX + position.X - num4;
			}
			pulley = true;
			position.X = num4;
			gfxOffY = position.Y - num3;
			stepSpeed = 2.5f;
			position.Y = num3;
			velocity.X = 0f;
			return;
		}
		num4 = num7;
		pulleyDir = 2;
		direction = -1;
		if (!Collision.SolidCollision(new Vector2(num4, position.Y), width, height))
		{
			if (whoAmI == Main.myPlayer)
			{
				Main.cameraX = Main.cameraX + position.X - num4;
			}
			pulley = true;
			position.X = num4;
			gfxOffY = position.Y - num3;
			stepSpeed = 2.5f;
			position.Y = num3;
			velocity.X = 0f;
		}
	}

	public void HorizontalMovement()
	{
		if (chilled)
		{
			accRunSpeed = maxRunSpeed;
		}
		bool flag = (itemAnimation == 0 || inventory[selectedItem].useTurn) && mount.AllowDirectionChange;
		bool flag2 = controlLeft || controlRight;
		float num = (accRunSpeed + maxRunSpeed) / 2f;
		float num2 = 0f;
		bool flag3 = false;
		if (flag2 && mount.Active && mount.Type == 43 && velocity.Y == 0f && !controlJump)
		{
			SoundEngine.PlaySound(SoundID.Item168, base.Center);
			float num3 = jumpSpeed * gravDir * 0.5f;
			if (num3 < 2f)
			{
				num3 = 2f;
			}
			num3 += 0.01f;
			velocity.Y = 0f - num3;
			jump = jumpHeight;
			fullRotation = 0f;
			return;
		}
		if (windPushed && !isLockedToATile && !(mount.Active && velocity.Y == 0f && flag2))
		{
			num2 = (float)Math.Sign(Main.windSpeedCurrent) * 0.06f;
			if (Math.Abs(Main.windSpeedCurrent) > 0.5f)
			{
				num2 *= 1.37f;
			}
			if (velocity.Y != 0f)
			{
				num2 *= 1.5f;
			}
			if (flag2)
			{
				num2 *= 0.8f;
				float num4 = 0.072f;
				num2 = MathHelper.Clamp(num2, 0f - num4, num4);
			}
			flag3 = true;
			if (Math.Sign(direction) != Math.Sign(num2))
			{
				num -= Math.Abs(num2) * 40f;
			}
		}
		if (trackBoost != 0f)
		{
			velocity.X += trackBoost;
			trackBoost = 0f;
			if (velocity.X < 0f)
			{
				if (velocity.X < 0f - maxRunSpeed)
				{
					velocity.X = 0f - maxRunSpeed;
				}
			}
			else if (velocity.X > maxRunSpeed)
			{
				velocity.X = maxRunSpeed;
			}
		}
		if (controlLeft && velocity.X > 0f - maxRunSpeed)
		{
			if (!mount.Active || !mount.Cart || velocity.Y == 0f)
			{
				if (velocity.X > runSlowdown)
				{
					velocity.X -= runSlowdown;
				}
				velocity.X -= runAcceleration;
			}
			if (onWrongGround)
			{
				if (velocity.X < 0f - runSlowdown)
				{
					velocity.X += runSlowdown;
				}
				else
				{
					velocity.X = 0f;
				}
			}
			if (mount.Active && mount.Cart && !onWrongGround)
			{
				if (velocity.X < 0f && flag)
				{
					direction = -1;
				}
				else if (itemAnimation <= 0 && velocity.Y == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item55, (int)position.X + width / 2, (int)position.Y + height / 2);
					DelegateMethods.Minecart.rotation = fullRotation;
					DelegateMethods.Minecart.rotationOrigin = fullRotationOrigin;
					if ((double)Math.Abs(velocity.X) > (double)maxRunSpeed * 0.66)
					{
						if (Main.rand.Next(2) == 0)
						{
							Minecart.WheelSparks(mount.Delegations.MinecartDust, position + velocity * 0.66f, width, height, 1);
						}
						if (Main.rand.Next(2) == 0)
						{
							Minecart.WheelSparks(mount.Delegations.MinecartDust, position + velocity * 0.33f, width, height, 1);
						}
						if (Main.rand.Next(2) == 0)
						{
							Minecart.WheelSparks(mount.Delegations.MinecartDust, position, width, height, 1);
						}
					}
					else if ((double)Math.Abs(velocity.X) > (double)maxRunSpeed * 0.33)
					{
						if (Main.rand.Next(3) != 0)
						{
							Minecart.WheelSparks(mount.Delegations.MinecartDust, position + velocity * 0.5f, width, height, 1);
						}
						if (Main.rand.Next(3) != 0)
						{
							Minecart.WheelSparks(mount.Delegations.MinecartDust, position, width, height, 1);
						}
					}
					else
					{
						Minecart.WheelSparks(mount.Delegations.MinecartDust, position, width, height, 1);
					}
				}
			}
			else if (!sandStorm && (itemAnimation == 0 || inventory[selectedItem].useTurn) && mount.AllowDirectionChange)
			{
				direction = -1;
			}
		}
		else if (controlRight && velocity.X < maxRunSpeed)
		{
			if (!mount.Active || !mount.Cart || velocity.Y == 0f)
			{
				if (velocity.X < 0f - runSlowdown)
				{
					velocity.X += runSlowdown;
				}
				velocity.X += runAcceleration;
			}
			if (onWrongGround)
			{
				if (velocity.X > runSlowdown)
				{
					velocity.X -= runSlowdown;
				}
				else
				{
					velocity.X = 0f;
				}
			}
			if (mount.Active && mount.Cart && !onWrongGround)
			{
				if (velocity.X > 0f && flag)
				{
					direction = 1;
				}
				else if (itemAnimation <= 0 && velocity.Y == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item55, (int)position.X + width / 2, (int)position.Y + height / 2);
					DelegateMethods.Minecart.rotation = fullRotation;
					DelegateMethods.Minecart.rotationOrigin = fullRotationOrigin;
					if ((double)Math.Abs(velocity.X) > (double)maxRunSpeed * 0.66)
					{
						if (Main.rand.Next(2) == 0)
						{
							Minecart.WheelSparks(mount.Delegations.MinecartDust, position + velocity * 0.66f, width, height, 1);
						}
						if (Main.rand.Next(2) == 0)
						{
							Minecart.WheelSparks(mount.Delegations.MinecartDust, position + velocity * 0.33f, width, height, 1);
						}
						if (Main.rand.Next(2) == 0)
						{
							Minecart.WheelSparks(mount.Delegations.MinecartDust, position, width, height, 1);
						}
					}
					else if ((double)Math.Abs(velocity.X) > (double)maxRunSpeed * 0.33)
					{
						if (Main.rand.Next(3) != 0)
						{
							Minecart.WheelSparks(mount.Delegations.MinecartDust, position + velocity * 0.5f, width, height, 1);
						}
						if (Main.rand.Next(3) != 0)
						{
							Minecart.WheelSparks(mount.Delegations.MinecartDust, position, width, height, 1);
						}
					}
					else
					{
						Minecart.WheelSparks(mount.Delegations.MinecartDust, position, width, height, 1);
					}
				}
			}
			else if (!sandStorm && (itemAnimation == 0 || inventory[selectedItem].useTurn) && mount.AllowDirectionChange)
			{
				direction = 1;
			}
		}
		else if (controlLeft && velocity.X > 0f - accRunSpeed && dashDelay >= 0)
		{
			if (mount.Active && mount.Cart)
			{
				if (velocity.X < 0f)
				{
					direction = -1;
				}
			}
			else if ((itemAnimation == 0 || inventory[selectedItem].useTurn) && mount.AllowDirectionChange)
			{
				direction = -1;
			}
			if (velocity.Y == 0f || wingsLogic > 0 || mount.CanFly())
			{
				if (velocity.X > runSlowdown)
				{
					velocity.X -= runSlowdown;
				}
				velocity.X -= runAcceleration * 0.2f;
				if (wingsLogic > 0)
				{
					velocity.X -= runAcceleration * 0.2f;
				}
			}
			if (onWrongGround)
			{
				if (velocity.X < runSlowdown)
				{
					velocity.X += runSlowdown;
				}
				else
				{
					velocity.X = 0f;
				}
			}
			if (velocity.X < 0f - num && velocity.Y == 0f && !mount.Active)
			{
				SpawnFastRunParticles();
			}
		}
		else if (controlRight && velocity.X < accRunSpeed && dashDelay >= 0)
		{
			if (mount.Active && mount.Cart)
			{
				if (velocity.X > 0f)
				{
					direction = -1;
				}
			}
			else if ((itemAnimation == 0 || inventory[selectedItem].useTurn) && mount.AllowDirectionChange)
			{
				direction = 1;
			}
			if (velocity.Y == 0f || wingsLogic > 0 || mount.CanFly())
			{
				if (velocity.X < 0f - runSlowdown)
				{
					velocity.X += runSlowdown;
				}
				velocity.X += runAcceleration * 0.2f;
				if (wingsLogic > 0)
				{
					velocity.X += runAcceleration * 0.2f;
				}
			}
			if (onWrongGround)
			{
				if (velocity.X > runSlowdown)
				{
					velocity.X -= runSlowdown;
				}
				else
				{
					velocity.X = 0f;
				}
			}
			if (velocity.X > num && velocity.Y == 0f && !mount.Active)
			{
				SpawnFastRunParticles();
			}
		}
		else if (mount.Active && mount.Cart && Math.Abs(velocity.X) >= 1f)
		{
			if (onWrongGround)
			{
				if (velocity.X > 0f)
				{
					if (velocity.X > runSlowdown)
					{
						velocity.X -= runSlowdown;
					}
					else
					{
						velocity.X = 0f;
					}
				}
				else if (velocity.X < 0f)
				{
					if (velocity.X < 0f - runSlowdown)
					{
						velocity.X += runSlowdown;
					}
					else
					{
						velocity.X = 0f;
					}
				}
			}
			if (velocity.X > maxRunSpeed)
			{
				velocity.X = maxRunSpeed;
			}
			if (velocity.X < 0f - maxRunSpeed)
			{
				velocity.X = 0f - maxRunSpeed;
			}
		}
		else if (velocity.Y == 0f)
		{
			if (velocity.X > runSlowdown)
			{
				velocity.X -= runSlowdown;
			}
			else if (velocity.X < 0f - runSlowdown)
			{
				velocity.X += runSlowdown;
			}
			else
			{
				velocity.X = 0f;
			}
		}
		else if (!PortalPhysicsEnabled)
		{
			if ((double)velocity.X > (double)runSlowdown * 0.5)
			{
				velocity.X -= runSlowdown * 0.5f;
			}
			else if ((double)velocity.X < (double)(0f - runSlowdown) * 0.5)
			{
				velocity.X += runSlowdown * 0.5f;
			}
			else
			{
				velocity.X = 0f;
			}
		}
		if (flag3)
		{
			if (num2 < 0f && velocity.X > num2)
			{
				velocity.X += num2;
				if (velocity.X < num2)
				{
					velocity.X = num2;
				}
			}
			if (num2 > 0f && velocity.X < num2)
			{
				velocity.X += num2;
				if (velocity.X > num2)
				{
					velocity.X = num2;
				}
			}
		}
		bool flag4 = mount.Type == 40 || mount.Type == 41 || mount.Type == 42;
		if (mount.Active && (mount.Type == 10 || mount.Type == 47 || flag4) && Math.Abs(velocity.X) > mount.DashSpeed - mount.RunSpeed / 2f)
		{
			Rectangle rect = getRect();
			if (direction == 1)
			{
				rect.Offset(width - 1, 0);
			}
			rect.Width = 2;
			rect.Inflate(6, 12);
			int num5 = 60;
			if (flag4)
			{
				num5 = 30;
			}
			float damage = (float)num5 * minionDamage;
			float knockback = 10f;
			if (flag4)
			{
				knockback = 7f;
			}
			int nPCImmuneTime = 30;
			int playerImmuneTime = 6;
			CollideWithNPCs(rect, damage, knockback, nPCImmuneTime, playerImmuneTime);
		}
		if (mount.Active && mount.Type == 44 && Math.Abs(velocity.X) > mount.DashSpeed - mount.RunSpeed / 4f)
		{
			Rectangle rect2 = getRect();
			if (direction == 1)
			{
				rect2.Offset(width - 1, 0);
			}
			rect2.Width = 2;
			rect2.Inflate(6, 12);
			float damage2 = 100f * minionDamage;
			float knockback2 = 12f;
			int nPCImmuneTime2 = 30;
			int playerImmuneTime2 = 6;
			CollideWithNPCs(rect2, damage2, knockback2, nPCImmuneTime2, playerImmuneTime2);
		}
		if (mount.Active && mount.Type == 45 && Math.Abs(velocity.X) > mount.DashSpeed * 0.9f)
		{
			Rectangle rect3 = getRect();
			if (direction == 1)
			{
				rect3.Offset(width - 1, 0);
			}
			rect3.Width = 2;
			rect3.Inflate(6, 12);
			float damage3 = 120f * minionDamage;
			float knockback3 = 12f;
			int nPCImmuneTime3 = 30;
			int playerImmuneTime3 = 6;
			CollideWithNPCs(rect3, damage3, knockback3, nPCImmuneTime3, playerImmuneTime3);
		}
		if (mount.Active && mount.Type == 14 && Math.Abs(velocity.X) > mount.RunSpeed / 2f)
		{
			Rectangle rect4 = getRect();
			if (direction == 1)
			{
				rect4.Offset(width - 1, 0);
			}
			rect4.Width = 2;
			rect4.Inflate(6, 12);
			float damage4 = 90f * minionDamage;
			float knockback4 = 10f;
			int nPCImmuneTime4 = 30;
			int playerImmuneTime4 = 6;
			CollideWithNPCs(rect4, damage4, knockback4, nPCImmuneTime4, playerImmuneTime4);
		}
		if (mount.Active && mount.Type == 17 && Math.Abs(velocity.X) > mount.RunSpeed / 2f)
		{
			Rectangle rect5 = getRect();
			if (direction == 1)
			{
				rect5.Offset(width - 1, 0);
			}
			rect5.Width = 2;
			rect5.Inflate(6, 12);
			float damage5 = 40f * minionDamage;
			float knockback5 = 10f;
			int nPCImmuneTime5 = 30;
			int playerImmuneTime5 = 12;
			CollideWithNPCs(rect5, damage5, knockback5, nPCImmuneTime5, playerImmuneTime5);
		}
		TryUsingDiggerCart();
		if (HeldItem.type == 4049 && whoAmI == Main.myPlayer)
		{
			MowTheLawn();
		}
	}

	private void TryUsingDiggerCart()
	{
		if (whoAmI == Main.myPlayer && mount.Active && mount.Type == 39 && velocity.Y == 0f)
		{
			int num = 12;
			int num2 = 20;
			Vector2 vector = new Vector2(0f, gravDir * 10f);
			Vector2 trackWorldPosition = RotatedRelativePoint(base.Center + new Vector2(num * direction, gravDir * (float)num2));
			trackWorldPosition += vector;
			Tile tileSafely = Framing.GetTileSafely(trackWorldPosition);
			if (!tileSafely.active() || tileSafely.type != 314)
			{
				trackWorldPosition = RotatedRelativePoint(base.Center + new Vector2((float)(num * direction) * 0.5f, gravDir * (float)num2));
				trackWorldPosition += vector;
			}
			int digDirectionY = controlDown.ToInt() - controlUp.ToInt();
			if (controlUp.ToInt() + controlDown.ToInt() + controlLeft.ToInt() + controlRight.ToInt() > 0)
			{
				MinecartDiggerHelper.Instance.TryDigging(this, trackWorldPosition, direction, digDirectionY);
			}
		}
	}

	private void SpawnFastRunParticles()
	{
		int num = 0;
		if (gravDir == -1f)
		{
			num -= height;
		}
		if (runSoundDelay == 0 && velocity.Y == 0f)
		{
			SoundEngine.PlaySound(hermesStepSound.SoundType, (int)position.X, (int)position.Y, hermesStepSound.SoundStyle);
			runSoundDelay = hermesStepSound.IntendedCooldown;
		}
		if (wings == 3)
		{
			int num2 = Dust.NewDust(new Vector2(position.X - 4f, position.Y + (float)height + (float)num), width + 8, 4, 186, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 50, default(Color), 1.5f);
			Main.dust[num2].velocity *= 0.025f;
			Main.dust[num2].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
			num2 = Dust.NewDust(new Vector2(position.X - 4f, position.Y + (float)height + (float)num), width + 8, 4, 186, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 50, default(Color), 1.5f);
			Main.dust[num2].velocity *= 0.2f;
			Main.dust[num2].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
		}
		else if (sailDash)
		{
			for (int i = 0; i < 4; i++)
			{
				int num3 = Dust.NewDust(new Vector2(position.X - 4f, position.Y), width + 8, height, 253, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 100, default(Color), 1.5f);
				Main.dust[num3].noGravity = true;
				Main.dust[num3].velocity.X = Main.dust[num3].velocity.X * 0.2f;
				Main.dust[num3].velocity.Y = Main.dust[num3].velocity.Y * 0.2f;
				Main.dust[num3].shader = GameShaders.Armor.GetSecondaryShader(cShoe, this);
				Main.dust[num3].scale += (float)Main.rand.Next(-5, 3) * 0.1f;
				Vector2 vector = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
				vector.Normalize();
				vector *= (float)Main.rand.Next(81) * 0.1f;
			}
		}
		else if (desertDash)
		{
			Dust dust = Dust.NewDustDirect(new Vector2(position.X - 4f, position.Y + (float)height + (float)num), width + 8, 4, 32, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f);
			dust.velocity *= 0.2f;
			dust.velocity.Y -= gravDir * 2f;
			dust.shader = GameShaders.Armor.GetSecondaryShader(cShoe, this);
		}
		else if (coldDash)
		{
			for (int j = 0; j < 2; j++)
			{
				int num4 = ((j != 0) ? Dust.NewDust(new Vector2(position.X + (float)(width / 2), position.Y + (float)height + gfxOffY), width / 2, 6, 76, 0f, 0f, 0, default(Color), 1.35f) : Dust.NewDust(new Vector2(position.X, position.Y + (float)height + gfxOffY), width / 2, 6, 76, 0f, 0f, 0, default(Color), 1.35f));
				Main.dust[num4].scale *= 1f + (float)Main.rand.Next(20, 40) * 0.01f;
				Main.dust[num4].noGravity = true;
				Main.dust[num4].noLight = true;
				Main.dust[num4].velocity *= 0.001f;
				Main.dust[num4].velocity.Y -= 0.003f;
				Main.dust[num4].shader = GameShaders.Armor.GetSecondaryShader(cShoe, this);
			}
		}
		else if (fairyBoots)
		{
			int type = Main.rand.NextFromList(new short[6] { 61, 61, 61, 242, 64, 63 });
			int alpha = 0;
			for (int k = 1; k < 3; k++)
			{
				float scale = 1.5f;
				if (k == 2)
				{
					scale = 1f;
				}
				int num5 = Dust.NewDust(new Vector2(position.X - 4f, position.Y + (float)height + (float)num), width + 8, 4, type, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, alpha, default(Color), scale);
				Main.dust[num5].velocity *= 1.5f;
				if (k == 2)
				{
					Main.dust[num5].position += Main.dust[num5].velocity;
				}
				Main.dust[num5].noGravity = true;
				Main.dust[num5].noLightEmittence = true;
				Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(cShoe, this);
			}
		}
		else if (hellfireTreads)
		{
			int num6 = Dust.NewDust(new Vector2(position.X - 4f, position.Y + (float)height + (float)num), width + 8, 4, 6, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 50, default(Color), 2f);
			Main.dust[num6].velocity.X = Main.dust[num6].velocity.X * 0.2f;
			Main.dust[num6].velocity.Y = -1.5f - Main.rand.NextFloat() * 0.5f;
			Main.dust[num6].fadeIn = 0.5f;
			Main.dust[num6].noGravity = true;
			Main.dust[num6].shader = GameShaders.Armor.GetSecondaryShader(cShoe, this);
		}
		else
		{
			int num7 = Dust.NewDust(new Vector2(position.X - 4f, position.Y + (float)height + (float)num), width + 8, 4, 16, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 50, default(Color), 1.5f);
			Main.dust[num7].velocity.X = Main.dust[num7].velocity.X * 0.2f;
			Main.dust[num7].velocity.Y = Main.dust[num7].velocity.Y * 0.2f;
			Main.dust[num7].shader = GameShaders.Armor.GetSecondaryShader(cShoe, this);
		}
	}

	private void MowTheLawn()
	{
		if (miscCounter % 2 != 0 || velocity.Y != 0f || grappling[0] != -1 || itemAnimation < 1)
		{
			return;
		}
		Vector2 vector = base.Center + new Vector2(direction * 38, (float)(height / 2 + 4) * gravDir);
		float num = 1f - (float)itemAnimation / (float)itemAnimationMax;
		num *= 2f;
		num = ((!(num < 1f)) ? (num - 1f) : (1f - num));
		Vector2 value = vector + new Vector2(direction * -16, gravDir * -4f);
		Vector2 value2 = vector + new Vector2(direction * -6, gravDir * -4f);
		Dust dust = Dust.NewDustDirect(Vector2.Lerp(value, value2, num), 0, 0, 31, 0f, (0f - gravDir) * 0.25f, 127);
		dust.scale = 0.9f;
		dust.position -= new Vector2(4f);
		if (dust.velocity.Y > 0f)
		{
			dust.velocity.Y *= -1f;
		}
		dust.velocity *= 0.25f;
		Rectangle rectangle = Utils.CenteredRectangle(vector, new Vector2(8f, 20f));
		if (velocity.X * (float)direction > 0f || velocity.Y * gravDir > 0f)
		{
			Rectangle myRect = rectangle;
			myRect.Height -= 4;
			myRect.Y += 2;
			float damage = 8f;
			float knockback = 2f;
			int nPCImmuneTime = 12;
			int playerImmuneTime = 6;
			CollideWithNPCs(myRect, damage, knockback, nPCImmuneTime, playerImmuneTime);
		}
		rectangle.X -= direction * 10;
		if (whoAmI == Main.myPlayer)
		{
			bool[] shouldIgnore = ItemCheck_GetTileCutIgnoreList(HeldItem);
			ItemCheck_CutTiles(HeldItem, rectangle, shouldIgnore);
			MowGrassTile(vector);
			if (!WorldGen.SolidTile(Framing.GetTileSafely(vector.ToTileCoordinates())))
			{
				MowGrassTile(vector + new Vector2(0f, 16f * gravDir));
			}
		}
	}

	private void MowGrassTile(Vector2 thePos)
	{
		Point point = thePos.ToTileCoordinates();
		Tile tile = Main.tile[point.X, point.Y];
		if (tile == null || !WorldGen.CanKillTile(point.X, point.Y, WorldGen.SpecialKillTileContext.MowingTheGrass))
		{
			return;
		}
		ushort num = 0;
		switch (tile.type)
		{
		case 2:
			num = 477;
			break;
		case 109:
			num = 492;
			break;
		}
		if (num != 0)
		{
			int num2 = WorldGen.KillTile_GetTileDustAmount(fail: true, tile);
			for (int i = 0; i < num2; i++)
			{
				WorldGen.KillTile_MakeTileDust(point.X, point.Y, tile);
			}
			tile.type = num;
			if (Main.netMode == 1)
			{
				NetMessage.SendTileSquare(-1, point.X, point.Y);
			}
		}
	}

	public int CollideWithNPCs(Rectangle myRect, float Damage, float Knockback, int NPCImmuneTime, int PlayerImmuneTime)
	{
		int num = 0;
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (!nPC.active || nPC.dontTakeDamage || nPC.friendly || nPC.immune[whoAmI] != 0 || !CanNPCBeHitByPlayerOrPlayerProjectile(nPC))
			{
				continue;
			}
			Rectangle rect = nPC.getRect();
			if (myRect.Intersects(rect) && (nPC.noTileCollide || Collision.CanHit(position, width, height, nPC.position, nPC.width, nPC.height)))
			{
				int num2 = direction;
				if (velocity.X < 0f)
				{
					num2 = -1;
				}
				if (velocity.X > 0f)
				{
					num2 = 1;
				}
				if (whoAmI == Main.myPlayer)
				{
					ApplyDamageToNPC(nPC, (int)Damage, Knockback, num2, crit: false);
				}
				nPC.immune[whoAmI] = NPCImmuneTime;
				GiveImmuneTimeForCollisionAttack(PlayerImmuneTime);
				num++;
				break;
			}
		}
		return num;
	}

	public void ApplyDamageToNPC(NPC npc, int damage, float knockback, int direction, bool crit)
	{
		int num = Item.NPCtoBanner(npc.BannerID());
		if (num > 0 && HasNPCBannerBuff(num))
		{
			damage = ((!Main.expertMode) ? ((int)((float)damage * ItemID.Sets.BannerStrength[Item.BannerToItem(num)].NormalDamageDealt)) : ((int)((float)damage * ItemID.Sets.BannerStrength[Item.BannerToItem(num)].ExpertDamageDealt)));
		}
		OnHit(npc.Center.X, npc.Center.Y, npc);
		damage += npc.checkArmorPenetration(armorPenetration, 0f);
		NPCKillAttempt attempt = new NPCKillAttempt(npc);
		int dmg = (int)npc.StrikeNPC(damage, knockback, direction, crit);
		if (accDreamCatcher)
		{
			addDPS(dmg);
		}
		if (Main.netMode != 0)
		{
			NetMessage.SendData(28, -1, -1, null, npc.whoAmI, damage, knockback, direction, crit.ToInt());
		}
		int num2 = Item.NPCtoBanner(npc.BannerID());
		if (num2 >= 0)
		{
			lastCreatureHit = num2;
		}
		if (attempt.DidNPCDie())
		{
			OnKillNPC(ref attempt, null);
		}
	}

	public void OnKillNPC(ref NPCKillAttempt attempt, object externalKillingBlowSource)
	{
		if (Main.myPlayer == whoAmI && externalKillingBlowSource is Item { type: 5096 })
		{
			AddBuff(336, 420, quiet: false);
		}
	}

	public void GiveImmuneTimeForCollisionAttack(int time)
	{
		if (_timeSinceLastImmuneGet <= 20)
		{
			_immuneStrikes++;
		}
		else
		{
			_immuneStrikes = 1;
		}
		_timeSinceLastImmuneGet = 0;
		if (_immuneStrikes < 3 && (!immune || immuneTime <= time))
		{
			immune = true;
			immuneNoBlink = true;
			immuneTime = time;
		}
	}

	public bool CanNPCBeHitByPlayerOrPlayerProjectile(NPC npc, Projectile projectile = null)
	{
		bool flag = dontHurtCritters || (projectile != null && (projectile.minion || ProjectileID.Sets.MinionShot[projectile.type] || projectile.sentry || ProjectileID.Sets.SentryShot[projectile.type]));
		if (NPCID.Sets.CountsAsCritter[npc.type] && flag)
		{
			return false;
		}
		return true;
	}

	public void JumpMovement()
	{
		if (mount.Active && mount.IsConsideredASlimeMount && wetSlime == 0 && velocity.Y > 0f)
		{
			Rectangle rect = getRect();
			rect.Offset(0, height - 1);
			rect.Height = 2;
			rect.Inflate(12, 6);
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (!nPC.active || nPC.dontTakeDamage || nPC.friendly || nPC.immune[whoAmI] != 0 || !CanNPCBeHitByPlayerOrPlayerProjectile(nPC))
				{
					continue;
				}
				Rectangle rect2 = nPC.getRect();
				if (rect.Intersects(rect2) && (nPC.noTileCollide || Collision.CanHit(position, width, height, nPC.position, nPC.width, nPC.height)))
				{
					float num = 40f * minionDamage;
					float knockback = 5f;
					int num2 = direction;
					if (velocity.X < 0f)
					{
						num2 = -1;
					}
					if (velocity.X > 0f)
					{
						num2 = 1;
					}
					if (whoAmI == Main.myPlayer)
					{
						ApplyDamageToNPC(nPC, (int)num, knockback, num2, crit: false);
					}
					nPC.immune[whoAmI] = 10;
					velocity.Y = -10f;
					GiveImmuneTimeForCollisionAttack(6);
					break;
				}
			}
		}
		if (mount.Active && mount.Type == 17 && velocity.Y > 0f)
		{
			Rectangle rect3 = getRect();
			rect3.Offset(0, height - 1);
			rect3.Height = 2;
			rect3.Inflate(12, 6);
			for (int j = 0; j < 200; j++)
			{
				NPC nPC2 = Main.npc[j];
				if (!nPC2.active || nPC2.dontTakeDamage || nPC2.friendly || nPC2.immune[whoAmI] != 0 || !CanNPCBeHitByPlayerOrPlayerProjectile(nPC2))
				{
					continue;
				}
				Rectangle rect4 = nPC2.getRect();
				if (rect3.Intersects(rect4) && (nPC2.noTileCollide || Collision.CanHit(position, width, height, nPC2.position, nPC2.width, nPC2.height)))
				{
					float num3 = 40f;
					float knockback2 = 5f;
					int num4 = direction;
					if (velocity.X < 0f)
					{
						num4 = -1;
					}
					if (velocity.X > 0f)
					{
						num4 = 1;
					}
					if (whoAmI == Main.myPlayer)
					{
						ApplyDamageToNPC(nPC2, (int)num3, knockback2, num4, crit: false);
					}
					nPC2.immune[whoAmI] = 12;
					GiveImmuneTimeForCollisionAttack(12);
					break;
				}
			}
		}
		if (controlJump)
		{
			if (sliding)
			{
				autoJump = false;
			}
			bool flag = false;
			bool flag2 = wet && accFlipper;
			bool flag3 = !mount.Active || !mount.Cart;
			if (mount.Active && mount.IsConsideredASlimeMount && wetSlime > 0)
			{
				wetSlime = 0;
				flag = true;
			}
			if (mount.Active && mount.Type == 43 && releaseJump && velocity.Y != 0f)
			{
				isPerformingPogostickTricks = true;
			}
			if (jump > 0)
			{
				if (velocity.Y == 0f)
				{
					jump = 0;
				}
				else
				{
					velocity.Y = (0f - jumpSpeed) * gravDir;
					if (merman && (!mount.Active || !mount.Cart))
					{
						if (swimTime <= 10)
						{
							swimTime = 30;
						}
					}
					else
					{
						jump--;
					}
				}
			}
			else if ((sliding || velocity.Y == 0f || flag || canJumpAgain_Cloud || canJumpAgain_Sandstorm || canJumpAgain_Blizzard || canJumpAgain_Fart || canJumpAgain_Sail || canJumpAgain_Unicorn || canJumpAgain_Santank || canJumpAgain_WallOfFleshGoat || canJumpAgain_Basilisk || (flag2 && flag3)) && (releaseJump || (autoJump && (velocity.Y == 0f || sliding))))
			{
				if (mount.Active && MountID.Sets.Cart[mount.Type])
				{
					position.Y -= 0.001f;
				}
				if (sliding || velocity.Y == 0f)
				{
					justJumped = true;
				}
				bool flag4 = false;
				if (wet && accFlipper)
				{
					if (swimTime == 0)
					{
						swimTime = 30;
					}
					flag4 = true;
				}
				bool flag5 = false;
				bool flag6 = false;
				bool flag7 = false;
				bool flag8 = false;
				bool flag9 = false;
				bool flag10 = false;
				bool flag11 = false;
				bool flag12 = false;
				if (!flag2 && !flag)
				{
					if (canJumpAgain_Basilisk)
					{
						flag12 = true;
						canJumpAgain_Basilisk = false;
					}
					if (canJumpAgain_WallOfFleshGoat)
					{
						flag11 = true;
						canJumpAgain_WallOfFleshGoat = false;
					}
					else if (canJumpAgain_Santank)
					{
						flag10 = true;
						canJumpAgain_Santank = false;
					}
					else if (canJumpAgain_Unicorn)
					{
						flag9 = true;
						canJumpAgain_Unicorn = false;
					}
					else if (canJumpAgain_Sandstorm)
					{
						flag5 = true;
						canJumpAgain_Sandstorm = false;
					}
					else if (canJumpAgain_Blizzard)
					{
						flag6 = true;
						canJumpAgain_Blizzard = false;
					}
					else if (canJumpAgain_Fart)
					{
						canJumpAgain_Fart = false;
						flag7 = true;
					}
					else if (canJumpAgain_Sail)
					{
						canJumpAgain_Sail = false;
						flag8 = true;
					}
					else
					{
						canJumpAgain_Cloud = false;
					}
				}
				canRocket = false;
				rocketRelease = false;
				if (velocity.Y == 0f || sliding || (autoJump && justJumped))
				{
					RefreshDoubleJumps();
				}
				if (velocity.Y == 0f || flag4 || sliding || flag)
				{
					if (mount.Active && mount.Type == 43)
					{
						SoundEngine.PlaySound(SoundID.Item168, base.Center);
					}
					velocity.Y = (0f - jumpSpeed) * gravDir;
					jump = jumpHeight;
					if (portableStoolInfo.IsInUse)
					{
						position.Y -= portableStoolInfo.HeightBoost;
						gfxOffY += portableStoolInfo.HeightBoost;
					}
					if (sliding)
					{
						velocity.X = 3 * -slideDir;
					}
				}
				else if (flag5)
				{
					isPerformingJump_Sandstorm = true;
					_ = height;
					_ = gravDir;
					_ = -1f;
					SoundEngine.PlaySound(16, (int)position.X, (int)position.Y);
					velocity.Y = (0f - jumpSpeed) * gravDir;
					jump = jumpHeight * 3;
				}
				else if (flag6)
				{
					isPerformingJump_Blizzard = true;
					_ = height;
					_ = gravDir;
					_ = -1f;
					SoundEngine.PlaySound(16, (int)position.X, (int)position.Y);
					velocity.Y = (0f - jumpSpeed) * gravDir;
					jump = (int)((double)jumpHeight * 1.5);
				}
				else if (flag8)
				{
					isPerformingJump_Sail = true;
					int num5 = height;
					if (gravDir == -1f)
					{
						num5 = 0;
					}
					SoundEngine.PlaySound(16, (int)position.X, (int)position.Y);
					velocity.Y = (0f - jumpSpeed) * gravDir;
					jump = (int)((double)jumpHeight * 1.25);
					for (int k = 0; k < 30; k++)
					{
						int num6 = Dust.NewDust(new Vector2(position.X, position.Y + (float)num5), width, 12, 253, velocity.X * 0.3f, velocity.Y * 0.3f, 100, default(Color), 1.5f);
						if (k % 2 == 0)
						{
							Main.dust[num6].velocity.X += (float)Main.rand.Next(30, 71) * 0.1f;
						}
						else
						{
							Main.dust[num6].velocity.X -= (float)Main.rand.Next(30, 71) * 0.1f;
						}
						Main.dust[num6].velocity.Y += (float)Main.rand.Next(-10, 31) * 0.1f;
						Main.dust[num6].noGravity = true;
						Main.dust[num6].scale += (float)Main.rand.Next(-10, 41) * 0.01f;
						Main.dust[num6].velocity *= Main.dust[num6].scale * 0.7f;
						Vector2 vector = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						vector.Normalize();
						vector *= (float)Main.rand.Next(81) * 0.1f;
					}
				}
				else if (flag7)
				{
					isPerformingJump_Fart = true;
					int num7 = height;
					if (gravDir == -1f)
					{
						num7 = 0;
					}
					SoundEngine.PlaySound(SoundID.Item16, position);
					velocity.Y = (0f - jumpSpeed) * gravDir;
					jump = jumpHeight * 2;
					for (int l = 0; l < 10; l++)
					{
						int num8 = Dust.NewDust(new Vector2(position.X - 34f, position.Y + (float)num7 - 16f), 102, 32, 188, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 100, default(Color), 1.5f);
						Main.dust[num8].velocity.X = Main.dust[num8].velocity.X * 0.5f - velocity.X * 0.1f;
						Main.dust[num8].velocity.Y = Main.dust[num8].velocity.Y * 0.5f - velocity.Y * 0.3f;
					}
					int num9 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 16f, position.Y + (float)num7 - 16f), new Vector2(0f - velocity.X, 0f - velocity.Y), Main.rand.Next(435, 438));
					Main.gore[num9].velocity.X = Main.gore[num9].velocity.X * 0.1f - velocity.X * 0.1f;
					Main.gore[num9].velocity.Y = Main.gore[num9].velocity.Y * 0.1f - velocity.Y * 0.05f;
					num9 = Gore.NewGore(new Vector2(position.X - 36f, position.Y + (float)num7 - 16f), new Vector2(0f - velocity.X, 0f - velocity.Y), Main.rand.Next(435, 438));
					Main.gore[num9].velocity.X = Main.gore[num9].velocity.X * 0.1f - velocity.X * 0.1f;
					Main.gore[num9].velocity.Y = Main.gore[num9].velocity.Y * 0.1f - velocity.Y * 0.05f;
					num9 = Gore.NewGore(new Vector2(position.X + (float)width + 4f, position.Y + (float)num7 - 16f), new Vector2(0f - velocity.X, 0f - velocity.Y), Main.rand.Next(435, 438));
					Main.gore[num9].velocity.X = Main.gore[num9].velocity.X * 0.1f - velocity.X * 0.1f;
					Main.gore[num9].velocity.Y = Main.gore[num9].velocity.Y * 0.1f - velocity.Y * 0.05f;
				}
				else if (flag9)
				{
					isPerformingJump_Unicorn = true;
					_ = height;
					_ = gravDir;
					_ = -1f;
					SoundEngine.PlaySound(16, (int)position.X, (int)position.Y);
					velocity.Y = (0f - jumpSpeed) * gravDir;
					jump = jumpHeight * 2;
					Vector2 center = base.Center;
					Vector2 vector2 = new Vector2(50f, 20f);
					float num10 = (float)Math.PI * 2f * Main.rand.NextFloat();
					for (int m = 0; m < 5; m++)
					{
						for (float num11 = 0f; num11 < 14f; num11 += 1f)
						{
							Dust obj = Main.dust[Dust.NewDust(center, 0, 0, Utils.SelectRandom<int>(Main.rand, 176, 177, 179))];
							Vector2 vector3 = Vector2.UnitY.RotatedBy(num11 * ((float)Math.PI * 2f) / 14f + num10);
							vector3 *= 0.2f * (float)m;
							obj.position = center + vector3 * vector2;
							obj.velocity = vector3 + new Vector2(0f, gravDir * 4f);
							obj.noGravity = true;
							obj.scale = 1f + Main.rand.NextFloat() * 0.8f;
							obj.fadeIn = Main.rand.NextFloat() * 2f;
							obj.shader = GameShaders.Armor.GetSecondaryShader(cMount, this);
						}
					}
				}
				else if (flag11)
				{
					isPerformingJump_WallOfFleshGoat = true;
					_ = height;
					_ = gravDir;
					_ = -1f;
					SoundEngine.PlaySound(16, (int)position.X, (int)position.Y);
					velocity.Y = (0f - jumpSpeed) * gravDir;
					jump = jumpHeight * 2;
					Vector2 center2 = base.Center;
					Vector2 vector4 = new Vector2(50f, 20f);
					float num12 = (float)Math.PI * 2f * Main.rand.NextFloat();
					for (int n = 0; n < 5; n++)
					{
						for (float num13 = 0f; num13 < 14f; num13 += 1f)
						{
							Dust obj2 = Main.dust[Dust.NewDust(center2, 0, 0, 6)];
							Vector2 vector5 = Vector2.UnitY.RotatedBy(num13 * ((float)Math.PI * 2f) / 14f + num12);
							vector5 *= 0.2f * (float)n;
							obj2.position = center2 + vector5 * vector4;
							obj2.velocity = vector5 + new Vector2(0f, gravDir * 4f);
							obj2.noGravity = true;
							obj2.scale = 1f + Main.rand.NextFloat() * 0.8f;
							obj2.fadeIn = Main.rand.NextFloat() * 2f;
							obj2.shader = GameShaders.Armor.GetSecondaryShader(cMount, this);
						}
					}
				}
				else if (flag12)
				{
					isPerformingJump_Basilisk = true;
					_ = height;
					_ = gravDir;
					_ = -1f;
					SoundEngine.PlaySound(16, (int)position.X, (int)position.Y);
					velocity.Y = (0f - jumpSpeed) * gravDir;
					jump = (int)((double)jumpHeight * 0.75);
					Vector2 center3 = base.Center;
					Vector2 vector6 = new Vector2(50f, 20f);
					float num14 = (float)Math.PI * 2f * Main.rand.NextFloat();
					for (int num15 = 0; num15 < 5; num15++)
					{
						for (float num16 = 0f; num16 < 14f; num16 += 1f)
						{
							Dust obj3 = Main.dust[Dust.NewDust(center3, 0, 0, 31)];
							Vector2 vector7 = Vector2.UnitY.RotatedBy(num16 * ((float)Math.PI * 2f) / 14f + num14);
							vector7 *= 0.2f * (float)num15;
							obj3.position = center3 + vector7 * vector6;
							obj3.velocity = vector7 + new Vector2(0f, gravDir * 4f);
							obj3.noGravity = true;
							obj3.scale = 1f + Main.rand.NextFloat() * 0.8f;
							obj3.fadeIn = Main.rand.NextFloat() * 2f;
							obj3.shader = GameShaders.Armor.GetSecondaryShader(cMount, this);
						}
					}
				}
				else if (flag10)
				{
					isPerformingJump_Santank = true;
					int num17 = height;
					if (gravDir == -1f)
					{
						num17 = 0;
					}
					SoundEngine.PlaySound(16, (int)position.X, (int)position.Y);
					velocity.Y = (0f - jumpSpeed) * gravDir;
					jump = jumpHeight * 2;
					for (int num18 = 0; num18 < 15; num18++)
					{
						int num19 = Dust.NewDust(new Vector2(position.X - 34f, position.Y + (float)num17 - 16f), 102, 32, 4, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 100, new Color(250, 230, 230, 150), 1.5f);
						Main.dust[num19].velocity.X = Main.dust[num19].velocity.X * 0.5f - velocity.X * 0.1f;
						Main.dust[num19].velocity.Y = Main.dust[num19].velocity.Y * 0.5f - velocity.Y * 0.3f;
						Main.dust[num19].noGravity = true;
						num19 = Dust.NewDust(new Vector2(position.X - 34f, position.Y + (float)num17 - 16f), 102, 32, 6, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 20, default(Color), 1.5f);
						Main.dust[num19].velocity.Y -= 1f;
						if (num18 % 2 == 0)
						{
							Main.dust[num19].fadeIn = Main.rand.NextFloat() * 2f;
						}
					}
					float y = base.Bottom.Y - 22f;
					for (int num20 = 0; num20 < 3; num20++)
					{
						Vector2 vector8 = base.Center;
						switch (num20)
						{
						case 0:
							vector8 = new Vector2(base.Center.X - 16f, y);
							break;
						case 1:
							vector8 = new Vector2(position.X - 36f, y);
							break;
						case 2:
							vector8 = new Vector2(base.Right.X + 4f, y);
							break;
						}
						int num21 = Gore.NewGore(vector8, new Vector2(0f - velocity.X, 0f - velocity.Y), Main.rand.Next(61, 63));
						Main.gore[num21].velocity *= 0.1f;
						Main.gore[num21].velocity.X -= velocity.X * 0.1f;
						Main.gore[num21].velocity.Y -= velocity.Y * 0.05f;
						Main.gore[num21].velocity += Main.rand.NextVector2Circular(1f, 1f) * 0.5f;
					}
				}
				else
				{
					isPerformingJump_Cloud = true;
					int num22 = height;
					if (gravDir == -1f)
					{
						num22 = 0;
					}
					SoundEngine.PlaySound(16, (int)position.X, (int)position.Y);
					velocity.Y = (0f - jumpSpeed) * gravDir;
					jump = (int)((double)jumpHeight * 0.75);
					for (int num23 = 0; num23 < 10; num23++)
					{
						int num24 = Dust.NewDust(new Vector2(position.X - 34f, position.Y + (float)num22 - 16f), 102, 32, 16, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 100, default(Color), 1.5f);
						Main.dust[num24].velocity.X = Main.dust[num24].velocity.X * 0.5f - velocity.X * 0.1f;
						Main.dust[num24].velocity.Y = Main.dust[num24].velocity.Y * 0.5f - velocity.Y * 0.3f;
					}
					int num25 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 16f, position.Y + (float)num22 - 16f), new Vector2(0f - velocity.X, 0f - velocity.Y), Main.rand.Next(11, 14));
					Main.gore[num25].velocity.X = Main.gore[num25].velocity.X * 0.1f - velocity.X * 0.1f;
					Main.gore[num25].velocity.Y = Main.gore[num25].velocity.Y * 0.1f - velocity.Y * 0.05f;
					num25 = Gore.NewGore(new Vector2(position.X - 36f, position.Y + (float)num22 - 16f), new Vector2(0f - velocity.X, 0f - velocity.Y), Main.rand.Next(11, 14));
					Main.gore[num25].velocity.X = Main.gore[num25].velocity.X * 0.1f - velocity.X * 0.1f;
					Main.gore[num25].velocity.Y = Main.gore[num25].velocity.Y * 0.1f - velocity.Y * 0.05f;
					num25 = Gore.NewGore(new Vector2(position.X + (float)width + 4f, position.Y + (float)num22 - 16f), new Vector2(0f - velocity.X, 0f - velocity.Y), Main.rand.Next(11, 14));
					Main.gore[num25].velocity.X = Main.gore[num25].velocity.X * 0.1f - velocity.X * 0.1f;
					Main.gore[num25].velocity.Y = Main.gore[num25].velocity.Y * 0.1f - velocity.Y * 0.05f;
				}
			}
			releaseJump = false;
		}
		else
		{
			jump = 0;
			releaseJump = true;
			rocketRelease = true;
		}
	}

	public void DashMovement()
	{
		if (dashDelay == 0)
		{
			dash = dashType;
		}
		if (dash == 0)
		{
			dashTime = 0;
			dashDelay = 0;
		}
		if (dash == 2 && eocDash > 0)
		{
			if (eocHit < 0)
			{
				Rectangle rectangle = new Rectangle((int)((double)position.X + (double)velocity.X * 0.5 - 4.0), (int)((double)position.Y + (double)velocity.Y * 0.5 - 4.0), width + 8, height + 8);
				for (int i = 0; i < 200; i++)
				{
					NPC nPC = Main.npc[i];
					if (!nPC.active || nPC.dontTakeDamage || nPC.friendly || (nPC.aiStyle == 112 && !(nPC.ai[2] <= 1f)) || !CanNPCBeHitByPlayerOrPlayerProjectile(nPC))
					{
						continue;
					}
					Rectangle rect = nPC.getRect();
					if (rectangle.Intersects(rect) && (nPC.noTileCollide || CanHit(nPC)))
					{
						float num = 30f * meleeDamage;
						float num2 = 9f;
						bool crit = false;
						if (kbGlove)
						{
							num2 *= 2f;
						}
						if (kbBuff)
						{
							num2 *= 1.5f;
						}
						if (Main.rand.Next(100) < meleeCrit)
						{
							crit = true;
						}
						int num3 = direction;
						if (velocity.X < 0f)
						{
							num3 = -1;
						}
						if (velocity.X > 0f)
						{
							num3 = 1;
						}
						if (whoAmI == Main.myPlayer)
						{
							ApplyDamageToNPC(nPC, (int)num, num2, num3, crit);
						}
						eocDash = 10;
						dashDelay = 30;
						velocity.X = -num3 * 9;
						velocity.Y = -4f;
						GiveImmuneTimeForCollisionAttack(4);
						eocHit = i;
					}
				}
			}
			else if ((!controlLeft || !(velocity.X < 0f)) && (!controlRight || !(velocity.X > 0f)))
			{
				velocity.X *= 0.95f;
			}
		}
		if (dash == 3 && dashDelay < 0 && whoAmI == Main.myPlayer)
		{
			Rectangle rectangle2 = new Rectangle((int)((double)position.X + (double)velocity.X * 0.5 - 4.0), (int)((double)position.Y + (double)velocity.Y * 0.5 - 4.0), width + 8, height + 8);
			for (int j = 0; j < 200; j++)
			{
				NPC nPC2 = Main.npc[j];
				if (!nPC2.active || nPC2.dontTakeDamage || nPC2.friendly || nPC2.immune[whoAmI] > 0 || (nPC2.aiStyle == 112 && !(nPC2.ai[2] <= 1f)) || !CanNPCBeHitByPlayerOrPlayerProjectile(nPC2))
				{
					continue;
				}
				Rectangle rect2 = nPC2.getRect();
				if (rectangle2.Intersects(rect2) && (nPC2.noTileCollide || CanHit(nPC2)))
				{
					if (!solarDashConsumedFlare)
					{
						solarDashConsumedFlare = true;
						ConsumeSolarFlare();
					}
					float num4 = 150f * meleeDamage;
					float num5 = 9f;
					bool crit2 = false;
					if (kbGlove)
					{
						num5 *= 2f;
					}
					if (kbBuff)
					{
						num5 *= 1.5f;
					}
					if (Main.rand.Next(100) < meleeCrit)
					{
						crit2 = true;
					}
					int num6 = direction;
					if (velocity.X < 0f)
					{
						num6 = -1;
					}
					if (velocity.X > 0f)
					{
						num6 = 1;
					}
					if (whoAmI == Main.myPlayer)
					{
						ApplyDamageToNPC(nPC2, (int)num4, num5, num6, crit2);
						int num7 = Projectile.NewProjectile(GetProjectileSource_OnHit(nPC2, 2), base.Center.X, base.Center.Y, 0f, 0f, 608, (int)num4, 15f, Main.myPlayer);
						Main.projectile[num7].Kill();
					}
					nPC2.immune[whoAmI] = 6;
					GiveImmuneTimeForCollisionAttack(4);
				}
			}
		}
		if (dashDelay > 0)
		{
			if (eocDash > 0)
			{
				eocDash--;
			}
			if (eocDash == 0)
			{
				eocHit = -1;
			}
			dashDelay--;
		}
		else if (dashDelay < 0)
		{
			StopVanityActions();
			float num8 = 12f;
			float num9 = 0.992f;
			float num10 = Math.Max(accRunSpeed, maxRunSpeed);
			float num11 = 0.96f;
			int num12 = 20;
			if (dash == 1)
			{
				for (int k = 0; k < 2; k++)
				{
					int num13 = ((velocity.Y != 0f) ? Dust.NewDust(new Vector2(position.X, position.Y + (float)(height / 2) - 8f), width, 16, 31, 0f, 0f, 100, default(Color), 1.4f) : Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 4f), width, 8, 31, 0f, 0f, 100, default(Color), 1.4f));
					Main.dust[num13].velocity *= 0.1f;
					Main.dust[num13].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
				}
			}
			else if (dash == 2)
			{
				for (int l = 0; l < 0; l++)
				{
					int num14 = ((velocity.Y != 0f) ? Dust.NewDust(new Vector2(position.X, position.Y + (float)(height / 2) - 8f), width, 16, 31, 0f, 0f, 100, default(Color), 1.4f) : Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 4f), width, 8, 31, 0f, 0f, 100, default(Color), 1.4f));
					Main.dust[num14].velocity *= 0.1f;
					Main.dust[num14].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
				}
				num9 = 0.985f;
				num11 = 0.94f;
				num12 = 30;
			}
			else if (dash == 3)
			{
				for (int m = 0; m < 4; m++)
				{
					int num15 = Dust.NewDust(new Vector2(position.X, position.Y + 4f), width, height - 8, 6, 0f, 0f, 100, default(Color), 1.7f);
					Main.dust[num15].velocity *= 0.1f;
					Main.dust[num15].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
					Main.dust[num15].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
					Main.dust[num15].noGravity = true;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num15].fadeIn = 0.5f;
					}
				}
				num8 = 14f;
				num9 = 0.985f;
				num11 = 0.94f;
				num12 = 20;
			}
			else if (dash == 4)
			{
				for (int n = 0; n < 2; n++)
				{
					int num16 = Dust.NewDust(new Vector2(position.X, position.Y + 4f), width, height - 8, 229, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num16].velocity *= 0.1f;
					Main.dust[num16].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
					Main.dust[num16].noGravity = true;
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num16].fadeIn = 0.3f;
					}
				}
				num9 = 0.985f;
				num11 = 0.94f;
				num12 = 20;
			}
			if (dash == 5)
			{
				for (int num17 = 0; num17 < 2; num17++)
				{
					int type = Main.rand.NextFromList(new short[3] { 68, 69, 70 });
					int num18 = ((velocity.Y != 0f) ? Dust.NewDust(new Vector2(position.X, position.Y + (float)(height / 2) - 8f), width, 16, type, 0f, 0f, 100) : Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 4f), width, 8, type, 0f, 0f, 100));
					Main.dust[num18].velocity *= 0.2f;
					Main.dust[num18].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
					Main.dust[num18].fadeIn = 0.5f + (float)Main.rand.Next(20) * 0.01f;
					Main.dust[num18].noGravity = true;
					Main.dust[num18].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
				}
			}
			if (dash <= 0)
			{
				return;
			}
			doorHelper.AllowOpeningDoorsByVelocityAloneForATime(num12 * 3);
			vortexStealthActive = false;
			if (velocity.X > num8 || velocity.X < 0f - num8)
			{
				velocity.X *= num9;
				return;
			}
			if (velocity.X > num10 || velocity.X < 0f - num10)
			{
				velocity.X *= num11;
				return;
			}
			dashDelay = num12;
			if (velocity.X < 0f)
			{
				velocity.X = 0f - num10;
			}
			else if (velocity.X > 0f)
			{
				velocity.X = num10;
			}
		}
		else
		{
			if (dash <= 0 || mount.Active)
			{
				return;
			}
			if (dash == 1)
			{
				DoCommonDashHandle(out var dir, out var dashing);
				if (dashing)
				{
					velocity.X = 16.9f * (float)dir;
					Point point = (base.Center + new Vector2(dir * width / 2 + 2, gravDir * (float)(-height) / 2f + gravDir * 2f)).ToTileCoordinates();
					Point point2 = (base.Center + new Vector2(dir * width / 2 + 2, 0f)).ToTileCoordinates();
					if (WorldGen.SolidOrSlopedTile(point.X, point.Y) || WorldGen.SolidOrSlopedTile(point2.X, point2.Y))
					{
						velocity.X /= 2f;
					}
					dashDelay = -1;
					for (int num19 = 0; num19 < 20; num19++)
					{
						int num20 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num20].position.X += Main.rand.Next(-5, 6);
						Main.dust[num20].position.Y += Main.rand.Next(-5, 6);
						Main.dust[num20].velocity *= 0.2f;
						Main.dust[num20].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
					}
					int num21 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 34f), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num21].velocity.X = (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num21].velocity.Y = (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num21].velocity *= 0.4f;
					num21 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 14f), default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num21].velocity.X = (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num21].velocity.Y = (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num21].velocity *= 0.4f;
				}
			}
			else if (dash == 2)
			{
				DoCommonDashHandle(out var dir2, out var dashing2);
				if (dashing2)
				{
					velocity.X = 14.5f * (float)dir2;
					Point point3 = (base.Center + new Vector2(dir2 * width / 2 + 2, gravDir * (float)(-height) / 2f + gravDir * 2f)).ToTileCoordinates();
					Point point4 = (base.Center + new Vector2(dir2 * width / 2 + 2, 0f)).ToTileCoordinates();
					if (WorldGen.SolidOrSlopedTile(point3.X, point3.Y) || WorldGen.SolidOrSlopedTile(point4.X, point4.Y))
					{
						velocity.X /= 2f;
					}
					dashDelay = -1;
					eocDash = 15;
					for (int num22 = 0; num22 < 0; num22++)
					{
						int num23 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num23].position.X += Main.rand.Next(-5, 6);
						Main.dust[num23].position.Y += Main.rand.Next(-5, 6);
						Main.dust[num23].velocity *= 0.2f;
						Main.dust[num23].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
					}
				}
			}
			else if (dash == 3)
			{
				DoCommonDashHandle(out var dir3, out var dashing3, SolarDashStart);
				if (dashing3)
				{
					velocity.X = 21.9f * (float)dir3;
					Point point5 = (base.Center + new Vector2(dir3 * width / 2 + 2, gravDir * (float)(-height) / 2f + gravDir * 2f)).ToTileCoordinates();
					Point point6 = (base.Center + new Vector2(dir3 * width / 2 + 2, 0f)).ToTileCoordinates();
					if (WorldGen.SolidOrSlopedTile(point5.X, point5.Y) || WorldGen.SolidOrSlopedTile(point6.X, point6.Y))
					{
						velocity.X /= 2f;
					}
					dashDelay = -1;
					for (int num24 = 0; num24 < 20; num24++)
					{
						int num25 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num25].position.X += Main.rand.Next(-5, 6);
						Main.dust[num25].position.Y += Main.rand.Next(-5, 6);
						Main.dust[num25].velocity *= 0.2f;
						Main.dust[num25].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
						Main.dust[num25].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
						Main.dust[num25].noGravity = true;
						Main.dust[num25].fadeIn = 0.5f;
					}
				}
			}
			if (dash != 5)
			{
				return;
			}
			DoCommonDashHandle(out var dir4, out var dashing4);
			if (dashing4)
			{
				velocity.X = 16.9f * (float)dir4;
				Point point7 = (base.Center + new Vector2(dir4 * width / 2 + 2, gravDir * (float)(-height) / 2f + gravDir * 2f)).ToTileCoordinates();
				Point point8 = (base.Center + new Vector2(dir4 * width / 2 + 2, 0f)).ToTileCoordinates();
				if (WorldGen.SolidOrSlopedTile(point7.X, point7.Y) || WorldGen.SolidOrSlopedTile(point8.X, point8.Y))
				{
					velocity.X /= 2f;
				}
				dashDelay = -1;
				for (int num26 = 0; num26 < 20; num26++)
				{
					int type2 = Main.rand.NextFromList(new short[3] { 68, 69, 70 });
					int num27 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, type2, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num27].position.X += Main.rand.Next(-5, 6);
					Main.dust[num27].position.Y += Main.rand.Next(-5, 6);
					Main.dust[num27].velocity = DirectionTo(Main.dust[num27].position) * 2f;
					Main.dust[num27].scale *= 1f + (float)Main.rand.Next(20) * 0.01f;
					Main.dust[num27].fadeIn = 0.5f + (float)Main.rand.Next(20) * 0.01f;
					Main.dust[num27].noGravity = true;
					Main.dust[num27].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
				}
			}
		}
	}

	private void SolarDashStart(int dashDirection)
	{
		solarDashing = true;
		solarDashConsumedFlare = false;
	}

	private void DoCommonDashHandle(out int dir, out bool dashing, DashStartAction dashStartAction = null)
	{
		dir = 0;
		dashing = false;
		if (dashTime > 0)
		{
			dashTime--;
		}
		if (dashTime < 0)
		{
			dashTime++;
		}
		if (controlRight && releaseRight)
		{
			if (dashTime > 0)
			{
				dir = 1;
				dashing = true;
				dashTime = 0;
				timeSinceLastDashStarted = 0;
				dashStartAction?.Invoke(dir);
			}
			else
			{
				dashTime = 15;
			}
		}
		else if (controlLeft && releaseLeft)
		{
			if (dashTime < 0)
			{
				dir = -1;
				dashing = true;
				dashTime = 0;
				timeSinceLastDashStarted = 0;
				dashStartAction?.Invoke(dir);
			}
			else
			{
				dashTime = -15;
			}
		}
	}

	public void WallslideMovement()
	{
		sliding = false;
		if (slideDir == 0 || spikedBoots <= 0 || mount.Active || ((!controlLeft || slideDir != -1) && (!controlRight || slideDir != 1)))
		{
			return;
		}
		bool flag = false;
		float num = position.X;
		if (slideDir == 1)
		{
			num += (float)width;
		}
		num += (float)slideDir;
		float num2 = position.Y + (float)height + 1f;
		if (gravDir < 0f)
		{
			num2 = position.Y - 1f;
		}
		num /= 16f;
		num2 /= 16f;
		if (WorldGen.SolidTile((int)num, (int)num2) && WorldGen.SolidTile((int)num, (int)num2 - 1))
		{
			flag = true;
		}
		if (spikedBoots >= 2)
		{
			if (!flag || ((!(velocity.Y > 0f) || gravDir != 1f) && (!(velocity.Y < gravity) || gravDir != -1f)))
			{
				return;
			}
			float num3 = gravity;
			if (slowFall)
			{
				num3 = ((!TryingToHoverUp) ? (gravity / 3f * gravDir) : (gravity / 10f * gravDir));
			}
			fallStart = (int)(position.Y / 16f);
			if ((controlDown && gravDir == 1f) || (controlUp && gravDir == -1f))
			{
				velocity.Y = 4f * gravDir;
				int num4 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)((width / 2 - 4) * slideDir), position.Y + (float)(height / 2) + (float)(height / 2 - 4) * gravDir), 8, 8, 31);
				if (slideDir < 0)
				{
					Main.dust[num4].position.X -= 10f;
				}
				if (gravDir < 0f)
				{
					Main.dust[num4].position.Y -= 12f;
				}
				Main.dust[num4].velocity *= 0.1f;
				Main.dust[num4].scale *= 1.2f;
				Main.dust[num4].noGravity = true;
				Main.dust[num4].shader = GameShaders.Armor.GetSecondaryShader(cShoe, this);
			}
			else if (gravDir == -1f)
			{
				velocity.Y = (0f - num3 + 1E-05f) * gravDir;
			}
			else
			{
				velocity.Y = (0f - num3 + 1E-05f) * gravDir;
			}
			sliding = true;
		}
		else if ((flag && (double)velocity.Y > 0.5 && gravDir == 1f) || ((double)velocity.Y < -0.5 && gravDir == -1f))
		{
			fallStart = (int)(position.Y / 16f);
			if (controlDown)
			{
				velocity.Y = 4f * gravDir;
			}
			else
			{
				velocity.Y = 0.5f * gravDir;
			}
			sliding = true;
			int num5 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)((width / 2 - 4) * slideDir), position.Y + (float)(height / 2) + (float)(height / 2 - 4) * gravDir), 8, 8, 31);
			if (slideDir < 0)
			{
				Main.dust[num5].position.X -= 10f;
			}
			if (gravDir < 0f)
			{
				Main.dust[num5].position.Y -= 12f;
			}
			Main.dust[num5].velocity *= 0.1f;
			Main.dust[num5].scale *= 1.2f;
			Main.dust[num5].noGravity = true;
			Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(cShoe, this);
		}
	}

	public void CarpetMovement()
	{
		bool flag = false;
		if (grappling[0] == -1 && carpet && !canJumpAgain_Cloud && !canJumpAgain_Sandstorm && !canJumpAgain_Blizzard && !canJumpAgain_Fart && !canJumpAgain_Sail && !canJumpAgain_Unicorn && !canJumpAgain_Santank && !canJumpAgain_WallOfFleshGoat && !canJumpAgain_Basilisk && jump == 0 && velocity.Y != 0f && rocketTime == 0 && wingTime == 0f && !mount.Active)
		{
			if (controlJump && canCarpet)
			{
				canCarpet = false;
				carpetTime = 300;
			}
			if (carpetTime > 0 && controlJump)
			{
				fallStart = (int)(position.Y / 16f);
				flag = true;
				carpetTime--;
				float num = gravity;
				if (gravDir == 1f && velocity.Y > 0f - num)
				{
					velocity.Y = 0f - (num + 1E-06f);
				}
				else if (gravDir == -1f && velocity.Y < num)
				{
					velocity.Y = num + 1E-06f;
				}
				carpetFrameCounter += 1f + Math.Abs(velocity.X * 0.5f);
				if (carpetFrameCounter > 8f)
				{
					carpetFrameCounter = 0f;
					carpetFrame++;
				}
				if (carpetFrame < 0)
				{
					carpetFrame = 0;
				}
				if (carpetFrame > 5)
				{
					carpetFrame = 0;
				}
			}
		}
		if (!flag)
		{
			carpetFrame = -1;
		}
		else
		{
			slowFall = false;
		}
	}

	public void DoubleJumpVisuals()
	{
		if (isPerformingJump_Cloud && hasJumpOption_Cloud && !canJumpAgain_Cloud && (canJumpAgain_Sandstorm || !hasJumpOption_Sandstorm) && ((gravDir == 1f && velocity.Y < 0f) || (gravDir == -1f && velocity.Y > 0f)))
		{
			int num = height;
			if (gravDir == -1f)
			{
				num = -6;
			}
			int num2 = Dust.NewDust(new Vector2(position.X - 4f, position.Y + (float)num), width + 8, 4, 16, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 100, default(Color), 1.5f);
			Main.dust[num2].velocity.X = Main.dust[num2].velocity.X * 0.5f - velocity.X * 0.1f;
			Main.dust[num2].velocity.Y = Main.dust[num2].velocity.Y * 0.5f - velocity.Y * 0.3f;
		}
		if (isPerformingJump_Sandstorm && hasJumpOption_Sandstorm && !canJumpAgain_Sandstorm && ((gravDir == 1f && velocity.Y < 0f) || (gravDir == -1f && velocity.Y > 0f)))
		{
			int num3 = height;
			if (gravDir == -1f)
			{
				num3 = -6;
			}
			float num4 = ((float)jump / 75f + 1f) / 2f;
			for (int i = 0; i < 3; i++)
			{
				int num5 = Dust.NewDust(new Vector2(position.X, position.Y + (float)(num3 / 2)), width, 32, 124, velocity.X * 0.3f, velocity.Y * 0.3f, 150, default(Color), 1f * num4);
				Main.dust[num5].velocity *= 0.5f * num4;
				Main.dust[num5].fadeIn = 1.5f * num4;
			}
			sandStorm = true;
			if (miscCounter % 3 == 0)
			{
				int num6 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 18f, position.Y + (float)(num3 / 2)), new Vector2(0f - velocity.X, 0f - velocity.Y), Main.rand.Next(220, 223), num4);
				Main.gore[num6].velocity = velocity * 0.3f * num4;
				Main.gore[num6].alpha = 100;
			}
		}
		if (isPerformingJump_Fart && hasJumpOption_Fart && !canJumpAgain_Fart && ((gravDir == 1f && velocity.Y < 0f) || (gravDir == -1f && velocity.Y > 0f)))
		{
			int num7 = height;
			if (gravDir == -1f)
			{
				num7 = -6;
			}
			int num8 = Dust.NewDust(new Vector2(position.X - 4f, position.Y + (float)num7), width + 8, 4, 188, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 100, default(Color), 1.5f);
			Main.dust[num8].velocity.X = Main.dust[num8].velocity.X * 0.5f - velocity.X * 0.1f;
			Main.dust[num8].velocity.Y = Main.dust[num8].velocity.Y * 0.5f - velocity.Y * 0.3f;
			Main.dust[num8].velocity *= 0.5f;
		}
		if (isPerformingJump_Unicorn && hasJumpOption_Unicorn && !canJumpAgain_Unicorn && ((gravDir == 1f && velocity.Y < 0f) || (gravDir == -1f && velocity.Y > 0f)))
		{
			Dust obj = Main.dust[Dust.NewDust(position, width, height, Utils.SelectRandom<int>(Main.rand, 176, 177, 179))];
			obj.velocity = Vector2.Zero;
			obj.noGravity = true;
			obj.scale = 0.5f + Main.rand.NextFloat() * 0.8f;
			obj.fadeIn = 1f + Main.rand.NextFloat() * 2f;
			obj.shader = GameShaders.Armor.GetSecondaryShader(cMount, this);
		}
		if (isPerformingJump_Sail && hasJumpOption_Sail && !canJumpAgain_Sail && ((gravDir == 1f && velocity.Y < 1f) || (gravDir == -1f && velocity.Y > 1f)))
		{
			int num9 = 1;
			if (jump > 0)
			{
				num9 = 2;
			}
			int num10 = height - 6;
			if (gravDir == -1f)
			{
				num10 = 6;
			}
			for (int j = 0; j < num9; j++)
			{
				int num11 = Dust.NewDust(new Vector2(position.X, position.Y + (float)num10), width, 12, 253, velocity.X * 0.3f, velocity.Y * 0.3f, 100, default(Color), 1.5f);
				Main.dust[num11].scale += (float)Main.rand.Next(-5, 3) * 0.1f;
				if (jump <= 0)
				{
					Main.dust[num11].scale *= 0.8f;
				}
				else
				{
					Main.dust[num11].velocity -= velocity / 5f;
				}
				Main.dust[num11].noGravity = true;
				Vector2 vector = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
				vector.Normalize();
				vector *= (float)Main.rand.Next(81) * 0.1f;
			}
		}
		if (!isPerformingJump_Blizzard || !hasJumpOption_Blizzard || canJumpAgain_Blizzard || ((gravDir != 1f || !(velocity.Y < 0f)) && (gravDir != -1f || !(velocity.Y > 0f))))
		{
			return;
		}
		int num12 = height - 6;
		if (gravDir == -1f)
		{
			num12 = 6;
		}
		for (int k = 0; k < 2; k++)
		{
			int num13 = Dust.NewDust(new Vector2(position.X, position.Y + (float)num12), width, 12, 76, velocity.X * 0.3f, velocity.Y * 0.3f);
			Main.dust[num13].velocity *= 0.1f;
			if (k == 0)
			{
				Main.dust[num13].velocity += velocity * 0.03f;
			}
			else
			{
				Main.dust[num13].velocity -= velocity * 0.03f;
			}
			Main.dust[num13].velocity -= velocity * 0.1f;
			Main.dust[num13].noGravity = true;
			Main.dust[num13].noLight = true;
		}
		for (int l = 0; l < 3; l++)
		{
			int num14 = Dust.NewDust(new Vector2(position.X, position.Y + (float)num12), width, 12, 76, velocity.X * 0.3f, velocity.Y * 0.3f);
			Main.dust[num14].fadeIn = 1.5f;
			Main.dust[num14].velocity *= 0.6f;
			Main.dust[num14].velocity += velocity * 0.8f;
			Main.dust[num14].noGravity = true;
			Main.dust[num14].noLight = true;
		}
		for (int m = 0; m < 3; m++)
		{
			int num15 = Dust.NewDust(new Vector2(position.X, position.Y + (float)num12), width, 12, 76, velocity.X * 0.3f, velocity.Y * 0.3f);
			Main.dust[num15].fadeIn = 1.5f;
			Main.dust[num15].velocity *= 0.6f;
			Main.dust[num15].velocity -= velocity * 0.8f;
			Main.dust[num15].noGravity = true;
			Main.dust[num15].noLight = true;
		}
	}

	public void WingMovement()
	{
		if (wingsLogic == 4 && TryingToHoverUp)
		{
			velocity.Y -= 0.2f * gravDir;
			if (gravDir == 1f)
			{
				if (velocity.Y > 0f)
				{
					velocity.Y -= 1f;
				}
				else if (velocity.Y > 0f - jumpSpeed)
				{
					velocity.Y -= 0.2f;
				}
				if (velocity.Y < (0f - jumpSpeed) * 3f)
				{
					velocity.Y = (0f - jumpSpeed) * 3f;
				}
			}
			else
			{
				if (velocity.Y < 0f)
				{
					velocity.Y += 1f;
				}
				else if (velocity.Y < jumpSpeed)
				{
					velocity.Y += 0.2f;
				}
				if (velocity.Y > jumpSpeed * 3f)
				{
					velocity.Y = jumpSpeed * 3f;
				}
			}
			wingTime -= 2f;
		}
		else
		{
			float num = 0.1f;
			float num2 = 0.5f;
			float num3 = 1.5f;
			float num4 = 0.5f;
			float num5 = 0.1f;
			if (wingsLogic == 26)
			{
				num2 = 0.75f;
				num5 = 0.15f;
				num4 = 1f;
				num3 = 2.5f;
				num = 0.125f;
			}
			if (wingsLogic == 8 || wingsLogic == 11 || wingsLogic == 24 || wingsLogic == 27 || wingsLogic == 22)
			{
				num3 = 1.66f;
			}
			if (wingsLogic == 21 || wingsLogic == 12 || wingsLogic == 20 || wingsLogic == 23)
			{
				num3 = 1.805f;
			}
			if (wingsLogic == 37)
			{
				num2 = 0.75f;
				num5 = 0.15f;
				num4 = 1f;
				num3 = 2.5f;
				num = 0.125f;
			}
			if (wingsLogic == 44)
			{
				num2 = 0.85f;
				num5 = 0.15f;
				num4 = 1f;
				num3 = 2.75f;
				num = 0.125f;
				if (TryingToHoverUp)
				{
					velocity.Y -= 0.4f * gravDir;
					if (gravDir == 1f)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y -= 1f;
						}
						else if (velocity.Y > 0f - jumpSpeed)
						{
							velocity.Y -= 0.2f;
						}
						if (velocity.Y < (0f - jumpSpeed) * 3f)
						{
							velocity.Y = (0f - jumpSpeed) * 3f;
						}
					}
					else
					{
						if (velocity.Y < 0f)
						{
							velocity.Y += 1f;
						}
						else if (velocity.Y < jumpSpeed)
						{
							velocity.Y += 0.2f;
						}
						if (velocity.Y > jumpSpeed * 3f)
						{
							velocity.Y = jumpSpeed * 3f;
						}
					}
				}
				if (TryingToHoverDown && !controlJump && velocity.Y != 0f)
				{
					velocity.Y += 0.4f;
				}
			}
			if (wingsLogic == 45)
			{
				num2 = 0.95f;
				num5 = 0.15f;
				num4 = 1f;
				num3 = 4.5f;
				if (TryingToHoverUp)
				{
					velocity.Y -= 0.4f * gravDir;
					if (gravDir == 1f)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y -= 1f;
						}
						else if (velocity.Y > 0f - jumpSpeed)
						{
							velocity.Y -= 0.2f;
						}
						if (velocity.Y < (0f - jumpSpeed) * 3f)
						{
							velocity.Y = (0f - jumpSpeed) * 3f;
						}
					}
					else
					{
						if (velocity.Y < 0f)
						{
							velocity.Y += 1f;
						}
						else if (velocity.Y < jumpSpeed)
						{
							velocity.Y += 0.2f;
						}
						if (velocity.Y > jumpSpeed * 3f)
						{
							velocity.Y = jumpSpeed * 3f;
						}
					}
				}
				if (TryingToHoverDown && !controlJump && velocity.Y != 0f)
				{
					velocity.Y += 0.4f;
				}
			}
			if (wingsLogic == 29 || wingsLogic == 32)
			{
				num2 = 0.85f;
				num5 = 0.15f;
				num4 = 1f;
				num3 = 3f;
				num = 0.135f;
			}
			if (wingsLogic == 30 || wingsLogic == 31)
			{
				num4 = 1f;
				num3 = 2.45f;
				if (!TryingToHoverDown)
				{
					num = 0.15f;
				}
			}
			velocity.Y -= num * gravDir;
			if (gravDir == 1f)
			{
				if (velocity.Y > 0f)
				{
					velocity.Y -= num2;
				}
				else if (velocity.Y > (0f - jumpSpeed) * num4)
				{
					velocity.Y -= num5;
				}
				if (velocity.Y < (0f - jumpSpeed) * num3)
				{
					velocity.Y = (0f - jumpSpeed) * num3;
				}
			}
			else
			{
				if (velocity.Y < 0f)
				{
					velocity.Y += num2;
				}
				else if (velocity.Y < jumpSpeed * num4)
				{
					velocity.Y += num5;
				}
				if (velocity.Y > jumpSpeed * num3)
				{
					velocity.Y = jumpSpeed * num3;
				}
			}
			if ((wingsLogic == 22 || wingsLogic == 28 || wingsLogic == 30 || wingsLogic == 31 || wingsLogic == 37 || wingsLogic == 45) && TryingToHoverDown && !controlLeft && !controlRight)
			{
				wingTime -= 0.5f;
			}
			else
			{
				wingTime -= 1f;
			}
		}
		if (empressBrooch && wingTime != 0f)
		{
			wingTime = wingTimeMax;
		}
	}

	public void MoonLeechRope()
	{
		int num = -1;
		for (int i = 0; i < 1000; i++)
		{
			if (Main.projectile[i].active && Main.projectile[i].type == 456 && Main.projectile[i].ai[1] == (float)whoAmI)
			{
				num = i;
				break;
			}
		}
		if (num != -1 && !(Main.projectile[num].ai[0] < 0f))
		{
			Projectile projectile = Main.projectile[num];
			Vector2 vector = new Vector2(0f, 216f);
			Vector2 value = Main.npc[(int)Math.Abs(projectile.ai[0]) - 1].Center - base.Center + vector;
			if (value.Length() > 200f)
			{
				Vector2 vector2 = Vector2.Normalize(value);
				position += vector2 * (value.Length() - 200f);
			}
		}
	}

	public void WOFTongue()
	{
		if (Main.wofNPCIndex < 0 || !Main.npc[Main.wofNPCIndex].active)
		{
			return;
		}
		float num = Main.npc[Main.wofNPCIndex].position.X + 40f;
		if (Main.npc[Main.wofNPCIndex].direction > 0)
		{
			num -= 96f;
		}
		if (position.X + (float)width > num && position.X < num + 140f && gross)
		{
			noKnockback = false;
			int attackDamage_ScaledByStrength = Main.npc[Main.wofNPCIndex].GetAttackDamage_ScaledByStrength(50f);
			Hurt(PlayerDeathReason.LegacyDefault(), attackDamage_ScaledByStrength, Main.npc[Main.wofNPCIndex].direction);
		}
		if (!gross && position.Y > (float)((Main.maxTilesY - 250) * 16) && position.X > num - 1920f && position.X < num + 1920f)
		{
			AddBuff(37, 10);
			SoundEngine.PlaySound(4, (int)Main.npc[Main.wofNPCIndex].position.X, (int)Main.npc[Main.wofNPCIndex].position.Y, 10);
		}
		if (gross)
		{
			if (position.Y < (float)(Main.UnderworldLayer * 16))
			{
				AddBuff(38, 10);
			}
			if (Main.npc[Main.wofNPCIndex].direction < 0)
			{
				if (position.X + (float)(width / 2) > Main.npc[Main.wofNPCIndex].position.X + (float)(Main.npc[Main.wofNPCIndex].width / 2) + 40f)
				{
					AddBuff(38, 10);
				}
			}
			else if (position.X + (float)(width / 2) < Main.npc[Main.wofNPCIndex].position.X + (float)(Main.npc[Main.wofNPCIndex].width / 2) - 40f)
			{
				AddBuff(38, 10);
			}
		}
		if (!tongued)
		{
			return;
		}
		controlHook = false;
		controlUseItem = false;
		for (int i = 0; i < 1000; i++)
		{
			if (Main.projectile[i].active && Main.projectile[i].owner == Main.myPlayer && Main.projectile[i].aiStyle == 7)
			{
				Main.projectile[i].Kill();
			}
		}
		Vector2 center = base.Center;
		float num2 = Main.npc[Main.wofNPCIndex].position.X + (float)(Main.npc[Main.wofNPCIndex].width / 2) - center.X;
		float num3 = Main.npc[Main.wofNPCIndex].position.Y + (float)(Main.npc[Main.wofNPCIndex].height / 2) - center.Y;
		if ((float)Math.Sqrt(num2 * num2 + num3 * num3) > 3000f)
		{
			KillMe(PlayerDeathReason.ByOther(11), 1000.0, 0);
		}
		else if (Main.npc[Main.wofNPCIndex].position.X < 608f || Main.npc[Main.wofNPCIndex].position.X > (float)((Main.maxTilesX - 38) * 16))
		{
			KillMe(PlayerDeathReason.ByOther(12), 1000.0, 0);
		}
	}

	public void StatusFromNPC(NPC npc)
	{
		if (Main.expertMode && ((npc.type == 266 && Main.rand.Next(3) == 0) || npc.type == 267))
		{
			int num = Main.rand.Next(9);
			if (num == 2 || num == 4)
			{
				num = Main.rand.Next(9);
			}
			float num2 = (float)Main.rand.Next(75, 150) * 0.01f;
			switch (num)
			{
			case 0:
				AddBuff(20, (int)(60f * num2 * 3.5f));
				break;
			case 1:
				AddBuff(22, (int)(60f * num2 * 2f));
				break;
			case 2:
				AddBuff(23, (int)(60f * num2 * 0.5f));
				break;
			case 3:
				AddBuff(30, (int)(60f * num2 * 5f));
				break;
			case 4:
				AddBuff(31, (int)(60f * num2 * 1f));
				break;
			case 5:
				AddBuff(32, (int)(60f * num2 * 3.5f));
				break;
			case 6:
				AddBuff(33, (int)(60f * num2 * 7.5f));
				break;
			case 7:
				AddBuff(35, (int)(60f * num2 * 1f));
				break;
			case 8:
				AddBuff(36, (int)((double)(60f * num2) * 6.5));
				break;
			}
		}
		if (npc.type == 530 || npc.type == 531)
		{
			AddBuff(70, Main.rand.Next(240, 241));
		}
		if (npc.type == 159 || npc.type == 158)
		{
			AddBuff(30, Main.rand.Next(300, 600));
		}
		if (npc.type == 525)
		{
			AddBuff(39, 240);
		}
		if (npc.type == 526)
		{
			AddBuff(69, 420);
		}
		if (npc.type == 527)
		{
			AddBuff(31, 840);
		}
		if (Main.expertMode && (npc.type == 49 || npc.type == 93 || npc.type == 51 || npc.type == 152 || npc.type == 634) && Main.rand.Next(10) == 0)
		{
			AddBuff(148, Main.rand.Next(1800, 5400));
		}
		if (Main.expertMode && npc.type == 222)
		{
			AddBuff(20, Main.rand.Next(60, 240));
		}
		if (Main.expertMode && (npc.type == 210 || npc.type == 211))
		{
			AddBuff(20, Main.rand.Next(60, 180));
		}
		if (Main.expertMode && npc.type == 35)
		{
			AddBuff(30, Main.rand.Next(180, 300));
		}
		if (Main.expertMode && npc.type == 36 && Main.rand.Next(2) == 0)
		{
			AddBuff(32, Main.rand.Next(30, 60));
		}
		if (npc.type >= 269 && npc.type <= 272)
		{
			if (Main.rand.Next(3) == 0)
			{
				AddBuff(30, 600);
			}
			else if (Main.rand.Next(3) == 0)
			{
				AddBuff(32, 300);
			}
		}
		if (npc.type >= 273 && npc.type <= 276 && Main.rand.Next(2) == 0)
		{
			AddBuff(36, 600);
		}
		if (npc.type >= 277 && npc.type <= 280)
		{
			AddBuff(24, 600);
		}
		if (npc.type == 371)
		{
			AddBuff(103, 60 * Main.rand.Next(3, 8));
		}
		if (npc.type == 370 && Main.expertMode)
		{
			int num3 = Utils.SelectRandom<int>(Main.rand, 0, 148, 30);
			if (num3 != 0)
			{
				AddBuff(num3, 60 * Main.rand.Next(3, 11));
			}
		}
		if (((npc.type == 1 && npc.netID == -6) || npc.type == 81 || npc.type == 79 || npc.type == 183 || npc.type == 630) && Main.rand.Next(4) == 0)
		{
			AddBuff(22, 900);
		}
		if ((npc.type == 23 || npc.type == 25) && Main.rand.Next(3) == 0)
		{
			AddBuff(24, 420);
		}
		if ((npc.type == 34 || npc.type == 83 || npc.type == 84 || npc.type == 179 || npc.type == 289) && Main.rand.Next(3) == 0)
		{
			AddBuff(23, 240);
		}
		if ((npc.type == 104 || npc.type == 102) && Main.rand.Next(8) == 0)
		{
			AddBuff(30, 2700);
		}
		if (npc.type == 75 && Main.rand.Next(10) == 0)
		{
			AddBuff(35, 420);
		}
		if ((npc.type == 163 || npc.type == 238 || npc.type == 236 || npc.type == 237) && Main.rand.Next(10) == 0)
		{
			AddBuff(70, 240);
		}
		if ((npc.type == 79 || npc.type == 103 || npc.type == 630) && Main.rand.Next(5) == 0)
		{
			AddBuff(35, 420);
		}
		if ((npc.type == 75 || npc.type == 78 || npc.type == 82) && Main.rand.Next(8) == 0)
		{
			AddBuff(32, 900);
		}
		if ((npc.type == 93 || npc.type == 109 || npc.type == 80) && Main.rand.Next(14) == 0)
		{
			AddBuff(31, 300);
		}
		if (npc.type >= 305 && npc.type <= 314 && Main.rand.Next(10) == 0)
		{
			AddBuff(33, 3600);
		}
		if (npc.type == 77 && Main.rand.Next(6) == 0)
		{
			AddBuff(36, 7200);
		}
		if (npc.type == 112 && Main.rand.Next(20) == 0)
		{
			AddBuff(33, 18000);
		}
		if (npc.type == 182 && Main.rand.Next(25) == 0)
		{
			AddBuff(33, 7200);
		}
		if (npc.type == 141 && Main.rand.Next(2) == 0)
		{
			AddBuff(20, 600);
		}
		if (npc.type == 147 && !frozen && Main.rand.Next(12) == 0)
		{
			AddBuff(46, 600);
		}
		if (npc.type == 150)
		{
			if (Main.rand.Next(2) == 0)
			{
				AddBuff(46, 900);
			}
			if (!frozen && Main.rand.Next(35) == 0)
			{
				AddBuff(47, 60);
			}
			else if (!frozen && Main.expertMode && Main.rand.Next(35) == 0)
			{
				AddBuff(47, 60);
			}
		}
		if (npc.type == 184)
		{
			AddBuff(46, 1200);
			if (!frozen && Main.rand.Next(15) == 0)
			{
				AddBuff(47, 60);
			}
			else if (!frozen && Main.expertMode && Main.rand.Next(25) == 0)
			{
				AddBuff(47, 60);
			}
		}
	}

	public void GrappleMovement()
	{
		if (grappling[0] < 0)
		{
			return;
		}
		StopVanityActions();
		if (Main.myPlayer == whoAmI && mount.Active)
		{
			mount.Dismount(this);
		}
		canCarpet = true;
		carpetFrame = -1;
		wingFrame = 1;
		if (velocity.Y == 0f || (wet && (double)velocity.Y > -0.02 && (double)velocity.Y < 0.02))
		{
			wingFrame = 0;
		}
		if (wings == 4)
		{
			wingFrame = 3;
		}
		if (wings == 30)
		{
			wingFrame = 0;
		}
		RefreshMovementAbilities();
		rocketFrame = false;
		canRocket = false;
		rocketRelease = false;
		fallStart = (int)(position.Y / 16f);
		int num = -1;
		for (int i = 0; i < grapCount; i++)
		{
			if (Main.projectile[grappling[i]].type == 403)
			{
				num = i;
			}
		}
		GetGrapplingForces(base.Center, out var preferredPlayerDirectionToSet, out var preferedPlayerVelocityX, out var preferedPlayerVelocityY);
		if (preferedPlayerVelocityY > 0f)
		{
			GoingDownWithGrapple = true;
		}
		velocity.X = preferedPlayerVelocityX;
		velocity.Y = preferedPlayerVelocityY;
		if (num != -1)
		{
			Projectile projectile = Main.projectile[grappling[num]];
			if (projectile.position.X < position.X + (float)width && projectile.position.X + (float)projectile.width >= position.X && projectile.position.Y < position.Y + (float)height && projectile.position.Y + (float)projectile.height >= position.Y)
			{
				int num2 = (int)(projectile.position.X + (float)(projectile.width / 2)) / 16;
				int num3 = (int)(projectile.position.Y + (float)(projectile.height / 2)) / 16;
				velocity = Vector2.Zero;
				if (Main.tile[num2, num3].type == 314)
				{
					Vector2 Position = default(Vector2);
					Position.X = projectile.position.X + (float)(projectile.width / 2) - (float)(width / 2);
					Position.Y = projectile.position.Y + (float)(projectile.height / 2) - (float)(height / 2);
					RemoveAllGrapplingHooks();
					int num4 = 13;
					if (miscEquips[2].stack > 0 && miscEquips[2].mountType >= 0 && MountID.Sets.Cart[miscEquips[2].mountType] && (!miscEquips[2].expertOnly || Main.expertMode))
					{
						num4 = miscEquips[2].mountType;
					}
					int num5 = height + Mount.GetHeightBoost(num4);
					if (Minecart.GetOnTrack(num2, num3, ref Position, width, num5) && !Collision.SolidCollision(Position, width, num5 - 20))
					{
						position = Position;
						DelegateMethods.Minecart.rotation = fullRotation;
						DelegateMethods.Minecart.rotationOrigin = fullRotationOrigin;
						mount.SetMount(num4, this, minecartLeft);
						Minecart.WheelSparks(mount.Delegations.MinecartDust, position, width, height, 25);
					}
				}
			}
		}
		if (itemAnimation == 0)
		{
			if (velocity.X == 0f && preferredPlayerDirectionToSet.HasValue)
			{
				ChangeDir(preferredPlayerDirectionToSet.Value);
			}
			if (velocity.X > 0f)
			{
				ChangeDir(1);
			}
			if (velocity.X < 0f)
			{
				ChangeDir(-1);
			}
		}
		if (controlJump)
		{
			if (releaseJump)
			{
				if ((velocity.Y == 0f || (wet && (double)velocity.Y > -0.02 && (double)velocity.Y < 0.02)) && !controlDown)
				{
					velocity.Y = 0f - jumpSpeed;
					jump = jumpHeight / 2;
					releaseJump = false;
				}
				else
				{
					velocity.Y += 0.01f;
					releaseJump = false;
				}
				RefreshDoubleJumps();
				RemoveAllGrapplingHooks();
			}
		}
		else
		{
			releaseJump = true;
		}
	}

	public void DoQueenSlimeHookTeleport(Vector2 targetPosition)
	{
		int num = 150;
		Vector2 vector = position;
		Vector2 vector2 = velocity;
		for (int i = 0; i < num; i++)
		{
			vector2 = (vector + base.Size / 2f).DirectionTo(targetPosition).SafeNormalize(Vector2.Zero) * 12f;
			Vector2 vector3 = Collision.TileCollision(vector, vector2, width, height, fallThrough: true, fall2: true, (int)gravDir);
			vector += vector3;
		}
		int num2 = 10;
		_ = vector - position;
		Teleport(vector, num2);
		NetMessage.SendData(65, -1, -1, null, 0, whoAmI, vector.X, vector.Y, num2);
	}

	private void GetGrapplingForces(Vector2 fromPosition, out int? preferredPlayerDirectionToSet, out float preferedPlayerVelocityX, out float preferedPlayerVelocityY)
	{
		float num = 0f;
		float num2 = 0f;
		preferredPlayerDirectionToSet = null;
		int num3 = 0;
		for (int i = 0; i < grapCount; i++)
		{
			Projectile projectile = Main.projectile[grappling[i]];
			if (projectile.ai[0] != 2f || projectile.position.HasNaNs())
			{
				continue;
			}
			num += projectile.position.X + (float)(projectile.width / 2);
			num2 += projectile.position.Y + (float)(projectile.height / 2);
			num3++;
			if (projectile.type == 446)
			{
				Vector2 vector = new Vector2(controlRight.ToInt() - controlLeft.ToInt(), (float)(controlDown.ToInt() - controlUp.ToInt()) * gravDir);
				if (vector != Vector2.Zero)
				{
					vector.Normalize();
				}
				vector *= 100f;
				Vector2 vec = Vector2.Normalize(base.Center - projectile.Center + vector);
				if (vec.HasNaNs())
				{
					vec = -Vector2.UnitY;
				}
				float num4 = 200f;
				num += vec.X * num4;
				num2 += vec.Y * num4;
			}
			else if (projectile.type == 652)
			{
				Vector2 vector2 = new Vector2(controlRight.ToInt() - controlLeft.ToInt(), (float)(controlDown.ToInt() - controlUp.ToInt()) * gravDir).SafeNormalize(Vector2.Zero);
				Vector2 vector3 = projectile.Center - base.Center;
				Vector2 vector4 = vector3.SafeNormalize(Vector2.Zero);
				Vector2 value = Vector2.Zero;
				if (vector2 != Vector2.Zero)
				{
					value = vector4 * Vector2.Dot(vector4, vector2);
				}
				float num5 = 6f;
				if (Vector2.Dot(value, vector3) < 0f && vector3.Length() >= 600f)
				{
					num5 = 0f;
				}
				num += 0f - vector3.X + value.X * num5;
				num2 += 0f - vector3.Y + value.Y * num5;
			}
			else if (projectile.type == 865)
			{
				Vector2 vector5 = (projectile.rotation - (float)Math.PI / 2f).ToRotationVector2().SafeNormalize(Vector2.UnitY);
				Vector2 vector6 = -vector5 * 28f;
				num += vector6.X;
				num2 += vector6.Y;
				if (vector5.X != 0f)
				{
					preferredPlayerDirectionToSet = Math.Sign(vector5.X);
				}
			}
		}
		if (num3 == 0)
		{
			preferedPlayerVelocityX = velocity.X;
			preferedPlayerVelocityY = velocity.Y;
			return;
		}
		float num6 = num / (float)num3;
		float num7 = num2 / (float)num3;
		Vector2 vector7 = fromPosition;
		preferedPlayerVelocityX = num6 - vector7.X;
		preferedPlayerVelocityY = num7 - vector7.Y;
		float num8 = (float)Math.Sqrt(preferedPlayerVelocityX * preferedPlayerVelocityX + preferedPlayerVelocityY * preferedPlayerVelocityY);
		float num9 = 11f;
		if (Main.projectile[grappling[0]].type == 315)
		{
			num9 = 14f;
		}
		if (Main.projectile[grappling[0]].type == 487)
		{
			num9 = 12f;
		}
		if (Main.projectile[grappling[0]].type >= 646 && Main.projectile[grappling[0]].type <= 649)
		{
			num9 = 16f;
		}
		float num10 = num8;
		num10 = ((!(num8 > num9)) ? 1f : (num9 / num8));
		preferedPlayerVelocityX *= num10;
		preferedPlayerVelocityY *= num10;
	}

	private void RefreshMovementAbilities(bool doubleJumps = true)
	{
		wingTime = wingTimeMax;
		rocketTime = rocketTimeMax;
		rocketDelay = 0;
		if (doubleJumps)
		{
			RefreshDoubleJumps();
		}
	}

	private void RefreshDoubleJumps()
	{
		if (hasJumpOption_Cloud)
		{
			canJumpAgain_Cloud = true;
		}
		if (hasJumpOption_Sandstorm)
		{
			canJumpAgain_Sandstorm = true;
		}
		if (hasJumpOption_Blizzard)
		{
			canJumpAgain_Blizzard = true;
		}
		if (hasJumpOption_Fart)
		{
			canJumpAgain_Fart = true;
		}
		if (hasJumpOption_Sail)
		{
			canJumpAgain_Sail = true;
		}
		if (hasJumpOption_Unicorn)
		{
			canJumpAgain_Unicorn = true;
		}
		if (hasJumpOption_Santank)
		{
			canJumpAgain_Santank = true;
		}
		if (hasJumpOption_WallOfFleshGoat)
		{
			canJumpAgain_WallOfFleshGoat = true;
		}
		if (hasJumpOption_Basilisk)
		{
			canJumpAgain_Basilisk = true;
		}
	}

	public void StickyMovement()
	{
		if (shimmering)
		{
			return;
		}
		bool flag = false;
		if (mount.Type > 0 && MountID.Sets.Cart[mount.Type] && Math.Abs(velocity.X) > 5f)
		{
			flag = true;
		}
		int num = width / 2;
		int num2 = height / 2;
		new Vector2(position.X + (float)(width / 2) - (float)(num / 2), position.Y + (float)(height / 2) - (float)(num2 / 2));
		Vector2 vector = Collision.StickyTiles(position, velocity, width, height);
		if (vector.Y != -1f && vector.X != -1f)
		{
			int num3 = (int)vector.X;
			int num4 = (int)vector.Y;
			int type = Main.tile[num3, num4].type;
			if (whoAmI == Main.myPlayer && type == 51 && (velocity.X != 0f || velocity.Y != 0f))
			{
				stickyBreak++;
				if (stickyBreak > Main.rand.Next(20, 100) || flag)
				{
					stickyBreak = 0;
					WorldGen.KillTile(num3, num4);
					if (Main.netMode == 1 && !Main.tile[num3, num4].active() && Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 0, num3, num4);
					}
				}
			}
			if (flag)
			{
				return;
			}
			fallStart = (int)(position.Y / 16f);
			if (type != 229)
			{
				jump = 0;
			}
			if (velocity.X > 1f)
			{
				velocity.X = 1f;
			}
			if (velocity.X < -1f)
			{
				velocity.X = -1f;
			}
			if ((double)velocity.X > 0.75 || (double)velocity.X < -0.75)
			{
				velocity.X *= 0.85f;
			}
			else
			{
				velocity.X *= 0.6f;
			}
			if (gravDir == -1f)
			{
				if (velocity.Y < -1f)
				{
					velocity.Y = -1f;
				}
				if (velocity.Y > 5f)
				{
					velocity.Y = 5f;
				}
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.96f;
				}
				else
				{
					velocity.Y *= 0.3f;
				}
			}
			else
			{
				if (velocity.Y > 1f)
				{
					velocity.Y = 1f;
				}
				if (velocity.Y < -5f)
				{
					velocity.Y = -5f;
				}
				if (velocity.Y < 0f)
				{
					velocity.Y *= 0.96f;
				}
				else
				{
					velocity.Y *= 0.3f;
				}
			}
			if (type != 229 || Main.rand.Next(5) != 0 || (!((double)velocity.Y > 0.15) && !(velocity.Y < 0f)))
			{
				return;
			}
			if ((float)(num3 * 16) < position.X + (float)(width / 2))
			{
				int num5 = Dust.NewDust(new Vector2(position.X - 4f, num4 * 16), 4, 16, 153, 0f, 0f, 50);
				Main.dust[num5].scale += (float)Main.rand.Next(0, 6) * 0.1f;
				Main.dust[num5].velocity *= 0.1f;
				Main.dust[num5].noGravity = true;
			}
			else
			{
				int num6 = Dust.NewDust(new Vector2(position.X + (float)width - 2f, num4 * 16), 4, 16, 153, 0f, 0f, 50);
				Main.dust[num6].scale += (float)Main.rand.Next(0, 6) * 0.1f;
				Main.dust[num6].velocity *= 0.1f;
				Main.dust[num6].noGravity = true;
			}
			if (Main.tile[num3, num4 + 1] != null && Main.tile[num3, num4 + 1].type == 229 && position.Y + (float)height > (float)((num4 + 1) * 16))
			{
				if ((float)(num3 * 16) < position.X + (float)(width / 2))
				{
					int num7 = Dust.NewDust(new Vector2(position.X - 4f, num4 * 16 + 16), 4, 16, 153, 0f, 0f, 50);
					Main.dust[num7].scale += (float)Main.rand.Next(0, 6) * 0.1f;
					Main.dust[num7].velocity *= 0.1f;
					Main.dust[num7].noGravity = true;
				}
				else
				{
					int num8 = Dust.NewDust(new Vector2(position.X + (float)width - 2f, num4 * 16 + 16), 4, 16, 153, 0f, 0f, 50);
					Main.dust[num8].scale += (float)Main.rand.Next(0, 6) * 0.1f;
					Main.dust[num8].velocity *= 0.1f;
					Main.dust[num8].noGravity = true;
				}
			}
			if (Main.tile[num3, num4 + 2] != null && Main.tile[num3, num4 + 2].type == 229 && position.Y + (float)height > (float)((num4 + 2) * 16))
			{
				if ((float)(num3 * 16) < position.X + (float)(width / 2))
				{
					int num9 = Dust.NewDust(new Vector2(position.X - 4f, num4 * 16 + 32), 4, 16, 153, 0f, 0f, 50);
					Main.dust[num9].scale += (float)Main.rand.Next(0, 6) * 0.1f;
					Main.dust[num9].velocity *= 0.1f;
					Main.dust[num9].noGravity = true;
				}
				else
				{
					int num10 = Dust.NewDust(new Vector2(position.X + (float)width - 2f, num4 * 16 + 32), 4, 16, 153, 0f, 0f, 50);
					Main.dust[num10].scale += (float)Main.rand.Next(0, 6) * 0.1f;
					Main.dust[num10].velocity *= 0.1f;
					Main.dust[num10].noGravity = true;
				}
			}
		}
		else
		{
			stickyBreak = 0;
		}
	}

	public bool HasLockedInventory()
	{
		return IsStackingItems();
	}

	public bool IsStackingItems()
	{
		for (int i = 0; i < inventoryChestStack.Length; i++)
		{
			if (inventoryChestStack[i])
			{
				if (inventory[i].type != 0 && inventory[i].stack != 0)
				{
					return true;
				}
				inventoryChestStack[i] = false;
			}
		}
		if (disableVoidBag >= 0)
		{
			return true;
		}
		return false;
	}

	public List<int> GetNearbyContainerProjectilesList()
	{
		List<int> list = new List<int>();
		Vector2 center = base.Center;
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile = Main.projectile[i];
			if (!projectile.active)
			{
				continue;
			}
			int containerIndex = -1;
			if (projectile.TryGetContainerIndex(out containerIndex))
			{
				Point point = projectile.Hitbox.ClosestPointInRect(center).ToTileCoordinates();
				if (IsInTileInteractionRange(point.X, point.Y, TileReachCheckSettings.QuickStackToNearbyChests))
				{
					list.Add(i);
				}
			}
		}
		return list;
	}

	public void UpdateNearbyInteractibleProjectilesList()
	{
		List<int> projectilesToInteractWith = _projectilesToInteractWith;
		projectilesToInteractWith.Clear();
		if (!Main.CurrentFrameFlags.HadAnActiveInteractibleProjectile)
		{
			return;
		}
		Vector2 compareSpot = base.Center;
		for (int i = 0; i < 1000; i++)
		{
			Projectile proj = Main.projectile[i];
			if (IsProjectileInteractibleAndInInteractionRange(proj, ref compareSpot))
			{
				projectilesToInteractWith.Add(i);
			}
		}
	}

	public bool IsProjectileInteractibleAndInInteractionRange(Projectile proj, ref Vector2 compareSpot)
	{
		if (!proj.active)
		{
			return false;
		}
		if (!proj.IsInteractible())
		{
			return false;
		}
		Point point = proj.Hitbox.ClosestPointInRect(compareSpot).ToTileCoordinates();
		if (!IsInTileInteractionRange(point.X, point.Y, TileReachCheckSettings.Simple))
		{
			return false;
		}
		return true;
	}

	public bool useVoidBag()
	{
		for (int i = 0; i < 58; i++)
		{
			if (inventory[i].stack > 0 && inventory[i].type == 4131)
			{
				return true;
			}
		}
		return false;
	}

	public void QuickStackAllChests()
	{
		if (HasLockedInventory())
		{
			return;
		}
		List<int> nearbyContainerProjectilesList = GetNearbyContainerProjectilesList();
		for (int i = 0; i < nearbyContainerProjectilesList.Count; i++)
		{
			Projectile projectile = Main.projectile[nearbyContainerProjectilesList[i]];
			if (projectile.TryGetContainerIndex(out var containerIndex))
			{
				ContainerTransferContext context = ContainerTransferContext.FromProjectile(projectile);
				int num = chest;
				chest = containerIndex;
				ChestUI.QuickStack(context);
				if (useVoidBag())
				{
					ChestUI.QuickStack(context, voidStack: true);
				}
				chest = num;
			}
		}
		int num2 = 39;
		int num3 = (int)(base.Center.X / 16f);
		int num4 = (int)(base.Center.Y / 16f);
		for (int j = num3 - num2; j <= num3 + num2; j++)
		{
			if (j < 0 || j >= Main.maxTilesX)
			{
				continue;
			}
			for (int k = num4 - num2; k <= num4 + num2; k++)
			{
				if (k < 0 || k >= Main.maxTilesY)
				{
					continue;
				}
				int num5 = 0;
				if (Main.tile[j, k].type == 29)
				{
					num5 = -2;
				}
				else if (Main.tile[j, k].type == 97)
				{
					num5 = -3;
				}
				else if (Main.tile[j, k].type == 463)
				{
					num5 = -4;
				}
				else if (Main.tile[j, k].type == 491)
				{
					num5 = -5;
				}
				if (num5 < 0 && (new Vector2(j * 16 + 8, k * 16 + 8) - base.Center).Length() < 600f)
				{
					ContainerTransferContext context2 = ContainerTransferContext.FromBlockPosition(j, k);
					int num6 = chest;
					chest = num5;
					ChestUI.QuickStack(context2);
					if (useVoidBag())
					{
						ChestUI.QuickStack(context2, voidStack: true);
					}
					chest = num6;
				}
			}
		}
		if (Main.netMode == 1)
		{
			for (int l = 10; l < 50; l++)
			{
				if (inventory[l].type > 0 && inventory[l].stack > 0 && !inventory[l].favorited && !inventory[l].IsACoin)
				{
					NetMessage.SendData(5, -1, -1, null, whoAmI, PlayerItemSlotID.Inventory0 + l, (int)inventory[l].prefix);
					NetMessage.SendData(85, -1, -1, null, PlayerItemSlotID.Inventory0 + l);
					inventoryChestStack[l] = true;
				}
			}
			if (!useVoidBag())
			{
				return;
			}
			for (int m = 0; m < 40; m++)
			{
				if (bank4.item[m].type > 0 && bank4.item[m].stack > 0 && !bank4.item[m].favorited && !bank4.item[m].IsACoin)
				{
					NetMessage.SendData(5, -1, -1, null, whoAmI, PlayerItemSlotID.Bank4_0 + m, (int)bank4.item[m].prefix);
					NetMessage.SendData(85, -1, -1, null, PlayerItemSlotID.Bank4_0 + m);
					disableVoidBag = m;
				}
			}
			return;
		}
		for (int n = 10; n < 50; n++)
		{
			if (inventory[n].type > 0 && inventory[n].stack > 0 && !inventory[n].favorited && !inventory[n].IsACoin)
			{
				int type = inventory[n].type;
				int stack = inventory[n].stack;
				inventory[n] = Chest.PutItemInNearbyChest(inventory[n], base.Center);
				if (inventory[n].type == type)
				{
					_ = inventory[n].stack;
				}
			}
		}
		if (!useVoidBag())
		{
			return;
		}
		for (int num7 = 0; num7 < 40; num7++)
		{
			if (bank4.item[num7].type > 0 && bank4.item[num7].stack > 0 && !bank4.item[num7].favorited && !bank4.item[num7].IsACoin)
			{
				int type2 = bank4.item[num7].type;
				int stack2 = bank4.item[num7].stack;
				bank4.item[num7] = Chest.PutItemInNearbyChest(bank4.item[num7], base.Center);
				if (bank4.item[num7].type == type2)
				{
					_ = bank4.item[num7].stack;
				}
			}
		}
	}

	public void CheckDrowning()
	{
		bool flag = Collision.DrownCollision(position, width, height, gravDir);
		if (armor[0].type == 250 || armor[0].type == 4275)
		{
			flag = true;
		}
		if (inventory[selectedItem].type == 186 && itemAnimation == 0)
		{
			try
			{
				int num = (int)((position.X + (float)(width / 2) + (float)(6 * direction)) / 16f);
				int num2 = 0;
				if (gravDir == -1f)
				{
					num2 = height;
				}
				int num3 = (int)((position.Y + (float)num2 - 44f * gravDir) / 16f);
				if (Main.tile[num, num3] != null && Main.tile[num, num3].liquid < 128)
				{
					if (Main.tile[num, num3] == null)
					{
						Main.tile[num, num3] = new Tile();
					}
					if (!Main.tile[num, num3].active() || !Main.tileSolid[Main.tile[num, num3].type] || Main.tileSolidTop[Main.tile[num, num3].type])
					{
						flag = false;
					}
				}
			}
			catch
			{
			}
		}
		if (gills)
		{
			flag = Main.getGoodWorld && !flag;
		}
		if (shimmering)
		{
			flag = false;
		}
		if (mount.Active && mount.Type == 4)
		{
			flag = false;
		}
		if (Main.myPlayer == whoAmI)
		{
			if (accMerman)
			{
				if (flag)
				{
					merman = true;
				}
				flag = false;
			}
			if (flag)
			{
				breathCD++;
				if (breathCD >= breathCDMax)
				{
					breathCD = 0;
					breath--;
					if (breath == 0)
					{
						SoundEngine.PlaySound(23);
					}
					if (breath <= 0)
					{
						lifeRegenTime = 0f;
						breath = 0;
						statLife -= 2;
						if (statLife <= 0)
						{
							statLife = 0;
							KillMe(PlayerDeathReason.ByOther(1), 10.0, 0);
						}
					}
				}
			}
			else
			{
				breath += 3;
				if (breath > breathMax)
				{
					breath = breathMax;
				}
				breathCD = 0;
			}
		}
		if (flag && Main.rand.Next(20) == 0 && !lavaWet && !honeyWet)
		{
			int num4 = 0;
			if (gravDir == -1f)
			{
				num4 += height - 12;
			}
			if (inventory[selectedItem].type == 186)
			{
				Dust.NewDust(new Vector2(position.X + (float)(10 * direction) + 4f, position.Y + (float)num4 - 54f * gravDir), width - 8, 8, 34, 0f, 0f, 0, default(Color), 1.2f);
			}
			else
			{
				Dust.NewDust(new Vector2(position.X + (float)(12 * direction), position.Y + (float)num4 + 4f * gravDir), width - 8, 8, 34, 0f, 0f, 0, default(Color), 1.2f);
			}
		}
	}

	public void CheckCrackedBrickBreak()
	{
		if (shimmering)
		{
			return;
		}
		bool flag = false;
		if ((float)Main.rand.Next(2, 12) < Math.Abs(velocity.X))
		{
			flag = true;
		}
		if ((float)Main.rand.Next(2, 12) < velocity.Y)
		{
			flag = true;
		}
		if (flag && velocity.Y < 1f)
		{
			Point point = (base.Bottom + Vector2.UnitY).ToTileCoordinates();
			Point point2 = (base.BottomLeft + Vector2.UnitY).ToTileCoordinates();
			Point point3 = (base.BottomRight + Vector2.UnitY).ToTileCoordinates();
			if ((WorldGen.SolidTileAllowBottomSlope(point.X, point.Y) && !TileID.Sets.CrackedBricks[Main.tile[point.X, point.Y].type]) || (WorldGen.SolidTileAllowBottomSlope(point2.X, point2.Y) && !TileID.Sets.CrackedBricks[Main.tile[point2.X, point2.Y].type]) || (WorldGen.SolidTileAllowBottomSlope(point3.X, point3.Y) && !TileID.Sets.CrackedBricks[Main.tile[point3.X, point3.Y].type]))
			{
				flag = false;
			}
		}
		if (!flag)
		{
			return;
		}
		Vector2 vector = position + velocity;
		flag = false;
		int num = (int)(vector.X / 16f);
		int num2 = (int)((vector.X + (float)width) / 16f);
		int num3 = (int)((position.Y + (float)height + 1f) / 16f);
		Rectangle rect = getRect();
		rect.Inflate(1, 1);
		for (int i = num; i <= num2; i++)
		{
			for (int j = num3; j <= num3 + 1 && Main.tile[i, j] != null; j++)
			{
				if (Main.tile[i, j].nactive() && !WorldGen.SolidTile(i, j - 1) && TileID.Sets.CrackedBricks[Main.tile[i, j].type] && new Rectangle(i * 16, j * 16, 16, 16).Intersects(rect))
				{
					flag = true;
					if (velocity.Y > 1f)
					{
						velocity.Y = 1f;
					}
					NetMessage.SendData(13, -1, -1, null, whoAmI);
				}
			}
		}
		if (!flag)
		{
			return;
		}
		num = (int)((vector.X - 16f - 8f) / 16f);
		num2 = (int)((vector.X + (float)width + 16f + 8f) / 16f);
		for (int k = num; k <= num2; k++)
		{
			for (int l = num3; l <= num3 + 2; l++)
			{
				if (Main.tile[k, l].nactive() && !WorldGen.SolidTile(k, l - 1) && TileID.Sets.CrackedBricks[Main.tile[k, l].type])
				{
					WorldGen.KillTile(k, l);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 20, k, l);
					}
				}
			}
		}
	}

	public void CheckIceBreak()
	{
		if (!(velocity.Y > 7f))
		{
			return;
		}
		Vector2 vector = position + velocity;
		int num = (int)(vector.X / 16f);
		int num2 = (int)((vector.X + (float)width) / 16f);
		int num3 = (int)((position.Y + (float)height + 1f) / 16f);
		for (int i = num; i <= num2; i++)
		{
			for (int j = num3; j <= num3 + 1 && Main.tile[i, j] != null; j++)
			{
				if (Main.tile[i, j].nactive() && Main.tile[i, j].type == 162 && !WorldGen.SolidTile(i, j - 1))
				{
					WorldGen.KillTile(i, j);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 0, i, j);
					}
				}
			}
		}
	}

	public void SlopeDownMovement()
	{
		sloping = false;
		if (!mount.Active || mount.Type != 48)
		{
			float y = velocity.Y;
			Vector4 vector = Collision.WalkDownSlope(position, velocity, width, height, gravity * gravDir);
			position.X = vector.X;
			position.Y = vector.Y;
			velocity.X = vector.Z;
			velocity.Y = vector.W;
			if (velocity.Y != y)
			{
				sloping = true;
			}
		}
	}

	public void ShimmerCollision(bool fallThrough, bool ignorePlats, bool noCollision)
	{
		int num = ((!onTrack) ? height : (height - 20));
		Vector2 vector = velocity;
		if (!noCollision)
		{
			velocity = Collision.TileCollision(position, velocity, width, num, fallThrough, ignorePlats, (int)gravDir);
		}
		Vector2 vector2 = velocity * 0.375f;
		if (velocity.X != vector.X)
		{
			vector2.X = velocity.X;
		}
		if (velocity.Y != vector.Y)
		{
			vector2.Y = velocity.Y;
		}
		position += vector2;
		if (shimmerImmune && !noCollision)
		{
			TryFloatingInFluid();
		}
	}

	public void HoneyCollision(bool fallThrough, bool ignorePlats)
	{
		int num = ((!onTrack) ? height : (height - 20));
		Vector2 vector = velocity;
		velocity = Collision.TileCollision(position, velocity, width, num, fallThrough, ignorePlats, (int)gravDir);
		Vector2 vector2 = velocity * 0.25f;
		if (velocity.X != vector.X)
		{
			vector2.X = velocity.X;
		}
		if (velocity.Y != vector.Y)
		{
			vector2.Y = velocity.Y;
		}
		position += vector2;
		TryFloatingInFluid();
	}

	public void WaterCollision(bool fallThrough, bool ignorePlats)
	{
		int num = ((!onTrack) ? height : (height - 20));
		Vector2 vector = velocity;
		velocity = Collision.TileCollision(position, velocity, width, num, fallThrough, ignorePlats, (int)gravDir);
		Vector2 vector2 = velocity * 0.5f;
		if (velocity.X != vector.X)
		{
			vector2.X = velocity.X;
		}
		if (velocity.Y != vector.Y)
		{
			vector2.Y = velocity.Y;
		}
		position += vector2;
		TryFloatingInFluid();
	}

	private void TryFloatingInFluid()
	{
		if (!ShouldFloatInWater)
		{
			return;
		}
		if (whoAmI == Main.myPlayer && sitting.isSitting)
		{
			sitting.SitUp(this);
		}
		if (Collision.GetWaterLine(base.Center.ToTileCoordinates(), out var waterLineHeight))
		{
			float num = base.Center.Y;
			if (mount.Active && mount.Type == 37)
			{
				num -= 6f;
			}
			float num2 = num + 8f;
			if (num2 + velocity.Y < waterLineHeight)
			{
				return;
			}
			if (num > waterLineHeight)
			{
				velocity.Y -= 0.4f;
				if (velocity.Y < -6f)
				{
					velocity.Y = -6f;
				}
				return;
			}
			velocity.Y = waterLineHeight - num2;
			if (velocity.Y < -3f)
			{
				velocity.Y = -3f;
			}
			if (velocity.Y == 0f)
			{
				velocity.Y = float.Epsilon;
			}
		}
		else
		{
			velocity.Y -= 0.4f;
		}
	}

	public void DryCollision(bool fallThrough, bool ignorePlats)
	{
		int num = ((!onTrack) ? height : (height - 10));
		if (velocity.Length() > 16f)
		{
			Vector2 vector = Collision.TileCollision(position, velocity, width, num, fallThrough, ignorePlats, (int)gravDir);
			float num2 = velocity.Length();
			Vector2 vector2 = Vector2.Normalize(velocity);
			if (vector.Y == 0f)
			{
				vector2.Y = 0f;
			}
			Vector2 zero = Vector2.Zero;
			bool flag = mount.Type == 7 || mount.Type == 8 || mount.Type == 12 || mount.Type == 44 || mount.Type == 49;
			_ = Vector2.Zero;
			while (num2 > 0f)
			{
				float num3 = num2;
				if (num3 > 16f)
				{
					num3 = 16f;
				}
				num2 -= num3;
				Vector2 vector3 = vector2 * num3;
				velocity = vector3;
				SlopeDownMovement();
				vector3 = velocity;
				if (velocity.Y == gravity && (!mount.Active || (!mount.Cart && mount.Type != 48 && !flag)))
				{
					Collision.StepDown(ref position, ref vector3, width, height, ref stepSpeed, ref gfxOffY, (int)gravDir, waterWalk || waterWalk2);
				}
				if (gravDir == -1f)
				{
					if ((carpetFrame != -1 || velocity.Y <= gravity) && !controlUp)
					{
						Collision.StepUp(ref position, ref vector3, width, height, ref stepSpeed, ref gfxOffY, (int)gravDir, controlUp);
					}
				}
				else if (flag || ((carpetFrame != -1 || velocity.Y >= gravity) && !controlDown && !mount.Cart))
				{
					Collision.StepUp(ref position, ref vector3, width, height, ref stepSpeed, ref gfxOffY, (int)gravDir, controlUp);
				}
				Vector2 vector4 = Collision.TileCollision(position, vector3, width, num, fallThrough, ignorePlats, (int)gravDir);
				if (Collision.up && gravDir == 1f)
				{
					jump = 0;
				}
				if (waterWalk || waterWalk2)
				{
					Vector2 vector5 = velocity;
					vector4 = Collision.WaterCollision(position, vector4, width, height, fallThrough, fall2: false, waterWalk);
					if (vector5 != velocity)
					{
						fallStart = (int)(position.Y / 16f);
					}
				}
				position += vector4;
				bool falling = false;
				if (vector4.Y > gravity)
				{
					falling = true;
				}
				if (vector4.Y < 0f - gravity)
				{
					falling = true;
				}
				velocity = vector4;
				UpdateTouchingTiles();
				TryBouncingBlocks(falling);
				TryLandingOnDetonator();
				SlopingCollision(fallThrough, ignorePlats);
				Collision.StepConveyorBelt(this, gravDir);
				vector4 = velocity;
				zero += vector4;
			}
			velocity = zero;
			return;
		}
		velocity = Collision.TileCollision(position, velocity, width, num, fallThrough, ignorePlats, (int)gravDir);
		if (Collision.up && gravDir == 1f)
		{
			jump = 0;
		}
		if (waterWalk || waterWalk2)
		{
			Vector2 vector6 = velocity;
			velocity = Collision.WaterCollision(position, velocity, width, height, fallThrough, fall2: false, waterWalk);
			if (vector6 != velocity)
			{
				fallStart = (int)(position.Y / 16f);
			}
		}
		position += velocity;
	}

	private bool TouchBlockSurfaceCenter(int x, int y, Tile tile, out int exitNormalX, out int exitNormalY, out Vector2 surfaceCenter)
	{
		exitNormalX = (exitNormalY = 0);
		Vector2 vector = new Vector2(x * 16, y * 16);
		Vector2 vector2 = new Vector2(vector.X + 16f, vector.Y);
		Vector2 vector3 = new Vector2(vector.X, vector.Y + 16f);
		Vector2 vector4 = new Vector2(vector.X + 16f, vector.Y + 16f);
		int num = 0;
		int num2 = 0;
		switch (tile.blockType())
		{
		case 1:
			vector.Y += 8f;
			vector2.Y += 8f;
			break;
		case 3:
			vector.Y += 16f;
			num = -1;
			break;
		case 2:
			vector2.Y += 16f;
			num = 1;
			break;
		case 5:
			vector3.Y -= 16f;
			num2 = -1;
			break;
		case 4:
			vector4.Y -= 16f;
			num2 = 1;
			break;
		}
		Vector2 vector5 = new Vector2(0.0001f);
		_ = position - vector5;
		_ = base.Size + vector5 * 2f;
		Rectangle hitbox = base.Hitbox;
		surfaceCenter = Vector2.Lerp(vector, vector2, 0.5f);
		float num3 = 4f;
		if (hitbox.Distance(surfaceCenter) <= num3)
		{
			exitNormalX = num;
			exitNormalY = -1;
			return true;
		}
		surfaceCenter = Vector2.Lerp(vector3, vector4, 0.5f);
		if (hitbox.Distance(surfaceCenter) <= num3)
		{
			exitNormalX = num2;
			exitNormalY = 1;
			return true;
		}
		if (vector != vector3)
		{
			surfaceCenter = Vector2.Lerp(vector, vector3, 0.5f);
			if (hitbox.Distance(surfaceCenter) <= num3)
			{
				exitNormalX = -1;
				exitNormalY = 0;
				return true;
			}
		}
		if (vector2 != vector4)
		{
			surfaceCenter = Vector2.Lerp(vector2, vector4, 0.5f);
			if (hitbox.Distance(surfaceCenter) <= num3)
			{
				exitNormalX = 1;
				exitNormalY = 0;
				return true;
			}
		}
		return false;
	}

	public void SlopingCollision(bool fallThrough, bool ignorePlats)
	{
		if (ignorePlats || controlDown || grappling[0] >= 0 || gravDir == -1f)
		{
			stairFall = true;
		}
		Vector4 vector = Collision.SlopeCollision(position, velocity, width, height, gravity, stairFall);
		if (Collision.stairFall)
		{
			stairFall = true;
		}
		else if (!fallThrough)
		{
			stairFall = false;
		}
		if (Collision.stair && Math.Abs(vector.Y - position.Y) > 8f + Math.Abs(velocity.X))
		{
			gfxOffY -= vector.Y - position.Y;
			stepSpeed = 4f;
		}
		_ = velocity;
		position.X = vector.X;
		position.Y = vector.Y;
		velocity.X = vector.Z;
		velocity.Y = vector.W;
		if (gravDir == -1f && velocity.Y == 0.0101f)
		{
			velocity.Y = 0f;
		}
	}

	public void FloorVisuals(bool Falling)
	{
		int num = (int)((position.X + (float)(width / 2)) / 16f);
		int num2 = (int)((position.Y + (float)height) / 16f);
		if (gravDir == -1f)
		{
			num2 = (int)(position.Y - 0.1f) / 16;
		}
		Tile floorTile = GetFloorTile(num, num2);
		int num3 = -1;
		if (floorTile != null)
		{
			num3 = floorTile.type;
		}
		if (num3 <= -1)
		{
			ResetFloorFlags();
			return;
		}
		sticky = num3 == 229;
		slippy = TileID.Sets.IceSkateSlippery[num3];
		slippy2 = num3 == 197;
		powerrun = num3 == 198;
		runningOnSand = TileID.Sets.Conversion.Sand[num3] || TileID.Sets.Conversion.Sandstone[num3] || TileID.Sets.Conversion.HardenedSand[num3];
		if (num3 == 666 && whoAmI == Main.myPlayer)
		{
			AddBuff(120, 180);
		}
		if (Main.tile[num - 1, num2].slope() != 0 || Main.tile[num, num2].slope() != 0 || Main.tile[num + 1, num2].slope() != 0)
		{
			num3 = -1;
		}
		if (!wet && !mount.Cart)
		{
			MakeFloorDust(Falling, num3, floorTile.color());
		}
	}

	public void ResetFloorFlags()
	{
		slippy = false;
		slippy2 = false;
		sticky = false;
		powerrun = false;
		runningOnSand = false;
	}

	public static Tile GetFloorTile(int x, int y)
	{
		Tile result = null;
		if (Main.tile[x - 1, y] == null)
		{
			Main.tile[x - 1, y] = new Tile();
		}
		if (Main.tile[x + 1, y] == null)
		{
			Main.tile[x + 1, y] = new Tile();
		}
		if (Main.tile[x, y] == null)
		{
			Main.tile[x, y] = new Tile();
		}
		if (Main.tile[x, y].nactive() && Main.tileSolid[Main.tile[x, y].type])
		{
			result = Main.tile[x, y];
		}
		else if (Main.tile[x - 1, y].nactive() && Main.tileSolid[Main.tile[x - 1, y].type])
		{
			result = Main.tile[x - 1, y];
		}
		else if (Main.tile[x + 1, y].nactive() && Main.tileSolid[Main.tile[x + 1, y].type])
		{
			result = Main.tile[x + 1, y];
		}
		return result;
	}

	public static int GetFloorTileType(int x, int y)
	{
		return ((int?)GetFloorTile(x, y)?.type) ?? (-1);
	}

	private void MakeFloorDust(bool Falling, int type, int paintColor)
	{
		if (type == 659 || type == 667)
		{
			bool flag = true;
			if (!Falling)
			{
				float num = Math.Abs(velocity.X) / 3f;
				if ((float)Main.rand.Next(100) > num * 50f)
				{
					flag = false;
				}
			}
			if (!flag)
			{
				return;
			}
			Vector2 positionInWorld = new Vector2(position.X, position.Y + (float)height - 2f) + new Vector2((float)width * Main.rand.NextFloat(), 6f * Main.rand.NextFloat());
			Vector2 movementVector = Main.rand.NextVector2Circular(0.8f, 0.8f);
			if (movementVector.Y > 0f)
			{
				movementVector.Y *= -1f;
			}
			ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.ShimmerBlock, new ParticleOrchestraSettings
			{
				PositionInWorld = positionInWorld,
				MovementVector = movementVector
			}, whoAmI);
		}
		if (type != 147 && type != 25 && type != 53 && type != 189 && type != 0 && type != 123 && type != 57 && type != 112 && type != 116 && type != 196 && type != 193 && type != 195 && type != 197 && type != 199 && type != 229 && type != 234 && type != 371 && type != 460 && type != 666)
		{
			return;
		}
		int num2 = 1;
		if (Falling)
		{
			num2 = 20;
			if (type == 666)
			{
				SoundEngine.PlaySound(SoundID.Item177, (int)base.Center.X, (int)base.Bottom.Y);
			}
		}
		for (int i = 0; i < num2; i++)
		{
			bool flag2 = true;
			int num3 = 76;
			if (type == 666)
			{
				if (paintColor != 0)
				{
					break;
				}
				num3 = 322;
			}
			if (type == 53)
			{
				num3 = 32;
			}
			if (type == 189)
			{
				num3 = 16;
			}
			if (type == 0)
			{
				num3 = 0;
			}
			if (type == 123)
			{
				num3 = 53;
			}
			if (type == 57)
			{
				num3 = 36;
			}
			if (type == 112)
			{
				num3 = 14;
			}
			if (type == 234)
			{
				num3 = 122;
			}
			if (type == 116)
			{
				num3 = 51;
			}
			if (type == 196)
			{
				num3 = 108;
			}
			if (type == 193)
			{
				num3 = 4;
			}
			if (type == 195 || type == 199)
			{
				num3 = 5;
			}
			if (type == 197)
			{
				num3 = 4;
			}
			if (type == 229)
			{
				num3 = 153;
			}
			if (type == 371)
			{
				num3 = 243;
			}
			if (type == 460)
			{
				num3 = 108;
			}
			if (type == 25)
			{
				num3 = 37;
			}
			if (num3 == 32 && Main.rand.Next(2) == 0)
			{
				flag2 = false;
			}
			if (num3 == 14 && Main.rand.Next(2) == 0)
			{
				flag2 = false;
			}
			if (num3 == 51 && Main.rand.Next(2) == 0)
			{
				flag2 = false;
			}
			if (num3 == 36 && Main.rand.Next(2) == 0)
			{
				flag2 = false;
			}
			if (num3 == 0 && Main.rand.Next(3) != 0)
			{
				flag2 = false;
			}
			if (num3 == 53 && Main.rand.Next(3) != 0)
			{
				flag2 = false;
			}
			Color newColor = default(Color);
			if (type == 193)
			{
				newColor = new Color(30, 100, 255, 100);
			}
			if (type == 197)
			{
				newColor = new Color(97, 200, 255, 100);
			}
			if (type == 460)
			{
				newColor = new Color(100, 150, 130, 100);
			}
			if (!Falling)
			{
				float num4 = Math.Abs(velocity.X) / 3f;
				if ((float)Main.rand.Next(100) > num4 * 100f)
				{
					flag2 = false;
				}
			}
			if (!flag2)
			{
				continue;
			}
			float num5 = velocity.X;
			if (num5 > 6f)
			{
				num5 = 6f;
			}
			if (num5 < -6f)
			{
				num5 = -6f;
			}
			if (!(velocity.X != 0f || Falling))
			{
				continue;
			}
			int num6 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), width, 6, num3, 0f, 0f, 50, newColor);
			if (gravDir == -1f)
			{
				Main.dust[num6].position.Y -= height + 4;
			}
			if (num3 == 76)
			{
				Main.dust[num6].scale += (float)Main.rand.Next(3) * 0.1f;
				Main.dust[num6].noLight = true;
			}
			if (num3 == 16 || num3 == 108 || num3 == 153)
			{
				Main.dust[num6].scale += (float)Main.rand.Next(6) * 0.1f;
			}
			if (num3 == 37)
			{
				Main.dust[num6].scale += 0.25f;
				Main.dust[num6].alpha = 50;
			}
			if (num3 == 5)
			{
				Main.dust[num6].scale += (float)Main.rand.Next(2, 8) * 0.1f;
			}
			Main.dust[num6].noGravity = true;
			if (num3 == 322)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.dust[num6].noGravity = false;
					Main.dust[num6].scale *= 1.1f;
				}
				else
				{
					Main.dust[num6].scale *= 1.2f;
				}
			}
			if (num2 > 1)
			{
				Main.dust[num6].velocity.X *= 1.2f;
				Main.dust[num6].velocity.Y *= 0.8f;
				Main.dust[num6].velocity.Y -= 1f;
				Main.dust[num6].velocity *= 0.8f;
				Main.dust[num6].scale += (float)Main.rand.Next(3) * 0.1f;
				Main.dust[num6].velocity.X = (Main.dust[num6].position.X - (position.X + (float)(width / 2))) * 0.2f;
				if (Main.dust[num6].velocity.Y > 0f)
				{
					Main.dust[num6].velocity.Y *= -1f;
				}
				Main.dust[num6].velocity.X += num5 * 0.3f;
			}
			else
			{
				Main.dust[num6].velocity *= 0.2f;
			}
			Main.dust[num6].position.X -= num5 * 1f;
			if (gravDir == -1f)
			{
				Main.dust[num6].velocity.Y *= -1f;
			}
		}
	}

	public void BordersMovement()
	{
		if (position.X < Main.leftWorld + 640f + 16f)
		{
			Main.cameraX = 0f;
			position.X = Main.leftWorld + 640f + 16f;
			velocity.X = 0f;
		}
		if (position.X + (float)width > Main.rightWorld - 640f - 32f)
		{
			Main.cameraX = 0f;
			position.X = Main.rightWorld - 640f - 32f - (float)width;
			velocity.X = 0f;
		}
		if (position.Y < Main.topWorld + 640f + 16f)
		{
			if (Main.remixWorld || forcedGravity > 0)
			{
				if (position.Y < Main.topWorld + 640f + 16f - (float)height && !dead)
				{
					KillMe(PlayerDeathReason.ByOther(19), 10.0, 0);
				}
				if (position.Y < Main.topWorld + 320f + 16f)
				{
					position.Y = Main.topWorld + 320f + 16f;
					if (velocity.Y < 0f)
					{
						velocity.Y = 0f;
					}
					gravDir = 1f;
				}
			}
			else
			{
				position.Y = Main.topWorld + 640f + 16f;
				if ((double)velocity.Y < 0.11)
				{
					velocity.Y = 0.11f;
				}
				gravDir = 1f;
			}
			AchievementsHelper.HandleSpecialEvent(this, 11);
		}
		if (position.Y > Main.bottomWorld - 640f - 32f - (float)height)
		{
			position.Y = Main.bottomWorld - 640f - 32f - (float)height;
			velocity.Y = 0f;
		}
		if (position.Y > Main.bottomWorld - 640f - 150f - (float)height)
		{
			AchievementsHelper.HandleSpecialEvent(this, 10);
		}
	}

	public void CollectTaxes()
	{
		int num = Item.buyPrice(0, 0, 0, 50);
		int num2 = Item.buyPrice(0, 25);
		if (Main.tenthAnniversaryWorld)
		{
			num2 *= 2;
			num *= 2;
		}
		if (!NPC.taxCollector || taxMoney >= num2)
		{
			return;
		}
		int num3 = 0;
		for (int i = 0; i < 200; i++)
		{
			if (Main.npc[i].active && !Main.npc[i].homeless && !NPCID.Sets.IsTownPet[Main.npc[i].type] && NPC.TypeToDefaultHeadIndex(Main.npc[i].type) > 0)
			{
				num3++;
			}
		}
		taxMoney += num * num3;
		if (taxMoney > num2)
		{
			taxMoney = num2;
		}
	}

	public void GamepadEnableGrappleCooldown()
	{
		_quickGrappleCooldown = 3;
	}

	public void TryInterruptingItemUsage()
	{
		bool flag = false;
		if (heldProj > -1 && Main.projectile[heldProj].IsInterruptible(this))
		{
			flag = true;
		}
		if (!flag)
		{
			return;
		}
		bool flag2 = false;
		if (PlayerInput.Triggers.Current.Hotbar1)
		{
			flag2 = true;
		}
		if (PlayerInput.Triggers.Current.Hotbar2)
		{
			flag2 = true;
		}
		if (PlayerInput.Triggers.Current.Hotbar3)
		{
			flag2 = true;
		}
		if (PlayerInput.Triggers.Current.Hotbar4)
		{
			flag2 = true;
		}
		if (PlayerInput.Triggers.Current.Hotbar5)
		{
			flag2 = true;
		}
		if (PlayerInput.Triggers.Current.Hotbar6)
		{
			flag2 = true;
		}
		if (PlayerInput.Triggers.Current.Hotbar7)
		{
			flag2 = true;
		}
		if (PlayerInput.Triggers.Current.Hotbar8)
		{
			flag2 = true;
		}
		if (PlayerInput.Triggers.Current.Hotbar9)
		{
			flag2 = true;
		}
		if (PlayerInput.Triggers.Current.Hotbar10)
		{
			flag2 = true;
		}
		bool flag3 = Main.hairWindow;
		if (flag3)
		{
			int y = Main.screenHeight / 2 + 60;
			flag3 = new Rectangle(Main.screenWidth / 2 - TextureAssets.HairStyleBack.Width() / 2, y, TextureAssets.HairStyleBack.Width(), TextureAssets.HairStyleBack.Height()).Contains(Main.MouseScreen.ToPoint());
		}
		if (!Main.mapFullscreen && !CaptureManager.Instance.Active && !flag3 && !Main.playerInventory)
		{
			int num = PlayerInput.Triggers.Current.HotbarPlus.ToInt() - PlayerInput.Triggers.Current.HotbarMinus.ToInt();
			if (PlayerInput.CurrentProfile.HotbarRadialHoldTimeRequired != -1)
			{
				num = PlayerInput.Triggers.JustReleased.HotbarPlus.ToInt() - PlayerInput.Triggers.JustReleased.HotbarMinus.ToInt();
			}
			if (PlayerInput.Triggers.Current.HotbarScrollCD != 0)
			{
				num = 0;
			}
			if (!Main.inFancyUI && !Main.ingameOptionsWindow)
			{
				num += PlayerInput.ScrollWheelDelta / -120;
			}
			if (num != 0)
			{
				num = ClampHotbarOffset(num);
				_ = selectedItem + num;
				flag2 = true;
			}
		}
		if (flag2 && heldProj > -1)
		{
			Main.projectile[heldProj].Interrupt(this);
		}
	}

	private bool CanMoveForwardOnRope(int dir, int x, int y)
	{
		int num = x + dir;
		if (Main.tile[num, y] != null && Main.tile[num, y].active() && Main.tileRope[Main.tile[num, y].type])
		{
			int num2 = num * 16 + 8 - width / 2;
			float y2 = position.Y;
			y2 = y * 16 + 22;
			if ((!Main.tile[num, y - 1].active() || !Main.tileRope[Main.tile[num, y - 1].type]) && (!Main.tile[num, y + 1].active() || !Main.tileRope[Main.tile[num, y + 1].type]))
			{
				y2 = y * 16 + 22;
			}
			if (Collision.SolidCollision(new Vector2(num2, y2), width, height))
			{
				return false;
			}
			return true;
		}
		return false;
	}

	public void UpdateHairDyeDust()
	{
		if (Main.netMode != 2 && !Main.gamePaused && !dead && !ghost && !stoned && !frozen && hairDye == ContentSamples.CommonlyUsedContentSamples.TeamDyeShaderIndex)
		{
			if (Main.rand.Next(45) == 0)
			{
				int type = Main.rand.Next(139, 143);
				int num = Dust.NewDust(position, width, 8, type, 0f, 0f, 0, default(Color), 1.2f);
				Main.dust[num].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num].velocity.Y -= 1f;
				Main.dust[num].scale *= 0.7f + (float)Main.rand.Next(-30, 31) * 0.01f;
				Main.dust[num].velocity += velocity * 0.2f;
			}
			if (Main.rand.Next(225) == 0)
			{
				int type2 = Main.rand.Next(276, 283);
				int num2 = Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(8)), velocity, type2);
				Main.gore[num2].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num2].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num2].scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
				Main.gore[num2].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num2].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num2].velocity.Y -= 1f;
				Main.gore[num2].velocity += velocity * 0.2f;
			}
		}
	}

	public void Update(int i)
	{
		if (i == Main.myPlayer && Main.netMode != 2)
		{
			LockOnHelper.Update();
		}
		if (i == Main.myPlayer && Main.dontStarveWorld)
		{
			DontStarveDarknessDamageDealer.Update(this);
		}
		maxFallSpeed = 10f;
		gravity = defaultGravity;
		jumpHeight = 15;
		jumpSpeed = 5.01f;
		maxRunSpeed = 3f;
		runAcceleration = 0.08f;
		runSlowdown = 0.2f;
		accRunSpeed = maxRunSpeed;
		if (!mount.Active || !mount.Cart)
		{
			onWrongGround = false;
		}
		heldProj = -1;
		instantMovementAccumulatedThisFrame = Vector2.Zero;
		if (PortalPhysicsEnabled)
		{
			maxFallSpeed = 35f;
		}
		if (shimmerWet || shimmering)
		{
			if (shimmering)
			{
				gravity *= 0.9f;
				maxFallSpeed *= 0.9f;
			}
			else
			{
				gravity = 0.15f;
				jumpHeight = 23;
				jumpSpeed = 5.51f;
			}
		}
		else if (wet)
		{
			if (honeyWet)
			{
				gravity = 0.1f;
				maxFallSpeed = 3f;
			}
			else if (merman)
			{
				gravity = 0.3f;
				maxFallSpeed = 7f;
			}
			else if (trident && !lavaWet)
			{
				gravity = 0.25f;
				maxFallSpeed = 6f;
				jumpHeight = 25;
				jumpSpeed = 5.51f;
				if (controlUp)
				{
					gravity = 0.1f;
					maxFallSpeed = 2f;
				}
			}
			else
			{
				gravity = 0.2f;
				maxFallSpeed = 5f;
				jumpHeight = 30;
				jumpSpeed = 6.01f;
			}
		}
		if (vortexDebuff)
		{
			gravity = 0f;
		}
		maxFallSpeed += 0.01f;
		bool flag = false;
		if (Main.myPlayer == i)
		{
			if (Main.mapFullscreen)
			{
				GamepadEnableGrappleCooldown();
			}
			else if (_quickGrappleCooldown > 0)
			{
				_quickGrappleCooldown--;
			}
			TileObject.objectPreview.Reset();
			if (DD2Event.DownedInvasionAnyDifficulty)
			{
				downedDD2EventAnyDifficulty = true;
			}
			autoReuseAllWeapons = Main.SettingsEnabled_AutoReuseAllItems;
		}
		if (NPC.freeCake && talkNPC >= 0 && Main.npc[talkNPC].type == 208)
		{
			NPC.freeCake = false;
			if (Main.netMode != 1)
			{
				Item.NewItem(new EntitySource_Gift(Main.npc[talkNPC]), (int)position.X, (int)position.Y, width, height, 3750);
			}
		}
		if (emoteTime > 0)
		{
			emoteTime--;
		}
		if (ghostDmg > 0f)
		{
			ghostDmg -= 6.6666665f;
		}
		if (ghostDmg < 0f)
		{
			ghostDmg = 0f;
		}
		if (Main.expertMode)
		{
			if (lifeSteal < 70f)
			{
				lifeSteal += 0.5f;
			}
			if (lifeSteal > 70f)
			{
				lifeSteal = 70f;
			}
		}
		else
		{
			if (lifeSteal < 80f)
			{
				lifeSteal += 0.6f;
			}
			if (lifeSteal > 80f)
			{
				lifeSteal = 80f;
			}
		}
		ResizeHitbox();
		if (mount.Active && mount.Type == 0)
		{
			int num = (int)(position.X + (float)(width / 2)) / 16;
			int j = (int)(position.Y + (float)(height / 2) - 14f) / 16;
			Lighting.AddLight(num, j, 0.5f, 0.2f, 0.05f);
			Lighting.AddLight(num + direction, j, 0.5f, 0.2f, 0.05f);
			Lighting.AddLight(num + direction * 2, j, 0.5f, 0.2f, 0.05f);
		}
		outOfRange = false;
		if (whoAmI != Main.myPlayer)
		{
			int num2 = (int)(position.X + (float)(width / 2)) / 16;
			int num3 = (int)(position.Y + (float)(height / 2)) / 16;
			if (!WorldGen.InWorld(num2, num3, 4))
			{
				flag = true;
			}
			else if (Main.tile[num2, num3] == null)
			{
				flag = true;
			}
			else if (Main.tile[num2 - 3, num3] == null)
			{
				flag = true;
			}
			else if (Main.tile[num2 + 3, num3] == null)
			{
				flag = true;
			}
			else if (Main.tile[num2, num3 - 3] == null)
			{
				flag = true;
			}
			else if (Main.tile[num2, num3 + 3] == null)
			{
				flag = true;
			}
			if (flag)
			{
				outOfRange = true;
				numMinions = 0;
				slotsMinions = 0f;
				itemAnimation = 0;
				UpdateBuffs(i);
				PlayerFrame();
			}
		}
		if (tankPet >= 0)
		{
			if (!tankPetReset)
			{
				tankPetReset = true;
			}
			else
			{
				tankPet = -1;
			}
		}
		if (i == Main.myPlayer)
		{
			IsVoidVaultEnabled = HasItem(4131);
		}
		if (chatOverhead.timeLeft > 0)
		{
			chatOverhead.timeLeft--;
		}
		if (snowBallLauncherInteractionCooldown > 0)
		{
			snowBallLauncherInteractionCooldown--;
		}
		environmentBuffImmunityTimer = Math.Max(0, environmentBuffImmunityTimer - 1);
		if (flag)
		{
			return;
		}
		UpdateHairDyeDust();
		UpdateMiscCounter();
		infernoCounter++;
		if (infernoCounter >= 180)
		{
			infernoCounter = 0;
		}
		timeSinceLastDashStarted++;
		if (timeSinceLastDashStarted >= 300)
		{
			timeSinceLastDashStarted = 300;
		}
		_framesLeftEligibleForDeadmansChestDeathAchievement--;
		if (_framesLeftEligibleForDeadmansChestDeathAchievement < 0)
		{
			_framesLeftEligibleForDeadmansChestDeathAchievement = 0;
		}
		if (titaniumStormCooldown > 0)
		{
			titaniumStormCooldown--;
		}
		if (starCloakCooldown > 0)
		{
			starCloakCooldown--;
			if (Main.rand.Next(5) == 0)
			{
				for (int k = 0; k < 2; k++)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 45, 0f, 0f, 255, default(Color), (float)Main.rand.Next(20, 26) * 0.1f);
					dust.noLight = true;
					dust.noGravity = true;
					dust.velocity *= 0.5f;
					dust.velocity.X = 0f;
					dust.velocity.Y -= 0.5f;
				}
			}
			if (starCloakCooldown == 0)
			{
				SoundEngine.PlaySound(25);
			}
		}
		_timeSinceLastImmuneGet++;
		if (_timeSinceLastImmuneGet >= 10000)
		{
			_timeSinceLastImmuneGet = 10000;
		}
		float num4 = (float)Main.maxTilesX / 4200f;
		num4 *= num4;
		float num5 = (float)((double)(position.Y / 16f - (60f + 10f * num4)) / (Main.worldSurface / 6.0));
		if (Main.remixWorld)
		{
			num5 = (float)((double)(position.Y / 16f - (60f + 10f * num4)) / (Main.worldSurface / 1.0));
		}
		if (Main.remixWorld)
		{
			if ((double)num5 < 0.1)
			{
				num5 = 0.1f;
			}
		}
		else if ((double)num5 < 0.25)
		{
			num5 = 0.25f;
		}
		if (num5 > 1f)
		{
			num5 = 1f;
		}
		gravity *= num5;
		maxRegenDelay = (1f - (float)statMana / (float)statManaMax2) * 60f * 4f + 45f;
		maxRegenDelay *= 0.7f;
		UpdateSocialShadow();
		UpdateTeleportVisuals();
		whoAmI = i;
		if (whoAmI == Main.myPlayer)
		{
			if (!DD2Event.Ongoing)
			{
				PurgeDD2EnergyCrystals();
			}
			TryPortalJumping();
			if (whoAmI == Main.myPlayer)
			{
				doorHelper.Update(this);
			}
		}
		if (runSoundDelay > 0)
		{
			runSoundDelay--;
		}
		if (attackCD > 0)
		{
			attackCD--;
		}
		if (itemAnimation == 0)
		{
			attackCD = 0;
		}
		if (potionDelay > 0)
		{
			potionDelay--;
		}
		if (i == Main.myPlayer)
		{
			if (trashItem.type >= 1522 && trashItem.type <= 1527)
			{
				trashItem.SetDefaults();
			}
			if (trashItem.type == 3643)
			{
				trashItem.SetDefaults();
			}
			UpdateBiomes();
			UpdateMinionTarget();
		}
		if (ghost)
		{
			Ghost();
			return;
		}
		if (dead)
		{
			UpdateDead();
			ResetProjectileCaches();
			UpdateProjectileCaches(i);
			return;
		}
		TrySpawningFaelings();
		if (i == Main.myPlayer && hasLucyTheAxe)
		{
			LucyAxeMessage.TryPlayingIdleMessage();
		}
		if (velocity.Y == 0f)
		{
			mount.FatigueRecovery();
		}
		if (i == Main.myPlayer && !isControlledByFilm)
		{
			ResetControls();
			if (Main.hasFocus)
			{
				if (!Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.blockInput)
				{
					PlayerInput.Triggers.Current.CopyInto(this);
					LocalInputCache = new DirectionalInputSyncCache(this);
					if (Main.mapFullscreen)
					{
						if (controlUp)
						{
							Main.mapFullscreenPos.Y -= 1f * (16f / Main.mapFullscreenScale);
						}
						if (controlDown)
						{
							Main.mapFullscreenPos.Y += 1f * (16f / Main.mapFullscreenScale);
						}
						if (controlLeft)
						{
							Main.mapFullscreenPos.X -= 1f * (16f / Main.mapFullscreenScale);
						}
						if (controlRight)
						{
							Main.mapFullscreenPos.X += 1f * (16f / Main.mapFullscreenScale);
						}
						controlUp = false;
						controlLeft = false;
						controlDown = false;
						controlRight = false;
						controlJump = false;
						controlUseItem = false;
						controlUseTile = false;
						controlThrow = false;
						controlHook = false;
						controlTorch = false;
						controlSmart = false;
						controlMount = false;
					}
					if (isOperatingAnotherEntity)
					{
						controlUp = (controlDown = (controlLeft = (controlRight = (controlJump = false))));
					}
					if (controlQuickHeal)
					{
						if (releaseQuickHeal)
						{
							QuickHeal();
						}
						releaseQuickHeal = false;
					}
					else
					{
						releaseQuickHeal = true;
					}
					if (controlQuickMana)
					{
						if (releaseQuickMana)
						{
							QuickMana();
						}
						releaseQuickMana = false;
					}
					else
					{
						releaseQuickMana = true;
					}
					if (controlCreativeMenu)
					{
						if (releaseCreativeMenu)
						{
							ToggleCreativeMenu();
						}
						releaseCreativeMenu = false;
					}
					else
					{
						releaseCreativeMenu = true;
					}
					if (controlLeft && controlRight)
					{
						controlLeft = false;
						controlRight = false;
					}
					if (PlayerInput.UsingGamepad || !mouseInterface || !ItemSlot.Options.DisableLeftShiftTrashCan)
					{
						if (PlayerInput.SteamDeckIsUsed && PlayerInput.SettingsForUI.CurrentCursorMode == CursorMode.Mouse)
						{
							TryToToggleSmartCursor(ref Main.SmartCursorWanted_Mouse);
						}
						else if (PlayerInput.UsingGamepad)
						{
							TryToToggleSmartCursor(ref Main.SmartCursorWanted_GamePad);
						}
						else
						{
							TryToToggleSmartCursor(ref Main.SmartCursorWanted_Mouse);
						}
					}
					if (controlSmart)
					{
						releaseSmart = false;
					}
					else
					{
						releaseSmart = true;
					}
					if (controlMount)
					{
						if (releaseMount)
						{
							QuickMount();
						}
						releaseMount = false;
					}
					else
					{
						releaseMount = true;
					}
					if (Main.mapFullscreen)
					{
						if (mapZoomIn)
						{
							Main.mapFullscreenScale *= 1.05f;
						}
						if (mapZoomOut)
						{
							Main.mapFullscreenScale *= 0.95f;
						}
					}
					else
					{
						if (Main.mapStyle == 1)
						{
							if (mapZoomIn)
							{
								Main.mapMinimapScale *= 1.025f;
							}
							if (mapZoomOut)
							{
								Main.mapMinimapScale *= 0.975f;
							}
							if (mapAlphaUp)
							{
								Main.mapMinimapAlpha += 0.015f;
							}
							if (mapAlphaDown)
							{
								Main.mapMinimapAlpha -= 0.015f;
							}
						}
						else if (Main.mapStyle == 2)
						{
							if (mapZoomIn)
							{
								Main.mapOverlayScale *= 1.05f;
							}
							if (mapZoomOut)
							{
								Main.mapOverlayScale *= 0.95f;
							}
							if (mapAlphaUp)
							{
								Main.mapOverlayAlpha += 0.015f;
							}
							if (mapAlphaDown)
							{
								Main.mapOverlayAlpha -= 0.015f;
							}
						}
						if (mapStyle)
						{
							if (releaseMapStyle)
							{
								SoundEngine.PlaySound(12);
								Main.mapStyle++;
								if (Main.mapStyle > 2)
								{
									Main.mapStyle = 0;
								}
							}
							releaseMapStyle = false;
						}
						else
						{
							releaseMapStyle = true;
						}
					}
					if (mapFullScreen)
					{
						if (releaseMapFullscreen)
						{
							if (Main.mapFullscreen)
							{
								SoundEngine.PlaySound(11);
								Main.mapFullscreen = false;
							}
							else
							{
								TryOpeningFullscreenMap();
							}
						}
						releaseMapFullscreen = false;
					}
					else
					{
						releaseMapFullscreen = true;
					}
				}
				else if (!PlayerInput.UsingGamepad && !Main.editSign && !Main.editChest && !Main.blockInput)
				{
					PlayerInput.Triggers.Current.CopyIntoDuringChat(this);
				}
				if (confused)
				{
					bool flag2 = controlLeft;
					bool flag3 = controlUp;
					controlLeft = controlRight;
					controlRight = flag2;
					controlUp = controlRight;
					controlDown = flag3;
				}
				else if (cartFlip)
				{
					if (controlRight || controlLeft)
					{
						bool flag4 = controlLeft;
						controlLeft = controlRight;
						controlRight = flag4;
					}
					else
					{
						cartFlip = false;
					}
				}
				for (int l = 0; l < doubleTapCardinalTimer.Length; l++)
				{
					doubleTapCardinalTimer[l]--;
					if (doubleTapCardinalTimer[l] < 0)
					{
						doubleTapCardinalTimer[l] = 0;
					}
				}
				for (int m = 0; m < 4; m++)
				{
					bool flag5 = false;
					bool flag6 = false;
					switch (m)
					{
					case 0:
						flag5 = controlDown && releaseDown;
						flag6 = controlDown;
						break;
					case 1:
						flag5 = controlUp && releaseUp;
						flag6 = controlUp;
						break;
					case 2:
						flag5 = controlRight && releaseRight;
						flag6 = controlRight;
						break;
					case 3:
						flag5 = controlLeft && releaseLeft;
						flag6 = controlLeft;
						break;
					}
					if (flag5)
					{
						if (doubleTapCardinalTimer[m] > 0)
						{
							KeyDoubleTap(m);
						}
						else
						{
							doubleTapCardinalTimer[m] = 15;
						}
					}
					if (flag6)
					{
						holdDownCardinalTimer[m]++;
						KeyHoldDown(m, holdDownCardinalTimer[m]);
					}
					else
					{
						holdDownCardinalTimer[m] = 0;
					}
				}
				controlDownHold = holdDownCardinalTimer[0] >= 45;
				if (controlInv)
				{
					if (releaseInventory)
					{
						ToggleInv();
					}
					releaseInventory = false;
				}
				else
				{
					releaseInventory = true;
				}
				if (delayUseItem)
				{
					if (!controlUseItem)
					{
						delayUseItem = false;
					}
					controlUseItem = false;
				}
				if (itemAnimation == 0 && ItemTimeIsZero && reuseDelay == 0)
				{
					dropItemCheck();
					int num6 = selectedItem;
					bool flag7 = false;
					if (!Main.drawingPlayerChat && selectedItem != 58 && !Main.editSign && !Main.editChest)
					{
						if (PlayerInput.Triggers.Current.Hotbar1)
						{
							selectedItem = 0;
							flag7 = true;
						}
						if (PlayerInput.Triggers.Current.Hotbar2)
						{
							selectedItem = 1;
							flag7 = true;
						}
						if (PlayerInput.Triggers.Current.Hotbar3)
						{
							selectedItem = 2;
							flag7 = true;
						}
						if (PlayerInput.Triggers.Current.Hotbar4)
						{
							selectedItem = 3;
							flag7 = true;
						}
						if (PlayerInput.Triggers.Current.Hotbar5)
						{
							selectedItem = 4;
							flag7 = true;
						}
						if (PlayerInput.Triggers.Current.Hotbar6)
						{
							selectedItem = 5;
							flag7 = true;
						}
						if (PlayerInput.Triggers.Current.Hotbar7)
						{
							selectedItem = 6;
							flag7 = true;
						}
						if (PlayerInput.Triggers.Current.Hotbar8)
						{
							selectedItem = 7;
							flag7 = true;
						}
						if (PlayerInput.Triggers.Current.Hotbar9)
						{
							selectedItem = 8;
							flag7 = true;
						}
						if (PlayerInput.Triggers.Current.Hotbar10)
						{
							selectedItem = 9;
							flag7 = true;
						}
						int selectedBinding = DpadRadial.SelectedBinding;
						int selectedBinding2 = CircularRadial.SelectedBinding;
						_ = QuicksRadial.SelectedBinding;
						DpadRadial.Update();
						CircularRadial.Update();
						QuicksRadial.Update();
						if (CircularRadial.SelectedBinding >= 0 && selectedBinding2 != CircularRadial.SelectedBinding)
						{
							DpadRadial.ChangeSelection(-1);
						}
						if (DpadRadial.SelectedBinding >= 0 && selectedBinding != DpadRadial.SelectedBinding)
						{
							CircularRadial.ChangeSelection(-1);
						}
						if (QuicksRadial.SelectedBinding != -1 && PlayerInput.Triggers.JustReleased.RadialQuickbar && !PlayerInput.MiscSettingsTEMP.HotbarRadialShouldBeUsed)
						{
							switch (QuicksRadial.SelectedBinding)
							{
							case 0:
								QuickMount();
								break;
							case 1:
								QuickHeal();
								break;
							case 2:
								QuickBuff();
								break;
							case 3:
								QuickMana();
								break;
							}
						}
						if (controlTorch || flag7)
						{
							DpadRadial.ChangeSelection(-1);
							CircularRadial.ChangeSelection(-1);
						}
						if (controlTorch && flag7)
						{
							if (selectedItem != nonTorch)
							{
								SoundEngine.PlaySound(12);
							}
							nonTorch = selectedItem;
							selectedItem = num6;
							flag7 = false;
						}
					}
					bool flag8 = Main.hairWindow;
					if (flag8)
					{
						int y = Main.screenHeight / 2 + 60;
						flag8 = new Rectangle(Main.screenWidth / 2 - TextureAssets.HairStyleBack.Width() / 2, y, TextureAssets.HairStyleBack.Width(), TextureAssets.HairStyleBack.Height()).Contains(Main.MouseScreen.ToPoint());
					}
					if (flag7 && CaptureManager.Instance.Active)
					{
						CaptureManager.Instance.Active = false;
					}
					if (num6 != selectedItem)
					{
						SoundEngine.PlaySound(12);
					}
					if (Main.mapFullscreen)
					{
						float num7 = PlayerInput.ScrollWheelDelta / 120;
						if (PlayerInput.UsingGamepad)
						{
							num7 += (float)(PlayerInput.Triggers.Current.HotbarPlus.ToInt() - PlayerInput.Triggers.Current.HotbarMinus.ToInt()) * 0.1f;
						}
						Main.mapFullscreenScale *= 1f + num7 * 0.3f;
					}
					else if (CaptureManager.Instance.Active)
					{
						CaptureManager.Instance.Scrolling();
					}
					else if (!flag8)
					{
						if (!Main.playerInventory)
						{
							HandleHotbar();
						}
						else
						{
							int num8 = GetMouseScrollDelta();
							bool flag9 = true;
							if (Main.recBigList)
							{
								int num9 = 42;
								int num10 = 340;
								int num11 = 310;
								PlayerInput.SetZoom_UI();
								int num12 = (Main.screenWidth - num11 - 280) / num9;
								int num13 = (Main.screenHeight - num10 - 20) / num9;
								if (new Rectangle(num11, num10, num12 * num9, num13 * num9).Contains(Main.MouseScreen.ToPoint()))
								{
									num8 *= -1;
									int num14 = Math.Sign(num8);
									while (num8 != 0)
									{
										if (num8 < 0)
										{
											Main.recStart -= num12;
											if (Main.recStart < 0)
											{
												Main.recStart = 0;
											}
										}
										else
										{
											Main.recStart += num12;
											if (Main.recStart > Main.numAvailableRecipes - num12)
											{
												Main.recStart = Main.numAvailableRecipes - num12;
											}
										}
										num8 -= num14;
									}
								}
								PlayerInput.SetZoom_World();
							}
							if (flag9)
							{
								Main.focusRecipe += num8;
								if (Main.focusRecipe > Main.numAvailableRecipes - 1)
								{
									Main.focusRecipe = Main.numAvailableRecipes - 1;
								}
								if (Main.focusRecipe < 0)
								{
									Main.focusRecipe = 0;
								}
							}
						}
					}
				}
				else
				{
					bool flag10 = false;
					if (!Main.drawingPlayerChat && selectedItem != 58 && !Main.editSign && !Main.editChest)
					{
						int num15 = -1;
						if (Main.keyState.IsKeyDown(Keys.D1))
						{
							num15 = 0;
							flag10 = true;
						}
						if (Main.keyState.IsKeyDown(Keys.D2))
						{
							num15 = 1;
							flag10 = true;
						}
						if (Main.keyState.IsKeyDown(Keys.D3))
						{
							num15 = 2;
							flag10 = true;
						}
						if (Main.keyState.IsKeyDown(Keys.D4))
						{
							num15 = 3;
							flag10 = true;
						}
						if (Main.keyState.IsKeyDown(Keys.D5))
						{
							num15 = 4;
							flag10 = true;
						}
						if (Main.keyState.IsKeyDown(Keys.D6))
						{
							num15 = 5;
							flag10 = true;
						}
						if (Main.keyState.IsKeyDown(Keys.D7))
						{
							num15 = 6;
							flag10 = true;
						}
						if (Main.keyState.IsKeyDown(Keys.D8))
						{
							num15 = 7;
							flag10 = true;
						}
						if (Main.keyState.IsKeyDown(Keys.D9))
						{
							num15 = 8;
							flag10 = true;
						}
						if (Main.keyState.IsKeyDown(Keys.D0))
						{
							num15 = 9;
							flag10 = true;
						}
						if (flag10)
						{
							if (num15 != nonTorch)
							{
								SoundEngine.PlaySound(12);
							}
							nonTorch = num15;
						}
					}
				}
			}
			if (selectedItem != 58)
			{
				SmartSelectLookup();
			}
			if (stoned != lastStoned)
			{
				if (whoAmI == Main.myPlayer && stoned)
				{
					int damage = (int)(20.0 * (double)Main.GameModeInfo.EnemyDamageMultiplier);
					Hurt(PlayerDeathReason.ByOther(5), damage, 0);
				}
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int n = 0; n < 20; n++)
				{
					int num16 = Dust.NewDust(position, width, height, 1);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num16].noGravity = true;
					}
				}
			}
			lastStoned = stoned;
			if (frozen || webbed || stoned)
			{
				controlJump = false;
				controlDown = false;
				controlLeft = false;
				controlRight = false;
				controlUp = false;
				controlUseItem = false;
				controlUseTile = false;
				controlThrow = false;
				gravDir = 1f;
			}
			if (!controlThrow)
			{
				releaseThrow = true;
			}
			else
			{
				releaseThrow = false;
			}
			if (controlDown && releaseDown)
			{
				if (tryKeepingHoveringUp)
				{
					tryKeepingHoveringUp = false;
				}
				else
				{
					tryKeepingHoveringDown = true;
				}
			}
			if (controlUp && releaseUp)
			{
				if (tryKeepingHoveringDown)
				{
					tryKeepingHoveringDown = false;
				}
				else
				{
					tryKeepingHoveringUp = true;
				}
			}
			if (velocity.Y == 0f)
			{
				tryKeepingHoveringUp = false;
				tryKeepingHoveringDown = false;
			}
			if (Settings.HoverControl == Settings.HoverControlMode.Hold)
			{
				tryKeepingHoveringUp = false;
				tryKeepingHoveringDown = false;
			}
			TrySyncingInput();
			if (Main.playerInventory)
			{
				AdjTiles();
			}
			HandleBeingInChestRange();
			tileEntityAnchor.GetTileEntity()?.OnPlayerUpdate(this);
		}
		if (i == Main.myPlayer)
		{
			if (velocity.Y <= 0f)
			{
				fallStart2 = (int)(position.Y / 16f);
			}
			if (velocity.Y == 0f)
			{
				int num17 = 25;
				num17 += extraFall;
				int num18 = (int)(position.Y / 16f) - fallStart;
				if (mount.CanFly())
				{
					num18 = 0;
				}
				if (mount.Cart && Minecart.OnTrack(position, width, height))
				{
					num18 = 0;
				}
				if (mount.Type == 1)
				{
					num18 = 0;
				}
				if (num18 > 0 || (gravDir == -1f && num18 < 0))
				{
					int num19 = (int)(position.X / 16f);
					int num20 = (int)((position.X + (float)width) / 16f);
					int num21 = (int)((position.Y + (float)height + 1f) / 16f);
					if (gravDir == -1f)
					{
						num21 = (int)((position.Y - 1f) / 16f);
					}
					for (int num22 = num19; num22 <= num20; num22++)
					{
						if (Main.tile[num22, num21] != null && Main.tile[num22, num21].active() && (Main.tile[num22, num21].type == 189 || Main.tile[num22, num21].type == 196 || Main.tile[num22, num21].type == 460 || Main.tile[num22, num21].type == 666))
						{
							num18 = 0;
							break;
						}
					}
				}
				bool flag11 = false;
				for (int num23 = 3; num23 < 10; num23++)
				{
					if (armor[num23].stack > 0 && armor[num23].wingSlot > -1)
					{
						flag11 = true;
					}
				}
				if (stoned)
				{
					int num24 = (int)(((float)num18 * gravDir - 2f) * 20f);
					if (num24 > 0)
					{
						Hurt(PlayerDeathReason.ByOther(5), num24, 0);
						immune = false;
					}
				}
				else if (((gravDir == 1f && num18 > num17) || (gravDir == -1f && num18 < -num17)) && !noFallDmg && !flag11)
				{
					immune = false;
					int num25 = (int)((float)num18 * gravDir - (float)num17) * 10;
					if (mount.Active)
					{
						num25 = (int)((float)num25 * mount.FallDamage);
					}
					Hurt(PlayerDeathReason.ByOther(0), num25, 0);
					if (!dead && statLife <= statLifeMax2 / 10)
					{
						AchievementsHelper.HandleSpecialEvent(this, 8);
					}
				}
				fallStart = (int)(position.Y / 16f);
			}
			if (jump > 0 || rocketDelay > 0 || wet || slowFall || (double)num5 < 0.8 || tongued)
			{
				fallStart = (int)(position.Y / 16f);
			}
		}
		if (Main.netMode != 1)
		{
			if (chest == -1 && lastChest >= 0 && Main.chest[lastChest] != null)
			{
				int x = Main.chest[lastChest].x;
				int y2 = Main.chest[lastChest].y;
				NPC.BigMimicSummonCheck(x, y2, this);
			}
			if (lastChest != chest && chest >= 0 && Main.chest[chest] != null)
			{
				int x2 = Main.chest[chest].x;
				int y3 = Main.chest[chest].y;
				Projectile.GasTrapCheck(x2, y3, this);
				ItemSlot.forceClearGlowsOnChest = true;
			}
			lastChest = chest;
		}
		if (mouseInterface)
		{
			delayUseItem = true;
		}
		tileTargetX = (int)(((float)Main.mouseX + Main.screenPosition.X) / 16f);
		tileTargetY = (int)(((float)Main.mouseY + Main.screenPosition.Y) / 16f);
		if (gravDir == -1f)
		{
			tileTargetY = (int)((Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16f);
		}
		if (tileTargetX >= Main.maxTilesX - 5)
		{
			tileTargetX = Main.maxTilesX - 5;
		}
		if (tileTargetY >= Main.maxTilesY - 5)
		{
			tileTargetY = Main.maxTilesY - 5;
		}
		if (tileTargetX < 5)
		{
			tileTargetX = 5;
		}
		if (tileTargetY < 5)
		{
			tileTargetY = 5;
		}
		if (Main.tile[tileTargetX - 1, tileTargetY] == null)
		{
			Main.tile[tileTargetX - 1, tileTargetY] = new Tile();
		}
		if (Main.tile[tileTargetX + 1, tileTargetY] == null)
		{
			Main.tile[tileTargetX + 1, tileTargetY] = new Tile();
		}
		if (Main.tile[tileTargetX, tileTargetY] == null)
		{
			Main.tile[tileTargetX, tileTargetY] = new Tile();
		}
		if (inventory[selectedItem].axe > 0 && !Main.tile[tileTargetX, tileTargetY].active() && inventory[selectedItem].createWall <= 0 && (inventory[selectedItem].hammer <= 0 || inventory[selectedItem].axe != 0))
		{
			if (Main.tile[tileTargetX - 1, tileTargetY].active() && Main.tile[tileTargetX - 1, tileTargetY].type == 323)
			{
				if (Main.tile[tileTargetX - 1, tileTargetY].frameY > 4)
				{
					tileTargetX--;
				}
			}
			else if (Main.tile[tileTargetX + 1, tileTargetY].active() && Main.tile[tileTargetX + 1, tileTargetY].type == 323 && Main.tile[tileTargetX + 1, tileTargetY].frameY < -4)
			{
				tileTargetX++;
			}
		}
		if (i == Main.myPlayer)
		{
			UpdateNearbyInteractibleProjectilesList();
		}
		try
		{
			if (whoAmI == Main.myPlayer && Main.instance.IsActive)
			{
				SmartCursorHelper.SmartCursorLookup(this);
				SmartInteractLookup();
			}
		}
		catch
		{
			Main.SmartCursorWanted_GamePad = false;
			Main.SmartCursorWanted_Mouse = false;
		}
		UpdateImmunity();
		if (petalTimer > 0)
		{
			petalTimer--;
		}
		if (shadowDodgeTimer > 0)
		{
			shadowDodgeTimer--;
		}
		if (boneGloveTimer > 0)
		{
			boneGloveTimer--;
		}
		if (crystalLeafCooldown > 0)
		{
			crystalLeafCooldown--;
		}
		if (jump > 0 || velocity.Y != 0f)
		{
			ResetFloorFlags();
		}
		bool flag12 = pStone;
		potionDelayTime = Item.potionDelay;
		restorationDelayTime = Item.restorationDelay;
		mushroomDelayTime = Item.mushroomDelay;
		if (pStone)
		{
			potionDelayTime = (int)((float)potionDelayTime * PhilosopherStoneDurationMultiplier);
			restorationDelayTime = (int)((float)restorationDelayTime * PhilosopherStoneDurationMultiplier);
			mushroomDelayTime = (int)((float)mushroomDelayTime * PhilosopherStoneDurationMultiplier);
		}
		if (yoraiz0rEye > 0)
		{
			Yoraiz0rEye();
		}
		ResetEffects();
		UpdateDyes();
		if (CreativePowerManager.Instance.GetPower<CreativePowers.GodmodePower>().IsEnabledForPlayer(whoAmI))
		{
			creativeGodMode = true;
		}
		if (IsStandingStillForSpecialEffects && itemAnimation == 0)
		{
			afkCounter++;
		}
		else
		{
			afkCounter = 0;
		}
		meleeCrit += inventory[selectedItem].crit;
		magicCrit += inventory[selectedItem].crit;
		rangedCrit += inventory[selectedItem].crit;
		if (whoAmI == Main.myPlayer)
		{
			Main.musicBox2 = -1;
			if (Main.SceneMetrics.WaterCandleCount > 0)
			{
				AddBuff(86, 2, quiet: false);
			}
			if (Main.SceneMetrics.PeaceCandleCount > 0)
			{
				AddBuff(157, 2, quiet: false);
			}
			if (Main.SceneMetrics.ShadowCandleCount > 0)
			{
				AddBuff(350, 2, quiet: false);
			}
			if (Main.SceneMetrics.HasCampfire)
			{
				AddBuff(87, 2, quiet: false);
			}
			if (Main.SceneMetrics.HasCatBast)
			{
				AddBuff(215, 2, quiet: false);
			}
			if (Main.SceneMetrics.HasStarInBottle)
			{
				AddBuff(158, 2, quiet: false);
			}
			if (Main.SceneMetrics.HasHeartLantern)
			{
				AddBuff(89, 2, quiet: false);
			}
			if (Main.SceneMetrics.HasSunflower)
			{
				AddBuff(146, 2, quiet: false);
			}
			if (Main.SceneMetrics.hasBanner)
			{
				AddBuff(147, 2, quiet: false);
			}
			if (!behindBackWall && ZoneSandstorm)
			{
				AddBuff(194, 2, quiet: false);
			}
		}
		for (int num26 = 0; num26 < BuffID.Count; num26++)
		{
			buffImmune[num26] = false;
		}
		UpdateProjectileCaches(i);
		UpdateBuffs(i);
		if (whoAmI == Main.myPlayer)
		{
			if (!onFire && !poisoned)
			{
				trapDebuffSource = false;
			}
			UpdatePet(i);
			UpdatePetLight(i);
			isOperatingAnotherEntity = ownedProjectileCounts[1020] > 0;
		}
		bool flag13 = wet && !lavaWet && (!mount.Active || !mount.IsConsideredASlimeMount);
		if (accMerman && flag13)
		{
			releaseJump = true;
			wings = 0;
			merman = true;
			accFlipper = true;
			AddBuff(34, 2);
		}
		else
		{
			merman = false;
		}
		if (!flag13 && forceWerewolf)
		{
			forceMerman = false;
		}
		if (forceMerman && flag13)
		{
			wings = 0;
		}
		accMerman = false;
		hideMerman = false;
		forceMerman = false;
		if (wolfAcc && !merman && !Main.dayTime && !wereWolf)
		{
			AddBuff(28, 60);
		}
		wolfAcc = false;
		hideWolf = false;
		forceWerewolf = false;
		if (whoAmI == Main.myPlayer)
		{
			for (int num27 = 0; num27 < maxBuffs; num27++)
			{
				if (buffType[num27] > 0 && buffTime[num27] <= 0)
				{
					DelBuff(num27);
				}
			}
		}
		beetleDefense = false;
		beetleOffense = false;
		setSolar = false;
		head = armor[0].headSlot;
		body = armor[1].bodySlot;
		legs = armor[2].legSlot;
		ResetVisibleAccessories();
		if (MountFishronSpecialCounter > 0f)
		{
			MountFishronSpecialCounter -= 1f;
		}
		if (_portalPhysicsTime > 0)
		{
			_portalPhysicsTime--;
		}
		UpdateEquips(i);
		if (Main.npcShop <= 0)
		{
			discountAvailable = discountEquipped;
		}
		if (flag12 != pStone)
		{
			AdjustRemainingPotionSickness();
		}
		UpdatePermanentBoosters();
		UpdateLuck();
		shimmerUnstuckHelper.Update(this);
		UpdatePortableStoolUsage();
		if (velocity.Y == 0f || controlJump)
		{
			portalPhysicsFlag = false;
		}
		if (inventory[selectedItem].type == 3384 || portalPhysicsFlag)
		{
			_portalPhysicsTime = 30;
		}
		if (mount.Active)
		{
			mount.UpdateEffects(this);
		}
		gemCount++;
		if (gemCount >= 10)
		{
			gem = -1;
			ownedLargeGems = (byte)0;
			gemCount = 0;
			for (int num28 = 0; num28 <= 58; num28++)
			{
				if (inventory[num28].type == 0 || inventory[num28].stack == 0)
				{
					inventory[num28].TurnToAir();
				}
				if (inventory[num28].type >= 1522 && inventory[num28].type <= 1527)
				{
					gem = inventory[num28].type - 1522;
					ownedLargeGems[gem] = true;
				}
				if (inventory[num28].type == 3643)
				{
					gem = 6;
					ownedLargeGems[gem] = true;
				}
			}
		}
		UpdateArmorLights();
		UpdateArmorSets(i);
		if (shadowDodge && !onHitDodge)
		{
			ClearBuff(59);
		}
		if (maxTurretsOld != maxTurrets)
		{
			UpdateMaxTurrets();
			maxTurretsOld = maxTurrets;
		}
		if (shieldRaised)
		{
			statDefense += 20;
		}
		if ((merman || forceMerman) && flag13)
		{
			wings = 0;
		}
		if (invis)
		{
			if (itemAnimation == 0 && aggro > -750)
			{
				aggro = -750;
			}
			else if (aggro > -250)
			{
				aggro = -250;
			}
		}
		if (inventory[selectedItem].type == 3106)
		{
			if (itemAnimation > 0)
			{
				stealthTimer = 15;
				if (stealth > 0f)
				{
					stealth += 0.1f;
				}
			}
			else if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1 && (double)velocity.Y > -0.1 && (double)velocity.Y < 0.1 && !mount.Active)
			{
				if (stealthTimer == 0 && stealth > 0f)
				{
					stealth -= 0.02f;
					if ((double)stealth <= 0.0)
					{
						stealth = 0f;
						if (Main.netMode == 1)
						{
							NetMessage.SendData(84, -1, -1, null, whoAmI);
						}
					}
				}
			}
			else
			{
				if (stealth > 0f)
				{
					stealth += 0.1f;
				}
				if (mount.Active)
				{
					stealth = 1f;
				}
			}
			if (stealth > 1f)
			{
				stealth = 1f;
			}
			meleeDamage += (1f - stealth) * 3f;
			meleeCrit += (int)((1f - stealth) * 30f);
			if (meleeCrit > 100)
			{
				meleeCrit = 100;
			}
			aggro -= (int)((1f - stealth) * 750f);
			if (stealthTimer > 0)
			{
				stealthTimer--;
			}
		}
		else if (shroomiteStealth)
		{
			if (itemAnimation > 0)
			{
				stealthTimer = 5;
			}
			if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1 && (double)velocity.Y > -0.1 && (double)velocity.Y < 0.1 && !mount.Active)
			{
				if (stealthTimer == 0 && stealth > 0f)
				{
					stealth -= 0.015f;
					if ((double)stealth <= 0.0)
					{
						stealth = 0f;
						if (Main.netMode == 1)
						{
							NetMessage.SendData(84, -1, -1, null, whoAmI);
						}
					}
				}
			}
			else
			{
				float num29 = Math.Abs(velocity.X) + Math.Abs(velocity.Y);
				stealth += num29 * 0.0075f;
				if (stealth > 1f)
				{
					stealth = 1f;
				}
				if (mount.Active)
				{
					stealth = 1f;
				}
			}
			rangedDamage += (1f - stealth) * 0.6f;
			rangedCrit += (int)((1f - stealth) * 10f);
			aggro -= (int)((1f - stealth) * 750f);
			if (stealthTimer > 0)
			{
				stealthTimer--;
			}
		}
		else if (setVortex)
		{
			bool flag14 = false;
			if (vortexStealthActive)
			{
				float num30 = stealth;
				stealth -= 0.04f;
				if (stealth < 0f)
				{
					stealth = 0f;
				}
				else
				{
					flag14 = true;
				}
				if (stealth == 0f && num30 != stealth && Main.netMode == 1)
				{
					NetMessage.SendData(84, -1, -1, null, whoAmI);
				}
				rangedDamage += (1f - stealth) * 0.8f;
				rangedCrit += (int)((1f - stealth) * 20f);
				aggro -= (int)((1f - stealth) * 1200f);
				accRunSpeed *= 0.3f;
				maxRunSpeed *= 0.3f;
				if (mount.Active)
				{
					vortexStealthActive = false;
				}
			}
			else
			{
				float num31 = stealth;
				stealth += 0.04f;
				if (stealth > 1f)
				{
					stealth = 1f;
				}
				else
				{
					flag14 = true;
				}
				if (stealth == 1f && num31 != stealth && Main.netMode == 1)
				{
					NetMessage.SendData(84, -1, -1, null, whoAmI);
				}
			}
			if (flag14)
			{
				if (Main.rand.Next(2) == 0)
				{
					Vector2 vector = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust obj2 = Main.dust[Dust.NewDust(base.Center - vector * 30f, 0, 0, 229)];
					obj2.noGravity = true;
					obj2.position = base.Center - vector * Main.rand.Next(5, 11);
					obj2.velocity = vector.RotatedBy(1.5707963705062866) * 4f;
					obj2.scale = 0.5f + Main.rand.NextFloat();
					obj2.fadeIn = 0.5f;
				}
				if (Main.rand.Next(2) == 0)
				{
					Vector2 vector2 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust obj3 = Main.dust[Dust.NewDust(base.Center - vector2 * 30f, 0, 0, 240)];
					obj3.noGravity = true;
					obj3.position = base.Center - vector2 * 12f;
					obj3.velocity = vector2.RotatedBy(-1.5707963705062866) * 2f;
					obj3.scale = 0.5f + Main.rand.NextFloat();
					obj3.fadeIn = 0.5f;
				}
			}
		}
		else
		{
			stealth = 1f;
		}
		if (manaSick)
		{
			magicDamage *= 1f - manaSickReduction;
		}
		float num32 = meleeSpeed - 1f;
		num32 *= ItemID.Sets.BonusMeleeSpeedMultiplier[inventory[selectedItem].type];
		meleeSpeed = 1f + num32;
		if (tileSpeed > 3f)
		{
			tileSpeed = 3f;
		}
		tileSpeed = 1f / tileSpeed;
		if (wallSpeed > 3f)
		{
			wallSpeed = 3f;
		}
		wallSpeed = 1f / wallSpeed;
		if (statManaMax2 > 400)
		{
			statManaMax2 = 400;
		}
		if (statDefense < 0)
		{
			statDefense = 0;
		}
		if (slowOgreSpit)
		{
			moveSpeed /= 3f;
			if (velocity.Y == 0f && Math.Abs(velocity.X) > 1f)
			{
				velocity.X /= 2f;
			}
		}
		else if (dazed)
		{
			moveSpeed /= 3f;
		}
		else if (slow)
		{
			moveSpeed /= 2f;
		}
		else if (chilled)
		{
			moveSpeed *= 0.75f;
		}
		if (shieldRaised)
		{
			moveSpeed /= 3f;
			if (velocity.Y == 0f && Math.Abs(velocity.X) > 3f)
			{
				velocity.X /= 2f;
			}
		}
		if (DD2Event.Ongoing)
		{
			DD2Event.FindArenaHitbox();
			if (DD2Event.ShouldBlockBuilding(base.Center))
			{
				noBuilding = true;
				AddBuff(199, 3);
			}
		}
		if ((double)pickSpeed < 0.3)
		{
			pickSpeed = 0.3f;
		}
		CapAttackSpeeds();
		UpdateLifeRegen();
		soulDrain = 0;
		UpdateManaRegen();
		if (manaRegenCount < 0)
		{
			manaRegenCount = 0;
		}
		if (statMana > statManaMax2)
		{
			statMana = statManaMax2;
		}
		runAcceleration *= moveSpeed;
		maxRunSpeed *= moveSpeed;
		UpdateJumpHeight();
		for (int num33 = 0; num33 < maxBuffs; num33++)
		{
			if (buffType[num33] > 0 && buffTime[num33] > 0 && buffImmune[buffType[num33]])
			{
				DelBuff(num33);
			}
		}
		if (brokenArmor)
		{
			statDefense /= 2;
		}
		if (witheredArmor)
		{
			statDefense /= 2;
		}
		if (witheredWeapon)
		{
			meleeDamage *= 0.5f;
			rangedDamage *= 0.5f;
			magicDamage *= 0.5f;
			minionDamage *= 0.5f;
			rangedMultDamage *= 0.5f;
		}
		lastTileRangeX = tileRangeX;
		lastTileRangeY = tileRangeY;
		if (mount.Active)
		{
			movementAbilitiesCache.CopyFrom(this);
		}
		else
		{
			movementAbilitiesCache.PasteInto(this);
		}
		if (mount.Active && mount.BlockExtraJumps)
		{
			canJumpAgain_Cloud = false;
			canJumpAgain_Sandstorm = false;
			canJumpAgain_Blizzard = false;
			canJumpAgain_Fart = false;
			canJumpAgain_Sail = false;
			canJumpAgain_Unicorn = false;
			canJumpAgain_Santank = false;
			canJumpAgain_WallOfFleshGoat = false;
			canJumpAgain_Basilisk = false;
		}
		else if (velocity.Y == 0f || sliding)
		{
			RefreshDoubleJumps();
		}
		else
		{
			if (!hasJumpOption_Cloud)
			{
				canJumpAgain_Cloud = false;
			}
			if (!hasJumpOption_Sandstorm)
			{
				canJumpAgain_Sandstorm = false;
			}
			if (!hasJumpOption_Blizzard)
			{
				canJumpAgain_Blizzard = false;
			}
			if (!hasJumpOption_Fart)
			{
				canJumpAgain_Fart = false;
			}
			if (!hasJumpOption_Sail)
			{
				canJumpAgain_Sail = false;
			}
			if (!hasJumpOption_Unicorn)
			{
				canJumpAgain_Unicorn = false;
			}
			if (!hasJumpOption_Santank)
			{
				canJumpAgain_Santank = false;
			}
			if (!hasJumpOption_WallOfFleshGoat)
			{
				canJumpAgain_WallOfFleshGoat = false;
			}
			if (!hasJumpOption_Basilisk)
			{
				canJumpAgain_Basilisk = false;
			}
		}
		if (!carpet)
		{
			canCarpet = false;
			carpetFrame = -1;
		}
		else if (velocity.Y == 0f || sliding)
		{
			canCarpet = true;
			carpetTime = 0;
			carpetFrame = -1;
			carpetFrameCounter = 0f;
		}
		if (gravDir == -1f)
		{
			canCarpet = false;
		}
		if (ropeCount > 0)
		{
			ropeCount--;
		}
		if (!pulley && !frozen && !webbed && !stoned && !controlJump && gravDir == 1f && ropeCount == 0 && grappling[0] == -1 && !tongued && !mount.Active)
		{
			FindPulley();
		}
		UpdatePettingAnimal();
		sitting.UpdateSitting(this);
		sleeping.UpdateState(this);
		eyeHelper.Update(this);
		if (pulley)
		{
			if (mount.Active)
			{
				pulley = false;
			}
			sandStorm = false;
			CancelAllJumpVisualEffects();
			int num34 = (int)(position.X + (float)(width / 2)) / 16;
			int num35 = (int)(position.Y - 8f) / 16;
			bool flag15 = false;
			if (pulleyDir == 0)
			{
				pulleyDir = 1;
			}
			if (pulleyDir == 1)
			{
				if (direction == -1 && controlLeft && (releaseLeft || leftTimer == 0))
				{
					pulleyDir = 2;
					flag15 = true;
				}
				else if ((direction == 1 && controlRight && releaseRight) || rightTimer == 0)
				{
					pulleyDir = 2;
					flag15 = true;
				}
				else
				{
					if (direction == 1 && controlLeft)
					{
						direction = -1;
						flag15 = true;
					}
					if (direction == -1 && controlRight)
					{
						direction = 1;
						flag15 = true;
					}
				}
			}
			else if (pulleyDir == 2)
			{
				if (direction == 1 && controlLeft)
				{
					flag15 = true;
					if (!Collision.SolidCollision(new Vector2(num34 * 16 + 8 - width / 2, position.Y), width, height))
					{
						pulleyDir = 1;
						direction = -1;
						flag15 = true;
					}
				}
				if (direction == -1 && controlRight)
				{
					flag15 = true;
					if (!Collision.SolidCollision(new Vector2(num34 * 16 + 8 - width / 2, position.Y), width, height))
					{
						pulleyDir = 1;
						direction = 1;
						flag15 = true;
					}
				}
			}
			int num36 = 1;
			if (controlLeft)
			{
				num36 = -1;
			}
			bool flag16 = CanMoveForwardOnRope(num36, num34, num35);
			if (controlLeft && direction == -1 && flag16)
			{
				instantMovementAccumulatedThisFrame.X += -1f;
			}
			if (controlRight && direction == 1 && flag16)
			{
				instantMovementAccumulatedThisFrame.X += 1f;
			}
			bool flag17 = false;
			if (!flag15 && ((controlLeft && (releaseLeft || leftTimer == 0)) || (controlRight && (releaseRight || rightTimer == 0))))
			{
				int num37 = num34 + num36;
				if (WorldGen.IsRope(num37, num35))
				{
					pulleyDir = 1;
					direction = num36;
					int num38 = num37 * 16 + 8 - width / 2;
					float y4 = position.Y;
					y4 = num35 * 16 + 22;
					if (Main.tile[num37, num35 - 1] == null)
					{
						Main.tile[num37, num35 - 1] = new Tile();
					}
					if (Main.tile[num37, num35 + 1] == null)
					{
						Main.tile[num37, num35 + 1] = new Tile();
					}
					if (WorldGen.IsRope(num37, num35 - 1) || WorldGen.IsRope(num37, num35 + 1))
					{
						y4 = num35 * 16 + 22;
					}
					if (Collision.SolidCollision(new Vector2(num38, y4), width, height))
					{
						pulleyDir = 2;
						direction = -num36;
						num38 = ((direction != 1) ? (num37 * 16 + 8 - width / 2 + -6) : (num37 * 16 + 8 - width / 2 + 6));
					}
					if (i == Main.myPlayer)
					{
						Main.cameraX = Main.cameraX + position.X - (float)num38;
					}
					position.X = num38;
					gfxOffY = position.Y - y4;
					position.Y = y4;
					flag17 = true;
				}
			}
			if (!flag17 && !flag15 && !controlUp && ((controlLeft && releaseLeft) || (controlRight && releaseRight)))
			{
				pulley = false;
				if (controlLeft && velocity.X == 0f)
				{
					velocity.X = -1f;
				}
				if (controlRight && velocity.X == 0f)
				{
					velocity.X = 1f;
				}
			}
			if (velocity.X != 0f)
			{
				pulley = false;
			}
			if (Main.tile[num34, num35] == null)
			{
				Main.tile[num34, num35] = new Tile();
			}
			if (!WorldGen.IsRope(num34, num35))
			{
				pulley = false;
			}
			if (gravDir != 1f)
			{
				pulley = false;
			}
			if (frozen || webbed || stoned)
			{
				pulley = false;
			}
			if (!pulley)
			{
				velocity.Y -= gravity;
			}
			if (controlJump)
			{
				pulley = false;
				jump = jumpHeight;
				velocity.Y = 0f - jumpSpeed;
			}
		}
		if (grapCount > 0)
		{
			pulley = false;
		}
		if (NPC.brainOfGravity >= 0 && NPC.brainOfGravity < 200 && Vector2.Distance(base.Center, Main.npc[NPC.brainOfGravity].Center) < 4000f)
		{
			forcedGravity = 10;
		}
		if (forcedGravity > 0)
		{
			gravDir = -1f;
		}
		if (pulley)
		{
			fallStart = (int)position.Y / 16;
			wingFrame = 0;
			if (wings == 4)
			{
				wingFrame = 3;
			}
			int num39 = (int)(position.X + (float)(width / 2)) / 16;
			int num40 = (int)(position.Y - 16f) / 16;
			int num41 = (int)(position.Y - 8f) / 16;
			bool flag18 = true;
			bool flag19 = false;
			if (WorldGen.IsRope(num39, num41 - 1) || WorldGen.IsRope(num39, num41 + 1))
			{
				flag19 = true;
			}
			if (Main.tile[num39, num40] == null)
			{
				Main.tile[num39, num40] = new Tile();
			}
			if (!WorldGen.IsRope(num39, num40))
			{
				flag18 = false;
				if (velocity.Y < 0f)
				{
					velocity.Y = 0f;
				}
			}
			if (flag19)
			{
				if (controlUp && flag18)
				{
					float x3 = position.X;
					float y5 = position.Y - Math.Abs(velocity.Y) - 2f;
					if (Collision.SolidCollision(new Vector2(x3, y5), width, height))
					{
						x3 = num39 * 16 + 8 - width / 2 + 6;
						if (!Collision.SolidCollision(new Vector2(x3, y5), width, (int)((float)height + Math.Abs(velocity.Y) + 2f)))
						{
							if (i == Main.myPlayer)
							{
								Main.cameraX = Main.cameraX + position.X - x3;
							}
							pulleyDir = 2;
							direction = 1;
							position.X = x3;
							velocity.X = 0f;
						}
						else
						{
							x3 = num39 * 16 + 8 - width / 2 + -6;
							if (!Collision.SolidCollision(new Vector2(x3, y5), width, (int)((float)height + Math.Abs(velocity.Y) + 2f)))
							{
								if (i == Main.myPlayer)
								{
									Main.cameraX = Main.cameraX + position.X - x3;
								}
								pulleyDir = 2;
								direction = -1;
								position.X = x3;
								velocity.X = 0f;
							}
						}
					}
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.7f;
					}
					if (velocity.Y > -3f)
					{
						velocity.Y -= 0.2f;
					}
					else
					{
						velocity.Y -= 0.02f;
					}
					if (velocity.Y < -8f)
					{
						velocity.Y = -8f;
					}
				}
				else if (controlDown)
				{
					float x4 = position.X;
					float y6 = position.Y;
					if (Collision.SolidCollision(new Vector2(x4, y6), width, (int)((float)height + Math.Abs(velocity.Y) + 2f)))
					{
						x4 = num39 * 16 + 8 - width / 2 + 6;
						if (!Collision.SolidCollision(new Vector2(x4, y6), width, (int)((float)height + Math.Abs(velocity.Y) + 2f)))
						{
							if (i == Main.myPlayer)
							{
								Main.cameraX = Main.cameraX + position.X - x4;
							}
							pulleyDir = 2;
							direction = 1;
							position.X = x4;
							velocity.X = 0f;
						}
						else
						{
							x4 = num39 * 16 + 8 - width / 2 + -6;
							if (!Collision.SolidCollision(new Vector2(x4, y6), width, (int)((float)height + Math.Abs(velocity.Y) + 2f)))
							{
								if (i == Main.myPlayer)
								{
									Main.cameraX = Main.cameraX + position.X - x4;
								}
								pulleyDir = 2;
								direction = -1;
								position.X = x4;
								velocity.X = 0f;
							}
						}
					}
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.7f;
					}
					if (velocity.Y < 3f)
					{
						velocity.Y += 0.2f;
					}
					else
					{
						velocity.Y += 0.1f;
					}
					if (velocity.Y > maxFallSpeed)
					{
						velocity.Y = maxFallSpeed;
					}
				}
				else
				{
					velocity.Y *= 0.7f;
					if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
					{
						velocity.Y = 0f;
					}
				}
			}
			else if (controlDown)
			{
				ropeCount = 10;
				pulley = false;
				velocity.Y = 1f;
			}
			else
			{
				velocity.Y = 0f;
				position.Y = num40 * 16 + 22;
			}
			float num42 = num39 * 16 + 8 - width / 2;
			if (pulleyDir == 1)
			{
				num42 = num39 * 16 + 8 - width / 2;
			}
			if (pulleyDir == 2)
			{
				num42 = num39 * 16 + 8 - width / 2 + 6 * direction;
			}
			if (i == Main.myPlayer)
			{
				Main.cameraX += position.X - num42;
				Main.cameraX = MathHelper.Clamp(Main.cameraX, -32f, 32f);
			}
			position.X = num42;
			pulleyFrameCounter += Math.Abs(velocity.Y * 0.75f);
			if (velocity.Y != 0f)
			{
				pulleyFrameCounter += 0.75f;
			}
			if (pulleyFrameCounter > 10f)
			{
				pulleyFrame++;
				pulleyFrameCounter = 0f;
			}
			if (pulleyFrame > 1)
			{
				pulleyFrame = 0;
			}
			canCarpet = true;
			carpetFrame = -1;
			wingTime = wingTimeMax;
			rocketTime = rocketTimeMax;
			rocketDelay = 0;
			rocketFrame = false;
			canRocket = false;
			rocketRelease = false;
			DashMovement();
			UpdateControlHolds();
		}
		else if (grappling[0] == -1 && !tongued)
		{
			if (wingsLogic > 0 && velocity.Y != 0f && !merman && !mount.Active)
			{
				WingAirLogicTweaks();
			}
			if (empressBrooch)
			{
				runAcceleration *= 1.75f;
			}
			if (hasMagiluminescence && velocity.Y == 0f)
			{
				runAcceleration *= 1.75f;
				maxRunSpeed *= 1.15f;
				accRunSpeed *= 1.15f;
				runSlowdown *= 1.75f;
			}
			if (shadowArmor)
			{
				runAcceleration *= 1.75f;
				maxRunSpeed *= 1.15f;
				accRunSpeed *= 1.15f;
				runSlowdown *= 1.75f;
			}
			if (mount.Active && mount.Type == 43 && velocity.Y != 0f)
			{
				runSlowdown = 0f;
			}
			if (sticky)
			{
				maxRunSpeed *= 0.25f;
				runAcceleration *= 0.25f;
				runSlowdown *= 2f;
				if (velocity.X > maxRunSpeed)
				{
					velocity.X = maxRunSpeed;
				}
				if (velocity.X < 0f - maxRunSpeed)
				{
					velocity.X = 0f - maxRunSpeed;
				}
			}
			else if (powerrun)
			{
				maxRunSpeed *= 3.5f;
				runAcceleration *= 1f;
				runSlowdown *= 2f;
			}
			else if (runningOnSand && desertBoots)
			{
				float num43 = 1.75f;
				maxRunSpeed *= num43;
				accRunSpeed *= num43;
				runAcceleration *= num43;
				runSlowdown *= num43;
			}
			else if (slippy2)
			{
				runAcceleration *= 0.6f;
				runSlowdown = 0f;
				if (iceSkate)
				{
					runAcceleration *= 3.5f;
					maxRunSpeed *= 1.25f;
				}
			}
			else if (slippy)
			{
				runAcceleration *= 0.7f;
				if (iceSkate)
				{
					runAcceleration *= 3.5f;
					maxRunSpeed *= 1.25f;
				}
				else
				{
					runSlowdown *= 0.1f;
				}
			}
			if (sandStorm)
			{
				runAcceleration *= 1.5f;
				maxRunSpeed *= 2f;
			}
			if (isPerformingJump_Blizzard && hasJumpOption_Blizzard)
			{
				runAcceleration *= 3f;
				maxRunSpeed *= 1.5f;
			}
			if (isPerformingJump_Fart && hasJumpOption_Fart)
			{
				runAcceleration *= 3f;
				maxRunSpeed *= 1.75f;
			}
			if (isPerformingJump_Unicorn && hasJumpOption_Unicorn)
			{
				runAcceleration *= 3f;
				maxRunSpeed *= 1.5f;
			}
			if (isPerformingJump_Santank && hasJumpOption_Santank)
			{
				runAcceleration *= 3f;
				maxRunSpeed *= 1.5f;
			}
			if (isPerformingJump_WallOfFleshGoat && hasJumpOption_WallOfFleshGoat)
			{
				runAcceleration *= 3f;
				maxRunSpeed *= 1.5f;
			}
			if (isPerformingJump_Basilisk && hasJumpOption_Basilisk)
			{
				runAcceleration *= 3f;
				maxRunSpeed *= 1.5f;
			}
			if (isPerformingJump_Sail && hasJumpOption_Sail)
			{
				runAcceleration *= 1.5f;
				maxRunSpeed *= 1.25f;
			}
			if (carpetFrame != -1)
			{
				runAcceleration *= 1.25f;
				maxRunSpeed *= 1.5f;
			}
			if (inventory[selectedItem].type == 3106 && stealth < 1f)
			{
				float num44 = maxRunSpeed / 2f * (1f - stealth);
				maxRunSpeed -= num44;
				accRunSpeed = maxRunSpeed;
			}
			if (mount.Active)
			{
				rocketBoots = 0;
				vanityRocketBoots = 0;
				wings = 0;
				wingsLogic = 0;
				maxRunSpeed = mount.RunSpeed;
				accRunSpeed = mount.DashSpeed;
				runAcceleration = mount.Acceleration;
				if (mount.Type == 12 && !MountFishronSpecial)
				{
					runAcceleration /= 2f;
					maxRunSpeed /= 2f;
				}
				mount.AbilityRecovery();
				if (mount.Cart && velocity.Y == 0f)
				{
					if (!Minecart.OnTrack(position, width, height))
					{
						fullRotation = 0f;
						onWrongGround = true;
						runSlowdown = 0.2f;
						if ((controlLeft && releaseLeft) || (controlRight && releaseRight))
						{
							mount.Dismount(this);
						}
					}
					else
					{
						runSlowdown = runAcceleration;
						onWrongGround = false;
					}
				}
				if (mount.Type == 8)
				{
					mount.UpdateDrill(this, controlUp, controlDown);
				}
			}
			HorizontalMovement();
			bool flag20 = !mount.Active;
			if (forcedGravity > 0)
			{
				gravDir = -1f;
			}
			else if (gravControl && flag20)
			{
				if (controlUp && releaseUp)
				{
					if (gravDir == 1f)
					{
						gravDir = -1f;
						fallStart = (int)(position.Y / 16f);
						jump = 0;
						SoundEngine.PlaySound(SoundID.Item8, position);
					}
					else
					{
						gravDir = 1f;
						fallStart = (int)(position.Y / 16f);
						jump = 0;
						SoundEngine.PlaySound(SoundID.Item8, position);
					}
				}
			}
			else if (gravControl2 && flag20)
			{
				if (controlUp && releaseUp)
				{
					if (gravDir == 1f)
					{
						gravDir = -1f;
						fallStart = (int)(position.Y / 16f);
						jump = 0;
						SoundEngine.PlaySound(SoundID.Item8, position);
					}
					else
					{
						gravDir = 1f;
						fallStart = (int)(position.Y / 16f);
						jump = 0;
						SoundEngine.PlaySound(SoundID.Item8, position);
					}
				}
			}
			else
			{
				gravDir = 1f;
			}
			if (velocity.Y == 0f && mount.Active && mount.CanHover() && controlUp && releaseUp)
			{
				velocity.Y = 0f - (mount.Acceleration + gravity + 0.001f);
			}
			UpdateControlHolds();
			sandStorm = false;
			JumpMovement();
			if (wingsLogic == 0)
			{
				wingTime = 0f;
			}
			if (rocketBoots == 0)
			{
				rocketTime = 0;
			}
			if (jump == 0)
			{
				CancelAllJumpVisualEffects();
			}
			DashMovement();
			WallslideMovement();
			CarpetMovement();
			DoubleJumpVisuals();
			if (wingsLogic > 0 || mount.Active)
			{
				sandStorm = false;
			}
			if (((gravDir == 1f && velocity.Y > 0f - jumpSpeed) || (gravDir == -1f && velocity.Y < jumpSpeed)) && velocity.Y != 0f)
			{
				canRocket = true;
			}
			bool flag21 = false;
			if (((velocity.Y == 0f || sliding) && releaseJump) || (autoJump && justJumped))
			{
				mount.ResetFlightTime(velocity.X);
				wingTime = wingTimeMax;
			}
			if (wingsLogic > 0 && controlJump && wingTime > 0f && jump == 0 && velocity.Y != 0f)
			{
				flag21 = true;
			}
			if ((wingsLogic == 22 || wingsLogic == 28 || wingsLogic == 30 || wingsLogic == 32 || wingsLogic == 29 || wingsLogic == 33 || wingsLogic == 35 || wingsLogic == 37 || wingsLogic == 45) && controlJump && TryingToHoverDown && wingTime > 0f)
			{
				flag21 = true;
			}
			if (frozen || webbed || stoned)
			{
				if (mount.Active)
				{
					mount.Dismount(this);
				}
				velocity.Y += gravity;
				if (velocity.Y > maxFallSpeed)
				{
					velocity.Y = maxFallSpeed;
				}
				sandStorm = false;
				CancelAllJumpVisualEffects();
			}
			else
			{
				if (flag21)
				{
					WingAirVisuals();
					WingMovement();
				}
				WingFrame(flag21);
				if (wingsLogic > 0 && rocketBoots != 0 && velocity.Y != 0f && rocketTime != 0)
				{
					int num45 = 6;
					int num46 = rocketTime * num45;
					wingTime += num46;
					if (wingTime > (float)(wingTimeMax + num46))
					{
						wingTime = wingTimeMax + num46;
					}
					rocketTime = 0;
				}
				if (flag21 && wings != 4 && wings != 22 && wings != 0 && wings != 24 && wings != 28 && wings != 30 && wings != 33 && wings != 45)
				{
					bool flag22 = wingFrame == 3;
					if (wings == 43 || wings == 44)
					{
						flag22 = wingFrame == 4;
					}
					if (flag22)
					{
						if (!flapSound)
						{
							SoundEngine.PlaySound(SoundID.Item32, position);
						}
						flapSound = true;
					}
					else
					{
						flapSound = false;
					}
				}
				if (velocity.Y == 0f || sliding || (autoJump && justJumped))
				{
					rocketTime = rocketTimeMax;
				}
				if (empressBrooch)
				{
					rocketTime = rocketTimeMax;
				}
				if ((wingTime == 0f || wingsLogic == 0) && rocketBoots != 0 && controlJump && rocketDelay == 0 && canRocket && rocketRelease && !canJumpAgain_Cloud)
				{
					if (rocketTime > 0)
					{
						rocketTime--;
						rocketDelay = 10;
						if (rocketDelay2 <= 0)
						{
							if (rocketBoots == 1)
							{
								rocketDelay2 = 30;
							}
							else if (rocketBoots == 2 || rocketBoots == 5 || rocketBoots == 3 || rocketBoots == 4)
							{
								rocketDelay2 = 15;
							}
						}
						if (rocketSoundDelay <= 0)
						{
							if (vanityRocketBoots == 1 || vanityRocketBoots == 5)
							{
								rocketSoundDelay = 30;
								SoundEngine.PlaySound(SoundID.Item13, position);
							}
							else if (vanityRocketBoots == 2 || vanityRocketBoots == 3 || vanityRocketBoots == 4)
							{
								rocketSoundDelay = 15;
								SoundEngine.PlaySound(SoundID.Item24, position);
							}
						}
					}
					else
					{
						canRocket = false;
					}
				}
				if (rocketSoundDelay > 0)
				{
					rocketSoundDelay--;
				}
				if (rocketDelay2 > 0)
				{
					rocketDelay2--;
				}
				if (rocketDelay == 0)
				{
					rocketFrame = false;
				}
				if (rocketDelay > 0)
				{
					rocketFrame = true;
					RocketBootVisuals();
					if (rocketDelay == 0)
					{
						releaseJump = true;
					}
					rocketDelay--;
					velocity.Y -= 0.1f * gravDir;
					if (gravDir == 1f)
					{
						if (velocity.Y > 0f)
						{
							velocity.Y -= 0.5f;
						}
						else if ((double)velocity.Y > (double)(0f - jumpSpeed) * 0.5)
						{
							velocity.Y -= 0.1f;
						}
						if (velocity.Y < (0f - jumpSpeed) * 1.5f)
						{
							velocity.Y = (0f - jumpSpeed) * 1.5f;
						}
					}
					else
					{
						if (velocity.Y < 0f)
						{
							velocity.Y += 0.5f;
						}
						else if ((double)velocity.Y < (double)jumpSpeed * 0.5)
						{
							velocity.Y += 0.1f;
						}
						if (velocity.Y > jumpSpeed * 1.5f)
						{
							velocity.Y = jumpSpeed * 1.5f;
						}
					}
				}
				else if (!flag21)
				{
					if (mount.CanHover())
					{
						mount.Hover(this);
					}
					else if (mount.CanFly() && controlJump && jump == 0)
					{
						if (mount.Flight())
						{
							if (TryingToHoverDown)
							{
								velocity.Y *= 0.9f;
								if (velocity.Y > -1f && (double)velocity.Y < 0.5)
								{
									velocity.Y = 1E-05f;
								}
							}
							else
							{
								float num47 = jumpSpeed;
								if (mount.Type == 50)
								{
									num47 *= 0.5f;
								}
								if (velocity.Y > 0f)
								{
									velocity.Y -= 0.5f;
								}
								else if ((double)velocity.Y > (double)(0f - num47) * 1.5)
								{
									velocity.Y -= 0.1f;
								}
								if (velocity.Y < (0f - num47) * 1.5f)
								{
									velocity.Y = (0f - num47) * 1.5f;
								}
							}
						}
						else
						{
							velocity.Y += gravity / 3f * gravDir;
							if (gravDir == 1f)
							{
								if (velocity.Y > maxFallSpeed / 3f && !TryingToHoverDown)
								{
									velocity.Y = maxFallSpeed / 3f;
								}
							}
							else if (velocity.Y < (0f - maxFallSpeed) / 3f && !TryingToHoverUp)
							{
								velocity.Y = (0f - maxFallSpeed) / 3f;
							}
						}
					}
					else if (slowFall && !TryingToHoverDown)
					{
						if (TryingToHoverUp)
						{
							gravity = gravity / 10f * gravDir;
						}
						else
						{
							gravity = gravity / 3f * gravDir;
						}
						velocity.Y += gravity;
					}
					else if (wingsLogic > 0 && controlJump && velocity.Y > 0f)
					{
						bool noLightEmittence = wingsLogic != wings;
						fallStart = (int)(position.Y / 16f);
						if (velocity.Y > 0f)
						{
							if (wings == 10 && Main.rand.Next(3) == 0)
							{
								int num48 = 4;
								if (direction == 1)
								{
									num48 = -40;
								}
								int num49 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num48, position.Y + (float)(height / 2) - 15f), 30, 30, 76, 0f, 0f, 50, default(Color), 0.6f);
								Main.dust[num49].fadeIn = 1.1f;
								Main.dust[num49].noGravity = true;
								Main.dust[num49].noLight = true;
								Main.dust[num49].velocity *= 0.3f;
								Main.dust[num49].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
							}
							if (wings == 34 && ShouldDrawWingsThatAreAlwaysAnimated() && Main.rand.Next(3) == 0)
							{
								int num50 = 4;
								if (direction == 1)
								{
									num50 = -40;
								}
								int num51 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num50, position.Y + (float)(height / 2) - 15f), 30, 30, 261, 0f, 0f, 50, default(Color), 0.6f);
								Main.dust[num51].fadeIn = 1.1f;
								Main.dust[num51].noGravity = true;
								Main.dust[num51].noLight = true;
								Main.dust[num51].noLightEmittence = noLightEmittence;
								Main.dust[num51].velocity *= 0.3f;
								Main.dust[num51].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
							}
							if (wings == 40)
							{
								ShouldDrawWingsThatAreAlwaysAnimated();
							}
							if (wings == 44)
							{
								ShouldDrawWingsThatAreAlwaysAnimated();
							}
							if (wings == 9 && Main.rand.Next(3) == 0)
							{
								int num52 = 8;
								if (direction == 1)
								{
									num52 = -40;
								}
								int num53 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num52, position.Y + (float)(height / 2) - 15f), 30, 30, 6, 0f, 0f, 200, default(Color), 2f);
								Main.dust[num53].noGravity = true;
								Main.dust[num53].velocity *= 0.3f;
								Main.dust[num53].noLightEmittence = noLightEmittence;
								Main.dust[num53].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
							}
							if (wings == 29 && Main.rand.Next(3) == 0)
							{
								int num54 = 8;
								if (direction == 1)
								{
									num54 = -40;
								}
								int num55 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num54, position.Y + (float)(height / 2) - 15f), 30, 30, 6, 0f, 0f, 100, default(Color), 2.4f);
								Main.dust[num55].noGravity = true;
								Main.dust[num55].velocity *= 0.3f;
								Main.dust[num55].noLightEmittence = noLightEmittence;
								if (Main.rand.Next(10) == 0)
								{
									Main.dust[num55].fadeIn = 2f;
								}
								Main.dust[num55].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
							}
							if (wings == 6)
							{
								if (Main.rand.Next(10) == 0)
								{
									int num56 = 4;
									if (direction == 1)
									{
										num56 = -40;
									}
									int num57 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num56, position.Y + (float)(height / 2) - 12f), 30, 20, 55, 0f, 0f, 200);
									Main.dust[num57].noLightEmittence = noLightEmittence;
									Main.dust[num57].velocity *= 0.3f;
									Main.dust[num57].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
								}
							}
							else if (wings == 5 && Main.rand.Next(6) == 0)
							{
								int num58 = 6;
								if (direction == 1)
								{
									num58 = -30;
								}
								int num59 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num58, position.Y), 18, height, 58, 0f, 0f, 255, default(Color), 1.2f);
								Main.dust[num59].velocity *= 0.3f;
								Main.dust[num59].noLightEmittence = noLightEmittence;
								Main.dust[num59].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
							}
							if (wings == 4)
							{
								rocketDelay2--;
								if (rocketDelay2 <= 0)
								{
									SoundEngine.PlaySound(SoundID.Item13, position);
									rocketDelay2 = 60;
								}
								int type = 6;
								float scale = 1.5f;
								int alpha = 100;
								float x5 = position.X + (float)(width / 2) + 16f;
								if (direction > 0)
								{
									x5 = position.X + (float)(width / 2) - 26f;
								}
								float num60 = position.Y + (float)height - 18f;
								if (Main.rand.Next(2) == 1)
								{
									x5 = position.X + (float)(width / 2) + 8f;
									if (direction > 0)
									{
										x5 = position.X + (float)(width / 2) - 20f;
									}
									num60 += 6f;
								}
								int num61 = Dust.NewDust(new Vector2(x5, num60), 8, 8, type, 0f, 0f, alpha, default(Color), scale);
								Main.dust[num61].velocity.X *= 0.3f;
								Main.dust[num61].velocity.Y += 10f;
								Main.dust[num61].noGravity = true;
								Main.dust[num61].noLightEmittence = noLightEmittence;
								Main.dust[num61].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
								wingFrameCounter++;
								if (wingFrameCounter > 4)
								{
									wingFrame++;
									wingFrameCounter = 0;
									if (wingFrame >= 3)
									{
										wingFrame = 0;
									}
								}
							}
							else if (wings != 22 && wings != 28)
							{
								if (wings == 30)
								{
									wingFrameCounter++;
									int num62 = 5;
									if (wingFrameCounter >= num62 * 3)
									{
										wingFrameCounter = 0;
									}
									wingFrame = 1 + wingFrameCounter / num62;
								}
								else if (wings == 34)
								{
									wingFrameCounter++;
									int num63 = 7;
									if (wingFrameCounter >= num63 * 6)
									{
										wingFrameCounter = 0;
									}
									wingFrame = wingFrameCounter / num63;
								}
								else if (wings != 45)
								{
									if (wings == 40)
									{
										wingFrame = 0;
									}
									else if (wings == 44)
									{
										wingFrame = 2;
									}
									else if (wings == 39)
									{
										wingFrameCounter++;
										int num64 = 12;
										if (wingFrameCounter >= num64 * 6)
										{
											wingFrameCounter = 0;
										}
										wingFrame = wingFrameCounter / num64;
									}
									else if (wings == 26)
									{
										int num65 = 6;
										if (direction == 1)
										{
											num65 = -30;
										}
										int num66 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num65, position.Y), 18, height, 217, 0f, 0f, 100, default(Color), 1.4f);
										Main.dust[num66].noGravity = true;
										Main.dust[num66].noLight = true;
										Main.dust[num66].velocity /= 4f;
										Main.dust[num66].velocity -= velocity;
										Main.dust[num66].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
										if (Main.rand.Next(2) == 0)
										{
											num65 = -24;
											if (direction == 1)
											{
												num65 = 12;
											}
											float num67 = position.Y;
											if (gravDir == -1f)
											{
												num67 += (float)(height / 2);
											}
											num66 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num65, num67), 12, height / 2, 217, 0f, 0f, 100, default(Color), 1.4f);
											Main.dust[num66].noGravity = true;
											Main.dust[num66].noLight = true;
											Main.dust[num66].velocity /= 4f;
											Main.dust[num66].velocity -= velocity;
											Main.dust[num66].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
										}
										wingFrame = 2;
									}
									else if (wings == 37)
									{
										Color color = Color.Lerp(Color.Black, Color.White, Main.rand.NextFloat());
										int num68 = 6;
										if (direction == 1)
										{
											num68 = -30;
										}
										int num69 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num68, position.Y), 24, height, Utils.SelectRandom<int>(Main.rand, 31, 31, 31), 0f, 0f, 100, default(Color), 0.7f);
										Main.dust[num69].noGravity = true;
										Main.dust[num69].noLight = true;
										Main.dust[num69].velocity /= 4f;
										Main.dust[num69].velocity -= velocity;
										Main.dust[num69].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
										if (Main.dust[num69].type == 55)
										{
											Main.dust[num69].color = color;
										}
										if (Main.rand.Next(3) == 0)
										{
											num68 = -24;
											if (direction == 1)
											{
												num68 = 12;
											}
											float num70 = position.Y;
											if (gravDir == -1f)
											{
												num70 += (float)(height / 2);
											}
											num69 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num68, num70), 12, height / 2, Utils.SelectRandom<int>(Main.rand, 31, 31, 31), 0f, 0f, 140, default(Color), 0.7f);
											Main.dust[num69].noGravity = true;
											Main.dust[num69].noLight = true;
											Main.dust[num69].velocity /= 4f;
											Main.dust[num69].velocity -= velocity;
											Main.dust[num69].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
											if (Main.dust[num69].type == 55)
											{
												Main.dust[num69].color = color;
											}
										}
										wingFrame = 2;
									}
									else if (wings != 24)
									{
										if (wings == 43)
										{
											wingFrame = 1;
										}
										else if (wings == 12)
										{
											wingFrame = 3;
										}
										else
										{
											wingFrame = 2;
										}
									}
								}
							}
						}
						velocity.Y += gravity / 3f * gravDir;
						if (gravDir == 1f)
						{
							if (velocity.Y > maxFallSpeed / 3f && !TryingToHoverDown)
							{
								velocity.Y = maxFallSpeed / 3f;
							}
						}
						else if (velocity.Y < (0f - maxFallSpeed) / 3f && !TryingToHoverUp)
						{
							velocity.Y = (0f - maxFallSpeed) / 3f;
						}
					}
					else if (cartRampTime <= 0)
					{
						velocity.Y += gravity * gravDir;
					}
					else
					{
						cartRampTime--;
					}
				}
				if (!mount.Active || mount.Type != 5)
				{
					if (gravDir == 1f)
					{
						if (velocity.Y > maxFallSpeed)
						{
							velocity.Y = maxFallSpeed;
						}
						if (slowFall && velocity.Y > maxFallSpeed / 3f && !TryingToHoverDown)
						{
							velocity.Y = maxFallSpeed / 3f;
						}
						if (slowFall && velocity.Y > maxFallSpeed / 5f && TryingToHoverUp)
						{
							velocity.Y = maxFallSpeed / 10f;
						}
					}
					else
					{
						if (velocity.Y < 0f - maxFallSpeed)
						{
							velocity.Y = 0f - maxFallSpeed;
						}
						if (slowFall && velocity.Y < (0f - maxFallSpeed) / 3f && !TryingToHoverDown)
						{
							velocity.Y = (0f - maxFallSpeed) / 3f;
						}
						if (slowFall && velocity.Y < (0f - maxFallSpeed) / 5f && TryingToHoverUp)
						{
							velocity.Y = (0f - maxFallSpeed) / 10f;
						}
					}
				}
			}
		}
		else
		{
			UpdateControlHolds();
		}
		if (mount.Active)
		{
			wingFrame = 0;
		}
		if ((wingsLogic == 22 || wingsLogic == 28 || wingsLogic == 30 || wingsLogic == 31 || wingsLogic == 33 || wingsLogic == 35 || wingsLogic == 37 || wingsLogic == 45) && TryingToHoverDown && controlJump && wingTime > 0f && !merman)
		{
			float num71 = 0.9f;
			if (wingsLogic == 45)
			{
				num71 = 0.8f;
			}
			velocity.Y *= num71;
			if (velocity.Y > -2f && velocity.Y < 1f)
			{
				velocity.Y = 1E-05f;
			}
		}
		if (wingsLogic == 37 && TryingToHoverDown && controlJump && wingTime > 0f && !merman)
		{
			velocity.Y *= 0.92f;
			if (velocity.Y > -2f && velocity.Y < 1f)
			{
				velocity.Y = 1E-05f;
			}
		}
		GrabItems(i);
		LookForTileInteractions();
		if (tongued)
		{
			StopVanityActions();
			bool flag23 = false;
			if (Main.wofNPCIndex >= 0)
			{
				NPC nPC = Main.npc[Main.wofNPCIndex];
				float num72 = nPC.Center.X + (float)(nPC.direction * 200);
				float y7 = nPC.Center.Y;
				Vector2 center = base.Center;
				float num73 = num72 - center.X;
				float num74 = y7 - center.Y;
				float num75 = (float)Math.Sqrt(num73 * num73 + num74 * num74);
				float num76 = 11f;
				if (Main.expertMode)
				{
					float value = 22f;
					float amount = Math.Min(1f, nPC.velocity.Length() / 5f);
					num76 = MathHelper.Lerp(num76, value, amount);
				}
				float num77 = num75;
				if (num75 > num76)
				{
					num77 = num76 / num75;
				}
				else
				{
					num77 = 1f;
					flag23 = true;
				}
				num73 *= num77;
				num74 *= num77;
				velocity.X = num73;
				velocity.Y = num74;
			}
			else
			{
				flag23 = true;
			}
			if (flag23 && Main.myPlayer == whoAmI)
			{
				for (int num78 = 0; num78 < maxBuffs; num78++)
				{
					if (buffType[num78] == 38)
					{
						DelBuff(num78);
					}
				}
			}
		}
		if (Main.myPlayer == whoAmI)
		{
			WOFTongue();
			if (controlHook)
			{
				if (releaseHook)
				{
					QuickGrapple();
				}
				releaseHook = false;
			}
			else
			{
				releaseHook = true;
			}
			if (talkNPC >= 0)
			{
				Rectangle rectangle = new Rectangle((int)(position.X + (float)(width / 2) - (float)(tileRangeX * 16)), (int)(position.Y + (float)(height / 2) - (float)(tileRangeY * 16)), tileRangeX * 16 * 2, tileRangeY * 16 * 2);
				Rectangle value2 = new Rectangle((int)Main.npc[talkNPC].position.X, (int)Main.npc[talkNPC].position.Y, Main.npc[talkNPC].width, Main.npc[talkNPC].height);
				if (!rectangle.Intersects(value2) || chest != -1 || !Main.npc[talkNPC].active || tileEntityAnchor.InUse)
				{
					if (chest == -1)
					{
						SoundEngine.PlaySound(11);
					}
					SetTalkNPC(-1);
					Main.npcChatCornerItem = 0;
					Main.npcChatText = "";
				}
			}
			if (sign >= 0)
			{
				Rectangle value3 = new Rectangle((int)(position.X + (float)(width / 2) - (float)(tileRangeX * 16)), (int)(position.Y + (float)(height / 2) - (float)(tileRangeY * 16)), tileRangeX * 16 * 2, tileRangeY * 16 * 2);
				try
				{
					bool flag24 = false;
					if (Main.sign[sign] == null)
					{
						flag24 = true;
					}
					if (!flag24 && !new Rectangle(Main.sign[sign].x * 16, Main.sign[sign].y * 16, 32, 32).Intersects(value3))
					{
						flag24 = true;
					}
					if (flag24)
					{
						SoundEngine.PlaySound(11);
						sign = -1;
						Main.editSign = false;
						Main.npcChatText = "";
					}
				}
				catch
				{
					SoundEngine.PlaySound(11);
					sign = -1;
					Main.editSign = false;
					Main.npcChatText = "";
				}
			}
			if (Main.editSign)
			{
				if (sign == -1)
				{
					Main.editSign = false;
				}
				else
				{
					Main.InputTextSign();
				}
			}
			else if (Main.editChest)
			{
				Main.InputTextChest();
				if (Main.player[Main.myPlayer].chest == -1)
				{
					Main.editChest = false;
				}
			}
			if (mount.Active && mount.Cart && velocity.Length() > 4f)
			{
				Rectangle rectangle2 = new Rectangle((int)position.X, (int)position.Y, width, height);
				if (velocity.X < -1f)
				{
					rectangle2.X -= 15;
				}
				if (velocity.X > 1f)
				{
					rectangle2.Width += 15;
				}
				if (velocity.X < -10f)
				{
					rectangle2.X -= 10;
				}
				if (velocity.X > 10f)
				{
					rectangle2.Width += 10;
				}
				if (velocity.Y < -1f)
				{
					rectangle2.Y -= 10;
				}
				if (velocity.Y > 1f)
				{
					rectangle2.Height += 10;
				}
				for (int num79 = 0; num79 < 200; num79++)
				{
					if (Main.npc[num79].active && !Main.npc[num79].dontTakeDamage && !Main.npc[num79].friendly && Main.npc[num79].immune[i] == 0 && CanNPCBeHitByPlayerOrPlayerProjectile(Main.npc[num79]) && rectangle2.Intersects(new Rectangle((int)Main.npc[num79].position.X, (int)Main.npc[num79].position.Y, Main.npc[num79].width, Main.npc[num79].height)))
					{
						float num80 = meleeCrit;
						if (num80 < (float)rangedCrit)
						{
							num80 = rangedCrit;
						}
						if (num80 < (float)magicCrit)
						{
							num80 = magicCrit;
						}
						bool crit = false;
						if ((float)Main.rand.Next(1, 101) <= num80)
						{
							crit = true;
						}
						float currentSpeed = velocity.Length() / maxRunSpeed;
						GetMinecartDamage(currentSpeed, out var damage2, out var knockback);
						int num81 = 1;
						if (velocity.X < 0f)
						{
							num81 = -1;
						}
						if (Main.npc[num79].knockBackResist < 1f && Main.npc[num79].knockBackResist > 0f)
						{
							knockback /= Main.npc[num79].knockBackResist;
						}
						if (whoAmI == Main.myPlayer)
						{
							ApplyDamageToNPC(Main.npc[num79], damage2, knockback, num81, crit);
						}
						Main.npc[num79].immune[i] = 30;
						if (!Main.npc[num79].active)
						{
							AchievementsHelper.HandleSpecialEvent(this, 9);
						}
					}
				}
			}
			Update_NPCCollision();
			if (!shimmering)
			{
				Collision.HurtTile hurtTile = GetHurtTile();
				if (hurtTile.type >= 0)
				{
					ApplyTouchDamage(hurtTile.type, hurtTile.x, hurtTile.y);
				}
			}
			TryToShimmerUnstuck();
		}
		if (controlRight)
		{
			releaseRight = false;
		}
		else
		{
			releaseRight = true;
			rightTimer = 7;
		}
		if (controlLeft)
		{
			releaseLeft = false;
		}
		else
		{
			releaseLeft = true;
			leftTimer = 7;
		}
		releaseDown = !controlDown;
		if (rightTimer > 0)
		{
			rightTimer--;
		}
		else if (controlRight)
		{
			rightTimer = 7;
		}
		if (leftTimer > 0)
		{
			leftTimer--;
		}
		else if (controlLeft)
		{
			leftTimer = 7;
		}
		GrappleMovement();
		StickyMovement();
		CheckDrowning();
		if (gravDir == -1f)
		{
			waterWalk = false;
			waterWalk2 = false;
		}
		int num82 = height;
		if (waterWalk)
		{
			num82 -= 6;
		}
		bool flag25 = false;
		if (!shimmering)
		{
			flag25 = Collision.LavaCollision(position, width, num82);
		}
		if (flag25)
		{
			if (!lavaImmune && Main.myPlayer == i && hurtCooldowns[4] <= 0)
			{
				if (lavaTime > 0)
				{
					lavaTime--;
				}
				else
				{
					int num83 = 80;
					int num84 = 420;
					if (Main.remixWorld)
					{
						num83 = 200;
						num84 = 630;
					}
					if (!ashWoodBonus || !lavaRose)
					{
						if (ashWoodBonus)
						{
							if (Main.remixWorld)
							{
								num83 = 145;
							}
							num83 /= 2;
							num84 -= 210;
						}
						if (lavaRose)
						{
							num83 -= 45;
							num84 -= 210;
						}
						if (num83 > 0)
						{
							Hurt(PlayerDeathReason.ByOther(2), num83, 0, pvp: false, quiet: false, Crit: false, 4);
						}
						if (num84 > 0)
						{
							AddBuff(24, num84);
						}
					}
				}
			}
			lavaWet = true;
		}
		else
		{
			lavaWet = false;
			if (lavaTime < lavaMax)
			{
				lavaTime++;
			}
		}
		if (lavaTime > lavaMax)
		{
			lavaTime = lavaMax;
		}
		if (waterWalk2 && !waterWalk)
		{
			num82 -= 6;
		}
		bool num85 = Collision.WetCollision(position, width, height);
		bool flag26 = Collision.honey;
		bool shimmer = Collision.shimmer;
		if (shimmer)
		{
			shimmerWet = true;
			if (whoAmI == Main.myPlayer && !shimmerImmune && !shimmerUnstuckHelper.ShouldUnstuck)
			{
				int num86 = (int)(base.Center.X / 16f);
				int num87 = (int)((position.Y + 1f) / 16f);
				if (Main.tile[num86, num87] != null && Main.tile[num86, num87].shimmer() && Main.tile[num86, num87].liquid >= 0 && position.Y / 16f < (float)Main.UnderworldLayer)
				{
					AddBuff(353, 60);
				}
			}
		}
		if (flag26 && !shimmering)
		{
			AddBuff(48, 1800);
			honeyWet = true;
		}
		if (num85)
		{
			if ((onFire || onFire3) && !lavaWet)
			{
				for (int num88 = 0; num88 < maxBuffs; num88++)
				{
					int num89 = buffType[num88];
					if (num89 == 24 || num89 == 323)
					{
						DelBuff(num88);
					}
				}
			}
			if (!wet)
			{
				if (wetCount == 0)
				{
					wetCount = 10;
					if (!shimmering)
					{
						if (!flag25)
						{
							if (shimmerWet)
							{
								for (int num90 = 0; num90 < 50; num90++)
								{
									int num91 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2)), width + 12, 24, 308);
									Main.dust[num91].velocity.Y -= 4f;
									Main.dust[num91].velocity.X *= 2.5f;
									Main.dust[num91].scale = 0.8f;
									Main.dust[num91].noGravity = true;
									switch (Main.rand.Next(6))
									{
									case 0:
										Main.dust[num91].color = new Color(255, 255, 210);
										break;
									case 1:
										Main.dust[num91].color = new Color(190, 245, 255);
										break;
									case 2:
										Main.dust[num91].color = new Color(255, 150, 255);
										break;
									default:
										Main.dust[num91].color = new Color(190, 175, 255);
										break;
									}
								}
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 2);
							}
							else if (honeyWet)
							{
								for (int num92 = 0; num92 < 20; num92++)
								{
									int num93 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 152);
									Main.dust[num93].velocity.Y -= 1f;
									Main.dust[num93].velocity.X *= 2.5f;
									Main.dust[num93].scale = 1.3f;
									Main.dust[num93].alpha = 100;
									Main.dust[num93].noGravity = true;
								}
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
							}
							else
							{
								for (int num94 = 0; num94 < 50; num94++)
								{
									int num95 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, Dust.dustWater());
									Main.dust[num95].velocity.Y -= 3f;
									Main.dust[num95].velocity.X *= 2.5f;
									Main.dust[num95].scale = 0.8f;
									Main.dust[num95].alpha = 100;
									Main.dust[num95].noGravity = true;
								}
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 0);
							}
						}
						else
						{
							for (int num96 = 0; num96 < 20; num96++)
							{
								int num97 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 35);
								Main.dust[num97].velocity.Y -= 1.5f;
								Main.dust[num97].velocity.X *= 2.5f;
								Main.dust[num97].scale = 1.3f;
								Main.dust[num97].alpha = 100;
								Main.dust[num97].noGravity = true;
							}
							SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
						}
					}
				}
				wet = true;
				if (ShouldFloatInWater)
				{
					velocity.Y /= 2f;
					if (velocity.Y > 3f)
					{
						velocity.Y = 3f;
					}
				}
			}
		}
		else if (wet)
		{
			wet = false;
			if (jump > jumpHeight / 5 && wetSlime == 0)
			{
				jump = jumpHeight / 5;
			}
			if (wetCount == 0)
			{
				wetCount = 10;
				if (!shimmering)
				{
					if (!lavaWet)
					{
						if (shimmerWet)
						{
							for (int num98 = 0; num98 < 50; num98++)
							{
								int num99 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2)), width + 12, 24, 308);
								Main.dust[num99].velocity.Y -= 4f;
								Main.dust[num99].velocity.X *= 2.5f;
								Main.dust[num99].scale = 0.75f;
								Main.dust[num99].noGravity = true;
								switch (Main.rand.Next(6))
								{
								case 0:
									Main.dust[num99].color = new Color(255, 255, 210);
									break;
								case 1:
									Main.dust[num99].color = new Color(190, 245, 255);
									break;
								case 2:
									Main.dust[num99].color = new Color(255, 150, 255);
									break;
								default:
									Main.dust[num99].color = new Color(190, 175, 255);
									break;
								}
							}
							SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 3);
						}
						else if (honeyWet)
						{
							for (int num100 = 0; num100 < 20; num100++)
							{
								int num101 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 152);
								Main.dust[num101].velocity.Y -= 1f;
								Main.dust[num101].velocity.X *= 2.5f;
								Main.dust[num101].scale = 1.3f;
								Main.dust[num101].alpha = 100;
								Main.dust[num101].noGravity = true;
							}
							SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
						}
						else
						{
							for (int num102 = 0; num102 < 50; num102++)
							{
								int num103 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2)), width + 12, 24, Dust.dustWater());
								Main.dust[num103].velocity.Y -= 4f;
								Main.dust[num103].velocity.X *= 2.5f;
								Main.dust[num103].scale = 0.8f;
								Main.dust[num103].alpha = 100;
								Main.dust[num103].noGravity = true;
							}
							SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 0);
						}
					}
					else
					{
						for (int num104 = 0; num104 < 20; num104++)
						{
							int num105 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 35);
							Main.dust[num105].velocity.Y -= 1.5f;
							Main.dust[num105].velocity.X *= 2.5f;
							Main.dust[num105].scale = 1.3f;
							Main.dust[num105].alpha = 100;
							Main.dust[num105].noGravity = true;
						}
						SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
					}
				}
			}
		}
		if (!flag26)
		{
			honeyWet = false;
		}
		if (!shimmer)
		{
			shimmerWet = false;
		}
		if (!wet)
		{
			lavaWet = false;
			honeyWet = false;
			shimmerWet = false;
		}
		if (wetCount > 0)
		{
			wetCount--;
		}
		if (wetSlime > 0)
		{
			wetSlime--;
		}
		if (wet && mount.Active)
		{
			switch (mount.Type)
			{
			case 5:
			case 7:
				if (whoAmI == Main.myPlayer)
				{
					mount.Dismount(this);
				}
				break;
			case 3:
			case 50:
				wetSlime = 30;
				if (velocity.Y > 2f)
				{
					velocity.Y *= 0.9f;
				}
				velocity.Y -= 0.5f;
				if (velocity.Y < -4f)
				{
					velocity.Y = -4f;
				}
				break;
			}
		}
		if (Main.expertMode && ZoneSnow && wet && !lavaWet && !honeyWet && !arcticDivingGear && environmentBuffImmunityTimer == 0)
		{
			AddBuff(46, 150);
		}
		float num106 = 1f + Math.Abs(velocity.X) / 3f;
		if (gfxOffY > 0f)
		{
			gfxOffY -= num106 * stepSpeed;
			if (gfxOffY < 0f)
			{
				gfxOffY = 0f;
			}
		}
		else if (gfxOffY < 0f)
		{
			gfxOffY += num106 * stepSpeed;
			if (gfxOffY > 0f)
			{
				gfxOffY = 0f;
			}
		}
		if (gfxOffY > 32f)
		{
			gfxOffY = 32f;
		}
		if (gfxOffY < -32f)
		{
			gfxOffY = -32f;
		}
		if (Main.myPlayer == i)
		{
			if (!iceSkate)
			{
				CheckIceBreak();
			}
			CheckCrackedBrickBreak();
		}
		if (!shimmering)
		{
			SlopeDownMovement();
			bool flag27 = mount.Type == 7 || mount.Type == 8 || mount.Type == 12 || mount.Type == 44 || mount.Type == 49;
			if (velocity.Y == gravity && (!mount.Active || (!mount.Cart && mount.Type != 48 && !flag27)))
			{
				Collision.StepDown(ref position, ref velocity, width, height, ref stepSpeed, ref gfxOffY, (int)gravDir, waterWalk || waterWalk2);
			}
			if (gravDir == -1f)
			{
				if ((carpetFrame != -1 || velocity.Y <= gravity) && !controlUp)
				{
					Collision.StepUp(ref position, ref velocity, width, height, ref stepSpeed, ref gfxOffY, (int)gravDir, controlUp);
				}
			}
			else if ((carpetFrame != -1 || velocity.Y >= gravity) && !controlDown && !mount.Cart && !flag27 && grappling[0] == -1)
			{
				Collision.StepUp(ref position, ref velocity, width, height, ref stepSpeed, ref gfxOffY, (int)gravDir, controlUp);
			}
		}
		oldPosition = position;
		oldDirection = direction;
		bool falling = false;
		if (velocity.Y > gravity)
		{
			falling = true;
		}
		if (velocity.Y < 0f - gravity)
		{
			falling = true;
		}
		Vector2 vector3 = velocity;
		slideDir = 0;
		bool ignorePlats = false;
		bool fallThrough = controlDown;
		if ((gravDir == -1f) | (mount.Active && (mount.Cart || mount.Type == 12 || mount.Type == 7 || mount.Type == 8 || mount.Type == 23 || mount.Type == 44 || mount.Type == 48)) | GoingDownWithGrapple | pulley)
		{
			ignorePlats = true;
			fallThrough = true;
		}
		bool flag28 = onTrack;
		onTrack = false;
		bool flag29 = false;
		if (mount.Active && mount.Cart)
		{
			fartKartCloudDelay = Math.Max(0, fartKartCloudDelay - 1);
			float num107 = ((ignoreWater || merman) ? 1f : (shimmerWet ? 0.25f : (honeyWet ? 0.25f : ((!wet) ? 1f : 0.5f))));
			velocity *= num107;
			DelegateMethods.Minecart.rotation = fullRotation;
			DelegateMethods.Minecart.rotationOrigin = fullRotationOrigin;
			BitsByte bitsByte = Minecart.TrackCollision(this, ref position, ref velocity, ref lastBoost, width, height, controlDown, controlUp, fallStart2, trackOnly: false, mount.Delegations);
			if (bitsByte[0])
			{
				onTrack = true;
				gfxOffY = Minecart.TrackRotation(this, ref fullRotation, position + velocity, width, height, controlDown, controlUp, mount.Delegations);
				fullRotationOrigin = new Vector2(width / 2, height);
			}
			if (flag28 && !onTrack)
			{
				mount.Delegations.MinecartJumpingSound(this, position, width, height);
			}
			if (bitsByte[1])
			{
				if (controlLeft || controlRight)
				{
					if (cartFlip)
					{
						cartFlip = false;
					}
					else
					{
						cartFlip = true;
					}
				}
				if (velocity.X > 0f)
				{
					direction = 1;
				}
				else if (velocity.X < 0f)
				{
					direction = -1;
				}
				mount.Delegations.MinecartBumperSound(this, position, width, height);
			}
			velocity /= num107;
			if (bitsByte[3] && whoAmI == Main.myPlayer)
			{
				flag29 = true;
			}
			if (bitsByte[2])
			{
				cartRampTime = (int)(Math.Abs(velocity.X) / mount.RunSpeed * 20f);
			}
			if (bitsByte[4])
			{
				trackBoost -= 4f;
			}
			if (bitsByte[5])
			{
				trackBoost += 4f;
			}
		}
		bool flag30 = whoAmI == Main.myPlayer && !mount.Active;
		Vector2 vector4 = position;
		if (vortexDebuff)
		{
			velocity.Y = velocity.Y * 0.8f + (float)Math.Cos(base.Center.X % 120f / 120f * ((float)Math.PI * 2f)) * 5f * 0.2f;
		}
		if (tongued)
		{
			position += velocity;
			flag30 = false;
		}
		else if (shimmerWet || shimmering)
		{
			ShimmerCollision(fallThrough, ignorePlats, shimmering);
		}
		else if (honeyWet && !ignoreWater)
		{
			HoneyCollision(fallThrough, ignorePlats);
		}
		else if (wet && !merman && !ignoreWater && !trident)
		{
			WaterCollision(fallThrough, ignorePlats);
		}
		else
		{
			DryCollision(fallThrough, ignorePlats);
			if (mount.Active && mount.IsConsideredASlimeMount && velocity.Y != 0f && !SlimeDontHyperJump)
			{
				Vector2 vector5 = velocity;
				velocity.X = 0f;
				DryCollision(fallThrough, ignorePlats);
				velocity.X = vector5.X;
			}
			if (mount.Active && mount.Type == 43 && velocity.Y != 0f)
			{
				Vector2 vector6 = velocity;
				velocity.X = 0f;
				DryCollision(fallThrough, ignorePlats);
				velocity.X = vector6.X;
			}
		}
		UpdateTouchingTiles();
		TryBouncingBlocks(falling);
		TryLandingOnDetonator();
		if (!shimmering && !tongued)
		{
			SlopingCollision(fallThrough, ignorePlats);
			if (!isLockedToATile)
			{
				Collision.StepConveyorBelt(this, gravDir);
			}
		}
		if (flag30 && velocity.Y == 0f)
		{
			AchievementsHelper.HandleRunning(Math.Abs(position.X - vector4.X));
		}
		if (flag29)
		{
			NetMessage.SendData(13, -1, -1, null, whoAmI);
			Minecart.HitTrackSwitch(new Vector2(position.X, position.Y), width, height);
		}
		if (vector3.X != velocity.X)
		{
			if (vector3.X < 0f)
			{
				slideDir = -1;
			}
			else if (vector3.X > 0f)
			{
				slideDir = 1;
			}
		}
		if (gravDir == 1f && Collision.up)
		{
			velocity.Y = 0.01f;
			if (!merman)
			{
				jump = 0;
			}
		}
		else if (gravDir == -1f && Collision.down)
		{
			velocity.Y = -0.01f;
			if (!merman)
			{
				jump = 0;
			}
		}
		if (velocity.Y == 0f && grappling[0] == -1)
		{
			FloorVisuals(falling);
		}
		if (whoAmI == Main.myPlayer && !shimmering)
		{
			Collision.SwitchTiles(position, width, height, oldPosition, 1);
		}
		PressurePlateHelper.UpdatePlayerPosition(this);
		BordersMovement();
		numMinions = 0;
		slotsMinions = 0f;
		if (Main.netMode != 2 && mount.Type != 8)
		{
			ItemCheck_ManageRightClickFeatures();
		}
		ItemCheckWrapped(i);
		PlayerFrame();
		if (mount.Type == 8)
		{
			mount.UseDrill(this);
		}
		if (statLife > statLifeMax2)
		{
			statLife = statLifeMax2;
		}
		if (statMana > statManaMax2)
		{
			statMana = statManaMax2;
		}
		grappling[0] = -1;
		grapCount = 0;
		UpdateReleaseUseTile();
		UpdateAdvancedShadows();
	}

	private void TryToToggleSmartCursor(ref bool smartCursorWanted)
	{
		if (Main.cSmartCursorModeIsToggleAndNotHold)
		{
			if (controlSmart && releaseSmart)
			{
				SoundEngine.PlaySound(12);
				smartCursorWanted = !smartCursorWanted;
			}
			return;
		}
		if (controlSmart && releaseSmart)
		{
			SoundEngine.PlaySound(12);
		}
		if (SmartCursorSettings.SmartCursorHoldCanReleaseMidUse)
		{
			smartCursorWanted = controlSmart;
		}
		else if (smartCursorWanted)
		{
			if (!controlSmart && !controlUseItem)
			{
				smartCursorWanted = false;
			}
		}
		else
		{
			smartCursorWanted = controlSmart;
		}
	}

	private void TryToShimmerUnstuck()
	{
		timeShimmering = Utils.Clamp(timeShimmering + (shimmering ? 1 : (-10)), 0, 7200);
		bool flag = timeShimmering >= 3600;
		if ((LocalInputCache.controlLeft || LocalInputCache.controlRight || LocalInputCache.controlUp || LocalInputCache.controlDown) && timeShimmering >= 1200)
		{
			flag = true;
		}
		if (flag)
		{
			ShimmerUnstuck();
		}
	}

	private void ShimmerUnstuck()
	{
		timeShimmering = 0;
		Vector2? vector = TryFindingShimmerFreeSpot();
		if (vector.HasValue)
		{
			velocity = new Vector2(0f, 0.0001f);
			Teleport(vector.Value + new Vector2(0f, -2f), 12);
			shimmering = false;
			shimmerWet = false;
			wet = false;
			ClearBuff(353);
			ParticleOrchestrator.BroadcastOrRequestParticleSpawn(ParticleOrchestraType.ShimmerTownNPC, new ParticleOrchestraSettings
			{
				PositionInWorld = base.Bottom
			});
		}
		else
		{
			if (Collision.WetCollision(position, width, height) && Collision.shimmer)
			{
				shimmerUnstuckHelper.StartUnstuck();
			}
			ClearBuff(353);
			ParticleOrchestrator.BroadcastOrRequestParticleSpawn(ParticleOrchestraType.ShimmerTownNPC, new ParticleOrchestraSettings
			{
				PositionInWorld = base.Bottom
			});
		}
	}

	private Vector2? TryFindingShimmerFreeSpot()
	{
		Point point = base.Top.ToTileCoordinates();
		int num = 60;
		Vector2? result = null;
		bool allowSolidTop = true;
		for (int i = 1; i < num; i += 2)
		{
			Vector2? vector = ShimmerHelper.FindSpotWithoutShimmer(this, point.X, point.Y, i, allowSolidTop);
			if (vector.HasValue)
			{
				result = vector.Value;
				break;
			}
		}
		FindSpawn();
		if (!CheckSpawn(SpawnX, SpawnY))
		{
			SpawnX = -1;
			SpawnY = -1;
		}
		if (!result.HasValue && SpawnX != -1 && SpawnY != -1)
		{
			for (int j = 1; j < num; j += 2)
			{
				Vector2? vector2 = ShimmerHelper.FindSpotWithoutShimmer(this, SpawnX, SpawnY, j, allowSolidTop);
				if (vector2.HasValue)
				{
					result = vector2.Value;
					break;
				}
			}
		}
		if (!result.HasValue)
		{
			for (int k = 1; k < num; k += 2)
			{
				Vector2? vector3 = ShimmerHelper.FindSpotWithoutShimmer(this, Main.spawnTileX, Main.spawnTileY, k, allowSolidTop);
				if (vector3.HasValue)
				{
					result = vector3.Value;
					break;
				}
			}
		}
		return result;
	}

	private void AdjustRemainingPotionSickness()
	{
		if (whoAmI == Main.myPlayer)
		{
			int num = FindBuffIndex(21);
			if (num != -1)
			{
				float num2 = buffTime[num];
				float philosopherStoneDurationMultiplier = PhilosopherStoneDurationMultiplier;
				num2 = ((!pStone) ? (num2 / philosopherStoneDurationMultiplier) : (num2 * philosopherStoneDurationMultiplier));
				buffTime[num] = (int)num2;
			}
		}
	}

	private Collision.HurtTile GetHurtTile()
	{
		Collision.HurtTile result = Collision.HurtTiles(position, width, (!mount.Active || !mount.Cart) ? height : (height - 16), this);
		if (result.type >= 0)
		{
			return result;
		}
		foreach (Point touchedTile in TouchedTiles)
		{
			Tile tile = Main.tile[touchedTile.X, touchedTile.Y];
			if (tile != null && tile.active() && tile.nactive() && !TileID.Sets.Suffocate[tile.type] && Collision.CanTileHurt(tile.type, touchedTile.X, touchedTile.Y, this))
			{
				Collision.HurtTile result2 = default(Collision.HurtTile);
				result2.type = tile.type;
				result2.x = touchedTile.X;
				result2.y = touchedTile.Y;
				return result2;
			}
		}
		return result;
	}

	private void ApplyTouchDamage(int tileId, int x, int y)
	{
		if (TileID.Sets.TouchDamageHot[tileId])
		{
			AddBuff(67, 20);
		}
		if (TileID.Sets.Suffocate[tileId])
		{
			if (suffocateDelay < 5)
			{
				suffocateDelay++;
			}
			else
			{
				AddBuff(68, 1);
			}
		}
		else
		{
			suffocateDelay = 0;
		}
		if (TileID.Sets.TouchDamageBleeding[tileId])
		{
			AddBuff(30, Main.rand.Next(240, 600));
		}
		int num = TileID.Sets.TouchDamageImmediate[tileId];
		if (num > 0)
		{
			num = Main.DamageVar(num, 0f - luck);
			Hurt(PlayerDeathReason.ByOther(3), num, 0, pvp: false, quiet: false, Crit: false, 0);
		}
		if (TileID.Sets.TouchDamageDestroyTile[tileId])
		{
			WorldGen.KillTile(x, y);
			if (Main.netMode == 1 && !Main.tile[x, y].active())
			{
				NetMessage.SendData(17, -1, -1, null, 4, x, y);
			}
		}
	}

	private void CapAttackSpeeds()
	{
		float num = meleeSpeed;
		meleeSpeed = TurnAttackSpeedToUseTimeMultiplier(num);
		summonerWeaponSpeedBonus = TurnAttackSpeedToUseTimeMultiplier(num + summonerWeaponSpeedBonus);
	}

	private float TurnAttackSpeedToUseTimeMultiplier(float speed)
	{
		if (speed > 3f)
		{
			speed = 3f;
		}
		if (speed != 0f)
		{
			speed = 1f / speed;
		}
		return speed;
	}

	public void UpdateLuck()
	{
		UpdateLuckFactors();
		RecalculateLuck();
		if (luckNeedsSync && whoAmI == Main.myPlayer)
		{
			luckNeedsSync = false;
			NetMessage.SendData(134, -1, -1, null, whoAmI);
		}
	}

	private void ResetControls()
	{
		controlUp = false;
		controlLeft = false;
		controlDown = false;
		controlRight = false;
		controlJump = false;
		controlUseItem = false;
		controlUseTile = false;
		controlThrow = false;
		controlInv = false;
		controlHook = false;
		controlTorch = false;
		controlSmart = false;
		controlMount = false;
		controlQuickHeal = false;
		controlQuickMana = false;
		controlCreativeMenu = false;
		mapStyle = false;
		mapAlphaDown = false;
		mapAlphaUp = false;
		mapFullScreen = false;
		mapZoomIn = false;
		mapZoomOut = false;
	}

	private void UpdateControlHolds()
	{
		if (whoAmI == Main.myPlayer)
		{
			if (controlUp && releaseUp)
			{
				FlexibleWandCycleOffset--;
			}
			if (controlDown && releaseDown)
			{
				FlexibleWandCycleOffset++;
			}
		}
		if (controlUp)
		{
			releaseUp = false;
		}
		else
		{
			releaseUp = true;
		}
	}

	public void TryOpeningFullscreenMap()
	{
		if (Main.mapEnabled)
		{
			Main.playerInventory = false;
			sign = -1;
			Main.editSign = false;
			SetTalkNPC(-1);
			Main.npcChatCornerItem = 0;
			SoundEngine.PlaySound(10);
			Main.mapFullscreenScale = 2.5f;
			Main.mapFullscreen = true;
			Main.resetMapFull = true;
			Main.buffString = string.Empty;
			releaseInventory = false;
		}
	}

	public void UpdateLuckFactors()
	{
		UpdateLadyBugLuckTime();
		UpdateCoinLuck();
		if (whoAmI == Main.myPlayer)
		{
			float num = torchLuck;
			TryRecalculatingTorchLuck();
			if (torchLuck != num)
			{
				luckNeedsSync = true;
			}
		}
	}

	public void RecalculateLuck()
	{
		luck = GetLadyBugLuck() * 0.2f + torchLuck * 0.2f;
		luck += (float)(int)luckPotion * 0.1f;
		if (usedGalaxyPearl)
		{
			luck += 0.03f;
		}
		if (LanternNight.LanternsUp)
		{
			luck += 0.3f;
		}
		if (HasGardenGnomeNearby)
		{
			luck += 0.2f;
		}
		luck += equipmentBasedLuckBonus;
		luck += CalculateCoinLuck();
	}

	public static int GetMouseScrollDelta()
	{
		return PlayerInput.ScrollWheelDelta / 120;
	}

	private void UpdatePortableStoolUsage()
	{
		bool flag = portableStoolInfo.HasAStool && controlUp && !gravControl && !mount.Active && velocity.X == 0f && velocity.Y == 0f && !pulley && grappling[0] == -1;
		if (flag)
		{
			flag = CanFitSpace(portableStoolInfo.HeightBoost);
		}
		if (flag)
		{
			portableStoolInfo.IsInUse = true;
			ResizeHitbox();
		}
	}

	private void ResizeHitbox()
	{
		position.Y += height;
		height = 42 + HeightOffsetBoost;
		position.Y -= height;
	}

	private void UpdateReleaseUseTile()
	{
		bool flag = !tileInteractAttempted;
		if (_lockTileInteractionsTimer > 0 && !releaseUseTile)
		{
			flag = false;
		}
		releaseUseTile = flag;
		if (_lockTileInteractionsTimer > 0)
		{
			_lockTileInteractionsTimer--;
		}
	}

	private void GetMinecartDamage(float currentSpeed, out int damage, out float knockback)
	{
		switch (mount.Type)
		{
		default:
			damage = Main.DamageVar(25f + 55f * currentSpeed, luck);
			break;
		case 11:
		case 15:
		case 16:
		case 18:
		case 19:
		case 20:
		case 21:
		case 22:
		case 24:
		case 25:
		case 26:
		case 27:
		case 28:
		case 29:
		case 30:
		case 31:
		case 32:
		case 33:
		case 34:
		case 35:
		case 36:
		case 38:
		case 39:
		case 51:
		case 53:
			damage = Main.DamageVar(25f + 55f * currentSpeed, luck);
			break;
		case 13:
			damage = Main.DamageVar(15f + 30f * currentSpeed, luck);
			break;
		}
		if (UsingSuperCart)
		{
			damage = Main.DamageVar(50f + 100f * currentSpeed, luck);
		}
		knockback = 10f + 40f * currentSpeed;
		if (Main.hardMode)
		{
			damage = (int)((double)damage * 1.5);
		}
		if (Main.expertMode)
		{
			damage = (int)((double)damage * 1.5);
		}
	}

	public void UpdateMiscCounter()
	{
		miscCounter++;
		if (miscCounter >= 300)
		{
			miscCounter = 0;
		}
	}

	private void WingAirLogicTweaks()
	{
		if (wingsLogic < 1)
		{
			return;
		}
		WingStats wingStats = GetWingStats(wingsLogic);
		bool flag = TryingToHoverDown && controlJump && wingTime > 0f;
		if (wingStats.HasDownHoverStats && flag)
		{
			if (wingStats.DownHoverSpeedOverride != -1f)
			{
				accRunSpeed = wingStats.DownHoverSpeedOverride;
			}
			runAcceleration *= wingStats.DownHoverAccelerationMult;
		}
		else
		{
			if (wingStats.AccRunSpeedOverride != -1f && wingStats.AccRunSpeedOverride > accRunSpeed)
			{
				accRunSpeed = wingStats.AccRunSpeedOverride;
			}
			runAcceleration *= wingStats.AccRunAccelerationMult;
		}
		if (wingsLogic == 45 && (float)timeSinceLastDashStarted >= 60f)
		{
			runSlowdown *= 6f;
		}
	}

	private void RocketBootVisuals()
	{
		int num = height;
		if (gravDir == -1f)
		{
			num = 4;
		}
		for (int i = 0; i < 2; i++)
		{
			int num2 = ((i == 0) ? 2 : (-2));
			Rectangle r = ((i != 0) ? new Rectangle((int)position.X + width - 4, (int)position.Y + num - 10, 8, 8) : new Rectangle((int)position.X - 4, (int)position.Y + num - 10, 8, 8));
			if (direction == -1)
			{
				r.X -= 4;
			}
			int type = 6;
			float scale = 2.5f;
			int alpha = 100;
			float num3 = 1f;
			Vector2 vector = new Vector2((float)(-num2) - velocity.X * 0.3f, 2f * gravDir - velocity.Y * 0.3f);
			Dust dust;
			switch (vanityRocketBoots)
			{
			case 5:
				type = 6;
				scale = 2.5f;
				break;
			case 1:
				if (socialShadowRocketBoots)
				{
					type = 27;
					scale = 1.5f;
				}
				break;
			case 3:
				type = 76;
				scale = 1f;
				alpha = 20;
				break;
			case 2:
				if (fairyBoots)
				{
					type = Main.rand.NextFromList(new short[6] { 61, 61, 61, 242, 64, 63 });
					scale = 2f;
					alpha = 120;
				}
				else
				{
					type = 16;
					scale = 1.5f;
					alpha = 20;
				}
				break;
			case 4:
			{
				int num4 = Main.rand.Next(6);
				r.Y += 2 * (int)gravDir;
				if (num4 == 0 || num4 == 1)
				{
					dust = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 278, 0f, 0f, 100, Color.Lerp(Color.LimeGreen, Color.White, Main.rand.NextFloat() * 0.3f));
					dust.shader = GameShaders.Armor.GetSecondaryShader(cShoe, this);
					dust.scale = 0.66f;
					dust.noGravity = true;
					dust.velocity *= 0.25f;
					dust.velocity -= velocity * 0.5f;
					dust.velocity += vector * 0.5f;
					dust.position += dust.velocity * 4f;
					if (Main.rand.Next(5) == 0)
					{
						dust.fadeIn = 0.8f;
					}
					continue;
				}
				type = 107;
				alpha = 100;
				scale = 0.7f;
				num3 = 0.5f;
				break;
			}
			}
			dust = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, type, 0f, 0f, alpha, default(Color), scale);
			dust.shader = GameShaders.Armor.GetSecondaryShader(cShoe, this);
			dust.velocity += vector;
			dust.velocity *= num3;
			switch (vanityRocketBoots)
			{
			case 5:
				dust.noGravity = true;
				break;
			case 1:
				dust.noGravity = true;
				break;
			case 2:
				dust.velocity *= 0.1f;
				break;
			case 3:
				dust.velocity *= 0.05f;
				dust.velocity.Y += 0.15f;
				dust.noLight = true;
				if (Main.rand.Next(2) == 0)
				{
					dust.noGravity = true;
					dust.scale = 1.75f;
				}
				break;
			}
			if (fairyBoots)
			{
				dust.noGravity = true;
				dust.noLightEmittence = true;
			}
		}
	}

	public void WingFrame(bool wingFlap)
	{
		bool flag = wingsLogic != wings;
		if (wings == 4)
		{
			if (wingFlap || jump > 0)
			{
				rocketDelay2--;
				if (rocketDelay2 <= 0)
				{
					SoundEngine.PlaySound(SoundID.Item13, position);
					rocketDelay2 = 60;
				}
				int num = 2;
				if (TryingToHoverUp)
				{
					num = 4;
				}
				for (int i = 0; i < num; i++)
				{
					int type = 6;
					if (head == 41)
					{
						_ = body;
						_ = 24;
					}
					float scale = 1.75f;
					int alpha = 100;
					float x = position.X + (float)(width / 2) + 16f;
					if (direction > 0)
					{
						x = position.X + (float)(width / 2) - 26f;
					}
					float num2 = position.Y + (float)height - 18f;
					if (i == 1 || i == 3)
					{
						x = position.X + (float)(width / 2) + 8f;
						if (direction > 0)
						{
							x = position.X + (float)(width / 2) - 20f;
						}
						num2 += 6f;
					}
					if (i > 1)
					{
						num2 += velocity.Y;
					}
					int num3 = Dust.NewDust(new Vector2(x, num2), 8, 8, type, 0f, 0f, alpha, default(Color), scale);
					Main.dust[num3].velocity.X *= 0.1f;
					Main.dust[num3].velocity.Y = Main.dust[num3].velocity.Y * 1f + 2f * gravDir - velocity.Y * 0.3f;
					Main.dust[num3].noGravity = true;
					Main.dust[num3].noLightEmittence = flag;
					Main.dust[num3].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
					if (num == 4)
					{
						Main.dust[num3].velocity.Y += 6f;
					}
				}
				wingFrameCounter++;
				if (wingFrameCounter > 4)
				{
					wingFrame++;
					wingFrameCounter = 0;
					if (wingFrame >= 3)
					{
						wingFrame = 0;
					}
				}
			}
			else if (!controlJump || velocity.Y == 0f)
			{
				wingFrame = 3;
			}
			return;
		}
		if (wings == 28 && ShouldDrawWingsThatAreAlwaysAnimated())
		{
			if (!flag && velocity.Y != 0f)
			{
				Lighting.AddLight(base.Bottom, 0.3f, 0.1f, 0.4f);
			}
			return;
		}
		if (wings == 22)
		{
			if (!controlJump)
			{
				wingFrame = 0;
				wingFrameCounter = 0;
			}
			else if (wingTime > 0f)
			{
				if (TryingToHoverDown)
				{
					if (velocity.X != 0f)
					{
						wingFrameCounter++;
						int num4 = 2;
						if (wingFrameCounter < num4)
						{
							wingFrame = 1;
							return;
						}
						if (wingFrameCounter < num4 * 2)
						{
							wingFrame = 2;
							return;
						}
						if (wingFrameCounter < num4 * 3)
						{
							wingFrame = 3;
							return;
						}
						if (wingFrameCounter < num4 * 4 - 1)
						{
							wingFrame = 2;
							return;
						}
						wingFrame = 2;
						wingFrameCounter = 0;
					}
					else
					{
						wingFrameCounter++;
						int num5 = 6;
						if (wingFrameCounter < num5)
						{
							wingFrame = 4;
							return;
						}
						if (wingFrameCounter < num5 * 2)
						{
							wingFrame = 5;
							return;
						}
						if (wingFrameCounter < num5 * 3 - 1)
						{
							wingFrame = 4;
							return;
						}
						wingFrame = 4;
						wingFrameCounter = 0;
					}
				}
				else
				{
					wingFrameCounter++;
					int num6 = 2;
					if (wingFrameCounter < num6)
					{
						wingFrame = 4;
						return;
					}
					if (wingFrameCounter < num6 * 2)
					{
						wingFrame = 5;
						return;
					}
					if (wingFrameCounter < num6 * 3)
					{
						wingFrame = 6;
						return;
					}
					if (wingFrameCounter < num6 * 4 - 1)
					{
						wingFrame = 5;
						return;
					}
					wingFrame = 5;
					wingFrameCounter = 0;
				}
			}
			else
			{
				wingFrameCounter++;
				int num7 = 6;
				if (wingFrameCounter < num7)
				{
					wingFrame = 4;
					return;
				}
				if (wingFrameCounter < num7 * 2)
				{
					wingFrame = 5;
					return;
				}
				if (wingFrameCounter < num7 * 3 - 1)
				{
					wingFrame = 4;
					return;
				}
				wingFrame = 4;
				wingFrameCounter = 0;
			}
			return;
		}
		if (wings == 12)
		{
			if (wingFlap || jump > 0)
			{
				wingFrameCounter++;
				int num8 = 5;
				if (wingFrameCounter < num8)
				{
					wingFrame = 1;
					return;
				}
				if (wingFrameCounter < num8 * 2)
				{
					wingFrame = 2;
					return;
				}
				if (wingFrameCounter < num8 * 3)
				{
					wingFrame = 3;
					return;
				}
				if (wingFrameCounter < num8 * 4 - 1)
				{
					wingFrame = 2;
					return;
				}
				wingFrame = 2;
				wingFrameCounter = 0;
			}
			else if (velocity.Y != 0f)
			{
				wingFrame = 2;
			}
			else
			{
				wingFrame = 0;
			}
			return;
		}
		if (wings == 24)
		{
			if (wingFlap || jump > 0)
			{
				wingFrameCounter++;
				int num9 = 1;
				if (wingFrameCounter < num9)
				{
					wingFrame = 1;
					return;
				}
				if (wingFrameCounter < num9 * 2)
				{
					wingFrame = 2;
					return;
				}
				if (wingFrameCounter < num9 * 3)
				{
					wingFrame = 3;
					return;
				}
				wingFrame = 2;
				if (wingFrameCounter >= num9 * 4 - 1)
				{
					wingFrameCounter = 0;
				}
			}
			else if (velocity.Y != 0f)
			{
				if (controlJump)
				{
					wingFrameCounter++;
					int num10 = 3;
					if (wingFrameCounter < num10)
					{
						wingFrame = 1;
						return;
					}
					if (wingFrameCounter < num10 * 2)
					{
						wingFrame = 2;
						return;
					}
					if (wingFrameCounter < num10 * 3)
					{
						wingFrame = 3;
						return;
					}
					wingFrame = 2;
					if (wingFrameCounter >= num10 * 4 - 1)
					{
						wingFrameCounter = 0;
					}
				}
				else if (wingTime == 0f)
				{
					wingFrame = 0;
				}
				else
				{
					wingFrame = 1;
				}
			}
			else
			{
				wingFrame = 0;
			}
			return;
		}
		if (wings == 30)
		{
			bool flag2 = false;
			if (wingFlap || jump > 0)
			{
				wingFrameCounter++;
				int num11 = 2;
				if (wingFrameCounter >= num11 * 3)
				{
					wingFrameCounter = 0;
				}
				wingFrame = 1 + wingFrameCounter / num11;
				flag2 = true;
			}
			else if (velocity.Y != 0f)
			{
				if (controlJump)
				{
					wingFrameCounter++;
					int num12 = 2;
					if (wingFrameCounter >= num12 * 3)
					{
						wingFrameCounter = 0;
					}
					wingFrame = 1 + wingFrameCounter / num12;
					flag2 = true;
				}
				else if (wingTime == 0f)
				{
					wingFrame = 0;
				}
				else
				{
					wingFrame = 0;
				}
			}
			else
			{
				wingFrame = 0;
			}
			if (!flag2)
			{
				return;
			}
			for (int j = 0; j < 4; j++)
			{
				if (Main.rand.Next(4) == 0)
				{
					Vector2 vector = (-0.74539816f + (float)Math.PI / 8f * (float)j + 0.03f * (float)j).ToRotationVector2() * new Vector2(-direction * 20, 20f);
					Dust dust = Main.dust[Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, Color.White, 0.8f)];
					dust.noGravity = true;
					dust.noLightEmittence = flag;
					dust.position = base.Center + vector;
					dust.velocity = DirectionTo(dust.position) * 2f;
					if (Main.rand.Next(10) != 0)
					{
						dust.customData = this;
					}
					else
					{
						dust.fadeIn = 0.5f;
					}
					dust.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
				}
			}
			for (int k = 0; k < 4; k++)
			{
				if (Main.rand.Next(8) == 0)
				{
					Vector2 vector2 = (-0.7053982f + (float)Math.PI / 8f * (float)k + 0.03f * (float)k).ToRotationVector2() * new Vector2(direction * 20, 24f) + new Vector2((float)(-direction) * 16f, 0f);
					Dust dust2 = Main.dust[Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, Color.White, 0.5f)];
					dust2.noGravity = true;
					dust2.noLightEmittence = flag;
					dust2.position = base.Center + vector2;
					dust2.velocity = Vector2.Normalize(dust2.position - base.Center - new Vector2((float)(-direction) * 16f, 0f)) * 2f;
					dust2.position += dust2.velocity * 5f;
					if (Main.rand.Next(10) != 0)
					{
						dust2.customData = this;
					}
					else
					{
						dust2.fadeIn = 0.5f;
					}
					dust2.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
				}
			}
			return;
		}
		if (wings == 34 && ShouldDrawWingsThatAreAlwaysAnimated())
		{
			if (wingFlap || jump > 0)
			{
				wingFrameCounter++;
				int num13 = 4;
				if (wingFrameCounter >= num13 * 6)
				{
					wingFrameCounter = 0;
				}
				wingFrame = wingFrameCounter / num13;
			}
			else if (velocity.Y != 0f)
			{
				if (controlJump)
				{
					wingFrameCounter++;
					int num14 = 9;
					if (wingFrameCounter >= num14 * 6)
					{
						wingFrameCounter = 0;
					}
					wingFrame = wingFrameCounter / num14;
				}
				else
				{
					wingFrameCounter++;
					int num15 = 6;
					if (wingFrameCounter >= num15 * 6)
					{
						wingFrameCounter = 0;
					}
					wingFrame = wingFrameCounter / num15;
				}
			}
			else
			{
				wingFrameCounter++;
				int num16 = 4;
				if (wingFrameCounter >= num16 * 6)
				{
					wingFrameCounter = 0;
				}
				wingFrame = wingFrameCounter / num16;
			}
			return;
		}
		if (wings == 45 && ShouldDrawWingsThatAreAlwaysAnimated())
		{
			if (wingTime > 0f)
			{
				rocketDelay2--;
				if (rocketDelay2 <= 0)
				{
					SoundEngine.PlaySound(SoundID.Item24, position);
					rocketDelay2 = 30;
				}
			}
			if (velocity.Y == 0f)
			{
				wingFrameCounter = 0;
				wingFrame = 0;
			}
			else
			{
				wingFrameCounter++;
				int num17 = 3;
				if (wingTime == 0f)
				{
					num17 = 5;
				}
				if (wingFrameCounter >= num17 * 6)
				{
					wingFrameCounter = 0;
				}
				wingFrame = wingFrameCounter / num17;
			}
			if (Main.netMode != 2 && Main.rand.Next(8) == 0)
			{
				Rectangle r = Utils.CenteredRectangle(Main.ReverseGravitySupport(base.Bottom - Main.screenPosition) + Main.screenPosition, new Vector2(40f, 24f));
				Dust dust3 = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 43, 0f, 0f, 0, Color.White * 0.5f, 0.2f);
				dust3.fadeIn = 0.4f;
				dust3.velocity += velocity;
				dust3.velocity *= 0.35f;
				dust3.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
			}
			return;
		}
		if (wings == 44 && ShouldDrawWingsThatAreAlwaysAnimated())
		{
			int num18 = 5;
			if (wingFlap || jump > 0)
			{
				wingFrameCounter++;
				if (wingFrameCounter >= num18 * 6)
				{
					wingFrameCounter = 0;
				}
				wingFrame = 1 + wingFrameCounter / num18;
			}
			else if (velocity.Y != 0f)
			{
				if (controlJump)
				{
					wingFrame = 2;
				}
				else if (ShouldFloatInWater && wet)
				{
					wingFrame = 0;
				}
				else
				{
					wingFrame = 3;
				}
			}
			else
			{
				wingFrameCounter++;
				if (wingFrameCounter >= num18 * 6)
				{
					wingFrameCounter = 0;
				}
				wingFrame = 1 + wingFrameCounter / num18;
			}
			return;
		}
		if (wings == 39 && ShouldDrawWingsThatAreAlwaysAnimated())
		{
			if (wingFlap || jump > 0)
			{
				wingFrameCounter++;
				int num19 = 4;
				if (wingFrameCounter >= num19 * 6)
				{
					wingFrameCounter = 0;
				}
				wingFrame = wingFrameCounter / num19;
			}
			else if (velocity.Y != 0f)
			{
				if (controlJump)
				{
					wingFrameCounter++;
					int num20 = 9;
					if (wingFrameCounter >= num20 * 6)
					{
						wingFrameCounter = 0;
					}
					wingFrame = wingFrameCounter / num20;
				}
				else
				{
					wingFrameCounter++;
					int num21 = 6;
					if (wingFrameCounter >= num21 * 6)
					{
						wingFrameCounter = 0;
					}
					wingFrame = wingFrameCounter / num21;
				}
			}
			else
			{
				wingFrameCounter++;
				int num22 = 4;
				if (wingFrameCounter >= num22 * 6)
				{
					wingFrameCounter = 0;
				}
				wingFrame = wingFrameCounter / num22;
			}
			int num23 = 1;
			if (wingFrame == 3)
			{
				num23 = 5;
			}
			if (velocity.Y == 0f)
			{
				num23 = 0;
			}
			Rectangle r2 = Utils.CenteredRectangle((gravDir == 1f) ? (base.Bottom + new Vector2(0f, -10f)) : (base.Top + new Vector2(0f, 10f)), new Vector2(50f, 20f));
			for (int l = 0; l < num23; l++)
			{
				Dust dust4 = Dust.NewDustDirect(r2.TopLeft(), r2.Width, r2.Height, 31, 0f, 0f, 0, Color.Black);
				dust4.scale = 0.7f;
				dust4.velocity *= 0.4f;
				dust4.velocity.Y += gravDir * 0.5f;
				dust4.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
			}
			return;
		}
		if (wings == 33)
		{
			bool flag3 = false;
			if (wingFlap || jump > 0)
			{
				flag3 = true;
			}
			else if (velocity.Y != 0f && controlJump)
			{
				flag3 = true;
			}
			if (!flag3)
			{
				return;
			}
			Color newColor = Main.hslToRgb(Main.rgbToHsl(eyeColor).X, 1f, 0.5f);
			int num24 = ((direction != 1) ? (-4) : 0);
			int num25 = ((gravDir == 1f) ? height : 0);
			for (int m = 0; m < 2; m++)
			{
				Dust dust5 = Main.dust[Dust.NewDust(position, width, height, 182, velocity.X, velocity.Y, 127, newColor)];
				dust5.noGravity = true;
				dust5.fadeIn = 1f;
				dust5.scale = 1f;
				dust5.noLight = true;
				dust5.noLightEmittence = flag;
				dust5.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
				switch (m)
				{
				case 0:
					dust5.position = new Vector2(position.X + (float)num24, position.Y + (float)num25);
					dust5.velocity.X = dust5.velocity.X * 1f - 2f - velocity.X * 0.3f;
					dust5.velocity.Y = dust5.velocity.Y * 1f + 2f * gravDir - velocity.Y * 0.3f;
					break;
				case 1:
					dust5.position = new Vector2(position.X + (float)width + (float)num24, position.Y + (float)num25);
					dust5.velocity.X = dust5.velocity.X * 1f + 2f - velocity.X * 0.3f;
					dust5.velocity.Y = dust5.velocity.Y * 1f + 2f * gravDir - velocity.Y * 0.3f;
					break;
				}
				if (dust5.dustIndex != 6000)
				{
					Dust dust6 = Dust.CloneDust(dust5);
					dust6.scale *= 0.65f;
					dust6.fadeIn *= 0.65f;
					dust6.color = new Color(255, 255, 255, 255);
					dust5.noLight = true;
					dust5.noLightEmittence = flag;
					dust5.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
				}
			}
			return;
		}
		if (wings == 38)
		{
			bool flag4 = false;
			if (wingFlap || jump > 0)
			{
				wingFrameCounter++;
				if (wingFrameCounter >= 32)
				{
					wingFrameCounter = 0;
				}
				wingFrame = 1 + wingFrameCounter / 8;
				if (wingFrame == 4)
				{
					wingFrame = 2;
				}
				flag4 = true;
			}
			else if (velocity.Y != 0f)
			{
				if (controlJump)
				{
					wingFrameCounter++;
					if (wingFrameCounter >= 32)
					{
						wingFrameCounter = 0;
					}
					wingFrame = 1 + wingFrameCounter / 8;
					if (wingFrame == 4)
					{
						wingFrame = 2;
					}
					flag4 = true;
				}
				else
				{
					wingFrame = 0;
				}
			}
			else
			{
				wingFrame = 0;
			}
			if (!flag4)
			{
				return;
			}
			Vector2 vector3 = new Vector2(direction, gravDir);
			Vector2 value = velocity * 0.5f;
			int type2 = 267;
			int num26 = miscCounter * direction;
			for (int n = 0; n < 3; n++)
			{
				Vector2 vector4 = Vector2.Zero;
				switch (n)
				{
				case 1:
					vector4 = velocity * -0.33f;
					break;
				case 2:
					vector4 = velocity * -0.66f;
					break;
				}
				Vector2 vector5 = new Vector2(-39f, 6f) * vector3 + new Vector2(2f, 0f).RotatedBy((float)num26 / -15f * ((float)Math.PI * 2f));
				Dust dust7 = Dust.NewDustPerfect(base.Center + vector5 + vector4, type2, value, 0, underShirtColor);
				dust7.noGravity = true;
				dust7.noLight = true;
				dust7.noLightEmittence = flag;
				dust7.scale = 0.47f;
				dust7.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
				vector5 = new Vector2(-23f, 2f) * vector3 + new Vector2(2f, 0f).RotatedBy((float)num26 / -15f * ((float)Math.PI * 2f));
				Dust dust8 = Dust.NewDustPerfect(base.Center + vector5 + vector4, type2, value, 0, underShirtColor);
				dust8.noGravity = true;
				dust8.noLight = true;
				dust8.noLightEmittence = flag;
				dust8.scale = 0.35f;
				dust8.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
				vector5 = new Vector2(-31f, -6f) * vector3 + new Vector2(2f, 0f).RotatedBy((float)num26 / -20f * ((float)Math.PI * 2f));
				Dust dust9 = Dust.NewDustPerfect(base.Center + vector5 + vector4, type2, value, 0, underShirtColor);
				dust9.noGravity = true;
				dust9.noLight = true;
				dust9.noLightEmittence = flag;
				dust9.scale = 0.49f;
				dust9.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
			}
			return;
		}
		int num27 = 4;
		int num28 = 4;
		int num29 = 0;
		if (wings == 43)
		{
			num28 = 7;
			num29 = 1;
			num27 = 3;
		}
		if (wings == 32)
		{
			num27 = 3;
		}
		if (wingFlap || jump > 0)
		{
			wingFrameCounter++;
			if (wingFrameCounter > num27)
			{
				wingFrame++;
				wingFrameCounter = 0;
				if (wingFrame >= num28)
				{
					wingFrame = num29;
				}
			}
		}
		else if (velocity.Y != 0f)
		{
			wingFrame = 1;
			if (wings == 32)
			{
				wingFrame = 3;
			}
			if (wings == 43)
			{
				wingFrame = 2;
				if (ShouldFloatInWater && wet)
				{
					wingFrame = 0;
				}
			}
			if (wings == 29 && Main.rand.Next(5) == 0)
			{
				int num30 = 4;
				if (direction == 1)
				{
					num30 = -40;
				}
				int num31 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num30, position.Y + (float)(height / 2) - 15f), 30, 30, 6, 0f, 0f, 100, default(Color), 2.4f);
				Main.dust[num31].noGravity = true;
				Main.dust[num31].noLightEmittence = flag;
				Main.dust[num31].velocity *= 0.3f;
				if (Main.rand.Next(10) == 0)
				{
					Main.dust[num31].fadeIn = 2f;
				}
				Main.dust[num31].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
			}
		}
		else
		{
			wingFrame = 0;
		}
	}

	public bool ShouldDrawWingsThatAreAlwaysAnimated()
	{
		if ((velocity.Y != 0f || grappling[0] != -1) && (!wet || !ShouldFloatInWater))
		{
			return !mount.Active;
		}
		return false;
	}

	private void WingAirVisuals()
	{
		bool noLightEmittence = wingsLogic != wings;
		if (wings == 10 && Main.rand.Next(2) == 0)
		{
			int num = 4;
			if (direction == 1)
			{
				num = -40;
			}
			int num2 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num, position.Y + (float)(height / 2) - 15f), 30, 30, 76, 0f, 0f, 50, default(Color), 0.6f);
			Main.dust[num2].fadeIn = 1.1f;
			Main.dust[num2].noGravity = true;
			Main.dust[num2].noLight = true;
			Main.dust[num2].velocity *= 0.3f;
			Main.dust[num2].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
		}
		if (wings == 34 && Main.rand.Next(2) == 0)
		{
			int num3 = 4;
			if (direction == 1)
			{
				num3 = -40;
			}
			int num4 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num3, position.Y + (float)(height / 2) - 15f), 30, 30, 261, 0f, 0f, 50, default(Color), 0.6f);
			Main.dust[num4].fadeIn = 1.1f;
			Main.dust[num4].noGravity = true;
			Main.dust[num4].noLight = true;
			Main.dust[num4].noLightEmittence = noLightEmittence;
			Main.dust[num4].velocity *= 0.3f;
			Main.dust[num4].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
		}
		_ = wings;
		_ = 40;
		_ = wings;
		_ = 44;
		if (wings == 9 && Main.rand.Next(2) == 0)
		{
			int num5 = 4;
			if (direction == 1)
			{
				num5 = -40;
			}
			int num6 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num5, position.Y + (float)(height / 2) - 15f), 30, 30, 6, 0f, 0f, 200, default(Color), 2f);
			Main.dust[num6].noGravity = true;
			Main.dust[num6].noLightEmittence = noLightEmittence;
			Main.dust[num6].velocity *= 0.3f;
			Main.dust[num6].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
		}
		if (wings == 6 && Main.rand.Next(4) == 0)
		{
			int num7 = 4;
			if (direction == 1)
			{
				num7 = -40;
			}
			int num8 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num7, position.Y + (float)(height / 2) - 15f), 30, 30, 55, 0f, 0f, 200);
			Main.dust[num8].velocity *= 0.3f;
			Main.dust[num8].noLightEmittence = noLightEmittence;
			Main.dust[num8].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
		}
		if (wings == 5 && Main.rand.Next(3) == 0)
		{
			int num9 = 6;
			if (direction == 1)
			{
				num9 = -30;
			}
			int num10 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num9, position.Y), 18, height, 58, 0f, 0f, 255, default(Color), 1.2f);
			Main.dust[num10].noLightEmittence = noLightEmittence;
			Main.dust[num10].velocity *= 0.3f;
			Main.dust[num10].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
		}
		if (wings == 26)
		{
			int num11 = 6;
			if (direction == 1)
			{
				num11 = -30;
			}
			int num12 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num11, position.Y), 18, height, 217, 0f, 0f, 100, default(Color), 1.4f);
			Main.dust[num12].noGravity = true;
			Main.dust[num12].noLight = true;
			Main.dust[num12].velocity /= 4f;
			Main.dust[num12].velocity -= velocity;
			Main.dust[num12].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
			if (Main.rand.Next(2) == 0)
			{
				num11 = -24;
				if (direction == 1)
				{
					num11 = 12;
				}
				float num13 = position.Y;
				if (gravDir == -1f)
				{
					num13 += (float)(height / 2);
				}
				num12 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num11, num13), 12, height / 2, 217, 0f, 0f, 100, default(Color), 1.4f);
				Main.dust[num12].noGravity = true;
				Main.dust[num12].noLight = true;
				Main.dust[num12].velocity /= 4f;
				Main.dust[num12].velocity -= velocity;
				Main.dust[num12].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
			}
		}
		if (wings == 37)
		{
			int num14 = 6;
			if (direction == 1)
			{
				num14 = -30;
			}
			Dust dust = Dust.NewDustDirect(new Vector2(position.X + (float)(width / 2) + (float)num14, position.Y), 24, height, Utils.SelectRandom<int>(Main.rand, 31, 31, 31), 0f, 0f, 100);
			dust.noGravity = true;
			dust.noLight = true;
			dust.velocity /= 4f;
			dust.velocity -= velocity / 2f;
			dust.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
			if (dust.type == 55)
			{
				dust.noGravity = true;
				dust.velocity *= 2f;
				dust.color = Color.Red;
			}
			if (Main.rand.Next(3) == 0)
			{
				num14 = -24;
				if (direction == 1)
				{
					num14 = 12;
				}
				float num15 = position.Y;
				if (gravDir == -1f)
				{
					num15 += (float)(height / 2);
				}
				dust = Dust.NewDustDirect(new Vector2(position.X + (float)(width / 2) + (float)num14, num15), 16, height / 2, Utils.SelectRandom<int>(Main.rand, 31, 31, 31), 0f, 0f, 100);
				dust.noGravity = true;
				dust.noLight = true;
				dust.velocity /= 4f;
				dust.velocity -= velocity / 2f;
				dust.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
				if (dust.type == 55)
				{
					dust.noGravity = true;
					dust.velocity *= 2f;
					dust.color = Color.Red;
				}
			}
		}
		if (wings == 29 && Main.rand.Next(3) == 0)
		{
			int num16 = 4;
			if (direction == 1)
			{
				num16 = -40;
			}
			int num17 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num16, position.Y + (float)(height / 2) - 15f), 30, 30, 6, 0f, 0f, 100, default(Color), 2.4f);
			Main.dust[num17].noGravity = true;
			Main.dust[num17].velocity *= 0.3f;
			Main.dust[num17].noLightEmittence = noLightEmittence;
			if (Main.rand.Next(10) == 0)
			{
				Main.dust[num17].fadeIn = 2f;
			}
			Main.dust[num17].shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
		}
		if (wings != 31)
		{
			return;
		}
		if (Main.rand.Next(6) == 0)
		{
			int num18 = 4;
			if (direction == 1)
			{
				num18 = -40;
			}
			Dust obj = Main.dust[Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num18, position.Y + (float)(height / 2) - 15f), 30, 30, 86)];
			obj.noGravity = true;
			obj.scale = 1f;
			obj.fadeIn = 1.2f;
			obj.velocity *= 0.2f;
			obj.noLight = true;
			obj.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
		}
		if (Main.rand.Next(3) == 0)
		{
			int num19 = 4;
			if (direction == 1)
			{
				num19 = -40;
			}
			Dust obj2 = Main.dust[Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num19, position.Y + (float)(height / 2) - 15f), 30, 30, 240)];
			obj2.noGravity = true;
			obj2.scale = 1.2f;
			obj2.velocity *= 0.2f;
			obj2.alpha = 200;
			obj2.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
		}
		if (Main.rand.Next(2) != 0)
		{
			return;
		}
		if (Main.rand.Next(6) == 0)
		{
			int num20 = -24;
			if (direction == 1)
			{
				num20 = 12;
			}
			float num21 = position.Y;
			if (gravDir == -1f)
			{
				num21 += (float)(height / 2);
			}
			Dust obj3 = Main.dust[Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num20, num21), 12, height / 2, 86)];
			obj3.noGravity = true;
			obj3.scale = 1f;
			obj3.fadeIn = 1.2f;
			obj3.velocity *= 0.2f;
			obj3.noLight = true;
			obj3.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
		}
		if (Main.rand.Next(3) == 0)
		{
			int num20 = -24;
			if (direction == 1)
			{
				num20 = 12;
			}
			float num22 = position.Y;
			if (gravDir == -1f)
			{
				num22 += (float)(height / 2);
			}
			Dust obj4 = Main.dust[Dust.NewDust(new Vector2(position.X + (float)(width / 2) + (float)num20, num22), 12, height / 2, 240)];
			obj4.noGravity = true;
			obj4.scale = 1.2f;
			obj4.velocity *= 0.2f;
			obj4.alpha = 200;
			obj4.shader = GameShaders.Armor.GetSecondaryShader(cWings, this);
		}
	}

	private void HandleBeingInChestRange()
	{
		if (chest != -1)
		{
			if (chest != -2)
			{
				piggyBankProjTracker.Clear();
			}
			if (chest != -5)
			{
				voidLensChest.Clear();
			}
			bool flag = false;
			int projectileLocalIndex = piggyBankProjTracker.ProjectileLocalIndex;
			if (projectileLocalIndex >= 0)
			{
				flag = true;
				if (!Main.projectile[projectileLocalIndex].active || (Main.projectile[projectileLocalIndex].type != 525 && Main.projectile[projectileLocalIndex].type != 960))
				{
					Main.PlayInteractiveProjectileOpenCloseSound(Main.projectile[projectileLocalIndex].type, open: false);
					chest = -1;
					Recipe.FindRecipes();
				}
				else
				{
					int num = (int)(((double)position.X + (double)width * 0.5) / 16.0);
					int num2 = (int)(((double)position.Y + (double)height * 0.5) / 16.0);
					Vector2 vector = Main.projectile[projectileLocalIndex].Hitbox.ClosestPointInRect(base.Center);
					chestX = (int)vector.X / 16;
					chestY = (int)vector.Y / 16;
					if (num < chestX - tileRangeX || num > chestX + tileRangeX + 1 || num2 < chestY - tileRangeY || num2 > chestY + tileRangeY + 1)
					{
						if (chest != -1)
						{
							Main.PlayInteractiveProjectileOpenCloseSound(Main.projectile[projectileLocalIndex].type, open: false);
						}
						chest = -1;
						Recipe.FindRecipes();
					}
				}
			}
			int projectileLocalIndex2 = voidLensChest.ProjectileLocalIndex;
			if (projectileLocalIndex2 >= 0)
			{
				flag = true;
				if (!Main.projectile[projectileLocalIndex2].active || Main.projectile[projectileLocalIndex2].type != 734)
				{
					SoundEngine.PlaySound(SoundID.Item130);
					chest = -1;
					Recipe.FindRecipes();
				}
				else
				{
					int num3 = (int)(((double)position.X + (double)width * 0.5) / 16.0);
					int num4 = (int)(((double)position.Y + (double)height * 0.5) / 16.0);
					Vector2 vector2 = Main.projectile[projectileLocalIndex2].Hitbox.ClosestPointInRect(base.Center);
					chestX = (int)vector2.X / 16;
					chestY = (int)vector2.Y / 16;
					if (num3 < chestX - tileRangeX || num3 > chestX + tileRangeX + 1 || num4 < chestY - tileRangeY || num4 > chestY + tileRangeY + 1)
					{
						if (chest != -1)
						{
							SoundEngine.PlaySound(SoundID.Item130);
						}
						chest = -1;
						Recipe.FindRecipes();
					}
				}
			}
			if (flag)
			{
				return;
			}
			if (!IsInInteractionRangeToMultiTileHitbox(chestX, chestY))
			{
				if (chest != -1)
				{
					SoundEngine.PlaySound(11);
				}
				chest = -1;
				Recipe.FindRecipes();
			}
			else if (!Main.tile[chestX, chestY].active())
			{
				SoundEngine.PlaySound(11);
				chest = -1;
				Recipe.FindRecipes();
			}
		}
		else
		{
			piggyBankProjTracker.Clear();
			voidLensChest.Clear();
		}
	}

	public bool IsInInteractionRangeToMultiTileHitbox(int chestPointX, int chestPointY)
	{
		int num = (int)(((double)position.X + (double)width * 0.5) / 16.0);
		int num2 = (int)(((double)position.Y + (double)height * 0.5) / 16.0);
		Rectangle r = Rectangle.Empty;
		Tile tile = Main.tile[chestPointX, chestPointY];
		if (tile.type == 463 || tile.type == 491)
		{
			r = new Rectangle(chestPointX * 16 - 16, chestPointY * 16 - 32, 48, 64);
		}
		if (TileID.Sets.BasicChest[tile.type] || tile.type == 97)
		{
			r = new Rectangle(chestPointX * 16, chestPointY * 16, 32, 32);
		}
		if (tile.type == 88)
		{
			r = new Rectangle(chestPointX * 16, chestPointY * 16, 48, 32);
		}
		if (tile.type == 29)
		{
			r = new Rectangle(chestPointX * 16, chestPointY * 16, 32, 16);
		}
		r.Inflate(-1, -1);
		Point point = r.ClosestPointInRect(base.Center).ToTileCoordinates();
		chestPointX = point.X;
		chestPointY = point.Y;
		return num >= chestPointX - tileRangeX && num <= chestPointX + tileRangeX + 1 && num2 >= chestPointY - tileRangeY && num2 <= chestPointY + tileRangeY + 1;
	}

	public void ResetVisibleAccessories()
	{
		handon = -1;
		handoff = -1;
		back = -1;
		front = -1;
		shoe = -1;
		waist = -1;
		shield = -1;
		neck = -1;
		face = -1;
		balloon = -1;
		backpack = -1;
		tail = -1;
		faceHead = -1;
		faceFlower = -1;
		balloonFront = -1;
		beard = -1;
	}

	public void UpdateArmorLights()
	{
		if (vortexStealthActive)
		{
			return;
		}
		float num = 0f;
		float num2 = 0f;
		float num3 = 0f;
		switch (head)
		{
		case 11:
			num = 0.92f;
			num2 = 0.8f;
			num3 = 0.65f;
			break;
		case 216:
			num = 0.7f;
			num2 = 0.95f;
			num3 = 0.82f;
			break;
		case 169:
			num = 0f;
			num2 = 0.36f;
			num3 = 0.4f;
			break;
		case 170:
			num = 0.4f;
			num2 = 0.16f;
			num3 = 0.36f;
			break;
		case 171:
			num = 0.5f;
			num2 = 0.25f;
			num3 = 0.05f;
			break;
		case 189:
			num = 0.9f;
			num2 = 0.9f;
			num3 = 0.7f;
			break;
		case 178:
			num = 0.1f;
			num2 = 0.2f;
			num3 = 0.3f;
			break;
		case 211:
			num = 0.2f;
			num2 = 0.4f;
			num3 = 0.8f;
			break;
		}
		float num4 = 0f;
		float num5 = 0f;
		float num6 = 0f;
		switch (body)
		{
		case 175:
			num4 = 0f;
			num5 = 0.36f;
			num6 = 0.4f;
			break;
		case 176:
			num4 = 0.4f;
			num5 = 0.16f;
			num6 = 0.36f;
			break;
		case 177:
			num4 = 0.5f;
			num5 = 0.25f;
			num6 = 0.05f;
			break;
		case 190:
			num = 0.9f;
			num2 = 0.9f;
			num3 = 0.7f;
			break;
		case 205:
			num4 = 0.2f;
			num5 = 0.4f;
			num6 = 0.8f;
			break;
		}
		float num7 = 0f;
		float num8 = 0f;
		float num9 = 0f;
		switch (legs)
		{
		case 110:
			num7 = 0f;
			num8 = 0.36f;
			num9 = 0.4f;
			break;
		case 111:
			num7 = 0.4f;
			num8 = 0.16f;
			num9 = 0.36f;
			break;
		case 112:
			num7 = 0.5f;
			num8 = 0.25f;
			num9 = 0.05f;
			break;
		case 130:
			num = 0.9f;
			num2 = 0.9f;
			num3 = 0.7f;
			break;
		}
		if (num != 0f || num2 != 0f || num3 != 0f)
		{
			float num10 = 1f;
			if (num == num4 && num2 == num5 && num3 == num6)
			{
				num10 += 0.5f;
			}
			if (num == num7 && num2 == num8 && num3 == num9)
			{
				num10 += 0.5f;
			}
			Vector2 spinningpoint = new Vector2(width / 2 + 8 * direction, 2f);
			if (fullRotation != 0f)
			{
				spinningpoint = spinningpoint.RotatedBy(fullRotation, fullRotationOrigin);
			}
			int i = (int)(position.X + spinningpoint.X) / 16;
			int j = (int)(position.Y + spinningpoint.Y) / 16;
			Lighting.AddLight(i, j, num * num10, num2 * num10, num3 * num10);
		}
		if (num4 != 0f || num5 != 0f || num6 != 0f)
		{
			float num11 = 1f;
			if (num4 == num && num5 == num2 && num6 == num3)
			{
				num11 += 0.5f;
			}
			if (num4 == num7 && num5 == num8 && num6 == num9)
			{
				num11 += 0.5f;
			}
			Vector2 spinningpoint2 = new Vector2(width / 2 + 8, height / 2);
			if (fullRotation != 0f)
			{
				spinningpoint2 = spinningpoint2.RotatedBy(fullRotation, fullRotationOrigin);
			}
			int i2 = (int)(position.X + spinningpoint2.X) / 16;
			int j2 = (int)(position.Y + spinningpoint2.Y) / 16;
			Lighting.AddLight(i2, j2, num4 * num11, num5 * num11, num6 * num11);
		}
		if (num7 != 0f || num8 != 0f || num9 != 0f)
		{
			float num12 = 1f;
			if (num7 == num4 && num8 == num5 && num9 == num6)
			{
				num12 += 0.5f;
			}
			if (num7 == num && num8 == num2 && num9 == num3)
			{
				num12 += 0.5f;
			}
			Vector2 spinningpoint3 = new Vector2(width / 2 + 8 * direction, (float)height * 0.75f);
			if (fullRotation != 0f)
			{
				spinningpoint3 = spinningpoint3.RotatedBy(fullRotation, fullRotationOrigin);
			}
			int i3 = (int)(position.X + spinningpoint3.X) / 16;
			int j3 = (int)(position.Y + spinningpoint3.Y) / 16;
			Lighting.AddLight(i3, j3, num7 * num12, num8 * num12, num9 * num12);
		}
	}

	public void Update_NPCCollision()
	{
		if (creativeGodMode)
		{
			return;
		}
		Rectangle rectangle = new Rectangle((int)position.X, (int)position.Y, width, height);
		for (int i = 0; i < 200; i++)
		{
			if (!Main.npc[i].active || Main.npc[i].friendly || Main.npc[i].damage <= 0)
			{
				continue;
			}
			int specialHitSetter = -1;
			switch (Main.npc[i].type)
			{
			case 396:
			case 397:
			case 398:
			case 400:
			case 401:
				specialHitSetter = 1;
				break;
			case 636:
				specialHitSetter = 1;
				if (Main.npc[i].ai[0] == 0f || Main.npc[i].ai[0] == 10f)
				{
					continue;
				}
				break;
			}
			if ((specialHitSetter == -1 && immune) || (dash == 2 && i == eocHit && eocDash > 0) || npcTypeNoAggro[Main.npc[i].type])
			{
				continue;
			}
			float damageMultiplier = 1f;
			Main.npc[i].position += Main.npc[i].netOffset;
			Rectangle npcRect = new Rectangle((int)Main.npc[i].position.X, (int)Main.npc[i].position.Y, Main.npc[i].width, Main.npc[i].height);
			NPC.GetMeleeCollisionData(rectangle, i, ref specialHitSetter, ref damageMultiplier, ref npcRect);
			if (rectangle.Intersects(npcRect))
			{
				if (npcTypeNoAggro[Main.npc[i].type])
				{
					continue;
				}
				bool flag = true;
				bool flag2 = false;
				bool num = CanParryAgainst(rectangle, npcRect, Main.npc[i].velocity);
				float num2 = thorns;
				float knockback = 10f;
				if (turtleThorns)
				{
					num2 = 2f;
				}
				if (num)
				{
					num2 = 2f;
					knockback = 5f;
					flag = false;
					flag2 = true;
				}
				int num3 = -1;
				if (Main.npc[i].position.X + (float)(Main.npc[i].width / 2) < position.X + (float)(width / 2))
				{
					num3 = 1;
				}
				int num4 = Main.DamageVar((float)Main.npc[i].damage * damageMultiplier, 0f - luck);
				int num5 = Item.NPCtoBanner(Main.npc[i].BannerID());
				if (num5 > 0 && HasNPCBannerBuff(num5))
				{
					num4 = ((!Main.expertMode) ? ((int)((float)num4 * ItemID.Sets.BannerStrength[Item.BannerToItem(num5)].NormalDamageReceived)) : ((int)((float)num4 * ItemID.Sets.BannerStrength[Item.BannerToItem(num5)].ExpertDamageReceived)));
				}
				bool flag3 = !immune;
				if (specialHitSetter >= 0)
				{
					flag3 = hurtCooldowns[specialHitSetter] == 0;
				}
				if (whoAmI == Main.myPlayer && num2 > 0f && flag3 && !Main.npc[i].dontTakeDamage)
				{
					int num6 = (int)((float)num4 * num2);
					if (num6 > 1000)
					{
						num6 = 1000;
					}
					ApplyDamageToNPC(Main.npc[i], num6, knockback, -num3, crit: false);
				}
				if (whoAmI == Main.myPlayer && cactusThorns && flag3 && !Main.npc[i].dontTakeDamage)
				{
					int damage = 15;
					if (Main.masterMode)
					{
						damage = 45;
					}
					else if (Main.expertMode)
					{
						damage = 30;
					}
					ApplyDamageToNPC(Main.npc[i], damage, knockback, -num3, crit: false);
				}
				if (resistCold && Main.npc[i].coldDamage)
				{
					num4 = (int)((float)num4 * 0.7f);
				}
				if (flag && Hurt(dodgeable: Main.npc[i].IsDamageDodgeable(), damageSource: PlayerDeathReason.ByNPC(i), Damage: num4, hitDirection: num3, pvp: false, quiet: false, Crit: false, cooldownCounter: specialHitSetter) > 0.0 && !dead && !flag2)
				{
					StatusFromNPC(Main.npc[i]);
				}
				if (num)
				{
					GiveImmuneTimeForCollisionAttack(longInvince ? 60 : 30);
					AddBuff(198, 300, quiet: false);
				}
			}
			Main.npc[i].position -= Main.npc[i].netOffset;
		}
	}

	public bool CanParryAgainst(Rectangle blockingPlayerRect, Rectangle enemyRect, Vector2 enemyVelocity)
	{
		if (shieldParryTimeLeft > 0 && Math.Sign(enemyRect.Center.X - blockingPlayerRect.Center.X) == direction && enemyVelocity != Vector2.Zero)
		{
			return !immune;
		}
		return false;
	}

	private void PurgeDD2EnergyCrystals()
	{
		if (trashItem.type == 3822)
		{
			trashItem.TurnToAir();
		}
		if (Main.myPlayer == whoAmI && Main.mouseItem.type == 3822)
		{
			Main.mouseItem.TurnToAir();
		}
		for (int i = 0; i < 59; i++)
		{
			Item item = inventory[i];
			if (item.stack > 0 && item.type == 3822)
			{
				item.TurnToAir();
			}
		}
		if (this.chest == -2)
		{
			Chest chest = bank;
			for (int j = 0; j < 40; j++)
			{
				if (chest.item[j].stack > 0 && chest.item[j].type == 3822)
				{
					chest.item[j].TurnToAir();
				}
			}
		}
		if (this.chest == -4)
		{
			Chest chest2 = bank3;
			for (int k = 0; k < 40; k++)
			{
				if (chest2.item[k].stack > 0 && chest2.item[k].type == 3822)
				{
					chest2.item[k].TurnToAir();
				}
			}
		}
		if (this.chest == -5)
		{
			Chest chest3 = bank4;
			for (int l = 0; l < 40; l++)
			{
				if (chest3.item[l].stack > 0 && chest3.item[l].type == 3822)
				{
					chest3.item[l].TurnToAir();
				}
			}
		}
		if (this.chest == -3)
		{
			Chest chest4 = bank2;
			for (int m = 0; m < 40; m++)
			{
				if (chest4.item[m].stack > 0 && chest4.item[m].type == 3822)
				{
					chest4.item[m].TurnToAir();
				}
			}
		}
		if (this.chest <= -1)
		{
			return;
		}
		Chest chest5 = Main.chest[this.chest];
		for (int n = 0; n < 40; n++)
		{
			if (chest5.item[n].stack > 0 && chest5.item[n].type == 3822)
			{
				chest5.item[n].TurnToAir();
				if (Main.netMode == 1)
				{
					NetMessage.SendData(32, -1, -1, null, this.chest, n);
				}
			}
		}
	}

	public void ItemCheck_ManageRightClickFeatures()
	{
		bool flag = selectedItem != 58 && controlUseTile && Main.myPlayer == whoAmI && !tileInteractionHappened && releaseUseItem && !controlUseItem && !mouseInterface && !CaptureManager.Instance.Active && !Main.HoveringOverAnNPC && !Main.SmartInteractShowingGenuine;
		bool flag2 = flag;
		if (!ItemID.Sets.ItemsThatAllowRepeatedRightClick[inventory[selectedItem].type] && !Main.mouseRightRelease)
		{
			flag2 = false;
		}
		if (flag2 && altFunctionUse == 0)
		{
			for (int i = 0; i < _projectilesToInteractWith.Count; i++)
			{
				Projectile projectile = Main.projectile[_projectilesToInteractWith[i]];
				if (projectile.Hitbox.Contains(Main.MouseWorld.ToPoint()) || Main.SmartInteractProj == projectile.whoAmI)
				{
					flag = false;
					flag2 = false;
					break;
				}
			}
		}
		if (flag2 && altFunctionUse == 0 && itemTime == 0 && itemAnimation == 0)
		{
			int num = -1;
			int type = 7;
			switch (inventory[selectedItem].type)
			{
			case 5324:
				num = 5329;
				type = 22;
				break;
			case 5329:
				num = 5330;
				type = 22;
				break;
			case 5330:
				num = 5324;
				type = 22;
				break;
			case 4346:
				num = 5391;
				type = 22;
				break;
			case 5391:
				num = 4346;
				type = 22;
				break;
			case 5325:
				num = 4131;
				break;
			case 4131:
				num = 5325;
				break;
			case 5323:
				num = 5455;
				break;
			case 5455:
				num = 5323;
				break;
			case 4767:
				num = 5453;
				break;
			case 5453:
				num = 4767;
				break;
			case 5309:
				num = 5454;
				break;
			case 5454:
				num = 5309;
				break;
			case 5358:
				num = 5360;
				type = 22;
				break;
			case 5360:
				num = 5361;
				type = 22;
				break;
			case 5361:
				num = 5359;
				type = 22;
				break;
			case 5359:
				num = 5358;
				type = 22;
				break;
			case 5437:
				num = 5358;
				type = 22;
				break;
			}
			if (num != -1)
			{
				releaseUseTile = false;
				Main.mouseRightRelease = false;
				SoundEngine.PlaySound(type);
				inventory[selectedItem].ChangeItemType(num);
				Recipe.FindRecipes();
			}
		}
		if (flag2 && altFunctionUse == 0 && inventory[selectedItem].type == 3384)
		{
			altFunctionUse = 1;
			controlUseItem = true;
		}
		if (flag2 && altFunctionUse == 0 && inventory[selectedItem].type == 3858)
		{
			altFunctionUse = 1;
			controlUseItem = true;
		}
		if (flag2 && altFunctionUse == 0 && inventory[selectedItem].type == 4673)
		{
			altFunctionUse = 1;
			controlUseItem = true;
		}
		if (flag2 && altFunctionUse == 0 && inventory[selectedItem].type == 3852 && itemAnimation == 0)
		{
			altFunctionUse = 1;
			controlUseItem = true;
		}
		if (flag2 && altFunctionUse == 0 && inventory[selectedItem].shoot > 0 && ProjectileID.Sets.TurretFeature[inventory[selectedItem].shoot])
		{
			altFunctionUse = 1;
			controlUseItem = true;
		}
		if (flag2 && altFunctionUse == 0 && inventory[selectedItem].shoot > 0 && ProjectileID.Sets.MinionTargettingFeature[inventory[selectedItem].shoot])
		{
			altFunctionUse = 1;
			controlUseItem = true;
		}
		if (!controlUseItem && altFunctionUse == 1)
		{
			altFunctionUse = 0;
		}
		ItemCheck_ManageRightClickFeatures_ShieldRaise(flag);
	}

	public void ItemCheck_ManageRightClickFeatures_ShieldRaise(bool theGeneralCheck)
	{
		bool mouseRight = PlayerInput.Triggers.JustPressed.MouseRight;
		if (whoAmI != Main.myPlayer)
		{
			mouseRight = shieldRaised;
			theGeneralCheck = shieldRaised;
		}
		bool shouldGuard = false;
		bool flag = inventory[selectedItem].type == 3823 || inventory[selectedItem].type == 4760;
		if (theGeneralCheck && flag && hasRaisableShield && !mount.Active && (itemAnimation == 0 || mouseRight))
		{
			shouldGuard = true;
		}
		if (shield_parry_cooldown > 0)
		{
			shield_parry_cooldown--;
			if (shield_parry_cooldown == 0)
			{
				SoundEngine.PlaySound(25, base.Center);
				for (int i = 0; i < 10; i++)
				{
					int num = Dust.NewDust(base.Center + new Vector2(direction * 6 + ((direction == -1) ? (-10) : 0), -14f), 10, 16, 45, 0f, 0f, 255, new Color(255, 100, 0, 127), (float)Main.rand.Next(10, 16) * 0.1f);
					Main.dust[num].noLight = true;
					Main.dust[num].noGravity = true;
					Main.dust[num].velocity *= 0.5f;
				}
			}
		}
		if (shieldParryTimeLeft > 0 && ++shieldParryTimeLeft > 20)
		{
			shieldParryTimeLeft = 0;
		}
		TryTogglingShield(shouldGuard);
	}

	public void TryTogglingShield(bool shouldGuard)
	{
		if (shouldGuard == shieldRaised)
		{
			return;
		}
		shieldRaised = shouldGuard;
		if (shieldRaised)
		{
			if (shield_parry_cooldown == 0)
			{
				shieldParryTimeLeft = 1;
			}
			itemAnimation = 0;
			itemTime = 0;
			reuseDelay = 0;
		}
		else
		{
			shield_parry_cooldown = 15;
			shieldParryTimeLeft = 0;
			ApplyAttackCooldown(20);
		}
	}

	private void HandleHotbar()
	{
		int num = PlayerInput.Triggers.Current.HotbarPlus.ToInt() - PlayerInput.Triggers.Current.HotbarMinus.ToInt();
		if (PlayerInput.CurrentProfile.HotbarAllowsRadial && num != 0 && PlayerInput.Triggers.Current.HotbarHoldTime > PlayerInput.CurrentProfile.HotbarRadialHoldTimeRequired && PlayerInput.CurrentProfile.HotbarRadialHoldTimeRequired != -1)
		{
			PlayerInput.MiscSettingsTEMP.HotbarRadialShouldBeUsed = true;
			PlayerInput.Triggers.Current.HotbarScrollCD = 2;
		}
		if (PlayerInput.CurrentProfile.HotbarRadialHoldTimeRequired != -1)
		{
			num = PlayerInput.Triggers.JustReleased.HotbarPlus.ToInt() - PlayerInput.Triggers.JustReleased.HotbarMinus.ToInt();
			if (PlayerInput.Triggers.Current.HotbarScrollCD == 1 && num != 0)
			{
				num = 0;
			}
		}
		if (PlayerInput.Triggers.Current.HotbarScrollCD == 0 && num != 0)
		{
			HotbarOffset += num;
			PlayerInput.Triggers.Current.HotbarScrollCD = 8;
		}
		if (!Main.inFancyUI && !Main.ingameOptionsWindow)
		{
			HotbarOffset += PlayerInput.ScrollWheelDelta / -120;
		}
		ScrollHotbar(HotbarOffset);
		HotbarOffset = 0;
	}

	private void ItemCheckWrapped(int i)
	{
		int num;
		if (!controlLeft && !controlRight && !controlUp && !controlDown && PlayerInput.UsingGamepad && Main.SmartCursorIsUsed)
		{
			num = ((PlayerInput.GamepadThumbstickRight.Length() < 0.05f) ? 1 : 0);
			if (num != 0)
			{
				ForceForwardCursor(state: true);
			}
		}
		else
		{
			num = 0;
		}
		int num2;
		if (PlayerInput.smartSelectPointer.ShouldBeUsed())
		{
			num2 = ((!Main.SmartCursorIsUsed) ? 1 : 0);
			if (num2 != 0)
			{
				ForceSmartSelectCursor(state: true);
			}
		}
		else
		{
			num2 = 0;
		}
		LockOnHelper.SetUP();
		int stack = inventory[selectedItem].stack;
		if (Main.ignoreErrors)
		{
			ItemCheck();
		}
		else
		{
			ItemCheck();
		}
		if (stack != inventory[selectedItem].stack)
		{
			Recipe.FindRecipes();
		}
		LockOnHelper.SetDOWN();
		if (num2 != 0)
		{
			ForceSmartSelectCursor(state: false);
		}
		if (num != 0)
		{
			ForceForwardCursor(state: false);
		}
		if (itemAnimation == 0)
		{
			lastVisualizedSelectedItem = HeldItem.Clone();
		}
	}

	private void ForceForwardCursor(bool state)
	{
		if (state != _forceForwardCursor)
		{
			_forceForwardCursor = state;
			if (state)
			{
				_inputMouseCoordsForward = new Point(PlayerInput.MouseX, PlayerInput.MouseY);
				_mainMouseCoordsForward = new Point(Main.mouseX, Main.mouseY);
				Point point = (base.Center - Main.screenPosition + new Vector2(direction * 200, 0f)).ToPoint();
				Main.mouseX = (PlayerInput.MouseX = point.X);
				Main.mouseY = (PlayerInput.MouseY = point.Y);
			}
			else
			{
				PlayerInput.MouseX = _inputMouseCoordsForward.X;
				PlayerInput.MouseY = _inputMouseCoordsForward.Y;
				Main.mouseX = _mainMouseCoordsForward.X;
				Main.mouseY = _mainMouseCoordsForward.Y;
			}
		}
	}

	private void ForceSmartSelectCursor(bool state)
	{
		if (state != _forceSmartSelectCursor)
		{
			_forceSmartSelectCursor = state;
			if (state)
			{
				_inputMouseCoordsSmartSelect = new Point(PlayerInput.MouseX, PlayerInput.MouseY);
				_mainMouseCoordsSmartSelect = new Point(Main.mouseX, Main.mouseY);
				_tileTargetSmartSelect = new Point(tileTargetX, tileTargetY);
				Point p = PlayerInput.smartSelectPointer.GetPointerPosition().ToPoint();
				Main.mouseX = (PlayerInput.MouseX = p.X);
				Main.mouseY = (PlayerInput.MouseY = p.Y);
				Point point = (p.ToVector2() + Main.screenPosition).ToTileCoordinates();
				tileTargetX = point.X;
				tileTargetY = point.Y;
			}
			else
			{
				PlayerInput.MouseX = _inputMouseCoordsSmartSelect.X;
				PlayerInput.MouseY = _inputMouseCoordsSmartSelect.Y;
				Main.mouseX = _mainMouseCoordsSmartSelect.X;
				Main.mouseY = _mainMouseCoordsSmartSelect.Y;
				tileTargetX = _tileTargetSmartSelect.X;
				tileTargetY = _tileTargetSmartSelect.Y;
			}
		}
	}

	public void ScrollHotbar(int Offset)
	{
		Offset = ClampHotbarOffset(Offset);
		selectedItem += Offset;
		if (Offset != 0)
		{
			SoundEngine.PlaySound(12);
			int num = selectedItem - Offset;
			DpadRadial.ChangeSelection(-1);
			CircularRadial.ChangeSelection(-1);
			selectedItem = num + Offset;
			nonTorch = -1;
		}
		if (changeItem >= 0)
		{
			if (selectedItem != changeItem)
			{
				SoundEngine.PlaySound(12);
			}
			selectedItem = changeItem;
			changeItem = -1;
		}
		if (itemAnimation == 0 && selectedItem != 58)
		{
			while (selectedItem > 9)
			{
				selectedItem -= 10;
			}
			while (selectedItem < 0)
			{
				selectedItem += 10;
			}
		}
	}

	private static int ClampHotbarOffset(int Offset)
	{
		while (Offset > 9)
		{
			Offset -= 10;
		}
		while (Offset < 0)
		{
			Offset += 10;
		}
		return Offset;
	}

	public List<int> GetListOfProjectilesToInteractWithHack()
	{
		return _projectilesToInteractWith;
	}

	public void LockGamepadTileInteractions()
	{
		releaseUseTile = false;
		_lockTileInteractionsTimer = 3;
		PlayerInput.LockGamepadTileUseButton = true;
	}

	public void LookForTileInteractions()
	{
		if (Main.netMode == 2 || Main.myPlayer != whoAmI || Main.mapFullscreen || Main.InGameUI.CurrentState == Main.BestiaryUI)
		{
			return;
		}
		int smartInteractX = tileTargetX;
		int smartInteractY = tileTargetY;
		if (Main.SmartInteractShowingGenuine && Main.SmartInteractNPC == -1 && Main.SmartInteractProj == -1)
		{
			smartInteractX = Main.SmartInteractX;
			smartInteractY = Main.SmartInteractY;
		}
		bool flag = controlUseTile;
		if (PlayerInput.UsingGamepad && Main.HoveringOverAnNPC)
		{
			flag = false;
		}
		if (Main.gamePaused)
		{
			flag = false;
		}
		if (releaseUseTile)
		{
			tileInteractionHappened = false;
		}
		tileInteractAttempted = flag;
		if (tileInteractAttempted && releaseUseTile)
		{
			if (Main.instance.currentNPCShowingChatBubble > -1 && (talkNPC == -1 || !Main.npcChatRelease))
			{
				tileInteractAttempted = true;
				releaseUseTile = false;
			}
			if (Main.HasInteractibleObjectThatIsNotATile)
			{
				tileInteractAttempted = true;
				releaseUseTile = false;
			}
		}
		if (IsInTileInteractionRange(smartInteractX, smartInteractY, TileReachCheckSettings.Simple))
		{
			TileInteractionsCheckLongDistance(tileTargetX, tileTargetY);
			TileInteractionsCheck(smartInteractX, smartInteractY);
		}
		else
		{
			TileInteractionsCheckLongDistance(smartInteractX, smartInteractY);
		}
		TryInteractingWithMinecartTrackInNearbyArea(smartInteractX, smartInteractY);
	}

	private void TryInteractingWithMinecartTrackInNearbyArea(int selectedTargetX, int selectedTargetY)
	{
		if ((mount.Active && MountID.Sets.Cart[mount.Type]) || !botherWithUnaimedMinecartTracks || tileInteractionHappened || Main.SmartInteractShowingGenuine || Main.SmartInteractNPC != -1 || Main.SmartInteractProj != -1 || !WorldGen.InWorld(selectedTargetX, selectedTargetY, 10) || gravDir != 1f)
		{
			return;
		}
		int num = 2;
		for (int i = selectedTargetX - num; i <= selectedTargetX + num; i++)
		{
			for (int j = selectedTargetY - num; j <= selectedTargetY + num; j++)
			{
				if (!IsInTileInteractionRange(i, j, TileReachCheckSettings.Simple))
				{
					continue;
				}
				Tile tile = Main.tile[i, j];
				if (tile == null)
				{
					continue;
				}
				if (tile.active() && tile.type == 314)
				{
					if (!cursorItemIconEnabled)
					{
						noThrow = 2;
						cursorItemIconEnabled = true;
						cursorItemIconID = 2343;
					}
					if (tileInteractAttempted)
					{
						TileInteractionsCheck(i, j);
					}
				}
				if (tileInteractionHappened)
				{
					return;
				}
			}
		}
	}

	public bool InInteractionRange(int interactX, int interactY, TileReachCheckSettings settings)
	{
		int num = (int)(((double)position.X + (double)width * 0.5) / 16.0);
		int num2 = (int)(((double)position.Y + (double)height * 0.5) / 16.0);
		Tile tile = Main.tile[interactX, interactY];
		settings.GetRanges(this, out var x, out var y);
		if (tile.type == 597)
		{
			if (interactX < num)
			{
				interactX += 2;
			}
			if (interactY < num2)
			{
				interactY += 3;
			}
			Point point = position.ToTileCoordinates();
			Point point2 = base.BottomRight.ToTileCoordinates();
			if (point2.X >= interactX - x + 1 && point.X <= interactX + x - 1 && point2.Y >= interactY - y + 2)
			{
				return point.Y <= interactY + y - 1;
			}
			return false;
		}
		if (tile.type == 475)
		{
			if (num >= interactX - x - 1 && num <= interactX + x + 2 && num2 >= interactY - y - 1)
			{
				return num2 <= interactY + y + 2;
			}
			return false;
		}
		if (tile.type == 470)
		{
			if (num >= interactX - x - 1 && num <= interactX + x + 1 && num2 >= interactY - y - 1)
			{
				return num2 <= interactY + y + 2;
			}
			return false;
		}
		if (num >= interactX - x && num <= interactX + x + 1 && num2 >= interactY - y)
		{
			return num2 <= interactY + y + 1;
		}
		return false;
	}

	public bool IsInTileInteractionRange(int targetX, int targetY, TileReachCheckSettings settings)
	{
		settings.GetRanges(this, out var x, out var y);
		if (position.X / 16f - (float)x <= (float)targetX && (position.X + (float)width) / 16f + (float)x - 1f >= (float)targetX && position.Y / 16f - (float)y <= (float)targetY)
		{
			return (position.Y + (float)height) / 16f + (float)y - 2f >= (float)targetY;
		}
		return false;
	}

	public void TileInteractionsCheck(int myX, int myY)
	{
		if (Main.tile[myX, myY] == null)
		{
			Main.tile[myX, myY] = new Tile();
		}
		if (Main.tile[myX, myY].active())
		{
			TileInteractionsMouseOver(myX, myY);
			TileInteractionsUse(myX, myY);
		}
	}

	private void TileInteractionsCheckLongDistance(int myX, int myY)
	{
		if (!WorldGen.InWorld(myX, myY, 10) || Main.tile[myX, myY] == null || !Main.tile[myX, myY].active())
		{
			return;
		}
		if (TileID.Sets.BasicChest[Main.tile[myX, myY].type])
		{
			TileInteractionsMouseOver_Containers(myX, myY);
			if (cursorItemIconText == "")
			{
				cursorItemIconEnabled = false;
				cursorItemIconID = 0;
			}
		}
		if (Main.tile[myX, myY].type == 88)
		{
			Tile tile = Main.tile[myX, myY];
			int num = myY;
			int x = myX - tile.frameX % 54 / 18;
			if (tile.frameY % 36 != 0)
			{
				num--;
			}
			int num2 = Chest.FindChest(x, num);
			cursorItemIconID = -1;
			if (num2 < 0)
			{
				cursorItemIconText = Lang.dresserType[0].Value;
			}
			else
			{
				if (Main.chest[num2].name != "")
				{
					cursorItemIconText = Main.chest[num2].name;
				}
				else
				{
					cursorItemIconText = Lang.dresserType[tile.frameX / 54].Value;
				}
				if (cursorItemIconText == Lang.dresserType[tile.frameX / 54].Value)
				{
					cursorItemIconID = Chest.dresserTypeToIcon[tile.frameX / 54];
					cursorItemIconText = "";
				}
			}
			noThrow = 2;
			cursorItemIconEnabled = true;
			if (cursorItemIconText == "")
			{
				cursorItemIconEnabled = false;
				cursorItemIconID = 0;
			}
		}
		if (Main.tileSign[Main.tile[myX, myY].type])
		{
			noThrow = 2;
			int num3 = Main.tile[myX, myY].frameX / 18;
			int num4 = Main.tile[myX, myY].frameY / 18;
			num3 %= 2;
			int num5 = myX - num3;
			int num6 = myY - num4;
			Main.signBubble = true;
			Main.signX = num5 * 16 + 16;
			Main.signY = num6 * 16;
			int num7 = Sign.ReadSign(num5, num6, CreateIfMissing: false);
			if (num7 != -1 && tileTargetX >= num5 && tileTargetY >= num6 && tileTargetX <= num5 + 1 && tileTargetY <= num6 + 1)
			{
				Main.signHover = num7;
				cursorItemIconEnabled = false;
				cursorItemIconID = -1;
			}
		}
	}

	private void TileInteractionsUse(int myX, int myY)
	{
		if (WiresUI.Open || ownedProjectileCounts[651] > 0)
		{
			return;
		}
		bool flag = releaseUseTile;
		if (!tileInteractAttempted)
		{
			return;
		}
		bool flag2 = false;
		if (Main.tile[myX, myY].type == 212 && snowBallLauncherInteractionCooldown <= 0)
		{
			flag2 = true;
			snowBallLauncherInteractionCooldown = 7;
			SoundEngine.PlaySound(SoundID.Item11, position);
			int num = Main.tile[myX, myY].frameX / 18;
			int num2 = 0;
			while (num >= 3)
			{
				num2++;
				num -= 3;
			}
			num = myX - num;
			int num3;
			for (num3 = Main.tile[myX, myY].frameY / 18; num3 >= 3; num3 -= 3)
			{
			}
			num3 = myY - num3;
			float num4 = 12f + (float)Main.rand.Next(450) * 0.01f;
			float num5 = Main.rand.Next(85, 105);
			float num6 = Main.rand.Next(-35, 11);
			int type = 166;
			int damage = 35;
			float knockBack = 3.5f;
			Vector2 vector = new Vector2((num + 2) * 16 - 8, (num3 + 2) * 16 - 8 - 4);
			if (num2 == 0)
			{
				num5 *= -1f;
				vector.X -= 14f;
				vector.X -= 2f;
			}
			else
			{
				vector.X += 14f;
			}
			float num7 = num5;
			float num8 = num6;
			float num9 = (float)Math.Sqrt(num7 * num7 + num8 * num8);
			num9 = num4 / num9;
			num7 *= num9;
			num8 *= num9;
			int num10 = Projectile.NewProjectile(GetProjectileSource_TileInteraction(num, num3), vector.X, vector.Y, num7, num8, type, damage, knockBack, Main.myPlayer, -Main.rand.Next(0, 16));
			Main.projectile[num10].originatedFromActivableTile = true;
		}
		if (flag)
		{
			if (Main.tile[myX, myY].type == 132 || Main.tile[myX, myY].type == 136 || Main.tile[myX, myY].type == 144)
			{
				flag2 = true;
				Wiring.HitSwitch(myX, myY);
				NetMessage.SendData(59, -1, -1, null, myX, myY);
			}
			else if (Main.tile[myX, myY].type == 597)
			{
				flag2 = true;
				TryOpeningFullscreenMap();
			}
			else if (Main.tile[myX, myY].type == 441 || Main.tile[myX, myY].type == 468)
			{
				flag2 = true;
				int num11;
				for (num11 = Main.tile[myX, myY].frameX / 18; num11 > 1; num11 -= 2)
				{
				}
				num11 = myX - num11;
				int num12 = myY - Main.tile[myX, myY].frameY / 18;
				Animation.NewTemporaryAnimation(2, Main.tile[myX, myY].type, num11, num12);
				NetMessage.SendTemporaryAnimation(-1, 2, Main.tile[myX, myY].type, num11, num12);
				Wiring.HitSwitch(myX, myY);
				NetMessage.SendData(59, -1, -1, null, myX, myY);
			}
			else if (Main.tile[myX, myY].type == 139)
			{
				flag2 = true;
				SoundEngine.PlaySound(28, myX * 16, myY * 16, 0);
				WorldGen.SwitchMB(myX, myY);
			}
			else if (Main.tile[myX, myY].type == 215)
			{
				flag2 = true;
				SoundEngine.PlaySound(28, myX * 16, myY * 16, 0);
				int num13 = Main.tile[myX, myY].frameX % 54 / 18;
				int num14 = Main.tile[myX, myY].frameY % 36 / 18;
				int num15 = myX - num13;
				int num16 = myY - num14;
				int num17 = 36;
				if (Main.tile[num15, num16].frameY >= 36)
				{
					num17 = -36;
				}
				for (int i = num15; i < num15 + 3; i++)
				{
					for (int j = num16; j < num16 + 2; j++)
					{
						Main.tile[i, j].frameY = (short)(Main.tile[i, j].frameY + num17);
					}
				}
				NetMessage.SendTileSquare(-1, num15, num16, 3, 2);
			}
			else if (Main.tile[myX, myY].type == 207)
			{
				flag2 = true;
				SoundEngine.PlaySound(28, myX * 16, myY * 16, 0);
				WorldGen.SwitchFountain(myX, myY);
			}
			else if (Main.tile[myX, myY].type == 410 || Main.tile[myX, myY].type == 480 || Main.tile[myX, myY].type == 509 || Main.tile[myX, myY].type == 657 || Main.tile[myX, myY].type == 658)
			{
				flag2 = true;
				SoundEngine.PlaySound(28, myX * 16, myY * 16, 0);
				GamepadEnableGrappleCooldown();
				WorldGen.SwitchMonolith(myX, myY);
			}
			else if (Main.tile[myX, myY].type == 455)
			{
				flag2 = true;
				SoundEngine.PlaySound(28, myX * 16, myY * 16, 0);
				GamepadEnableGrappleCooldown();
				BirthdayParty.ToggleManualParty();
			}
			else if (Main.tile[myX, myY].type == 216)
			{
				flag2 = true;
				WorldGen.LaunchRocket(myX, myY, fromWiring: false);
			}
			else if (Main.tile[myX, myY].type == 386 || Main.tile[myX, myY].type == 387)
			{
				flag2 = true;
				bool flag3 = Main.tile[myX, myY].type == 387;
				int num18 = WorldGen.ShiftTrapdoor(myX, myY, (float)(myY * 16) > base.Center.Y).ToInt();
				if (num18 == 0)
				{
					num18 = -WorldGen.ShiftTrapdoor(myX, myY, (float)(myY * 16) <= base.Center.Y).ToInt();
				}
				if (num18 != 0)
				{
					NetMessage.SendData(19, -1, -1, null, 2 + (!flag3).ToInt(), myX, myY, num18 * Math.Sign((float)(myY * 16) - base.Center.Y));
				}
			}
			else if (Main.tile[myX, myY].type == 388 || Main.tile[myX, myY].type == 389)
			{
				flag2 = true;
				bool flag4 = Main.tile[myX, myY].type == 389;
				if (WorldGen.ShiftTallGate(myX, myY, flag4))
				{
					NetMessage.SendData(19, -1, -1, null, 4 + flag4.ToInt(), myX, myY);
				}
			}
			else if (Main.tile[myX, myY].type == 15 || Main.tile[myX, myY].type == 497)
			{
				if (IsWithinSnappngRangeToTile(myX, myY, 40))
				{
					flag2 = true;
					GamepadEnableGrappleCooldown();
					sitting.SitDown(this, myX, myY);
				}
			}
			else if (Main.tile[myX, myY].type == 89 || Main.tile[myX, myY].type == 102 || Main.tile[myX, myY].type == 487)
			{
				if (IsWithinSnappngRangeToTile(myX, myY, 40))
				{
					flag2 = true;
					GamepadEnableGrappleCooldown();
					sitting.SitDown(this, myX, myY);
				}
			}
			else if (Main.tile[myX, myY].type == 335)
			{
				flag2 = true;
				WorldGen.LaunchRocketSmall(myX, myY, fromWiring: false);
			}
			else if (Main.tile[myX, myY].type == 411 && Main.tile[myX, myY].frameX < 36)
			{
				flag2 = true;
				Wiring.HitSwitch(myX, myY);
				NetMessage.SendData(59, -1, -1, null, myX, myY);
			}
			else if (Main.tile[myX, myY].type == 494)
			{
				flag2 = true;
				for (int k = 0; k < 1000; k++)
				{
					if (ProjectileID.Sets.IsAGolfBall[Main.projectile[k].type] && Main.projectile[k].owner == whoAmI)
					{
						Main.projectile[k].Kill();
					}
				}
				GetPreferredGolfBallToUse(out var projType);
				Projectile.NewProjectile(GetProjectileSource_TileInteraction(myX, myY), (float)(myX * 16) + 8.5f, myY * 16 + 6, 0f, 0f, projType, 0, 0f, whoAmI, 0f, -1f);
			}
			else if (Main.tile[myX, myY].type == 338)
			{
				flag2 = true;
				int num19 = myY;
				if (Main.tile[myX, num19].frameY == 18)
				{
					num19--;
				}
				bool flag5 = false;
				for (int l = 0; l < 1000; l++)
				{
					if (Main.projectile[l].active && Main.projectile[l].aiStyle == 73 && Main.projectile[l].ai[0] == (float)myX && Main.projectile[l].ai[1] == (float)num19)
					{
						flag5 = true;
						break;
					}
				}
				if (!flag5)
				{
					int num20 = Projectile.NewProjectile(GetProjectileSource_TileInteraction(myX, num19), myX * 16 + 8, num19 * 16 + 2, 0f, 0f, 419 + Main.rand.Next(4), 0, 0f, whoAmI, myX, num19);
					Main.projectile[num20].originatedFromActivableTile = true;
				}
			}
			else if (Main.tile[myX, myY].type == 33 || Main.tile[myX, myY].type == 49 || Main.tile[myX, myY].type == 372 || Main.tile[myX, myY].type == 174 || Main.tile[myX, myY].type == 646)
			{
				short num21 = 18;
				Tile tile = Main.tile[myX, myY];
				if (tile.frameX > 0)
				{
					num21 = -18;
				}
				tile.frameX += num21;
				NetMessage.SendTileSquare(-1, myX, myY);
				flag2 = true;
				GamepadEnableGrappleCooldown();
			}
			else if (Main.tile[myX, myY].type == 4 || Main.tile[myX, myY].type == 13 || (Main.tile[myX, myY].type == 50 && Main.tile[myX, myY].frameX == 90))
			{
				WorldGen.KillTile(myX, myY);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 0, myX, myY);
				}
				flag2 = true;
				GamepadEnableGrappleCooldown();
			}
			else if (Main.tile[myX, myY].type == 466)
			{
				flag2 = true;
				GamepadEnableGrappleCooldown();
				int num22 = myY;
				Tile tileSafely = Framing.GetTileSafely(myX, myY);
				if (tileSafely.frameY == 0)
				{
					num22 += 3;
				}
				if (tileSafely.frameY == 18)
				{
					num22 += 2;
				}
				if (tileSafely.frameY == 36)
				{
					num22++;
				}
				if (DD2Event.Ongoing)
				{
					DD2Event.RequestToSkipWaitTime(myX, myY);
				}
				else
				{
					bool flag6 = !DD2Event.Ongoing && !NPC.AnyNPCs(548) && !Main.pumpkinMoon && !Main.snowMoon;
					if (flag6)
					{
						flag6 = HasItem(3828);
					}
					if (flag6)
					{
						flag6 = !DD2Event.WouldFailSpawningHere(myX, num22);
						if (!flag6)
						{
							DD2Event.FailureMessage(-1);
						}
					}
					if (flag6)
					{
						flag6 = ConsumeItem(3828, reverseOrder: true);
					}
					if (flag6)
					{
						DD2Event.SummonCrystal(myX, num22, whoAmI);
					}
				}
			}
			else if (Main.tile[myX, myY].type == 334)
			{
				flag2 = true;
				if (ItemFitsWeaponRack(inventory[selectedItem]))
				{
					GamepadEnableGrappleCooldown();
					PlaceWeapon(myX, myY);
				}
				else
				{
					int num23 = myX;
					int num24 = myY;
					if (Main.tile[myX, myY].frameY == 0)
					{
						num24++;
					}
					if (Main.tile[myX, myY].frameY == 36)
					{
						num24--;
					}
					int frameX = Main.tile[myX, num24].frameX;
					int num25 = Main.tile[myX, num24].frameX;
					int num26 = 0;
					while (num25 >= 5000)
					{
						num25 -= 5000;
						num26++;
					}
					if (num26 != 0)
					{
						num25 = (num26 - 1) * 18;
					}
					num25 %= 54;
					if (num25 == 18)
					{
						frameX = Main.tile[myX - 1, num24].frameX;
						num23--;
					}
					if (num25 == 36)
					{
						frameX = Main.tile[myX - 2, num24].frameX;
						num23 -= 2;
					}
					if (frameX >= 5000)
					{
						GamepadEnableGrappleCooldown();
						WorldGen.KillTile(myX, num24, fail: true);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, null, 0, myX, num24, 1f);
						}
					}
				}
			}
			else if (Main.tile[myX, myY].type == 440)
			{
				flag2 = true;
				int num27 = Main.tile[myX, myY].frameX / 54;
				int num28 = Main.tile[myX, myY].frameY / 54;
				_ = Main.tile[myX, myY].frameX % 54 / 18;
				_ = Main.tile[myX, myY].frameY % 54 / 18;
				int num29 = -1;
				switch (num27)
				{
				case 0:
					num29 = 1526;
					break;
				case 1:
					num29 = 1524;
					break;
				case 2:
					num29 = 1525;
					break;
				case 3:
					num29 = 1523;
					break;
				case 4:
					num29 = 1522;
					break;
				case 5:
					num29 = 1527;
					break;
				case 6:
					num29 = 3643;
					break;
				}
				if (num29 != -1)
				{
					if (num28 == 0 && HasItem(num29) && selectedItem != 58)
					{
						GamepadEnableGrappleCooldown();
						if (Main.netMode != 1)
						{
							ConsumeItem(num29);
							WorldGen.ToggleGemLock(myX, myY, on: true);
						}
						else
						{
							ConsumeItem(num29);
							NetMessage.SendData(105, -1, -1, null, myX, myY, 1f);
						}
					}
					else if (num28 == 1)
					{
						GamepadEnableGrappleCooldown();
						if (Main.netMode != 1)
						{
							WorldGen.ToggleGemLock(myX, myY, on: false);
						}
						else
						{
							NetMessage.SendData(105, -1, -1, null, myX, myY);
						}
					}
				}
			}
			else if (Main.tile[myX, myY].type == 395)
			{
				flag2 = true;
				TEItemFrame.OnPlayerInteraction(this, myX, myY);
			}
			else if (Main.tile[myX, myY].type == 520)
			{
				flag2 = true;
				TEFoodPlatter.OnPlayerInteraction(this, myX, myY);
			}
			else if (Main.tile[myX, myY].type == 471)
			{
				flag2 = true;
				TEWeaponsRack.OnPlayerInteraction(this, myX, myY);
			}
			else if (Main.tile[myX, myY].type == 470)
			{
				flag2 = true;
				TEDisplayDoll.OnPlayerInteraction(this, myX, myY);
			}
			else if (Main.tile[myX, myY].type == 475)
			{
				flag2 = true;
				TEHatRack.OnPlayerInteraction(this, myX, myY);
			}
			else if (Main.tile[myX, myY].type == 125)
			{
				flag2 = true;
				AddBuff(29, 108000);
				SoundEngine.PlaySound(SoundID.Item4, position);
			}
			else if (Main.tile[myX, myY].type == 621)
			{
				flag2 = true;
				AddBuff(192, 7200);
				SoundEngine.PlaySound(SoundID.Item2, position);
			}
			else if (Main.tile[myX, myY].type == 464)
			{
				flag2 = true;
				AddBuff(348, 108000);
				SoundEngine.PlaySound(SoundID.Item4, position);
			}
			else if (Main.tile[myX, myY].type == 377)
			{
				flag2 = true;
				AddBuff(159, 108000);
				SoundEngine.PlaySound(SoundID.Item37, position);
			}
			else if (Main.tile[myX, myY].type == 354)
			{
				flag2 = true;
				AddBuff(150, 108000);
				SoundEngine.PlaySound(SoundID.Item4, position);
			}
			else if (Main.tile[myX, myY].type == 287)
			{
				flag2 = true;
				AddBuff(93, 108000);
				SoundEngine.PlaySound(SoundID.Item149, position);
			}
			else if (Main.tile[myX, myY].type == 356)
			{
				flag2 = true;
				if (!Main.fastForwardTimeToDawn && (Main.netMode == 1 || Main.sundialCooldown == 0))
				{
					Main.Sundialing();
					SoundEngine.PlaySound(SoundID.Item4, position);
				}
			}
			else if (Main.tile[myX, myY].type == 663)
			{
				flag2 = true;
				if (!Main.fastForwardTimeToDusk && (Main.netMode == 1 || Main.moondialCooldown == 0))
				{
					Main.Moondialing();
					SoundEngine.PlaySound(SoundID.Item4, position);
				}
			}
			else if (Main.tile[myX, myY].type == 79)
			{
				flag2 = true;
				int num30 = myX;
				int num31 = myY;
				num30 += Main.tile[myX, myY].frameX / 18 * -1;
				if (Main.tile[myX, myY].frameX >= 72)
				{
					num30 += 4;
					num30++;
				}
				else
				{
					num30 += 2;
				}
				int num32 = Main.tile[myX, myY].frameY / 18;
				int num33 = 0;
				while (num32 > 1)
				{
					num32 -= 2;
					num33++;
				}
				num31 -= num32;
				num31 += 2;
				if (!IsHoveringOverABottomSideOfABed(myX, myY))
				{
					if (IsWithinSnappngRangeToTile(myX, myY, 96))
					{
						flag2 = true;
						GamepadEnableGrappleCooldown();
						sleeping.StartSleeping(this, myX, myY);
					}
				}
				else
				{
					FindSpawn();
					if (SpawnX == num30 && SpawnY == num31)
					{
						RemoveSpawn();
						Main.NewText(Language.GetTextValue("Game.SpawnPointRemoved"), byte.MaxValue, 240, 20);
					}
					else if (CheckSpawn(num30, num31))
					{
						ChangeSpawn(num30, num31);
						Main.NewText(Language.GetTextValue("Game.SpawnPointSet"), byte.MaxValue, 240, 20);
					}
				}
			}
			else if (Main.tileSign[Main.tile[myX, myY].type])
			{
				flag2 = true;
				bool flag7 = true;
				if (sign >= 0 && Sign.ReadSign(myX, myY, CreateIfMissing: false) == sign)
				{
					sign = -1;
					Main.npcChatText = "";
					Main.editSign = false;
					SoundEngine.PlaySound(11);
					flag7 = false;
				}
				if (flag7)
				{
					if (Main.netMode == 0)
					{
						SetTalkNPC(-1);
						Main.npcChatCornerItem = 0;
						Main.playerInventory = false;
						Main.editSign = false;
						int num34 = Sign.ReadSign(myX, myY);
						if (num34 < 0)
						{
							return;
						}
						SoundEngine.PlaySound(10);
						sign = num34;
						Main.npcChatText = Main.sign[num34].text;
					}
					else
					{
						int num35 = Main.tile[myX, myY].frameX / 18;
						int num36 = Main.tile[myX, myY].frameY / 18;
						while (num35 > 1)
						{
							num35 -= 2;
						}
						int num37 = myX - num35;
						int num38 = myY - num36;
						if (Main.tileSign[Main.tile[num37, num38].type])
						{
							NetMessage.SendData(46, -1, -1, null, num37, num38);
						}
					}
				}
			}
			else if (Main.tile[myX, myY].type == 104)
			{
				flag2 = true;
				string textValue = Language.GetTextValue("GameUI.TimeAtMorning");
				double num39 = Main.time;
				if (!Main.dayTime)
				{
					num39 += 54000.0;
				}
				num39 = num39 / 86400.0 * 24.0;
				double num40 = 7.5;
				num39 = num39 - num40 - 12.0;
				if (num39 < 0.0)
				{
					num39 += 24.0;
				}
				if (num39 >= 12.0)
				{
					textValue = Language.GetTextValue("GameUI.TimePastMorning");
				}
				int num41 = (int)num39;
				double num42 = (int)((num39 - (double)num41) * 60.0);
				string text = string.Concat(num42);
				if (num42 < 10.0)
				{
					text = "0" + text;
				}
				if (num41 > 12)
				{
					num41 -= 12;
				}
				if (num41 == 0)
				{
					num41 = 12;
				}
				Main.NewText(Language.GetTextValue("Game.Time", num41 + ":" + text + " " + textValue), byte.MaxValue, 240, 20);
			}
			else if (Main.tile[myX, myY].type == 237)
			{
				flag2 = true;
				bool flag8 = false;
				if (!NPC.AnyNPCs(245) && Main.hardMode && NPC.downedPlantBoss)
				{
					for (int m = 0; m < 58; m++)
					{
						if (inventory[m].type == 1293)
						{
							inventory[m].stack--;
							if (inventory[m].stack <= 0)
							{
								inventory[m].SetDefaults();
							}
							flag8 = true;
							break;
						}
					}
				}
				if (flag8)
				{
					SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
					if (Main.netMode != 1)
					{
						NPC.SpawnOnPlayer(whoAmI, 245);
					}
					else
					{
						NetMessage.SendData(61, -1, -1, null, whoAmI, 245f);
					}
				}
			}
			else if (Main.tile[myX, myY].type == 10)
			{
				flag2 = true;
				if (WorldGen.IsLockedDoor(myX, myY))
				{
					int num43 = 1141;
					bool flag9 = false;
					for (int n = 0; n < 58; n++)
					{
						if (inventory[n].type == num43 && inventory[n].stack > 0)
						{
							flag9 = true;
							inventory[n].stack--;
							if (inventory[n].stack <= 0)
							{
								inventory[n] = new Item();
							}
							WorldGen.UnlockDoor(myX, myY);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(52, -1, -1, null, whoAmI, 2f, myX, myY);
							}
						}
					}
					if (!flag9 && useVoidBag())
					{
						for (int num44 = 0; num44 < 40; num44++)
						{
							if (bank4.item[num44].type == num43 && bank4.item[num44].stack > 0)
							{
								bank4.item[num44].stack--;
								if (bank4.item[num44].stack <= 0)
								{
									bank4.item[num44] = new Item();
								}
								WorldGen.UnlockDoor(myX, myY);
								if (Main.netMode == 1)
								{
									NetMessage.SendData(52, -1, -1, null, whoAmI, 2f, myX, myY);
								}
							}
						}
					}
				}
				else
				{
					WorldGen.OpenDoor(myX, myY, direction);
					if (Main.tile[myX, myY].type != 10)
					{
						NetMessage.SendData(19, -1, -1, null, 0, myX, myY, direction);
					}
					else
					{
						WorldGen.OpenDoor(myX, myY, -direction);
						if (Main.tile[myX, myY].type != 10)
						{
							NetMessage.SendData(19, -1, -1, null, 0, myX, myY, -direction);
						}
					}
				}
			}
			else if (Main.tile[myX, myY].type == 11)
			{
				flag2 = true;
				if (WorldGen.CloseDoor(myX, myY))
				{
					NetMessage.SendData(19, -1, -1, null, 1, myX, myY, direction);
				}
			}
			else if (Main.tile[myX, myY].type == 88)
			{
				flag2 = true;
				int num45 = Main.tile[myX, myY].frameX / 18;
				num45 %= 3;
				num45 = myX - num45;
				int num46 = myY - Main.tile[myX, myY].frameY / 18;
				if (Main.tile[myX, myY].frameY == 0)
				{
					Main.CancelClothesWindow(quiet: true);
					Main.mouseRightRelease = false;
					CloseSign();
					SetTalkNPC(-1);
					Main.npcChatCornerItem = 0;
					Main.npcChatText = "";
					if (Main.editChest)
					{
						SoundEngine.PlaySound(12);
						Main.editChest = false;
						Main.npcChatText = string.Empty;
					}
					if (editedChestName)
					{
						NetMessage.SendData(33, -1, -1, NetworkText.FromLiteral(Main.chest[chest].name), chest, 1f);
						editedChestName = false;
					}
					if (Main.netMode == 1)
					{
						if (num45 == chestX && num46 == chestY && chest != -1)
						{
							chest = -1;
							Recipe.FindRecipes();
							SoundEngine.PlaySound(11);
						}
						else
						{
							NetMessage.SendData(31, -1, -1, null, num45, num46);
							Main.stackSplit = 600;
						}
					}
					else
					{
						piggyBankProjTracker.Clear();
						voidLensChest.Clear();
						int num47 = Chest.FindChest(num45, num46);
						if (num47 != -1)
						{
							Main.stackSplit = 600;
							if (num47 == chest)
							{
								chest = -1;
								Recipe.FindRecipes();
								SoundEngine.PlaySound(11);
							}
							else if (num47 != chest && chest == -1)
							{
								OpenChest(num45, num46, num47);
								SoundEngine.PlaySound(10);
							}
							else
							{
								OpenChest(num45, num46, num47);
								SoundEngine.PlaySound(12);
							}
							Recipe.FindRecipes();
						}
					}
				}
				else
				{
					Main.playerInventory = false;
					chest = -1;
					Recipe.FindRecipes();
					SetTalkNPC(-1);
					Main.npcChatCornerItem = 0;
					Main.npcChatText = "";
					Main.interactedDresserTopLeftX = num45;
					Main.interactedDresserTopLeftY = num46;
					Main.OpenClothesWindow();
				}
			}
			else if (Main.tile[myX, myY].type == 209)
			{
				flag2 = true;
				Tile tile2 = Main.tile[myX, myY];
				int num48 = tile2.frameX % 72 / 18;
				int num49 = tile2.frameY % 54 / 18;
				int num50 = myX - num48;
				int num51 = myY - num49;
				int num52 = tile2.frameY / 54;
				int num53 = tile2.frameX / 72;
				int num54 = -1;
				if (num48 == 1 || num48 == 2)
				{
					num54 = num49;
				}
				int num55 = 0;
				if (num48 == 3 || (num48 == 2 && num53 != 3 && num53 != 4))
				{
					num55 = -54;
				}
				if (num48 == 0 || (num48 == 1 && num53 != 3 && num53 != 4))
				{
					num55 = 54;
				}
				if (num52 >= 8 && num55 > 0)
				{
					num55 = 0;
				}
				if (num52 == 0 && num55 < 0)
				{
					num55 = 0;
				}
				bool flag10 = false;
				if (num55 != 0)
				{
					for (int num56 = num50; num56 < num50 + 4; num56++)
					{
						for (int num57 = num51; num57 < num51 + 3; num57++)
						{
							Main.tile[num56, num57].frameY = (short)(Main.tile[num56, num57].frameY + num55);
						}
					}
					flag10 = true;
				}
				if ((num53 == 3 || num53 == 4) && (num54 == 1 || num54 == 0))
				{
					num55 = ((num53 == 3) ? 72 : (-72));
					for (int num58 = num50; num58 < num50 + 4; num58++)
					{
						for (int num59 = num51; num59 < num51 + 3; num59++)
						{
							Main.tile[num58, num59].frameX = (short)(Main.tile[num58, num59].frameX + num55);
						}
					}
					flag10 = true;
				}
				if (flag10)
				{
					NetMessage.SendTileSquare(-1, num50, num51, 4, 3);
				}
				if (num54 != -1)
				{
					bool flag11 = false;
					if ((num53 == 3 || num53 == 4) && num54 == 2)
					{
						flag11 = true;
					}
					if (flag11)
					{
						WorldGen.ShootFromCannon(num50, num51, num52, num53 + 1, 0, 0f, whoAmI, fromWire: false);
					}
				}
			}
			else if (Main.tile[myX, myY].type == 510 || Main.tile[myX, myY].type == 511)
			{
				flag2 = true;
				Tile tile3 = Main.tile[myX, myY];
				int num60 = tile3.frameX % 36 / 18;
				int num61 = tile3.frameY % 36 / 18;
				int num62 = myX - num60;
				int num63 = myY - num61;
				int num64 = tile3.frameY / 36;
				_ = tile3.frameX / 36;
				int num65 = 0;
				if (num60 == 0)
				{
					num65 = -36;
				}
				if (num60 == 1)
				{
					num65 = 36;
				}
				if (num64 >= 7 && num65 > 0)
				{
					num65 = -252;
				}
				if (num64 == 0 && num65 < 0)
				{
					num65 = 252;
				}
				bool flag12 = false;
				if (num65 != 0)
				{
					for (int num66 = num62; num66 < num62 + 2; num66++)
					{
						for (int num67 = num63; num67 < num63 + 2; num67++)
						{
							Main.tile[num66, num67].frameY = (short)(Main.tile[num66, num67].frameY + num65);
						}
					}
					flag12 = true;
				}
				if (flag12)
				{
					NetMessage.SendTileSquare(-1, num62, num63, 2, 2);
				}
			}
			else if (TileID.Sets.BasicChest[Main.tile[myX, myY].type] || Main.tile[myX, myY].type == 29 || Main.tile[myX, myY].type == 97 || Main.tile[myX, myY].type == 463 || Main.tile[myX, myY].type == 491)
			{
				flag2 = true;
				Main.mouseRightRelease = false;
				int num68 = 0;
				int num69;
				for (num69 = Main.tile[myX, myY].frameX / 18; num69 > 1; num69 -= 2)
				{
				}
				num69 = myX - num69;
				int num70 = myY - Main.tile[myX, myY].frameY / 18;
				if (Main.tile[myX, myY].type == 29)
				{
					num68 = 1;
				}
				else if (Main.tile[myX, myY].type == 97)
				{
					num68 = 2;
				}
				else if (Main.tile[myX, myY].type == 463)
				{
					num68 = 3;
					num69 = ((Main.tile[myX, myY].frameX != 36) ? (num69 + 1) : (num69 - 1));
					num70 += 2;
				}
				else if (Main.tile[myX, myY].type == 491)
				{
					num68 = 4;
					num69 = ((Main.tile[myX, myY].frameX != 36) ? (num69 + 1) : (num69 - 1));
					num70 += 2;
				}
				CloseSign();
				SetTalkNPC(-1);
				Main.npcChatCornerItem = 0;
				Main.npcChatText = "";
				if (Main.editChest)
				{
					SoundEngine.PlaySound(12);
					Main.editChest = false;
					Main.npcChatText = string.Empty;
				}
				if (editedChestName)
				{
					NetMessage.SendData(33, -1, -1, NetworkText.FromLiteral(Main.chest[chest].name), chest, 1f);
					editedChestName = false;
				}
				bool flag13 = Chest.IsLocked(Main.tile[num69, num70]);
				if (Main.netMode == 1 && num68 == 0 && !flag13)
				{
					if (num69 == chestX && num70 == chestY && chest != -1)
					{
						chest = -1;
						Recipe.FindRecipes();
						SoundEngine.PlaySound(11);
					}
					else
					{
						if (WorldGen.IsChestRigged(num69, num70))
						{
							_framesLeftEligibleForDeadmansChestDeathAchievement = 600;
						}
						NetMessage.SendData(31, -1, -1, null, num69, num70);
						Main.stackSplit = 600;
					}
				}
				else
				{
					int num71 = -1;
					switch (num68)
					{
					case 1:
						num71 = -2;
						break;
					case 2:
						num71 = -3;
						break;
					case 3:
						num71 = -4;
						break;
					case 4:
						if (disableVoidBag < 0)
						{
							num71 = -5;
						}
						break;
					default:
					{
						bool flag14 = false;
						if (Chest.IsLocked(num69, num70))
						{
							int type2 = Main.tile[num69, num70].type;
							int num72 = 327;
							switch (type2)
							{
							case 21:
								if (Main.tile[num69, num70].frameX >= 144 && Main.tile[num69, num70].frameX <= 178)
								{
									num72 = 329;
								}
								if (Main.tile[num69, num70].frameX >= 828 && Main.tile[num69, num70].frameX <= 1006)
								{
									int num74 = Main.tile[num69, num70].frameX / 18;
									int num75 = 0;
									while (num74 >= 2)
									{
										num74 -= 2;
										num75++;
									}
									num75 -= 23;
									num72 = 1533 + num75;
								}
								break;
							case 467:
							{
								int num73 = Main.tile[num69, num70].frameX / 36;
								if (num73 == 13)
								{
									num72 = 4714;
								}
								break;
							}
							}
							flag14 = true;
							bool flag15 = false;
							bool flag16 = num72 != 329;
							for (int num76 = 0; num76 < 58; num76++)
							{
								if (inventory[num76].type != num72 || inventory[num76].stack <= 0 || !Chest.Unlock(num69, num70))
								{
									continue;
								}
								flag15 = true;
								if (flag16)
								{
									inventory[num76].stack--;
									if (inventory[num76].stack <= 0)
									{
										inventory[num76] = new Item();
									}
								}
								if (Main.netMode == 1)
								{
									NetMessage.SendData(52, -1, -1, null, whoAmI, 1f, num69, num70);
								}
							}
							if (!flag15 && useVoidBag())
							{
								for (int num77 = 0; num77 < 40; num77++)
								{
									if (bank4.item[num77].type != num72 || bank4.item[num77].stack <= 0 || !Chest.Unlock(num69, num70))
									{
										continue;
									}
									if (num72 != 329)
									{
										bank4.item[num77].stack--;
										if (bank4.item[num77].stack <= 0)
										{
											bank4.item[num77] = new Item();
										}
									}
									if (Main.netMode == 1)
									{
										NetMessage.SendData(52, -1, -1, null, whoAmI, 1f, num69, num70);
									}
								}
							}
						}
						if (!flag14)
						{
							num71 = Chest.FindChest(num69, num70);
						}
						break;
					}
					}
					if (num71 != -1)
					{
						Main.stackSplit = 600;
						bool num78 = WorldGen.IsChestRigged(num69, num70);
						if (num71 == chest)
						{
							chest = -1;
							SoundEngine.PlaySound(11);
						}
						else if (num71 != chest && chest == -1)
						{
							OpenChest(num69, num70, num71);
							SoundEngine.PlaySound(10);
							if (Main.tile[num69, num70].frameX >= 36 && Main.tile[num69, num70].frameX < 72)
							{
								AchievementsHelper.HandleSpecialEvent(this, 16);
							}
						}
						else
						{
							OpenChest(num69, num70, num71);
							SoundEngine.PlaySound(12);
						}
						if (num78)
						{
							Wiring.HitSwitch(myX, myY);
							NetMessage.SendData(59, -1, -1, null, myX, myY);
							_framesLeftEligibleForDeadmansChestDeathAchievement = 600;
						}
						Recipe.FindRecipes();
					}
				}
			}
			else if (Main.tile[myX, myY].type == 314 && gravDir == 1f)
			{
				flag2 = true;
				bool flag17 = true;
				if (mount.Active)
				{
					if (mount.Cart)
					{
						flag17 = false;
					}
					else
					{
						mount.Dismount(this);
					}
				}
				if (flag17)
				{
					LaunchMinecartHook(myX, myY);
				}
			}
		}
		if (flag2)
		{
			tileInteractionHappened = true;
		}
	}

	private static bool IsHoveringOverABottomSideOfABed(int myX, int myY)
	{
		short frameX = Main.tile[myX, myY].frameX;
		bool flag = frameX / 72 == 1;
		bool flag2 = frameX % 72 < 36;
		if (flag)
		{
			flag2 = !flag2;
		}
		return flag2;
	}

	public void PetAnimal(int animalNpcIndex)
	{
		GetPettingInfo(animalNpcIndex, out var targetDirection, out var playerPositionWhenPetting, out var isPetSmall);
		playerPositionWhenPetting = playerPositionWhenPetting.Floor();
		Vector2 offset = playerPositionWhenPetting - base.Bottom;
		bool flag = CanSnapToPosition(offset);
		if (flag && !WorldGen.SolidTileAllowBottomSlope((int)playerPositionWhenPetting.X / 16, (int)playerPositionWhenPetting.Y / 16))
		{
			flag = false;
		}
		if (!flag)
		{
			return;
		}
		if (isPettingAnimal && base.Bottom == playerPositionWhenPetting)
		{
			StopPettingAnimal();
			return;
		}
		StopVanityActions();
		RemoveAllGrapplingHooks();
		if (mount.Active)
		{
			mount.Dismount(this);
		}
		base.Bottom = playerPositionWhenPetting;
		ChangeDir(targetDirection);
		isPettingAnimal = true;
		isTheAnimalBeingPetSmall = isPetSmall;
		velocity = Vector2.Zero;
		gravDir = 1f;
		if (whoAmI == Main.myPlayer)
		{
			AchievementsHelper.HandleSpecialEvent(this, 21);
		}
	}

	private void GetPettingInfo(int animalNpcIndex, out int targetDirection, out Vector2 playerPositionWhenPetting, out bool isPetSmall)
	{
		NPC nPC = Main.npc[animalNpcIndex];
		targetDirection = ((nPC.Center.X > base.Center.X) ? 1 : (-1));
		int num = 36;
		isPetSmall = false;
		switch (nPC.type)
		{
		case 637:
			isPetSmall = true;
			num = 28;
			break;
		case 656:
			isPetSmall = true;
			num = 24;
			break;
		case 670:
		case 678:
		case 679:
		case 680:
		case 681:
		case 683:
			isPetSmall = true;
			num = 26;
			break;
		case 682:
			isPetSmall = true;
			num = 22;
			break;
		case 684:
			isPetSmall = true;
			num = 20;
			break;
		}
		playerPositionWhenPetting = nPC.Bottom + new Vector2(-targetDirection * num, 0f);
	}

	public bool CanSnapToPosition(Vector2 offset)
	{
		if (Collision.SolidCollision(position + offset, width, height))
		{
			return false;
		}
		bool canSnapToPosition = Collision.CanHit(position, width, height, position + offset, width, height);
		if (!canSnapToPosition)
		{
			TryAllowingSnappingToPosition(ref canSnapToPosition, position, position + offset);
			if (!canSnapToPosition)
			{
				int num = Math.Sign(offset.X);
				if (num != 0)
				{
					Vector2 vector = new Vector2(num * width, 0f);
					if (Collision.TileCollision(position, vector, width, height, fallThrough: true, fall2: true, (int)gravDir) == vector)
					{
						TryAllowingSnappingToPosition(ref canSnapToPosition, position + vector, position + offset);
					}
				}
			}
		}
		return canSnapToPosition;
	}

	private void TryAllowingSnappingToPosition(ref bool canSnapToPosition, Vector2 pos1, Vector2 pos2)
	{
		Vector2 vector = new Vector2(width - 2, 0f);
		canSnapToPosition = Collision.CanHit(pos1 + vector, 2, height, pos2, 2, height);
		if (!canSnapToPosition)
		{
			canSnapToPosition = Collision.CanHit(pos1 + vector, 2, height, pos2 + vector, 2, height);
		}
		if (!canSnapToPosition)
		{
			canSnapToPosition = Collision.CanHit(pos1, 2, height, pos2, 2, height);
		}
		if (!canSnapToPosition)
		{
			canSnapToPosition = Collision.CanHit(pos1, 2, height, pos2 + vector, 2, height);
		}
	}

	public void StopVanityActions(bool multiplayerBroadcast = true)
	{
		StopPettingAnimal();
		sitting.SitUp(this, multiplayerBroadcast);
		sleeping.StopSleeping(this, multiplayerBroadcast);
	}

	private void StopPettingAnimal()
	{
		isPettingAnimal = false;
		isTheAnimalBeingPetSmall = false;
	}

	private void UpdatePettingAnimal()
	{
		if (!isPettingAnimal)
		{
			return;
		}
		if (talkNPC == -1)
		{
			StopPettingAnimal();
			return;
		}
		int num = Math.Sign(Main.npc[talkNPC].Center.X - base.Center.X);
		if (controlLeft || controlRight || controlUp || controlDown || controlJump || pulley || mount.Active || num != direction)
		{
			StopPettingAnimal();
			return;
		}
		GetPettingInfo(talkNPC, out var _, out var playerPositionWhenPetting, out var _);
		if (base.Bottom.Distance(playerPositionWhenPetting) > 2f)
		{
			StopPettingAnimal();
		}
	}

	private void OpenChest(int x, int y, int newChest)
	{
		if (chest != -1 && Main.myPlayer == whoAmI)
		{
			for (int i = 0; i < 40; i++)
			{
				ItemSlot.SetGlow(i, -1f, chest: true);
			}
		}
		chest = newChest;
		Main.playerInventory = true;
		UILinkPointNavigator.ForceMovementCooldown(120);
		if (PlayerInput.GrappleAndInteractAreShared)
		{
			PlayerInput.Triggers.JustPressed.Grapple = false;
		}
		Main.recBigList = false;
		chestX = x;
		chestY = y;
	}

	public void CloseSign()
	{
		if (sign > -1)
		{
			SoundEngine.PlaySound(11);
			sign = -1;
			Main.editSign = false;
			Main.npcChatText = string.Empty;
		}
	}

	private void LaunchMinecartHook(int myX, int myY)
	{
		Vector2 vector = new Vector2((float)Main.mouseX + Main.screenPosition.X, (float)Main.mouseY + Main.screenPosition.Y);
		vector = new Vector2(myX * 16 + 8, myY * 16 + 8);
		if (direction > 0)
		{
			minecartLeft = false;
		}
		else
		{
			minecartLeft = true;
		}
		RemoveAllGrapplingHooks();
		Projectile.NewProjectile(GetProjectileSource_TileInteraction(myX, myY), vector.X, vector.Y, 0f, 0f, 403, 0, 0f, whoAmI);
		releaseHook = false;
	}

	public void RemoveAllGrapplingHooks()
	{
		ClearGrapplingBlacklist();
		grappling[0] = -1;
		grapCount = 0;
		for (int i = 0; i < 1000; i++)
		{
			if (Main.projectile[i].active && Main.projectile[i].owner == whoAmI && Main.projectile[i].aiStyle == 7)
			{
				Main.projectile[i].Kill();
			}
		}
	}

	public void RemoveAllFishingBobbers()
	{
		for (int i = 0; i < 1000; i++)
		{
			if (Main.projectile[i].active && Main.projectile[i].owner == whoAmI && Main.projectile[i].bobber)
			{
				Main.projectile[i].Kill();
			}
		}
	}

	private void TileInteractionsMouseOver(int myX, int myY)
	{
		if (myX != tileTargetX || myY != tileTargetY)
		{
			return;
		}
		if (Main.tile[myX, myY].type == 79)
		{
			if (!IsHoveringOverABottomSideOfABed(myX, myY))
			{
				if (IsWithinSnappngRangeToTile(myX, myY, 96))
				{
					noThrow = 2;
					cursorItemIconEnabled = true;
					cursorItemIconID = 5013;
				}
			}
			else
			{
				noThrow = 2;
				cursorItemIconEnabled = true;
				int num = Main.tile[myX, myY].frameY / 36;
				switch (num)
				{
				case 0:
					cursorItemIconID = 224;
					break;
				case 1:
					cursorItemIconID = 644;
					break;
				case 2:
					cursorItemIconID = 645;
					break;
				case 3:
					cursorItemIconID = 646;
					break;
				case 4:
					cursorItemIconID = 920;
					break;
				case 5:
					cursorItemIconID = 1470;
					break;
				case 6:
					cursorItemIconID = 1471;
					break;
				case 7:
					cursorItemIconID = 1472;
					break;
				case 8:
					cursorItemIconID = 1473;
					break;
				case 9:
					cursorItemIconID = 1719;
					break;
				case 10:
					cursorItemIconID = 1720;
					break;
				case 11:
					cursorItemIconID = 1721;
					break;
				case 12:
					cursorItemIconID = 1722;
					break;
				case 13:
				case 14:
				case 15:
				case 16:
				case 17:
				case 18:
					cursorItemIconID = 2066 + num - 13;
					break;
				default:
					if (num >= 19 && num <= 20)
					{
						cursorItemIconID = 2139 + num - 19;
						break;
					}
					switch (num)
					{
					case 21:
						cursorItemIconID = 2231;
						break;
					case 22:
						cursorItemIconID = 2520;
						break;
					case 23:
						cursorItemIconID = 2538;
						break;
					case 24:
						cursorItemIconID = 2553;
						break;
					case 25:
						cursorItemIconID = 2568;
						break;
					case 26:
						cursorItemIconID = 2669;
						break;
					case 27:
						cursorItemIconID = 2811;
						break;
					case 28:
						cursorItemIconID = 3162;
						break;
					case 29:
						cursorItemIconID = 3164;
						break;
					case 30:
						cursorItemIconID = 3163;
						break;
					case 31:
						cursorItemIconID = 3897;
						break;
					case 32:
						cursorItemIconID = 3932;
						break;
					case 33:
						cursorItemIconID = 3959;
						break;
					case 34:
						cursorItemIconID = 4146;
						break;
					case 35:
						cursorItemIconID = 4167;
						break;
					case 36:
						cursorItemIconID = 4188;
						break;
					case 37:
						cursorItemIconID = 4209;
						break;
					case 38:
						cursorItemIconID = 4299;
						break;
					case 39:
						cursorItemIconID = 4567;
						break;
					case 40:
						cursorItemIconID = 5149;
						break;
					case 41:
						cursorItemIconID = 5170;
						break;
					case 42:
						cursorItemIconID = 5191;
						break;
					default:
						cursorItemIconID = 646;
						break;
					}
					break;
				}
			}
		}
		if (Main.tile[myX, myY].type == 597)
		{
			int pylonStyleFromTile = TETeleportationPylon.GetPylonStyleFromTile(Main.tile[myX, myY]);
			int pylonItemTypeFromTileStyle = TETeleportationPylon.GetPylonItemTypeFromTileStyle(pylonStyleFromTile);
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = pylonItemTypeFromTileStyle;
			if (pylonStyleFromTile == 1)
			{
				cursorItemIconID = 4875;
			}
			if (pylonStyleFromTile == 2)
			{
				cursorItemIconID = 4916;
			}
			if (pylonStyleFromTile == 3)
			{
				cursorItemIconID = 4917;
			}
			if (pylonStyleFromTile == 4)
			{
				cursorItemIconID = 4918;
			}
			if (pylonStyleFromTile == 5)
			{
				cursorItemIconID = 4919;
			}
			if (pylonStyleFromTile == 6)
			{
				cursorItemIconID = 4920;
			}
			if (pylonStyleFromTile == 7)
			{
				cursorItemIconID = 4921;
			}
			if (pylonStyleFromTile == 8)
			{
				cursorItemIconID = 4951;
			}
		}
		if (Main.tile[myX, myY].type == 621)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 3750;
		}
		if (Main.tile[myX, myY].type == 464)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 3814;
		}
		if (Main.tile[myX, myY].type == 33)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 105;
			int num2 = Main.tile[myX, myY].frameY / 22;
			if (num2 == 1)
			{
				cursorItemIconID = 1405;
			}
			if (num2 == 2)
			{
				cursorItemIconID = 1406;
			}
			if (num2 == 3)
			{
				cursorItemIconID = 1407;
			}
			if (num2 >= 4 && num2 <= 13)
			{
				cursorItemIconID = 2045 + num2 - 4;
			}
			if (num2 >= 14 && num2 <= 16)
			{
				cursorItemIconID = 2153 + num2 - 14;
			}
			if (num2 == 17)
			{
				cursorItemIconID = 2236;
			}
			if (num2 == 18)
			{
				cursorItemIconID = 2523;
			}
			if (num2 == 19)
			{
				cursorItemIconID = 2542;
			}
			if (num2 == 20)
			{
				cursorItemIconID = 2556;
			}
			if (num2 == 21)
			{
				cursorItemIconID = 2571;
			}
			if (num2 == 22)
			{
				cursorItemIconID = 2648;
			}
			if (num2 == 23)
			{
				cursorItemIconID = 2649;
			}
			if (num2 == 24)
			{
				cursorItemIconID = 2650;
			}
			switch (num2)
			{
			case 25:
				cursorItemIconID = 2651;
				break;
			case 26:
				cursorItemIconID = 2818;
				break;
			case 27:
				cursorItemIconID = 3171;
				break;
			case 28:
				cursorItemIconID = 3173;
				break;
			case 29:
				cursorItemIconID = 3172;
				break;
			case 30:
				cursorItemIconID = 3890;
				break;
			case 31:
				cursorItemIconID = 3936;
				break;
			case 32:
				cursorItemIconID = 3962;
				break;
			case 33:
				cursorItemIconID = 4150;
				break;
			case 34:
				cursorItemIconID = 4171;
				break;
			case 35:
				cursorItemIconID = 4192;
				break;
			case 36:
				cursorItemIconID = 4213;
				break;
			case 37:
				cursorItemIconID = 4303;
				break;
			case 38:
				cursorItemIconID = 4571;
				break;
			case 39:
				cursorItemIconID = 5153;
				break;
			case 40:
				cursorItemIconID = 5174;
				break;
			case 41:
				cursorItemIconID = 5195;
				break;
			}
		}
		if (Main.tile[myX, myY].type == 21)
		{
			TileInteractionsMouseOver_Containers(myX, myY);
		}
		if (Main.tile[myX, myY].type == 467)
		{
			TileInteractionsMouseOver_Containers(myX, myY);
		}
		if (Main.tile[myX, myY].type == 441)
		{
			Tile tile = Main.tile[myX, myY];
			int num3 = myX;
			int num4 = myY;
			if (tile.frameX % 36 != 0)
			{
				num3--;
			}
			if (tile.frameY % 36 != 0)
			{
				num4--;
			}
			cursorItemIconID = -1;
			cursorItemIconID = Chest.chestTypeToIcon[tile.frameX / 36];
			noThrow = 2;
			cursorItemIconEnabled = true;
		}
		if (Main.tile[myX, myY].type == 468)
		{
			Tile tile2 = Main.tile[myX, myY];
			int num5 = myX;
			int num6 = myY;
			if (tile2.frameX % 36 != 0)
			{
				num5--;
			}
			if (tile2.frameY % 36 != 0)
			{
				num6--;
			}
			cursorItemIconID = -1;
			cursorItemIconID = Chest.chestTypeToIcon2[tile2.frameX / 36];
			noThrow = 2;
			cursorItemIconEnabled = true;
		}
		if (Main.tile[myX, myY].type == 88)
		{
			Tile tile3 = Main.tile[myX, myY];
			int num7 = myY;
			int x = myX - tile3.frameX % 54 / 18;
			if (tile3.frameY % 36 != 0)
			{
				num7--;
			}
			int num8 = Chest.FindChest(x, num7);
			cursorItemIconID = -1;
			if (num8 < 0)
			{
				cursorItemIconText = Lang.dresserType[0].Value;
			}
			else
			{
				if (Main.chest[num8].name != "")
				{
					cursorItemIconText = Main.chest[num8].name;
				}
				else
				{
					cursorItemIconText = Lang.dresserType[tile3.frameX / 54].Value;
				}
				if (cursorItemIconText == Lang.dresserType[tile3.frameX / 54].Value)
				{
					cursorItemIconID = Chest.dresserTypeToIcon[tile3.frameX / 54];
					cursorItemIconText = "";
				}
			}
			noThrow = 2;
			cursorItemIconEnabled = true;
			if (Main.tile[myX, myY].frameY > 0)
			{
				cursorItemIconID = 269;
				cursorItemIconText = "";
			}
		}
		if (Main.tile[myX, myY].type == 10 || Main.tile[myX, myY].type == 11)
		{
			Tile tile4 = Main.tile[myX, myY];
			noThrow = 2;
			cursorItemIconEnabled = true;
			int num9 = tile4.frameY;
			int num10 = 0;
			while (num9 >= 54)
			{
				num9 -= 54;
				num10++;
			}
			if (tile4.type == 10)
			{
				num10 += 36 * (tile4.frameX / 54);
			}
			if (tile4.type == 11)
			{
				num10 += 36 * (tile4.frameX / 72);
			}
			switch (num10)
			{
			case 0:
				cursorItemIconID = 25;
				break;
			case 9:
				cursorItemIconID = 837;
				break;
			case 10:
				cursorItemIconID = 912;
				break;
			case 11:
				cursorItemIconID = 1141;
				break;
			case 12:
				cursorItemIconID = 1137;
				break;
			case 13:
				cursorItemIconID = 1138;
				break;
			case 14:
				cursorItemIconID = 1139;
				break;
			case 15:
				cursorItemIconID = 1140;
				break;
			case 16:
				cursorItemIconID = 1411;
				break;
			case 17:
				cursorItemIconID = 1412;
				break;
			case 18:
				cursorItemIconID = 1413;
				break;
			case 19:
				cursorItemIconID = 1458;
				break;
			case 20:
			case 21:
			case 22:
			case 23:
				cursorItemIconID = 1709 + num10 - 20;
				break;
			default:
				switch (num10)
				{
				case 24:
					cursorItemIconID = 1793;
					break;
				case 25:
					cursorItemIconID = 1815;
					break;
				case 26:
					cursorItemIconID = 1924;
					break;
				case 27:
					cursorItemIconID = 2044;
					break;
				case 28:
					cursorItemIconID = 2265;
					break;
				case 29:
					cursorItemIconID = 2528;
					break;
				case 30:
					cursorItemIconID = 2561;
					break;
				case 31:
					cursorItemIconID = 2576;
					break;
				case 32:
					cursorItemIconID = 2815;
					break;
				case 33:
					cursorItemIconID = 3129;
					break;
				case 34:
					cursorItemIconID = 3131;
					break;
				case 35:
					cursorItemIconID = 3130;
					break;
				case 36:
					cursorItemIconID = 3888;
					break;
				case 37:
					cursorItemIconID = 3941;
					break;
				case 38:
					cursorItemIconID = 3967;
					break;
				case 39:
					cursorItemIconID = 4155;
					break;
				case 40:
					cursorItemIconID = 4176;
					break;
				case 41:
					cursorItemIconID = 4197;
					break;
				case 42:
					cursorItemIconID = 4218;
					break;
				case 43:
					cursorItemIconID = 4307;
					break;
				case 44:
					cursorItemIconID = 4415;
					break;
				case 45:
					cursorItemIconID = 4576;
					break;
				case 46:
					cursorItemIconID = 5158;
					break;
				case 47:
					cursorItemIconID = 5179;
					break;
				case 48:
					cursorItemIconID = 5200;
					break;
				case 4:
				case 5:
				case 6:
				case 7:
				case 8:
					cursorItemIconID = 812 + num10;
					break;
				default:
					cursorItemIconID = 649 + num10;
					break;
				}
				break;
			}
		}
		if (Main.tile[myX, myY].type == 104)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			switch (Main.tile[myX, myY].frameX / 36)
			{
			case 0:
				cursorItemIconID = 359;
				break;
			case 1:
				cursorItemIconID = 2237;
				break;
			case 2:
				cursorItemIconID = 2238;
				break;
			case 3:
				cursorItemIconID = 2239;
				break;
			case 4:
				cursorItemIconID = 2240;
				break;
			case 5:
				cursorItemIconID = 2241;
				break;
			case 6:
				cursorItemIconID = 2560;
				break;
			case 7:
				cursorItemIconID = 2575;
				break;
			case 8:
				cursorItemIconID = 2591;
				break;
			case 9:
				cursorItemIconID = 2592;
				break;
			case 10:
				cursorItemIconID = 2593;
				break;
			case 11:
				cursorItemIconID = 2594;
				break;
			case 12:
				cursorItemIconID = 2595;
				break;
			case 13:
				cursorItemIconID = 2596;
				break;
			case 14:
				cursorItemIconID = 2597;
				break;
			case 15:
				cursorItemIconID = 2598;
				break;
			case 16:
				cursorItemIconID = 2599;
				break;
			case 17:
				cursorItemIconID = 2600;
				break;
			case 18:
				cursorItemIconID = 2601;
				break;
			case 19:
				cursorItemIconID = 2602;
				break;
			case 20:
				cursorItemIconID = 2603;
				break;
			case 21:
				cursorItemIconID = 2604;
				break;
			case 22:
				cursorItemIconID = 2605;
				break;
			case 23:
				cursorItemIconID = 2606;
				break;
			case 24:
				cursorItemIconID = 2809;
				break;
			case 25:
				cursorItemIconID = 3126;
				break;
			case 26:
				cursorItemIconID = 3128;
				break;
			case 27:
				cursorItemIconID = 3127;
				break;
			case 28:
				cursorItemIconID = 3898;
				break;
			case 29:
				cursorItemIconID = 3899;
				break;
			case 30:
				cursorItemIconID = 3900;
				break;
			case 31:
				cursorItemIconID = 3901;
				break;
			case 32:
				cursorItemIconID = 3902;
				break;
			case 33:
				cursorItemIconID = 3940;
				break;
			case 34:
				cursorItemIconID = 3966;
				break;
			case 35:
				cursorItemIconID = 4154;
				break;
			case 36:
				cursorItemIconID = 4175;
				break;
			case 37:
				cursorItemIconID = 4196;
				break;
			case 38:
				cursorItemIconID = 4217;
				break;
			case 39:
				cursorItemIconID = 4306;
				break;
			case 40:
				cursorItemIconID = 4575;
				break;
			case 41:
				cursorItemIconID = 5157;
				break;
			case 42:
				cursorItemIconID = 5178;
				break;
			case 43:
				cursorItemIconID = 5199;
				break;
			}
		}
		if (Main.tile[myX, myY].type == 356)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 3064;
		}
		if (Main.tile[myX, myY].type == 663)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 5381;
		}
		if (Main.tile[myX, myY].type == 377)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 3198;
		}
		if (Main.tile[myX, myY].type == 209)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			if (Main.tile[myX, myY].frameX < 72)
			{
				cursorItemIconID = 928;
			}
			else if (Main.tile[myX, myY].frameX < 144)
			{
				cursorItemIconID = 1337;
			}
			else if (Main.tile[myX, myY].frameX < 216)
			{
				cursorItemIconID = 3369;
			}
			else if (Main.tile[myX, myY].frameX < 360)
			{
				cursorItemIconID = 3664;
			}
			int num11;
			for (num11 = Main.tile[myX, myY].frameX / 18; num11 >= 4; num11 -= 4)
			{
			}
			if (num11 < 2)
			{
				cursorItemIconReversed = true;
			}
			else
			{
				cursorItemIconReversed = false;
			}
		}
		if (Main.tile[myX, myY].type == 216)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			int num12 = Main.tile[myX, myY].frameY;
			int num13 = 0;
			while (num12 >= 40)
			{
				num12 -= 40;
				num13++;
			}
			cursorItemIconID = 970 + num13;
		}
		if (Main.tile[myX, myY].type == 387 || Main.tile[myX, myY].type == 386)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			int x2 = 0;
			int y = 0;
			WorldGen.GetTopLeftAndStyles(ref x2, ref y, 2, 1 + (Main.tile[myX, myY].type == 386).ToInt(), 18, 18);
			cursorItemIconID = 3239;
		}
		if (Main.tile[myX, myY].type == 389 || Main.tile[myX, myY].type == 388)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 3240;
		}
		if (Main.tile[myX, myY].type == 335)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 2700;
		}
		if (Main.tile[myX, myY].type == 15 && IsWithinSnappngRangeToTile(myX, myY, 40))
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = WorldGen.GetItemDrop_Chair(Main.tile[myX, myY].frameY / 40);
			if (Main.tile[myX, myY].frameX / 18 < 1)
			{
				cursorItemIconReversed = true;
			}
		}
		if (Main.tile[myX, myY].type == 102 && IsWithinSnappngRangeToTile(myX, myY, 40))
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 355;
		}
		if (Main.tile[myX, myY].type == 89 && IsWithinSnappngRangeToTile(myX, myY, 40))
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = WorldGen.GetItemDrop_Benches(Main.tile[myX, myY].frameX / 54);
		}
		if (Main.tile[myX, myY].type == 487 && IsWithinSnappngRangeToTile(myX, myY, 40))
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = WorldGen.GetItemDrop_PicnicTables(Main.tile[myX, myY].frameX / 72);
		}
		if (Main.tile[myX, myY].type == 497 && IsWithinSnappngRangeToTile(myX, myY, 40))
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = WorldGen.GetItemDrop_Toilet(Main.tile[myX, myY].frameY / 40);
			if (Main.tile[myX, myY].frameX / 18 < 1)
			{
				cursorItemIconReversed = true;
			}
		}
		if (Main.tile[myX, myY].type == 410)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 3536 + Math.Min(Main.tile[myX, myY].frameX / 36, 3);
		}
		if (Main.tile[myX, myY].type == 480)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 4054;
		}
		if (Main.tile[myX, myY].type == 509)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 4318;
		}
		if (Main.tile[myX, myY].type == 657)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 5345;
		}
		if (Main.tile[myX, myY].type == 658)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 5347;
		}
		if (Main.tile[myX, myY].type == 463)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 3813;
		}
		if (Main.tile[myX, myY].type == 491)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 4076;
		}
		if (Main.tile[myX, myY].type == 494)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 4089;
		}
		if (Main.tile[myX, myY].type == 411 && Main.tile[myX, myY].frameX < 36)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 3545;
		}
		if (Main.tile[myX, myY].type == 338)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 2738;
		}
		if (Main.tile[myX, myY].type == 455)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 3747;
		}
		if ((Main.tile[myX, myY].type == 219 || Main.tile[myX, myY].type == 642) && (inventory[selectedItem].type == 424 || inventory[selectedItem].type == 1103 || inventory[selectedItem].type == 2339 || inventory[selectedItem].type == 2338 || inventory[selectedItem].type == 2337))
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = inventory[selectedItem].type;
		}
		if (Main.tile[myX, myY].type == 212)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 949;
		}
		if (Main.tile[myX, myY].type == 314 && gravDir == 1f)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 2343;
		}
		if (Main.tile[myX, myY].type == 215)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			int num14 = Main.tile[myX, myY].frameX / 54;
			switch (num14)
			{
			case 0:
				cursorItemIconID = 966;
				break;
			case 14:
				cursorItemIconID = 5299;
				break;
			case 15:
				cursorItemIconID = 5357;
				break;
			case 8:
			case 9:
			case 10:
			case 11:
			case 12:
			case 13:
				cursorItemIconID = 4689 + num14 - 8;
				break;
			default:
				switch (num14)
				{
				case 7:
					cursorItemIconID = 3724;
					break;
				case 6:
					cursorItemIconID = 3723;
					break;
				case 5:
					cursorItemIconID = 3050;
					break;
				default:
					cursorItemIconID = 3046 + num14 - 1;
					break;
				}
				break;
			}
		}
		if (Main.tile[myX, myY].type == 4)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			int num15 = Main.tile[myX, myY].frameY / 22;
			switch (num15)
			{
			case 0:
				cursorItemIconID = 8;
				break;
			case 8:
				cursorItemIconID = 523;
				break;
			case 9:
				cursorItemIconID = 974;
				break;
			case 10:
				cursorItemIconID = 1245;
				break;
			case 11:
				cursorItemIconID = 1333;
				break;
			case 12:
				cursorItemIconID = 2274;
				break;
			case 13:
				cursorItemIconID = 3004;
				break;
			case 14:
				cursorItemIconID = 3045;
				break;
			case 15:
				cursorItemIconID = 3114;
				break;
			case 16:
				cursorItemIconID = 4383;
				break;
			case 17:
				cursorItemIconID = 4384;
				break;
			case 18:
				cursorItemIconID = 4385;
				break;
			case 19:
				cursorItemIconID = 4386;
				break;
			case 20:
				cursorItemIconID = 4387;
				break;
			case 21:
				cursorItemIconID = 4388;
				break;
			case 22:
				cursorItemIconID = 5293;
				break;
			case 23:
				cursorItemIconID = 5353;
				break;
			default:
				cursorItemIconID = 426 + num15;
				break;
			}
		}
		if (Main.tile[myX, myY].type == 13)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			switch (Main.tile[myX, myY].frameX / 18)
			{
			case 1:
				cursorItemIconID = 28;
				break;
			case 2:
				cursorItemIconID = 110;
				break;
			case 3:
				cursorItemIconID = 350;
				break;
			case 4:
				cursorItemIconID = 351;
				break;
			case 5:
				cursorItemIconID = 2234;
				break;
			case 6:
				cursorItemIconID = 2244;
				break;
			case 7:
				cursorItemIconID = 2257;
				break;
			case 8:
				cursorItemIconID = 2258;
				break;
			default:
				cursorItemIconID = 31;
				break;
			}
		}
		if (Main.tile[myX, myY].type == 29)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 87;
		}
		if (Main.tile[myX, myY].type == 97)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 346;
		}
		if (Main.tile[myX, myY].type == 510)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 4319;
			int num16;
			for (num16 = Main.tile[myX, myY].frameX / 18; num16 >= 2; num16 -= 2)
			{
			}
			if (num16 == 0)
			{
				cursorItemIconReversed = true;
			}
			else
			{
				cursorItemIconReversed = false;
			}
		}
		if (Main.tile[myX, myY].type == 511)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 4320;
			int num17;
			for (num17 = Main.tile[myX, myY].frameX / 18; num17 >= 2; num17 -= 2)
			{
			}
			if (num17 == 0)
			{
				cursorItemIconReversed = true;
			}
			else
			{
				cursorItemIconReversed = false;
			}
		}
		if (Main.tile[myX, myY].type == 49)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 148;
		}
		if (Main.tile[myX, myY].type == 372)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 3117;
		}
		if (Main.tile[myX, myY].type == 646)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 5322;
		}
		if (Main.tile[myX, myY].type == 174)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 713;
		}
		if (Main.tile[myX, myY].type == 50)
		{
			noThrow = 2;
			if (Main.tile[myX, myY].frameX == 90)
			{
				cursorItemIconEnabled = true;
				cursorItemIconID = 165;
			}
		}
		if (Main.tile[myX, myY].type == 139)
		{
			noThrow = 2;
			int num18 = 0;
			for (int num19 = Main.tile[myX, myY].frameY / 18; num19 >= 2; num19 -= 2)
			{
				num18++;
			}
			cursorItemIconEnabled = true;
			if (num18 == 28)
			{
				cursorItemIconID = 1963;
			}
			else if (num18 == 29)
			{
				cursorItemIconID = 1964;
			}
			else if (num18 == 30)
			{
				cursorItemIconID = 1965;
			}
			else if (num18 == 31)
			{
				cursorItemIconID = 2742;
			}
			else if (num18 == 32)
			{
				cursorItemIconID = 3044;
			}
			else if (num18 == 33)
			{
				cursorItemIconID = 3235;
			}
			else if (num18 == 34)
			{
				cursorItemIconID = 3236;
			}
			else if (num18 == 35)
			{
				cursorItemIconID = 3237;
			}
			else if (num18 == 36)
			{
				cursorItemIconID = 3370;
			}
			else if (num18 == 37)
			{
				cursorItemIconID = 3371;
			}
			else if (num18 == 38)
			{
				cursorItemIconID = 3796;
			}
			else if (num18 == 39)
			{
				cursorItemIconID = 3869;
			}
			else if (num18 == 40)
			{
				cursorItemIconID = 4082;
			}
			else if (num18 == 41)
			{
				cursorItemIconID = 4078;
			}
			else if (num18 == 42)
			{
				cursorItemIconID = 4079;
			}
			else if (num18 == 43)
			{
				cursorItemIconID = 4077;
			}
			else if (num18 == 44)
			{
				cursorItemIconID = 4080;
			}
			else if (num18 == 45)
			{
				cursorItemIconID = 4081;
			}
			else if (num18 == 46)
			{
				cursorItemIconID = 4237;
			}
			else if (num18 == 47)
			{
				cursorItemIconID = 4356;
			}
			else if (num18 == 48)
			{
				cursorItemIconID = 4357;
			}
			else if (num18 == 49)
			{
				cursorItemIconID = 4358;
			}
			else if (num18 == 50)
			{
				cursorItemIconID = 4421;
			}
			else if (num18 == 51)
			{
				cursorItemIconID = 4606;
			}
			else if (num18 == 52)
			{
				cursorItemIconID = 4979;
			}
			else if (num18 == 53)
			{
				cursorItemIconID = 4985;
			}
			else if (num18 == 54)
			{
				cursorItemIconID = 4990;
			}
			else if (num18 == 55)
			{
				cursorItemIconID = 4991;
			}
			else if (num18 == 56)
			{
				cursorItemIconID = 4992;
			}
			else if (num18 == 57)
			{
				cursorItemIconID = 5006;
			}
			else if (num18 == 58)
			{
				cursorItemIconID = 5014;
			}
			else if (num18 == 59)
			{
				cursorItemIconID = 5015;
			}
			else if (num18 == 60)
			{
				cursorItemIconID = 5016;
			}
			else if (num18 == 61)
			{
				cursorItemIconID = 5017;
			}
			else if (num18 == 62)
			{
				cursorItemIconID = 5018;
			}
			else if (num18 == 63)
			{
				cursorItemIconID = 5019;
			}
			else if (num18 == 64)
			{
				cursorItemIconID = 5020;
			}
			else if (num18 == 65)
			{
				cursorItemIconID = 5021;
			}
			else if (num18 == 66)
			{
				cursorItemIconID = 5022;
			}
			else if (num18 == 67)
			{
				cursorItemIconID = 5023;
			}
			else if (num18 == 68)
			{
				cursorItemIconID = 5024;
			}
			else if (num18 == 69)
			{
				cursorItemIconID = 5025;
			}
			else if (num18 == 70)
			{
				cursorItemIconID = 5026;
			}
			else if (num18 == 71)
			{
				cursorItemIconID = 5027;
			}
			else if (num18 == 72)
			{
				cursorItemIconID = 5028;
			}
			else if (num18 == 73)
			{
				cursorItemIconID = 5029;
			}
			else if (num18 == 74)
			{
				cursorItemIconID = 5030;
			}
			else if (num18 == 75)
			{
				cursorItemIconID = 5031;
			}
			else if (num18 == 76)
			{
				cursorItemIconID = 5032;
			}
			else if (num18 == 77)
			{
				cursorItemIconID = 5033;
			}
			else if (num18 == 78)
			{
				cursorItemIconID = 5034;
			}
			else if (num18 == 79)
			{
				cursorItemIconID = 5035;
			}
			else if (num18 == 80)
			{
				cursorItemIconID = 5036;
			}
			else if (num18 == 81)
			{
				cursorItemIconID = 5037;
			}
			else if (num18 == 82)
			{
				cursorItemIconID = 5038;
			}
			else if (num18 == 83)
			{
				cursorItemIconID = 5039;
			}
			else if (num18 == 84)
			{
				cursorItemIconID = 5040;
			}
			else if (num18 == 85)
			{
				cursorItemIconID = 5044;
			}
			else if (num18 == 86)
			{
				cursorItemIconID = 5112;
			}
			else if (num18 == 87)
			{
				cursorItemIconID = 5362;
			}
			else if (num18 >= 13)
			{
				cursorItemIconID = 1596 + num18 - 13;
			}
			else
			{
				cursorItemIconID = 562 + num18;
			}
		}
		if (Main.tile[myX, myY].type == 207)
		{
			noThrow = 2;
			int num20 = 0;
			for (int num21 = Main.tile[myX, myY].frameX / 18; num21 >= 2; num21 -= 2)
			{
				num20++;
			}
			cursorItemIconEnabled = true;
			switch (num20)
			{
			case 0:
				cursorItemIconID = 909;
				break;
			case 1:
				cursorItemIconID = 910;
				break;
			case 2:
				cursorItemIconID = 940;
				break;
			case 3:
				cursorItemIconID = 941;
				break;
			case 4:
				cursorItemIconID = 942;
				break;
			case 5:
				cursorItemIconID = 943;
				break;
			case 6:
				cursorItemIconID = 944;
				break;
			case 7:
				cursorItemIconID = 945;
				break;
			case 8:
				cursorItemIconID = 4922;
				break;
			case 9:
				cursorItemIconID = 4417;
				break;
			}
		}
		if (Main.tileSign[Main.tile[myX, myY].type])
		{
			noThrow = 2;
			int num22 = Main.tile[myX, myY].frameX / 18;
			int num23 = Main.tile[myX, myY].frameY / 18;
			num22 %= 2;
			int num24 = myX - num22;
			int num25 = myY - num23;
			Main.signBubble = true;
			Main.signX = num24 * 16 + 16;
			Main.signY = num25 * 16;
			int num26 = Sign.ReadSign(num24, num25, CreateIfMissing: false);
			if (num26 != -1)
			{
				Main.signHover = num26;
			}
			if (num26 != -1)
			{
				Main.signHover = num26;
				cursorItemIconEnabled = false;
				cursorItemIconID = -1;
			}
		}
		if (Main.tile[myX, myY].type == 237)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 1293;
		}
		if (Main.tile[myX, myY].type == 466)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 3828;
		}
		if (Main.tile[myX, myY].type == 125)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 487;
		}
		if (Main.tile[myX, myY].type == 354)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 2999;
		}
		if (Main.tile[myX, myY].type == 287)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 2177;
		}
		if (Main.tile[myX, myY].type == 132)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 513;
		}
		if (Main.tile[myX, myY].type == 136)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 538;
		}
		if (Main.tile[myX, myY].type == 144)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			int num27 = Main.tile[myX, myY].frameX / 18;
			if (num27 < 3)
			{
				cursorItemIconID = 583 + num27;
			}
			else
			{
				cursorItemIconID = 4484 + (num27 - 3);
			}
		}
		if (Main.tile[myX, myY].type == 440)
		{
			int num28 = Main.tile[myX, myY].frameX / 54;
			int num29 = Main.tile[myX, myY].frameY / 54;
			int num30 = -1;
			switch (num28)
			{
			case 0:
				num30 = 1526;
				break;
			case 1:
				num30 = 1524;
				break;
			case 2:
				num30 = 1525;
				break;
			case 3:
				num30 = 1523;
				break;
			case 4:
				num30 = 1522;
				break;
			case 5:
				num30 = 1527;
				break;
			case 6:
				num30 = 3643;
				break;
			}
			if (num30 != -1 && (num29 == 1 || HasItem(num30)))
			{
				noThrow = 2;
				cursorItemIconEnabled = true;
				cursorItemIconID = num30;
			}
		}
		else if (Main.tile[myX, myY].type == 470)
		{
			noThrow = 2;
			int num31 = Main.tile[myX, myY].frameX % 136 / 34;
			if (num31 < 2)
			{
				cursorItemIconEnabled = true;
				cursorItemIconID = 498;
			}
			else if (num31 < 4)
			{
				cursorItemIconEnabled = true;
				cursorItemIconID = 1989;
			}
		}
		else if (Main.tile[myX, myY].type == 475)
		{
			noThrow = 2;
			cursorItemIconEnabled = true;
			cursorItemIconID = 3977;
		}
		else if (Main.tile[myX, myY].type == 520)
		{
			noThrow = 2;
			int num32 = TEFoodPlatter.Find(myX, myY);
			if (num32 != -1)
			{
				cursorItemIconEnabled = true;
				TEFoodPlatter tEFoodPlatter = (TEFoodPlatter)TileEntity.ByID[num32];
				cursorItemIconID = tEFoodPlatter.item.type;
			}
		}
		else if (Main.tile[myX, myY].type == 395)
		{
			noThrow = 2;
			int num33 = myX;
			int num34 = myY;
			int num35 = Main.tile[myX, myY].frameX;
			int num36 = Main.tile[myX, myY].frameY;
			while (num36 > 0)
			{
				num36 -= 18;
				num34--;
			}
			while (num35 >= 36)
			{
				num35 -= 36;
			}
			while (num35 > 0)
			{
				num35 -= 18;
				num33--;
			}
			int num37 = TEItemFrame.Find(num33, num34);
			if (num37 != -1)
			{
				cursorItemIconEnabled = true;
				TEItemFrame tEItemFrame = (TEItemFrame)TileEntity.ByID[num37];
				cursorItemIconID = tEItemFrame.item.type;
			}
		}
		else if (Main.tile[myX, myY].type == 471)
		{
			noThrow = 2;
			int num38 = myX;
			int num39 = myY;
			int num40 = Main.tile[myX, myY].frameX;
			int num41 = Main.tile[myX, myY].frameY;
			while (num41 > 0)
			{
				num41 -= 18;
				num39--;
			}
			while (num40 >= 54)
			{
				num40 -= 54;
			}
			while (num40 > 0)
			{
				num40 -= 18;
				num38--;
			}
			int num42 = TEWeaponsRack.Find(num38, num39);
			if (num42 != -1)
			{
				cursorItemIconEnabled = true;
				TEWeaponsRack tEWeaponsRack = (TEWeaponsRack)TileEntity.ByID[num42];
				cursorItemIconID = tEWeaponsRack.item.type;
			}
		}
		else if (Main.tile[myX, myY].type == 334)
		{
			noThrow = 2;
		}
		if (PlayerInput.UsingGamepad && cursorItemIconText.Length == 0)
		{
			cursorItemIconEnabled = false;
			cursorItemIconID = 0;
		}
	}

	public Color ChatColor()
	{
		return difficulty switch
		{
			1 => Main.mcColor, 
			2 => Main.hcColor, 
			_ => Color.White, 
		};
	}

	private void TileInteractionsMouseOver_Containers(int myX, int myY)
	{
		LocalizedText[] array = Lang.chestType;
		int[] array2 = Chest.chestTypeToIcon;
		Tile tile = Main.tile[myX, myY];
		if (tile.type == 467)
		{
			array = Lang.chestType2;
			array2 = Chest.chestTypeToIcon2;
		}
		int num = myX;
		int num2 = myY;
		if (tile.frameX % 36 != 0)
		{
			num--;
		}
		if (tile.frameY % 36 != 0)
		{
			num2--;
		}
		int num3 = Chest.FindChest(num, num2);
		cursorItemIconID = -1;
		if (num3 < 0)
		{
			cursorItemIconText = array[0].Value;
		}
		else
		{
			if (Main.chest[num3].name != "")
			{
				cursorItemIconText = Main.chest[num3].name;
			}
			else
			{
				cursorItemIconText = array[tile.frameX / 36].Value;
			}
			if (cursorItemIconText == array[tile.frameX / 36].Value)
			{
				cursorItemIconID = array2[tile.frameX / 36];
				cursorItemIconText = "";
			}
		}
		if (cursorItemIconID == 3988)
		{
			cursorItemIconID = 306;
		}
		noThrow = 2;
		cursorItemIconEnabled = true;
	}

	private void TryLandingOnDetonator()
	{
		if (whoAmI == Main.myPlayer && velocity.Y >= 3f)
		{
			Point point = (base.Bottom + new Vector2(0f, 0.01f)).ToTileCoordinates();
			Tile tileSafely = Framing.GetTileSafely(point.X, point.Y);
			if (tileSafely.active() && tileSafely.type == 411 && tileSafely.frameY == 0 && tileSafely.frameX < 36)
			{
				Wiring.HitSwitch(point.X, point.Y);
				NetMessage.SendData(59, -1, -1, null, point.X, point.Y);
			}
		}
	}

	private void TryBouncingBlocks(bool Falling)
	{
		bool num = !wet && !shimmering && (velocity.Y >= 5f || velocity.Y <= -5f);
		bool flag = false;
		bool flag2 = false;
		float num2 = 1f;
		if (!num)
		{
			return;
		}
		bool flag3 = false;
		int num3 = 0;
		foreach (Point touchedTile in TouchedTiles)
		{
			Tile tile = Main.tile[touchedTile.X, touchedTile.Y];
			if (tile != null && tile.active() && tile.nactive() && (flag || Main.tileBouncy[tile.type]))
			{
				flag3 = true;
				num3 = touchedTile.Y;
				break;
			}
		}
		if (!flag3)
		{
			return;
		}
		velocity.Y *= -0.8f;
		if (controlJump)
		{
			velocity.Y = MathHelper.Clamp(velocity.Y, -13f, 13f);
		}
		position.Y = num3 * 16 - ((velocity.Y < 0f) ? height : (-16));
		FloorVisuals(Falling);
		if (flag2)
		{
			Vector2 vector = (fullRotation - (float)Math.PI / 2f).ToRotationVector2();
			if (vector.Y > 0f)
			{
				vector.Y *= -1f;
			}
			vector.Y = vector.Y * 0.5f + -0.5f;
			float num4 = 0f - vector.Y;
			if (num4 < 0f)
			{
				num4 = 0f;
			}
			float num5 = num4 * 1.5f + 1f;
			float value = Math.Abs(velocity.Y) * num5 * num2;
			value = MathHelper.Clamp(value, 2f, 16f);
			velocity = vector * value;
			float num6 = 20f;
			Vector2 vector2 = base.Center + (fullRotation + (float)Math.PI / 2f).ToRotationVector2() * num6;
			vector2 = base.Bottom;
			ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.Keybrand, new ParticleOrchestraSettings
			{
				PositionInWorld = vector2
			}, whoAmI);
		}
		velocity.Y = MathHelper.Clamp(velocity.Y, -20f, 20f);
		if (velocity.Y * gravDir < 0f)
		{
			fallStart = (int)position.Y / 16;
		}
	}

	public bool CanAcceptItemIntoInventory(Item item)
	{
		if (preventAllItemPickups)
		{
			return ItemID.Sets.IgnoresEncumberingStone[item.type];
		}
		return true;
	}

	private void GrabItems(int i)
	{
		for (int j = 0; j < 400; j++)
		{
			Item item = Main.item[j];
			if (!item.active || item.shimmerTime != 0f || item.noGrabDelay != 0 || item.playerIndexTheItemIsReservedFor != i || !CanAcceptItemIntoInventory(item) || (item.shimmered && !((double)item.velocity.Length() < 0.2)))
			{
				continue;
			}
			int itemGrabRange = GetItemGrabRange(item);
			Rectangle hitbox = item.Hitbox;
			if (base.Hitbox.Intersects(hitbox))
			{
				if (i == Main.myPlayer && (inventory[selectedItem].type != 0 || itemAnimation <= 0))
				{
					item = PickupItem(i, j, item);
				}
			}
			else
			{
				if (!new Rectangle((int)position.X - itemGrabRange, (int)position.Y - itemGrabRange, width + itemGrabRange * 2, height + itemGrabRange * 2).Intersects(hitbox))
				{
					continue;
				}
				ItemSpaceStatus status = ItemSpace(item);
				if (CanPullItem(item, status))
				{
					item.shimmered = false;
					item.beingGrabbed = true;
					bool flag = false;
					if (difficulty == 3 && CreativePowerManager.Instance.GetPower<CreativePowers.FarPlacementRangePower>().IsEnabledForPlayer(whoAmI))
					{
						flag = true;
					}
					if (flag)
					{
						PullItem_Pickup(item, 7f, 1);
					}
					else if (manaMagnet && (item.type == 184 || item.type == 1735 || item.type == 1868))
					{
						PullItem_Pickup(item, 12f, 5);
					}
					else if (lifeMagnet && (item.type == 58 || item.type == 1734 || item.type == 1867))
					{
						PullItem_Pickup(item, 15f, 5);
					}
					else if (ItemID.Sets.NebulaPickup[item.type])
					{
						PullItem_Pickup(item, 12f, 5);
					}
					else if (status.ItemIsGoingToVoidVault)
					{
						PullItem_ToVoidVault(item);
					}
					else if (goldRing && item.IsACoin)
					{
						PullItem_Pickup(item, 12f, 5);
					}
					else
					{
						PullItem_Common(item, 0.75f);
					}
				}
			}
		}
	}

	private void PullItem_ToVoidVault(Item itemToPickUp)
	{
		PullItem_Pickup(itemToPickUp, 12f, 5);
	}

	private void PullItem_Common(Item itemToPickUp, float xPullSpeed)
	{
		if ((double)position.X + (double)width * 0.5 > (double)itemToPickUp.position.X + (double)itemToPickUp.width * 0.5)
		{
			if (itemToPickUp.velocity.X < itemGrabSpeedMax + velocity.X)
			{
				itemToPickUp.velocity.X += itemGrabSpeed;
			}
			if (itemToPickUp.velocity.X < 0f)
			{
				itemToPickUp.velocity.X += itemGrabSpeed * xPullSpeed;
			}
		}
		else
		{
			if (itemToPickUp.velocity.X > 0f - itemGrabSpeedMax + velocity.X)
			{
				itemToPickUp.velocity.X -= itemGrabSpeed;
			}
			if (itemToPickUp.velocity.X > 0f)
			{
				itemToPickUp.velocity.X -= itemGrabSpeed * xPullSpeed;
			}
		}
		if ((double)position.Y + (double)height * 0.5 > (double)itemToPickUp.position.Y + (double)itemToPickUp.height * 0.5)
		{
			if (itemToPickUp.velocity.Y < itemGrabSpeedMax)
			{
				itemToPickUp.velocity.Y += itemGrabSpeed;
			}
			if (itemToPickUp.velocity.Y < 0f)
			{
				itemToPickUp.velocity.Y += itemGrabSpeed * xPullSpeed;
			}
		}
		else
		{
			if (itemToPickUp.velocity.Y > 0f - itemGrabSpeedMax)
			{
				itemToPickUp.velocity.Y -= itemGrabSpeed;
			}
			if (itemToPickUp.velocity.Y > 0f)
			{
				itemToPickUp.velocity.Y -= itemGrabSpeed * xPullSpeed;
			}
		}
	}

	private void PullItem_Pickup(Item itemToPickUp, float speed, int acc)
	{
		Vector2 vector = new Vector2(itemToPickUp.position.X + (float)(itemToPickUp.width / 2), itemToPickUp.position.Y + (float)(itemToPickUp.height / 2));
		float num = base.Center.X - vector.X;
		float num2 = base.Center.Y - vector.Y;
		float num3 = (float)Math.Sqrt(num * num + num2 * num2);
		num3 = speed / num3;
		num *= num3;
		num2 *= num3;
		itemToPickUp.velocity.X = (itemToPickUp.velocity.X * (float)(acc - 1) + num) / (float)acc;
		itemToPickUp.velocity.Y = (itemToPickUp.velocity.Y * (float)(acc - 1) + num2) / (float)acc;
	}

	private Item PickupItem(int playerIndex, int worldItemArrayIndex, Item itemToPickUp)
	{
		if (ItemID.Sets.NebulaPickup[itemToPickUp.type])
		{
			SoundEngine.PlaySound(7, (int)position.X, (int)position.Y);
			int num = itemToPickUp.buffType;
			itemToPickUp = new Item();
			if (Main.netMode == 1)
			{
				NetMessage.SendData(102, -1, -1, null, playerIndex, num, base.Center.X, base.Center.Y);
			}
			else
			{
				NebulaLevelup(num);
			}
		}
		if (itemToPickUp.type == 58 || itemToPickUp.type == 1734 || itemToPickUp.type == 1867)
		{
			SoundEngine.PlaySound(7, (int)position.X, (int)position.Y);
			Heal(20);
			itemToPickUp = new Item();
		}
		else if (itemToPickUp.type == 184 || itemToPickUp.type == 1735 || itemToPickUp.type == 1868)
		{
			SoundEngine.PlaySound(7, (int)position.X, (int)position.Y);
			statMana += 100;
			if (Main.myPlayer == whoAmI)
			{
				ManaEffect(100);
			}
			if (statMana > statManaMax2)
			{
				statMana = statManaMax2;
			}
			itemToPickUp = new Item();
		}
		else if (itemToPickUp.type == 4143)
		{
			SoundEngine.PlaySound(7, (int)position.X, (int)position.Y);
			statMana += 50;
			if (Main.myPlayer == whoAmI)
			{
				ManaEffect(50);
			}
			if (statMana > statManaMax2)
			{
				statMana = statManaMax2;
			}
			itemToPickUp = new Item();
		}
		else
		{
			itemToPickUp = GetItem(playerIndex, itemToPickUp, GetItemSettings.PickupItemFromWorld);
		}
		Main.item[worldItemArrayIndex] = itemToPickUp;
		if (Main.netMode == 1)
		{
			NetMessage.SendData(21, -1, -1, null, worldItemArrayIndex);
		}
		return itemToPickUp;
	}

	public void Heal(int amount)
	{
		statLife += amount;
		if (Main.myPlayer == whoAmI)
		{
			HealEffect(amount);
		}
		if (statLife > statLifeMax2)
		{
			statLife = statLifeMax2;
		}
	}

	public int GetItemGrabRange(Item item)
	{
		int num = defaultItemGrabRange;
		if (goldRing && item.IsACoin)
		{
			num += Item.coinGrabRange;
		}
		if (manaMagnet && (item.type == 184 || item.type == 1735 || item.type == 1868))
		{
			num += Item.manaGrabRange;
		}
		if (item.type == 4143)
		{
			num += Item.manaGrabRange;
		}
		if (lifeMagnet && (item.type == 58 || item.type == 1734 || item.type == 1867))
		{
			num += Item.lifeGrabRange;
		}
		if (treasureMagnet)
		{
			num += Item.treasureGrabRange;
		}
		if (item.type == 3822)
		{
			num += 50;
		}
		if (ItemID.Sets.NebulaPickup[item.type])
		{
			num += 100;
		}
		if (difficulty == 3 && CreativePowerManager.Instance.GetPower<CreativePowers.FarPlacementRangePower>().IsEnabledForPlayer(whoAmI))
		{
			num += 240;
		}
		return num;
	}

	public bool SellItem(Item item, int stack = -1)
	{
		GetItemExpectedPrice(item, out var calcForSelling, out var calcForBuying);
		if (calcForSelling <= 0)
		{
			return false;
		}
		if (stack == -1)
		{
			stack = item.stack;
		}
		Item[] array = new Item[58];
		for (int i = 0; i < 58; i++)
		{
			array[i] = new Item();
			array[i] = inventory[i].Clone();
		}
		long num = calcForSelling / 5;
		if (num < 1)
		{
			num = 1L;
		}
		long num2 = num;
		num *= stack;
		int amount = Main.shopSellbackHelper.GetAmount(item);
		if (amount > 0)
		{
			num += (-num2 + calcForBuying) * Math.Min(amount, item.stack);
		}
		bool flag = false;
		while (num >= 1000000 && !flag)
		{
			int num3 = -1;
			for (int num4 = 53; num4 >= 0; num4--)
			{
				if (num3 == -1 && (inventory[num4].type == 0 || inventory[num4].stack == 0))
				{
					num3 = num4;
				}
				while (inventory[num4].type == 74 && inventory[num4].stack < inventory[num4].maxStack && num >= 1000000)
				{
					inventory[num4].stack++;
					num -= 1000000;
					DoCoins(num4);
					if (inventory[num4].stack == 0 && num3 == -1)
					{
						num3 = num4;
					}
				}
			}
			if (num >= 1000000)
			{
				if (num3 == -1)
				{
					flag = true;
					continue;
				}
				inventory[num3].SetDefaults(74);
				num -= 1000000;
			}
		}
		while (num >= 10000 && !flag)
		{
			int num5 = -1;
			for (int num6 = 53; num6 >= 0; num6--)
			{
				if (num5 == -1 && (inventory[num6].type == 0 || inventory[num6].stack == 0))
				{
					num5 = num6;
				}
				while (inventory[num6].type == 73 && inventory[num6].stack < inventory[num6].maxStack && num >= 10000)
				{
					inventory[num6].stack++;
					num -= 10000;
					DoCoins(num6);
					if (inventory[num6].stack == 0 && num5 == -1)
					{
						num5 = num6;
					}
				}
			}
			if (num >= 10000)
			{
				if (num5 == -1)
				{
					flag = true;
					continue;
				}
				inventory[num5].SetDefaults(73);
				num -= 10000;
			}
		}
		while (num >= 100 && !flag)
		{
			int num7 = -1;
			for (int num8 = 53; num8 >= 0; num8--)
			{
				if (num7 == -1 && (inventory[num8].type == 0 || inventory[num8].stack == 0))
				{
					num7 = num8;
				}
				while (inventory[num8].type == 72 && inventory[num8].stack < inventory[num8].maxStack && num >= 100)
				{
					inventory[num8].stack++;
					num -= 100;
					DoCoins(num8);
					if (inventory[num8].stack == 0 && num7 == -1)
					{
						num7 = num8;
					}
				}
			}
			if (num >= 100)
			{
				if (num7 == -1)
				{
					flag = true;
					continue;
				}
				inventory[num7].SetDefaults(72);
				num -= 100;
			}
		}
		while (num >= 1 && !flag)
		{
			int num9 = -1;
			for (int num10 = 53; num10 >= 0; num10--)
			{
				if (num9 == -1 && (inventory[num10].type == 0 || inventory[num10].stack == 0))
				{
					num9 = num10;
				}
				while (inventory[num10].type == 71 && inventory[num10].stack < inventory[num10].maxStack && num >= 1)
				{
					inventory[num10].stack++;
					num--;
					DoCoins(num10);
					if (inventory[num10].stack == 0 && num9 == -1)
					{
						num9 = num10;
					}
				}
			}
			if (num >= 1)
			{
				if (num9 == -1)
				{
					flag = true;
					continue;
				}
				inventory[num9].SetDefaults(71);
				num--;
			}
		}
		if (flag)
		{
			for (int j = 0; j < 58; j++)
			{
				inventory[j] = array[j].Clone();
			}
			return false;
		}
		return true;
	}

	public void RefreshItems(bool onlyIfVariantChanged = true)
	{
		if (onlyIfVariantChanged && whoAmI == Main.myPlayer)
		{
			Recipe.UpdateItemVariants();
		}
		RefreshItems(inventory, onlyIfVariantChanged);
		RefreshItems(armor, onlyIfVariantChanged);
		RefreshItems(dye, onlyIfVariantChanged);
		RefreshItems(miscEquips, onlyIfVariantChanged);
		RefreshItems(miscDyes, onlyIfVariantChanged);
		RefreshItems(bank.item, onlyIfVariantChanged);
		RefreshItems(bank2.item, onlyIfVariantChanged);
		RefreshItems(bank3.item, onlyIfVariantChanged);
		RefreshItems(bank4.item, onlyIfVariantChanged);
		RefreshItems(_temporaryItemSlots, onlyIfVariantChanged);
	}

	private void RefreshItems(Item[] array, bool onlyIfVariantChanged)
	{
		for (int i = 0; i < array.Length; i++)
		{
			array[i]?.Refresh(onlyIfVariantChanged);
		}
	}

	public void GetItemExpectedPrice(Item item, out long calcForSelling, out long calcForBuying)
	{
		if (item.shopSpecialCurrency != -1)
		{
			CustomCurrencyManager.GetPrices(item, out calcForSelling, out calcForBuying);
			return;
		}
		int storeValue = item.GetStoreValue();
		calcForSelling = storeValue;
		calcForBuying = storeValue;
		if (discountAvailable)
		{
			if (!item.buyOnce)
			{
				calcForBuying = (int)((float)calcForBuying * 0.8f);
			}
			if (item.isAShopItem)
			{
				calcForSelling = calcForBuying;
			}
		}
		if (item.buyOnce)
		{
			calcForBuying = (int)Math.Round((double)calcForBuying / currentShoppingSettings.PriceAdjustment);
			calcForSelling = (int)Math.Round((double)calcForSelling / currentShoppingSettings.PriceAdjustment);
		}
		else
		{
			calcForBuying = (int)Math.Round((double)calcForBuying * currentShoppingSettings.PriceAdjustment);
			calcForSelling = (int)Math.Round((double)calcForSelling / currentShoppingSettings.PriceAdjustment);
		}
		if (item.buyOnce)
		{
			calcForBuying /= 5L;
			if (storeValue != 0 && calcForBuying < 1)
			{
				calcForBuying = 1L;
			}
		}
	}

	public bool BuyItem(long price, int customCurrency = -1)
	{
		if (customCurrency != -1)
		{
			return CustomCurrencyManager.BuyItem(this, price, customCurrency);
		}
		bool overFlowing;
		long num = Utils.CoinsCount(out overFlowing, inventory, 58, 57, 56, 55, 54);
		long num2 = Utils.CoinsCount(out overFlowing, bank.item);
		long num3 = Utils.CoinsCount(out overFlowing, bank2.item);
		long num4 = Utils.CoinsCount(out overFlowing, bank3.item);
		long num5 = Utils.CoinsCount(out overFlowing, bank4.item);
		if (Utils.CoinsCombineStacks(out overFlowing, num, num2, num3, num4, num5) < price)
		{
			return false;
		}
		List<Item[]> list = new List<Item[]>();
		Dictionary<int, List<int>> dictionary = new Dictionary<int, List<int>>();
		List<Point> list2 = new List<Point>();
		List<Point> list3 = new List<Point>();
		List<Point> list4 = new List<Point>();
		List<Point> list5 = new List<Point>();
		List<Point> list6 = new List<Point>();
		List<Point> list7 = new List<Point>();
		list.Add(inventory);
		list.Add(bank.item);
		list.Add(bank2.item);
		list.Add(bank3.item);
		list.Add(bank4.item);
		for (int i = 0; i < list.Count; i++)
		{
			dictionary[i] = new List<int>();
		}
		dictionary[0] = new List<int> { 58, 57, 56, 55, 54 };
		for (int j = 0; j < list.Count; j++)
		{
			for (int k = 0; k < list[j].Length; k++)
			{
				if (!dictionary[j].Contains(k) && list[j][k].IsACoin)
				{
					list3.Add(new Point(j, k));
				}
			}
		}
		int num6 = 0;
		for (int num7 = list[num6].Length - 1; num7 >= 0; num7--)
		{
			if (!dictionary[num6].Contains(num7) && (list[num6][num7].type == 0 || list[num6][num7].stack == 0))
			{
				list2.Add(new Point(num6, num7));
			}
		}
		num6 = 1;
		for (int num8 = list[num6].Length - 1; num8 >= 0; num8--)
		{
			if (!dictionary[num6].Contains(num8) && (list[num6][num8].type == 0 || list[num6][num8].stack == 0))
			{
				list4.Add(new Point(num6, num8));
			}
		}
		num6 = 2;
		for (int num9 = list[num6].Length - 1; num9 >= 0; num9--)
		{
			if (!dictionary[num6].Contains(num9) && (list[num6][num9].type == 0 || list[num6][num9].stack == 0))
			{
				list5.Add(new Point(num6, num9));
			}
		}
		num6 = 3;
		for (int num10 = list[num6].Length - 1; num10 >= 0; num10--)
		{
			if (!dictionary[num6].Contains(num10) && (list[num6][num10].type == 0 || list[num6][num10].stack == 0))
			{
				list6.Add(new Point(num6, num10));
			}
		}
		num6 = 4;
		for (int num11 = list[num6].Length - 1; num11 >= 0; num11--)
		{
			if (!dictionary[num6].Contains(num11) && (list[num6][num11].type == 0 || list[num6][num11].stack == 0))
			{
				list7.Add(new Point(num6, num11));
			}
		}
		if (TryPurchasing(price, list, list3, list2, list4, list5, list6, list7))
		{
			return false;
		}
		return true;
	}

	private static bool TryPurchasing(long price, List<Item[]> inv, List<Point> slotCoins, List<Point> slotsEmpty, List<Point> slotEmptyBank, List<Point> slotEmptyBank2, List<Point> slotEmptyBank3, List<Point> slotEmptyBank4)
	{
		long num = price;
		Dictionary<Point, Item> dictionary = new Dictionary<Point, Item>();
		bool result = false;
		while (num > 0)
		{
			long num2 = 1000000L;
			for (int i = 0; i < 4; i++)
			{
				if (num >= num2)
				{
					foreach (Point slotCoin in slotCoins)
					{
						if (inv[slotCoin.X][slotCoin.Y].type == 74 - i)
						{
							long num3 = num / num2;
							dictionary[slotCoin] = inv[slotCoin.X][slotCoin.Y].Clone();
							if (num3 < inv[slotCoin.X][slotCoin.Y].stack)
							{
								inv[slotCoin.X][slotCoin.Y].stack -= (int)num3;
							}
							else
							{
								inv[slotCoin.X][slotCoin.Y].SetDefaults();
								slotsEmpty.Add(slotCoin);
							}
							num -= num2 * (dictionary[slotCoin].stack - inv[slotCoin.X][slotCoin.Y].stack);
						}
					}
				}
				num2 /= 100;
			}
			if (num <= 0)
			{
				continue;
			}
			if (slotsEmpty.Count > 0)
			{
				slotsEmpty.Sort(DelegateMethods.CompareYReverse);
				Point item = new Point(-1, -1);
				for (int j = 0; j < inv.Count; j++)
				{
					num2 = 10000L;
					for (int k = 0; k < 3; k++)
					{
						if (num >= num2)
						{
							foreach (Point slotCoin2 in slotCoins)
							{
								if (slotCoin2.X == j && inv[slotCoin2.X][slotCoin2.Y].type == 74 - k && inv[slotCoin2.X][slotCoin2.Y].stack >= 1)
								{
									List<Point> list = slotsEmpty;
									if (j == 1 && slotEmptyBank.Count > 0)
									{
										list = slotEmptyBank;
									}
									if (j == 2 && slotEmptyBank2.Count > 0)
									{
										list = slotEmptyBank2;
									}
									if (j == 3 && slotEmptyBank3.Count > 0)
									{
										list = slotEmptyBank3;
									}
									if (j == 4 && slotEmptyBank4.Count > 0)
									{
										list = slotEmptyBank4;
									}
									if (--inv[slotCoin2.X][slotCoin2.Y].stack <= 0)
									{
										inv[slotCoin2.X][slotCoin2.Y].SetDefaults();
										list.Add(slotCoin2);
									}
									dictionary[list[0]] = inv[list[0].X][list[0].Y].Clone();
									inv[list[0].X][list[0].Y].SetDefaults(73 - k);
									inv[list[0].X][list[0].Y].stack = 100;
									item = list[0];
									list.RemoveAt(0);
									break;
								}
							}
						}
						if (item.X != -1 || item.Y != -1)
						{
							break;
						}
						num2 /= 100;
					}
					for (int l = 0; l < 2; l++)
					{
						if (item.X != -1 || item.Y != -1)
						{
							continue;
						}
						foreach (Point slotCoin3 in slotCoins)
						{
							if (slotCoin3.X == j && inv[slotCoin3.X][slotCoin3.Y].type == 73 + l && inv[slotCoin3.X][slotCoin3.Y].stack >= 1)
							{
								List<Point> list2 = slotsEmpty;
								if (j == 1 && slotEmptyBank.Count > 0)
								{
									list2 = slotEmptyBank;
								}
								if (j == 2 && slotEmptyBank2.Count > 0)
								{
									list2 = slotEmptyBank2;
								}
								if (j == 3 && slotEmptyBank3.Count > 0)
								{
									list2 = slotEmptyBank3;
								}
								if (j == 4 && slotEmptyBank4.Count > 0)
								{
									list2 = slotEmptyBank4;
								}
								if (--inv[slotCoin3.X][slotCoin3.Y].stack <= 0)
								{
									inv[slotCoin3.X][slotCoin3.Y].SetDefaults();
									list2.Add(slotCoin3);
								}
								dictionary[list2[0]] = inv[list2[0].X][list2[0].Y].Clone();
								inv[list2[0].X][list2[0].Y].SetDefaults(72 + l);
								inv[list2[0].X][list2[0].Y].stack = 100;
								item = list2[0];
								list2.RemoveAt(0);
								break;
							}
						}
					}
					if (item.X != -1 && item.Y != -1)
					{
						slotCoins.Add(item);
						break;
					}
				}
				slotsEmpty.Sort(DelegateMethods.CompareYReverse);
				slotEmptyBank.Sort(DelegateMethods.CompareYReverse);
				slotEmptyBank2.Sort(DelegateMethods.CompareYReverse);
				slotEmptyBank3.Sort(DelegateMethods.CompareYReverse);
				slotEmptyBank4.Sort(DelegateMethods.CompareYReverse);
				continue;
			}
			foreach (KeyValuePair<Point, Item> item2 in dictionary)
			{
				inv[item2.Key.X][item2.Key.Y] = item2.Value.Clone();
			}
			result = true;
			break;
		}
		return result;
	}

	public void AdjTiles()
	{
		int num = 4;
		int num2 = 3;
		if (ateArtisanBread)
		{
			num += 4;
			num2 += 4;
		}
		for (int i = 0; i < TileID.Count; i++)
		{
			oldAdjTile[i] = adjTile[i];
			adjTile[i] = false;
		}
		oldAdjWater = adjWater;
		adjWater = false;
		oldAdjHoney = adjHoney;
		adjHoney = false;
		oldAdjLava = adjLava;
		adjLava = false;
		alchemyTable = false;
		int num3 = (int)((position.X + (float)(width / 2)) / 16f);
		int num4 = (int)((position.Y + (float)height) / 16f);
		for (int j = num3 - num; j <= num3 + num; j++)
		{
			for (int k = num4 - num2; k < num4 + num2; k++)
			{
				if (Main.tile[j, k].active())
				{
					adjTile[Main.tile[j, k].type] = true;
					switch (Main.tile[j, k].type)
					{
					case 77:
					case 302:
						adjTile[17] = true;
						break;
					case 133:
						adjTile[17] = true;
						adjTile[77] = true;
						break;
					case 134:
						adjTile[16] = true;
						break;
					case 354:
					case 469:
					case 487:
						adjTile[14] = true;
						break;
					case 355:
						adjTile[13] = true;
						adjTile[14] = true;
						alchemyTable = true;
						break;
					}
				}
				if (Main.tile[j, k].liquid > 200 && Main.tile[j, k].liquidType() == 0)
				{
					adjWater = true;
				}
				if (Main.tile[j, k].liquid > 200 && Main.tile[j, k].liquidType() == 2)
				{
					adjHoney = true;
				}
				if (Main.tile[j, k].liquid > 200 && Main.tile[j, k].liquidType() == 1)
				{
					adjLava = true;
				}
			}
		}
		if (!Main.playerInventory)
		{
			return;
		}
		bool flag = false;
		for (int l = 0; l < TileID.Count; l++)
		{
			if (oldAdjTile[l] != adjTile[l])
			{
				flag = true;
				break;
			}
		}
		if (adjWater != oldAdjWater)
		{
			flag = true;
		}
		if (adjHoney != oldAdjHoney)
		{
			flag = true;
		}
		if (adjLava != oldAdjLava)
		{
			flag = true;
		}
		if (flag)
		{
			Recipe.FindRecipes();
		}
	}

	public bool IsTileTypeInInteractionRange(int targetTileType, TileReachCheckSettings settings)
	{
		Point point = position.ToTileCoordinates();
		Point point2 = base.BottomRight.ToTileCoordinates();
		settings.GetRanges(this, out var x, out var y);
		int num = Utils.Clamp(point.X - x + 1, 0, Main.maxTilesX - 1);
		int num2 = Utils.Clamp(point2.X + x - 1, 0, Main.maxTilesX - 1);
		int num3 = Utils.Clamp(point.Y - y + 1, 0, Main.maxTilesY - 1);
		int num4 = Utils.Clamp(point2.Y + y - 2, 0, Main.maxTilesY - 1);
		for (int i = num; i <= num2; i++)
		{
			for (int j = num3; j <= num4; j++)
			{
				Tile tile = Main.tile[i, j];
				if (tile != null && tile.active() && tile.type == targetTileType)
				{
					return true;
				}
			}
		}
		return false;
	}

	public void DisplayDollUpdate()
	{
		if (!Main.gamePaused)
		{
			UpdateMiscCounter();
		}
	}

	public bool IsColorfulDye(int dye)
	{
		if (dye > 0)
		{
			return ItemID.Sets.ColorfulDyeValues[dye];
		}
		return false;
	}

	public bool ShouldDrawFootball()
	{
		bool result = hasFootball && !pulley && !compositeBackArm.enabled;
		if (HeldItem.type == 4743 && itemAnimation > 0)
		{
			result = false;
		}
		return result;
	}

	public void PlayerFrame()
	{
		if (swimTime > 0)
		{
			swimTime--;
			if (!wet)
			{
				swimTime = 0;
			}
		}
		head = armor[0].headSlot;
		body = armor[1].bodySlot;
		legs = armor[2].legSlot;
		if (armor[10].headSlot >= 0)
		{
			head = armor[10].headSlot;
		}
		if (armor[11].bodySlot >= 0)
		{
			body = armor[11].bodySlot;
		}
		if (armor[12].legSlot >= 0)
		{
			legs = armor[12].legSlot;
		}
		if (!dead)
		{
			UpdateVisibleAccessories();
		}
		wearsRobe = false;
		bool somethingSpecial = false;
		SetMatchRequest request = default(SetMatchRequest);
		request.Head = head;
		request.Body = body;
		request.Legs = legs;
		request.Male = Male;
		request.ArmorSlotRequested = 1;
		int num = SetMatch(request, ref wearsRobe);
		if (num != -1)
		{
			legs = num;
		}
		request = default(SetMatchRequest);
		request.Head = head;
		request.Body = body;
		request.Legs = legs;
		request.Male = Male;
		request.ArmorSlotRequested = 2;
		num = SetMatch(request, ref somethingSpecial);
		if (num != -1)
		{
			legs = num;
		}
		request = default(SetMatchRequest);
		request.Head = head;
		request.Body = body;
		request.Legs = legs;
		request.Male = Male;
		request.ArmorSlotRequested = 0;
		num = SetMatch(request, ref somethingSpecial);
		if (num != -1)
		{
			head = num;
		}
		if (body == 93)
		{
			shield = 0;
			handoff = 0;
		}
		if (body > 0 && ArmorIDs.Body.Sets.DisableHandOnAndOffAccDraw[body])
		{
			handon = 0;
			handoff = 0;
		}
		if (body > 0 && waist > 0 && ArmorIDs.Body.Sets.DisableBeltAccDraw[body] && ArmorIDs.Waist.Sets.IsABelt[waist])
		{
			waist = 0;
		}
		if (!dead && body >= 0)
		{
			sbyte b = (sbyte)(Male ? ArmorIDs.Body.Sets.IncludedCapeBack : ArmorIDs.Body.Sets.IncludedCapeBackFemale)[body];
			if (b != -1)
			{
				if (ArmorIDs.Back.Sets.DrawInBackpackLayer[b])
				{
					backpack = b;
					cBackpack = cBody;
				}
				else if (ArmorIDs.Back.Sets.DrawInTailLayer[b])
				{
					tail = b;
					cTail = cBody;
				}
				else if (back == -1)
				{
					back = b;
					cBack = cBody;
				}
			}
			sbyte b2 = (sbyte)ArmorIDs.Body.Sets.IncludedCapeFront[body];
			if (b2 != -1 && front == -1)
			{
				front = b2;
				cFront = cBody;
			}
			ArmorIDs.Body.Sets.IncludeCapeFrontAndBackInfo includeCapeFrontAndBackInfo = ArmorIDs.Body.Sets.IncludeCapeFrontAndBack[body];
			if (!includeCapeFrontAndBackInfo.Invalid && back == -1 && front == -1)
			{
				front = includeCapeFrontAndBackInfo.frontCape;
				cFront = cBody;
				sbyte backCape = includeCapeFrontAndBackInfo.backCape;
				if (ArmorIDs.Back.Sets.DrawInBackpackLayer[backCape])
				{
					backpack = backCape;
					cBackpack = cBody;
				}
				else if (ArmorIDs.Back.Sets.DrawInTailLayer[backCape])
				{
					tail = backCape;
					cTail = cBody;
				}
				else if (!sitting.isSitting)
				{
					back = backCape;
					cBack = cBody;
				}
			}
		}
		if (legs == 67)
		{
			shoe = 0;
		}
		if (legs == 140)
		{
			shoe = 0;
		}
		bool flag = false;
		if ((wereWolf || forceWerewolf) && !hideWolf)
		{
			legs = 20;
			body = 21;
			head = 38;
			flag = true;
		}
		bool flag2 = wet && !lavaWet && (!mount.Active || !mount.IsConsideredASlimeMount);
		if (merman || forceMerman)
		{
			if (!hideMerman)
			{
				head = 39;
				legs = 21;
				body = 22;
				flag = true;
			}
			if (flag2)
			{
				wings = 0;
			}
		}
		socialShadowRocketBoots = false;
		socialIgnoreLight = false;
		socialGhost = false;
		armorEffectDrawShadow = false;
		armorEffectDrawShadowSubtle = false;
		armorEffectDrawOutlines = false;
		armorEffectDrawShadowLokis = false;
		armorEffectDrawShadowBasilisk = false;
		armorEffectDrawOutlinesForbidden = false;
		armorEffectDrawShadowEOCShield = false;
		if (!isDisplayDollOrInanimate)
		{
			if (head == 101 && body == 66 && legs == 55)
			{
				socialGhost = true;
			}
			if (head == 156 && body == 66 && legs == 55)
			{
				socialGhost = true;
			}
			SetArmorEffectVisuals(this);
		}
		hermesStepSound.SoundType = 17;
		hermesStepSound.SoundStyle = -1;
		hermesStepSound.IntendedCooldown = 9;
		if (head == 99 && body == 65 && legs == 54)
		{
			turtleArmor = true;
		}
		if (head == 162 && body == 170 && legs == 105)
		{
			spiderArmor = true;
		}
		ApplyArmorSoundAndDustChanges();
		if (legs == 140)
		{
			hermesStepSound.SoundType = 2;
			hermesStepSound.SoundStyle = 24;
			hermesStepSound.IntendedCooldown = 6;
		}
		if (flag)
		{
			face = -1;
			faceFlower = -1;
			faceHead = -1;
		}
		if (head > 0 && face > 0)
		{
			if (ArmorIDs.Face.Sets.OverrideHelmet[face])
			{
				head = -1;
				faceHead = -1;
			}
			else if (!ArmorIDs.Face.Sets.DrawInFaceUnderHairLayer[face])
			{
				face = -1;
			}
		}
		if (head > 0 && faceHead > 0 && ArmorIDs.Head.Sets.UseAltFaceHeadDraw[head])
		{
			sbyte b3 = (sbyte)ArmorIDs.Face.Sets.AltFaceHead[faceHead];
			if (b3 > 0)
			{
				faceHead = b3;
			}
		}
		if (webbed || frozen || stoned || (Main.gamePaused && !Main.gameMenu))
		{
			return;
		}
		if (head == 267 && body == 236 && (legs == 219 || legs == 220) && miscCounter % 15 == 0 && Main.rand.Next(3) == 0)
		{
			Vector2 center = base.Center;
			float num2 = 1f + Main.rand.NextFloat() * 0.5f;
			if (Main.rand.Next(2) == 0)
			{
				num2 *= -1f;
			}
			center += new Vector2(num2 * -25f, -8f);
			Dust obj = Main.dust[Dust.NewDust(center, 2, 2, 304, 0f, 0f, 100)];
			obj.rotation = Main.rand.NextFloat() * ((float)Math.PI * 2f);
			obj.alpha = 254;
			obj.velocity.X = num2 * 0.2f;
			obj.noGravity = true;
			obj.customData = this;
			obj.shader = GameShaders.Armor.GetSecondaryShader(cBody, this);
		}
		if (!isDisplayDollOrInanimate)
		{
			if (((body == 68 && legs == 57 && head == 106) || (body == 74 && legs == 63 && head == 106)) && Main.rand.Next(10) == 0)
			{
				int num3 = Dust.NewDust(new Vector2(position.X - velocity.X * 2f, position.Y - 2f - velocity.Y * 2f), width, height, 43, 0f, 0f, 100, new Color(255, 0, 255), 0.3f);
				Main.dust[num3].fadeIn = 0.8f;
				Main.dust[num3].noGravity = true;
				Main.dust[num3].velocity *= 2f;
				Main.dust[num3].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
			}
			if (wings == 27 && wingsLogic == wings)
			{
				float num4 = 0.4f * stealth;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, num4, num4 * 0.9f, num4 * 0.2f);
			}
			if (head == 5 && body == 5 && legs == 5)
			{
				socialShadowRocketBoots = true;
			}
			if (head == 5 && body == 5 && legs == 5 && Main.rand.Next(10) == 0)
			{
				int num5 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 14, 0f, 0f, 200, default(Color), 1.2f);
				Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
			}
			if (head == 76 && body == 49 && legs == 45)
			{
				socialShadowRocketBoots = true;
			}
			if (head == 74 && body == 48 && legs == 44)
			{
				socialShadowRocketBoots = true;
			}
			if (head == 74 && body == 48 && legs == 44 && Main.rand.Next(10) == 0)
			{
				int num6 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 14, 0f, 0f, 200, default(Color), 1.2f);
				Main.dust[num6].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
			}
			if (head == 57 && body == 37 && legs == 35)
			{
				int maxValue = 10;
				if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 1f)
				{
					maxValue = 2;
				}
				if (Main.rand.Next(maxValue) == 0)
				{
					int num7 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 115, 0f, 0f, 140, default(Color), 0.75f);
					Main.dust[num7].noGravity = true;
					Main.dust[num7].fadeIn = 1.5f;
					Main.dust[num7].velocity *= 0.3f;
					Main.dust[num7].velocity += velocity * 0.2f;
					Main.dust[num7].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
				}
			}
			if (head == 6 && body == 6 && legs == 6 && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 1f && !rocketFrame)
			{
				for (int i = 0; i < 2; i++)
				{
					int num8 = Dust.NewDust(new Vector2(position.X - velocity.X * 2f, position.Y - 2f - velocity.Y * 2f), width, height, 6, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num8].noGravity = true;
					Main.dust[num8].noLight = true;
					Main.dust[num8].velocity.X -= velocity.X * 0.5f;
					Main.dust[num8].velocity.Y -= velocity.Y * 0.5f;
					Main.dust[num8].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
				}
			}
			if (head == 8 && body == 8 && legs == 8 && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 1f)
			{
				int num9 = Dust.NewDust(new Vector2(position.X - velocity.X * 2f, position.Y - 2f - velocity.Y * 2f), width, height, 40, 0f, 0f, 50, default(Color), 1.4f);
				Main.dust[num9].noGravity = true;
				Main.dust[num9].velocity.X = velocity.X * 0.25f;
				Main.dust[num9].velocity.Y = velocity.Y * 0.25f;
				Main.dust[num9].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
			}
			if (head == 9 && body == 9 && legs == 9 && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 1f && !rocketFrame)
			{
				for (int j = 0; j < 2; j++)
				{
					int num10 = Dust.NewDust(new Vector2(position.X - velocity.X * 2f, position.Y - 2f - velocity.Y * 2f), width, height, 6, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num10].noGravity = true;
					Main.dust[num10].noLight = true;
					Main.dust[num10].velocity.X -= velocity.X * 0.5f;
					Main.dust[num10].velocity.Y -= velocity.Y * 0.5f;
					Main.dust[num10].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
				}
			}
			if (body == 18 && legs == 17 && (head == 32 || head == 33 || head == 34) && Main.rand.Next(10) == 0)
			{
				int num11 = Dust.NewDust(new Vector2(position.X - velocity.X * 2f, position.Y - 2f - velocity.Y * 2f), width, height, 43, 0f, 0f, 100, default(Color), 0.3f);
				Main.dust[num11].fadeIn = 0.8f;
				Main.dust[num11].velocity *= 0f;
				Main.dust[num11].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
			}
			if ((body == 24 || body == 229) && (legs == 23 || legs == 212) && (head == 43 || head == 41 || head == 42 || head == 254 || head == 255 || head == 256 || head == 257 || head == 258) && velocity.X != 0f && velocity.Y != 0f && Main.rand.Next(10) == 0)
			{
				int num12 = Dust.NewDust(new Vector2(position.X - velocity.X * 2f, position.Y - 2f - velocity.Y * 2f), width, height, 43, 0f, 0f, 100, default(Color), 0.3f);
				Main.dust[num12].fadeIn = 0.8f;
				Main.dust[num12].velocity *= 0f;
				Main.dust[num12].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
			}
			if (body == 36 && head == 56 && velocity.X != 0f && velocity.Y == 0f)
			{
				for (int k = 0; k < 2; k++)
				{
					int num13 = Dust.NewDust(new Vector2(position.X, position.Y + (float)((gravDir == 1f) ? (height - 2) : (-4))), width, 6, 106, 0f, 0f, 100, default(Color), 0.1f);
					Main.dust[num13].fadeIn = 1f;
					Main.dust[num13].noGravity = true;
					Main.dust[num13].velocity *= 0.2f;
					Main.dust[num13].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
				}
			}
			if (body == 27 && head == 46 && legs == 26 && velocity.X != 0f && velocity.Y == 0f && miscCounter % 2 == 0)
			{
				for (int l = 0; l < 2; l++)
				{
					int num14 = ((l != 0) ? Dust.NewDust(new Vector2(position.X + (float)(width / 2), position.Y + (float)height + gfxOffY), width / 2, 6, 76, 0f, 0f, 0, default(Color), 1.35f) : Dust.NewDust(new Vector2(position.X, position.Y + (float)height + gfxOffY), width / 2, 6, 76, 0f, 0f, 0, default(Color), 1.35f));
					Main.dust[num14].scale *= 1f + (float)Main.rand.Next(20, 40) * 0.01f;
					Main.dust[num14].noGravity = true;
					Main.dust[num14].noLight = true;
					Main.dust[num14].velocity *= 0.001f;
					Main.dust[num14].velocity.Y -= 0.003f;
					Main.dust[num14].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
				}
			}
		}
		drawingFootball = false;
		if (ShouldDrawFootball())
		{
			SetCompositeArmBack(enabled: true, CompositeArmStretchAmount.Full, (float)Math.PI / 10f * (float)direction * -1f);
			drawingFootball = true;
		}
		Item.GetDrawHitbox(HeldItem.type, this);
		bool flag3 = CanVisuallyHoldItem(HeldItem);
		bool flag4 = HeldItem.type != 4952;
		if (mount.Active)
		{
			legFrameCounter = 0.0;
			legFrame.Y = legFrame.Height * 6;
			if (mount.Type == 23 || mount.Type == 45 || mount.Type == 48)
			{
				ref Rectangle reference = ref legFrame;
				_ = legFrame;
				reference.Y = 0;
			}
			if (velocity.Y != 0f)
			{
				if (mount.FlyTime > 0 && jump == 0 && controlJump && !mount.CanHover())
				{
					if (mount.Type == 0)
					{
						if (direction > 0)
						{
							if (Main.rand.Next(4) == 0)
							{
								int num15 = Dust.NewDust(new Vector2(base.Center.X - 22f, position.Y + (float)height - 6f), 20, 10, 64, velocity.X * 0.25f, velocity.Y * 0.25f, 255);
								Main.dust[num15].velocity *= 0.1f;
								Main.dust[num15].noLight = true;
							}
							if (Main.rand.Next(4) == 0)
							{
								int num16 = Dust.NewDust(new Vector2(base.Center.X + 12f, position.Y + (float)height - 6f), 20, 10, 64, velocity.X * 0.25f, velocity.Y * 0.25f, 255);
								Main.dust[num16].velocity *= 0.1f;
								Main.dust[num16].noLight = true;
							}
						}
						else
						{
							if (Main.rand.Next(4) == 0)
							{
								int num17 = Dust.NewDust(new Vector2(base.Center.X - 32f, position.Y + (float)height - 6f), 20, 10, 64, velocity.X * 0.25f, velocity.Y * 0.25f, 255);
								Main.dust[num17].velocity *= 0.1f;
								Main.dust[num17].noLight = true;
							}
							if (Main.rand.Next(4) == 0)
							{
								int num18 = Dust.NewDust(new Vector2(base.Center.X + 2f, position.Y + (float)height - 6f), 20, 10, 64, velocity.X * 0.25f, velocity.Y * 0.25f, 255);
								Main.dust[num18].velocity *= 0.1f;
								Main.dust[num18].noLight = true;
							}
						}
					}
					mount.TryBeginningFlight(this, 3);
					mount.UpdateFrame(this, 3, velocity);
					mount.TryLanding(this);
				}
				else if (wet)
				{
					mount.UpdateFrame(this, 4, velocity);
				}
				else
				{
					mount.TryBeginningFlight(this, 2);
					mount.UpdateFrame(this, 2, velocity);
					mount.TryLanding(this);
				}
			}
			else
			{
				mount.UpdateFrame(this, mount.GetIntendedGroundedFrame(this), velocity);
			}
		}
		else if (legs != 140)
		{
			if (swimTime > 0)
			{
				legFrameCounter += 2.0;
				while (legFrameCounter > 8.0)
				{
					legFrameCounter -= 8.0;
					legFrame.Y += legFrame.Height;
				}
				if (legFrame.Y < legFrame.Height * 7)
				{
					legFrame.Y = legFrame.Height * 19;
				}
				else if (legFrame.Y > legFrame.Height * 19)
				{
					legFrame.Y = legFrame.Height * 7;
				}
			}
			else if (velocity.Y != 0f || grappling[0] > -1)
			{
				legFrameCounter = 0.0;
				legFrame.Y = legFrame.Height * 5;
				if ((wings == 22 || wings == 28 || wings == 45) && ShouldDrawWingsThatAreAlwaysAnimated())
				{
					legFrame.Y = 0;
				}
			}
			else if (velocity.X != 0f)
			{
				if ((slippy || slippy2 || windPushed) && !controlLeft && !controlRight)
				{
					legFrameCounter = 0.0;
					ref Rectangle reference2 = ref legFrame;
					_ = legFrame;
					reference2.Y = 0;
				}
				else
				{
					legFrameCounter += (double)Math.Abs(velocity.X) * 1.3;
					while (legFrameCounter > 8.0)
					{
						legFrameCounter -= 8.0;
						legFrame.Y += legFrame.Height;
					}
					if (legFrame.Y < legFrame.Height * 7)
					{
						legFrame.Y = legFrame.Height * 19;
					}
					else if (legFrame.Y > legFrame.Height * 19)
					{
						legFrame.Y = legFrame.Height * 7;
					}
				}
			}
			else
			{
				legFrameCounter = 0.0;
				ref Rectangle reference3 = ref legFrame;
				_ = legFrame;
				reference3.Y = 0;
			}
		}
		if (carpetFrame >= 0)
		{
			legFrameCounter = 0.0;
			ref Rectangle reference4 = ref legFrame;
			_ = legFrame;
			reference4.Y = 0;
		}
		if (sandStorm)
		{
			if (grappling[0] >= 0)
			{
				sandStorm = false;
			}
			if (miscCounter % 4 == 0 && itemAnimation == 0)
			{
				ChangeDir(direction * -1);
				if (inventory[selectedItem].holdStyle == 2)
				{
					if (inventory[selectedItem].type == 946 || inventory[selectedItem].type == 4707)
					{
						itemLocation.X = position.X + (float)width * 0.5f - (float)(16 * direction);
					}
					if (inventory[selectedItem].type == 186)
					{
						itemLocation.X = position.X + (float)width * 0.5f + (float)(6 * direction);
						itemRotation = 0.79f * (float)(-direction);
					}
				}
			}
			legFrameCounter = 0.0;
			ref Rectangle reference5 = ref legFrame;
			_ = legFrame;
			reference5.Y = 0;
		}
		else if (itemAnimation > 0 && inventory[selectedItem].useStyle != 10 && flag4)
		{
			if (inventory[selectedItem].useStyle == 1 || inventory[selectedItem].type == 0)
			{
				if ((double)itemAnimation < (double)itemAnimationMax * 0.333)
				{
					bodyFrame.Y = bodyFrame.Height * 3;
				}
				else if ((double)itemAnimation < (double)itemAnimationMax * 0.666)
				{
					bodyFrame.Y = bodyFrame.Height * 2;
				}
				else
				{
					bodyFrame.Y = bodyFrame.Height;
				}
			}
			else if (inventory[selectedItem].useStyle == 7)
			{
				if ((double)itemAnimation > (double)itemAnimationMax * 0.5)
				{
					bodyFrame.Y = bodyFrame.Height * 3;
				}
				else
				{
					bodyFrame.Y = bodyFrame.Height * 2;
				}
			}
			else if (inventory[selectedItem].useStyle == 2)
			{
				bodyFrame.Y = bodyFrame.Height * 3;
			}
			else if (inventory[selectedItem].useStyle == 11)
			{
				if ((double)itemAnimation > (double)itemAnimationMax * 0.5)
				{
					bodyFrame.Y = bodyFrame.Height * 4;
				}
				else if ((double)itemAnimation > (double)itemAnimationMax * 0.15)
				{
					bodyFrame.Y = bodyFrame.Height * 3;
				}
				else
				{
					bodyFrame.Y = bodyFrame.Height * 2;
				}
			}
			else if (inventory[selectedItem].useStyle == 9)
			{
				bodyFrame.Y = 0;
			}
			else if (inventory[selectedItem].useStyle == 6)
			{
				float num19 = 1f - (float)itemAnimation / (float)itemAnimationMax;
				num19 *= 6f;
				if (num19 > 1f)
				{
					num19 = 1f;
				}
				if (num19 >= 0.5f)
				{
					bodyFrame.Y = bodyFrame.Height * 3;
				}
				else
				{
					bodyFrame.Y = bodyFrame.Height * 2;
				}
			}
			else if (inventory[selectedItem].useStyle == 3)
			{
				if ((double)itemAnimation > (double)itemAnimationMax * 0.666)
				{
					bodyFrame.Y = bodyFrame.Height * 3;
				}
				else
				{
					bodyFrame.Y = bodyFrame.Height * 3;
				}
			}
			else if (inventory[selectedItem].useStyle == 4)
			{
				bodyFrame.Y = bodyFrame.Height * 2;
			}
			else if (inventory[selectedItem].useStyle == 8)
			{
				bodyFrame.Y = 0;
			}
			else if (inventory[selectedItem].useStyle == 12)
			{
				bodyFrame.Y = bodyFrame.Height * 3;
			}
			else if (inventory[selectedItem].useStyle == 13)
			{
				if ((double)itemAnimation < (double)itemAnimationMax * 0.333)
				{
					bodyFrame.Y = bodyFrame.Height * 3;
				}
				else if ((double)itemAnimation < (double)itemAnimationMax * 0.666)
				{
					bodyFrame.Y = bodyFrame.Height * 2;
				}
				else
				{
					bodyFrame.Y = bodyFrame.Height;
				}
			}
			else if (inventory[selectedItem].useStyle == 5)
			{
				if (inventory[selectedItem].type == 281 || inventory[selectedItem].type == 986)
				{
					bodyFrame.Y = bodyFrame.Height * 2;
				}
				else
				{
					float num20 = itemRotation * (float)direction;
					bodyFrame.Y = bodyFrame.Height * 3;
					if ((double)num20 < -0.75)
					{
						bodyFrame.Y = bodyFrame.Height * 2;
						if (gravDir == -1f)
						{
							bodyFrame.Y = bodyFrame.Height * 4;
						}
					}
					if ((double)num20 > 0.6)
					{
						bodyFrame.Y = bodyFrame.Height * 4;
						if (gravDir == -1f)
						{
							bodyFrame.Y = bodyFrame.Height * 2;
						}
					}
				}
			}
		}
		else if (pulley)
		{
			if (pulleyDir == 2)
			{
				bodyFrame.Y = bodyFrame.Height;
			}
			else
			{
				bodyFrame.Y = bodyFrame.Height * 2;
			}
		}
		else if (flag3 && inventory[selectedItem].holdStyle == 1 && (!wet || !inventory[selectedItem].noWet) && (!happyFunTorchTime || inventory[selectedItem].createTile != 4))
		{
			bodyFrame.Y = bodyFrame.Height * 3;
		}
		else if (flag3 && inventory[selectedItem].holdStyle == 2 && (!wet || !inventory[selectedItem].noWet))
		{
			bodyFrame.Y = bodyFrame.Height * 2;
		}
		else if (flag3 && inventory[selectedItem].holdStyle == 3)
		{
			bodyFrame.Y = bodyFrame.Height * 3;
		}
		else if (flag3 && inventory[selectedItem].holdStyle == 5)
		{
			bodyFrame.Y = bodyFrame.Height * 3;
		}
		else if (flag3 && inventory[selectedItem].holdStyle == 7)
		{
			bodyFrame.Y = bodyFrame.Height * 11;
		}
		else if (flag3 && inventory[selectedItem].holdStyle == 4 && velocity.Y == 0f && gravDir == 1f)
		{
			ref Rectangle reference6 = ref bodyFrame;
			_ = bodyFrame;
			reference6.Y = 0;
		}
		else if (shieldRaised)
		{
			bodyFrame.Y = bodyFrame.Height * 10;
		}
		else if (mount.Active)
		{
			bodyFrameCounter = 0.0;
			bodyFrame.Y = bodyFrame.Height * mount.BodyFrame;
		}
		else if (grappling[0] >= 0)
		{
			sandStorm = false;
			CancelAllJumpVisualEffects();
			Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num21 = 0f;
			float num22 = 0f;
			for (int m = 0; m < grapCount; m++)
			{
				num21 += Main.projectile[grappling[m]].position.X + (float)(Main.projectile[grappling[m]].width / 2);
				num22 += Main.projectile[grappling[m]].position.Y + (float)(Main.projectile[grappling[m]].height / 2);
			}
			num21 /= (float)grapCount;
			num22 /= (float)grapCount;
			num21 -= vector.X;
			num22 -= vector.Y;
			if (num22 < 0f && Math.Abs(num22) > Math.Abs(num21))
			{
				bodyFrame.Y = bodyFrame.Height * 2;
				if (gravDir == -1f)
				{
					bodyFrame.Y = bodyFrame.Height * 4;
				}
			}
			else if (num22 > 0f && Math.Abs(num22) > Math.Abs(num21))
			{
				bodyFrame.Y = bodyFrame.Height * 4;
				if (gravDir == -1f)
				{
					bodyFrame.Y = bodyFrame.Height * 2;
				}
			}
			else
			{
				bodyFrame.Y = bodyFrame.Height * 3;
			}
		}
		else if (wet && ShouldFloatInWater)
		{
			bodyFrame.Y = bodyFrame.Height * 10;
		}
		else if (swimTime > 0)
		{
			if (swimTime > 20)
			{
				ref Rectangle reference7 = ref bodyFrame;
				_ = bodyFrame;
				reference7.Y = 0;
			}
			else if (swimTime > 10)
			{
				bodyFrame.Y = bodyFrame.Height * 5;
			}
			else
			{
				ref Rectangle reference8 = ref bodyFrame;
				_ = bodyFrame;
				reference8.Y = 0;
			}
		}
		else if (velocity.Y != 0f)
		{
			if (sliding)
			{
				bodyFrame.Y = bodyFrame.Height * 3;
			}
			else if (sandStorm || carpetFrame >= 0)
			{
				bodyFrame.Y = bodyFrame.Height * 6;
			}
			else if (eocDash > 0)
			{
				bodyFrame.Y = bodyFrame.Height * 6;
			}
			else if (wings > 0)
			{
				if (wings == 22 || wings == 28 || wings == 45)
				{
					bodyFrame.Y = 0;
				}
				else if (velocity.Y > 0f)
				{
					if (controlJump)
					{
						bodyFrame.Y = bodyFrame.Height * 6;
					}
					else
					{
						bodyFrame.Y = bodyFrame.Height * 5;
					}
				}
				else
				{
					bodyFrame.Y = bodyFrame.Height * 6;
				}
			}
			else
			{
				bodyFrame.Y = bodyFrame.Height * 5;
			}
			bodyFrameCounter = 0.0;
		}
		else if (velocity.X != 0f)
		{
			if (legs == 140)
			{
				bodyFrameCounter += Math.Abs(velocity.X) * 0.5f;
				while (bodyFrameCounter > 8.0)
				{
					bodyFrameCounter -= 8.0;
					bodyFrame.Y += bodyFrame.Height;
				}
				if (bodyFrame.Y < bodyFrame.Height * 7)
				{
					bodyFrame.Y = bodyFrame.Height * 19;
				}
				else if (bodyFrame.Y > bodyFrame.Height * 19)
				{
					bodyFrame.Y = bodyFrame.Height * 7;
				}
			}
			else
			{
				bodyFrameCounter += (double)Math.Abs(velocity.X) * 1.5;
				bodyFrame.Y = legFrame.Y;
			}
		}
		else
		{
			bodyFrameCounter = 0.0;
			ref Rectangle reference9 = ref bodyFrame;
			_ = bodyFrame;
			reference9.Y = 0;
		}
		if (legs == 140)
		{
			legFrameCounter = 0.0;
			legFrame.Y = legFrame.Height * (velocity.Y != 0f).ToInt();
			int num23 = bodyFrame.Y / bodyFrame.Height;
			if (Main.OffsetsPlayerHeadgear[num23].Y == 0f)
			{
				legFrame.Y = legFrame.Height * 7;
			}
			if (wings == 22 || wings == 28)
			{
				legFrame.Y = 0;
			}
		}
		if (legs == 217 && (sitting.isSitting || sleeping.isSleeping))
		{
			legFrameCounter = 0.0;
			legFrame.Y = legFrame.Height * 5;
		}
		if (head == 259 && !skipAnimatingValuesInPlayerFrame)
		{
			rabbitOrderFrame.Update();
		}
	}

	private void CancelAllJumpVisualEffects()
	{
		isPerformingJump_Cloud = false;
		isPerformingJump_Sandstorm = false;
		isPerformingJump_Blizzard = false;
		isPerformingJump_Fart = false;
		isPerformingJump_Sail = false;
		isPerformingJump_Unicorn = false;
		isPerformingJump_Santank = false;
	}

	private void CancelAllBootRunVisualEffects()
	{
		sailDash = false;
		coldDash = false;
		desertDash = false;
		fairyBoots = false;
		hellfireTreads = false;
	}

	private void UpdateFishingBobber(Item item)
	{
		switch (item.type)
		{
		case 5139:
			overrideFishingBobber = 986;
			break;
		case 5140:
			overrideFishingBobber = 987;
			break;
		case 5141:
			overrideFishingBobber = 988;
			break;
		case 5142:
			overrideFishingBobber = 989;
			break;
		case 5143:
			overrideFishingBobber = 990;
			break;
		case 5144:
			overrideFishingBobber = 991;
			break;
		case 5145:
			overrideFishingBobber = 992;
			break;
		case 5146:
			overrideFishingBobber = 993;
			break;
		}
	}

	private void UpdateBootVisualEffects(Item item)
	{
		switch (item.type)
		{
		case 128:
			vanityRocketBoots = 1;
			break;
		case 54:
			CancelAllBootRunVisualEffects();
			break;
		case 405:
		case 898:
			CancelAllBootRunVisualEffects();
			vanityRocketBoots = 2;
			break;
		case 4874:
			CancelAllBootRunVisualEffects();
			vanityRocketBoots = 5;
			hellfireTreads = true;
			break;
		case 1862:
			CancelAllBootRunVisualEffects();
			vanityRocketBoots = 3;
			break;
		case 5000:
			CancelAllBootRunVisualEffects();
			vanityRocketBoots = 4;
			break;
		case 3200:
		case 3990:
			CancelAllBootRunVisualEffects();
			sailDash = true;
			break;
		case 1579:
			CancelAllBootRunVisualEffects();
			coldDash = true;
			break;
		case 4055:
			CancelAllBootRunVisualEffects();
			desertDash = true;
			break;
		case 3993:
			CancelAllBootRunVisualEffects();
			fairyBoots = true;
			vanityRocketBoots = 2;
			break;
		}
	}

	private void UpdateVisibleAccessories()
	{
		for (int i = 3; i < 10; i++)
		{
			if (!IsItemSlotUnlockedAndUsable(i))
			{
				continue;
			}
			Item item = armor[i];
			if (eocDash > 0 && shield == -1 && item.shieldSlot != -1)
			{
				shield = item.shieldSlot;
				if (cShieldFallback != -1)
				{
					cShield = cShieldFallback;
				}
			}
			if (shieldRaised && shield == -1 && item.shieldSlot != -1)
			{
				shield = item.shieldSlot;
				if (cShieldFallback != -1)
				{
					cShield = cShieldFallback;
				}
			}
			if (ItemIsVisuallyIncompatible(item))
			{
				continue;
			}
			if (item.wingSlot > 0)
			{
				if (hideVisibleAccessory[i] && (velocity.Y == 0f || mount.Active))
				{
					continue;
				}
				wings = item.wingSlot;
			}
			if (!hideVisibleAccessory[i])
			{
				UpdateVisibleAccessory(i, item);
			}
		}
		for (int j = 13; j < 20; j++)
		{
			if (IsItemSlotUnlockedAndUsable(j))
			{
				Item item2 = armor[j];
				if (!ItemIsVisuallyIncompatible(item2))
				{
					UpdateVisibleAccessory(j, item2);
				}
			}
		}
		int type = HeldItem.type;
		if (type == 4760 && ownedProjectileCounts[866] < 1)
		{
			shield = 9;
			cShield = 0;
		}
	}

	private bool ItemIsVisuallyIncompatible(Item item)
	{
		if (compositeBackArm.enabled && item.shieldSlot > 0)
		{
			return true;
		}
		if (item.shieldSlot > 0 && ItemID.Sets.IsFood[HeldItem.type])
		{
			return true;
		}
		if (body == 96 && item.backSlot > 0 && item.backSlot < ArmorIDs.Back.Count && ArmorIDs.Back.Sets.DrawInTailLayer[item.backSlot])
		{
			return true;
		}
		if (legs > 0 && ArmorIDs.Legs.Sets.IncompatibleWithFrogLeg[legs] && item.shoeSlot == 15)
		{
			return true;
		}
		if (item.balloonSlot == 18 && (body == 93 || body == 83))
		{
			return true;
		}
		return false;
	}

	private bool IsVisibleCapeBad(int accFrontSlot)
	{
		if ((uint)(accFrontSlot - 1) <= 4u || accFrontSlot == 8)
		{
			return true;
		}
		return false;
	}

	private void UpdateVisibleAccessory(int itemSlot, Item item)
	{
		if (item.stringColor > 0)
		{
			stringColor = item.stringColor;
		}
		if (item.handOnSlot > 0)
		{
			handon = item.handOnSlot;
		}
		if (item.handOffSlot > 0)
		{
			handoff = item.handOffSlot;
		}
		if (item.backSlot > 0)
		{
			if (ArmorIDs.Back.Sets.DrawInBackpackLayer[item.backSlot])
			{
				backpack = item.backSlot;
			}
			else if (ArmorIDs.Back.Sets.DrawInTailLayer[item.backSlot])
			{
				tail = item.backSlot;
			}
			else
			{
				back = item.backSlot;
				front = -1;
			}
		}
		if (item.frontSlot > 0)
		{
			front = item.frontSlot;
		}
		if (sitting.isSitting)
		{
			back = -1;
		}
		if (item.shoeSlot > 0)
		{
			shoe = item.shoeSlot;
			if (!Male && ArmorIDs.Shoe.Sets.MaleToFemaleID[shoe] > 0)
			{
				shoe = (sbyte)ArmorIDs.Shoe.Sets.MaleToFemaleID[shoe];
			}
		}
		if (item.waistSlot > 0)
		{
			waist = item.waistSlot;
		}
		if (item.shieldSlot > 0)
		{
			shield = item.shieldSlot;
		}
		if (item.neckSlot > 0)
		{
			neck = item.neckSlot;
		}
		if (item.faceSlot > 0)
		{
			if (ArmorIDs.Face.Sets.DrawInFaceHeadLayer[item.faceSlot])
			{
				faceHead = item.faceSlot;
			}
			else if (ArmorIDs.Face.Sets.DrawInFaceFlowerLayer[item.faceSlot])
			{
				faceFlower = item.faceSlot;
			}
			else
			{
				face = item.faceSlot;
			}
		}
		if (item.balloonSlot > 0)
		{
			if (ArmorIDs.Balloon.Sets.DrawInFrontOfBackArmLayer[item.balloonSlot])
			{
				balloonFront = item.balloonSlot;
			}
			else
			{
				balloon = item.balloonSlot;
			}
		}
		if (item.beardSlot > 0)
		{
			beard = item.beardSlot;
		}
		if (item.wingSlot > 0)
		{
			wings = item.wingSlot;
		}
		if (item.type == 3580)
		{
			yoraiz0rEye = itemSlot - 2;
		}
		if (item.type == 3581)
		{
			yoraiz0rDarkness = true;
		}
		if (item.type == 3929)
		{
			leinforsHair = true;
		}
		if (item.type == 4404)
		{
			hasFloatingTube = true;
		}
		if (item.type == 4563)
		{
			hasUnicornHorn = true;
		}
		if (item.type == 1987)
		{
			hasAngelHalo = true;
		}
		if (item.type == 5075)
		{
			hasRainbowCursor = true;
		}
	}

	public void SetArmorEffectVisuals(Player drawPlayer)
	{
		if (drawPlayer.head == 111 && drawPlayer.body == 73 && drawPlayer.legs == 62)
		{
			armorEffectDrawShadowSubtle = true;
			armorEffectDrawOutlines = true;
		}
		if (drawPlayer.head == 134 && drawPlayer.body == 95 && drawPlayer.legs == 79)
		{
			armorEffectDrawShadowSubtle = true;
			armorEffectDrawOutlines = true;
		}
		if (drawPlayer.head == 107 && drawPlayer.body == 69 && drawPlayer.legs == 58)
		{
			armorEffectDrawShadowSubtle = true;
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.head == 108 && drawPlayer.body == 70 && drawPlayer.legs == 59)
		{
			armorEffectDrawShadowSubtle = true;
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.head == 109 && drawPlayer.body == 71 && drawPlayer.legs == 60)
		{
			armorEffectDrawShadowSubtle = true;
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.head == 110 && drawPlayer.body == 72 && drawPlayer.legs == 61)
		{
			armorEffectDrawShadowSubtle = true;
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.head == 193 && drawPlayer.body == 194 && drawPlayer.legs == 134)
		{
			armorEffectDrawShadowSubtle = true;
			armorEffectDrawShadowLokis = true;
			armorEffectDrawOutlines = true;
		}
		if (drawPlayer.mount.Active && drawPlayer.mount.Type == 3 && drawPlayer.velocity.Y != 0f && !drawPlayer.SlimeDontHyperJump)
		{
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.mount.Active && drawPlayer.mount.Type == 10 && Math.Abs(drawPlayer.velocity.X) > drawPlayer.mount.DashSpeed - drawPlayer.mount.RunSpeed / 2f)
		{
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.mount.Active && drawPlayer.mount.Type == 44 && Math.Abs(drawPlayer.velocity.X) > drawPlayer.mount.DashSpeed - drawPlayer.mount.RunSpeed / 4f)
		{
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.mount.Active && drawPlayer.mount.Type == 45 && Math.Abs(drawPlayer.velocity.X) > drawPlayer.mount.DashSpeed * 0.9f)
		{
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.mount.Active && drawPlayer.mount.Type == 14 && Math.Abs(drawPlayer.velocity.X) > drawPlayer.mount.RunSpeed / 2f)
		{
			armorEffectDrawShadowBasilisk = true;
		}
		if (drawPlayer.mount.Active && drawPlayer.mount.Type == 48)
		{
			armorEffectDrawOutlines = true;
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.body == 67 && drawPlayer.legs == 56 && drawPlayer.head >= 103 && drawPlayer.head <= 105)
		{
			armorEffectDrawShadow = true;
		}
		if ((drawPlayer.head == 78 || drawPlayer.head == 79 || drawPlayer.head == 80) && drawPlayer.body == 51 && drawPlayer.legs == 47)
		{
			armorEffectDrawShadowSubtle = true;
		}
		if (drawPlayer.head == 200 && drawPlayer.body == 198 && drawPlayer.legs == 142)
		{
			armorEffectDrawShadowLokis = true;
			armorEffectDrawOutlinesForbidden = true;
		}
		if (drawPlayer.head == 171 && drawPlayer.body == 177 && drawPlayer.legs == 112)
		{
			armorEffectDrawShadow = true;
			armorEffectDrawOutlines = true;
		}
		if (drawPlayer.head == 169 && drawPlayer.body == 175 && drawPlayer.legs == 110)
		{
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.head == 170 && drawPlayer.body == 176 && drawPlayer.legs == 111)
		{
			armorEffectDrawShadowLokis = true;
			armorEffectDrawOutlines = true;
		}
		if (drawPlayer.body == 209 && drawPlayer.legs == 159)
		{
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.eocDash > 0)
		{
			armorEffectDrawShadowEOCShield = true;
		}
		else if (drawPlayer.dashDelay < 0)
		{
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.head == 5 && drawPlayer.body == 5 && drawPlayer.legs == 5)
		{
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.head == 74 && drawPlayer.body == 48 && drawPlayer.legs == 44)
		{
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.head == 76 && drawPlayer.body == 49 && drawPlayer.legs == 45)
		{
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.head == 7 && drawPlayer.body == 7 && drawPlayer.legs == 7)
		{
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.head == 22 && drawPlayer.body == 14 && drawPlayer.legs == 14)
		{
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.dye[0].dye == 30 && drawPlayer.dye[1].dye == 30 && drawPlayer.dye[2].dye == 30 && drawPlayer.head == 4 && drawPlayer.body == 27 && drawPlayer.legs == 26)
		{
			armorEffectDrawShadow = true;
			armorEffectDrawOutlines = true;
		}
		if (drawPlayer.head == 189 && drawPlayer.body == 190 && drawPlayer.legs == 130)
		{
			armorEffectDrawOutlines = true;
		}
		if (drawPlayer.body == 17 && drawPlayer.legs == 16 && (drawPlayer.head == 29 || drawPlayer.head == 30 || drawPlayer.head == 31))
		{
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.body == 19 && drawPlayer.legs == 18 && (drawPlayer.head == 35 || drawPlayer.head == 36 || drawPlayer.head == 37))
		{
			armorEffectDrawOutlines = true;
		}
		if ((drawPlayer.body == 24 || drawPlayer.body == 229) && (drawPlayer.legs == 23 || drawPlayer.legs == 212) && (drawPlayer.head == 43 || drawPlayer.head == 41 || drawPlayer.head == 42 || drawPlayer.head == 254 || drawPlayer.head == 255 || drawPlayer.head == 256 || drawPlayer.head == 257 || drawPlayer.head == 258))
		{
			armorEffectDrawOutlines = true;
			armorEffectDrawShadow = true;
		}
		if (drawPlayer.head == 157 && drawPlayer.legs == 98 && drawPlayer.body != 105)
		{
			_ = drawPlayer.body;
			_ = 106;
		}
		if (drawPlayer.body == 36 && drawPlayer.head == 56)
		{
			armorEffectDrawOutlines = true;
		}
		if (drawPlayer.head == 267)
		{
			yoraiz0rDarkness = true;
		}
		if (drawPlayer.stoned || drawPlayer.stealth != 1f)
		{
			armorEffectDrawOutlines = false;
			armorEffectDrawShadow = false;
			armorEffectDrawShadowSubtle = false;
		}
	}

	public static int SetMatch(SetMatchRequest request, ref bool somethingSpecial)
	{
		int armorSlotRequested = request.ArmorSlotRequested;
		int num = -1;
		bool male = request.Male;
		num = armorSlotRequested switch
		{
			1 => request.Body, 
			2 => request.Legs, 
			_ => request.Head, 
		};
		int num2 = -1;
		if (armorSlotRequested == 0 && num == 201)
		{
			num2 = (male ? 201 : 202);
		}
		if (armorSlotRequested == 1)
		{
			bool flag = true;
			switch (num)
			{
			case 15:
				num2 = 88;
				break;
			case 36:
				num2 = 89;
				break;
			case 41:
				num2 = 97;
				break;
			case 42:
				num2 = 90;
				break;
			case 58:
				num2 = 91;
				break;
			case 59:
				num2 = 92;
				break;
			case 60:
				num2 = 93;
				break;
			case 61:
				num2 = 94;
				break;
			case 62:
				num2 = 95;
				break;
			case 63:
				num2 = 96;
				break;
			case 77:
				num2 = 121;
				break;
			case 165:
				num2 = ((!male) ? 99 : 118);
				break;
			case 166:
				flag = false;
				num2 = ((!male) ? 100 : 119);
				break;
			case 167:
				num2 = (male ? 101 : 102);
				break;
			case 180:
				num2 = 115;
				break;
			case 181:
				num2 = 116;
				break;
			case 183:
				num2 = (male ? 136 : 123);
				break;
			case 191:
				num2 = 131;
				break;
			case 93:
				num2 = 165;
				break;
			case 90:
				num2 = 166;
				break;
			case 88:
				num2 = 168;
				break;
			case 81:
				if (request.Legs == 0)
				{
					num2 = 169;
				}
				break;
			case 213:
				num2 = 187;
				break;
			case 215:
				num2 = 189;
				break;
			case 219:
				num2 = 196;
				break;
			case 221:
				num2 = 199;
				break;
			case 223:
				num2 = 204;
				break;
			case 231:
				num2 = 214;
				break;
			case 232:
				num2 = 215;
				break;
			case 233:
				num2 = 216;
				break;
			case 241:
				num2 = 229;
				break;
			}
			if (num2 != -1)
			{
				somethingSpecial = flag;
			}
		}
		if (armorSlotRequested == 2)
		{
			switch (num)
			{
			case 83:
				if (male)
				{
					num2 = 117;
				}
				break;
			case 84:
				if (male)
				{
					num2 = 120;
				}
				break;
			case 132:
				if (male)
				{
					num2 = 135;
				}
				break;
			case 57:
				if (male)
				{
					num2 = 137;
				}
				break;
			case 180:
				if (!male)
				{
					num2 = 179;
				}
				break;
			case 184:
				if (!male)
				{
					num2 = 183;
				}
				break;
			case 146:
				num2 = (male ? 146 : 147);
				break;
			case 154:
				num2 = (male ? 155 : 154);
				break;
			case 158:
				if (male)
				{
					num2 = 157;
				}
				break;
			case 191:
				if (!male)
				{
					num2 = 192;
				}
				break;
			case 193:
				if (!male)
				{
					num2 = 194;
				}
				break;
			case 197:
				if (!male)
				{
					num2 = 198;
				}
				break;
			case 203:
				if (!male)
				{
					num2 = 202;
				}
				break;
			case 208:
				if (!male)
				{
					num2 = 207;
				}
				break;
			case 219:
				if (!male)
				{
					num2 = 220;
				}
				break;
			case 232:
				if (!male)
				{
					num2 = 233;
				}
				break;
			}
		}
		return num2;
	}

	public void Teleport(Vector2 newPos, int Style = 0, int extraInfo = 0)
	{
		try
		{
			_funkytownAchievementCheckCooldown = 100;
			environmentBuffImmunityTimer = 4;
			if (Style != 10)
			{
				RemoveAllGrapplingHooks();
			}
			StopVanityActions();
			if (shimmering || shimmerWet)
			{
				shimmering = false;
				shimmerWet = false;
				wet = false;
				ClearBuff(353);
			}
			int extraInfo2 = 0;
			if (Style == 4)
			{
				extraInfo2 = lastPortalColorIndex;
			}
			if (Style == 9)
			{
				lastTeleportPylonStyleUsed = extraInfo;
				extraInfo2 = lastTeleportPylonStyleUsed;
			}
			float num = MathHelper.Clamp(1f - teleportTime * 0.99f, 0.01f, 1f);
			Vector2 otherPosition = position;
			Main.TeleportEffect(getRect(), Style, extraInfo2, num, TeleportationSide.Entry, newPos);
			float num2 = Vector2.Distance(position, newPos);
			PressurePlateHelper.UpdatePlayerPosition(this);
			position = newPos;
			if (Style == 8)
			{
				SoundEngine.PlaySound(SoundID.Item6, otherPosition);
				SoundEngine.PlaySound(SoundID.Item6, newPos);
			}
			fallStart = (int)(position.Y / 16f);
			if (whoAmI == Main.myPlayer)
			{
				bool flag = false;
				if (num2 < new Vector2(Main.screenWidth, Main.screenHeight).Length() / 2f + 100f)
				{
					int time = 0;
					if (Style == 1)
					{
						time = 10;
					}
					Main.SetCameraLerp(0.1f, time);
					flag = true;
				}
				else
				{
					NPC.ResetNetOffsets();
					Main.BlackFadeIn = 255;
					Lighting.Clear();
					Main.screenLastPosition = Main.screenPosition;
					Main.screenPosition.X = position.X + (float)(width / 2) - (float)(Main.screenWidth / 2);
					Main.screenPosition.Y = position.Y + (float)(height / 2) - (float)(Main.screenHeight / 2);
					Main.instantBGTransitionCounter = 10;
					ForceUpdateBiomes();
				}
				if (num > 0.1f || !flag || Style != 0)
				{
					if (Main.mapTime < 5)
					{
						Main.mapTime = 5;
					}
					Main.maxQ = true;
					Main.renderNow = true;
				}
			}
			if (Style == 4)
			{
				lastPortalColorIndex = extraInfo;
				extraInfo2 = lastPortalColorIndex;
				portalPhysicsFlag = true;
				gravity = 0f;
			}
			PressurePlateHelper.UpdatePlayerPosition(this);
			ResetAdvancedShadows();
			for (int i = 0; i < 3; i++)
			{
				UpdateSocialShadow();
			}
			oldPosition = position + BlehOldPositionFixer;
			Main.TeleportEffect(getRect(), Style, extraInfo2, num, TeleportationSide.Exit, otherPosition);
			teleportTime = 1f;
			teleportStyle = Style;
		}
		catch
		{
		}
	}

	public void DoPotionOfReturnTeleportationAndSetTheComebackPoint()
	{
		RemoveAllGrapplingHooks();
		PotionOfReturnOriginalUsePosition = base.Bottom;
		bool flag = immune;
		int num = immuneTime;
		StopVanityActions(multiplayerBroadcast: false);
		Spawn(PlayerSpawnContext.RecallFromItem);
		PotionOfReturnHomePosition = base.Bottom;
		NetMessage.SendData(13, -1, whoAmI, null, whoAmI);
		immune = flag;
		immuneTime = num;
	}

	public void DoPotionOfReturnReturnToOriginalUsePosition()
	{
		if (PotionOfReturnOriginalUsePosition.HasValue)
		{
			Vector2 newPos = PotionOfReturnOriginalUsePosition.Value + base.Size * new Vector2(-0.5f, -1f);
			int num = 8;
			Teleport(newPos, num);
			NetMessage.SendData(65, -1, -1, null, 0, whoAmI, newPos.X, newPos.Y, num);
			PotionOfReturnOriginalUsePosition = null;
			PotionOfReturnHomePosition = null;
		}
	}

	public void AutoFinchStaff()
	{
		int num = FindItem(4281);
		if (num != -1)
		{
			Item item = inventory[num];
			AddBuff(item.buffType, 3600, quiet: false);
		}
	}

	public void Spawn(PlayerSpawnContext context)
	{
		Main.LocalPlayer.creativeInterface = false;
		_funkytownAchievementCheckCooldown = 100;
		bool flag = false;
		if (context == PlayerSpawnContext.SpawningIntoWorld)
		{
			if (Main.netMode == 0 && unlockedBiomeTorches)
			{
				NPC nPC = new NPC();
				nPC.SetDefaults(664);
				Main.BestiaryTracker.Kills.RegisterKill(nPC);
			}
			if (dead)
			{
				AdjustRespawnTimerForWorldJoining(this);
				if (dead)
				{
					flag = true;
				}
			}
		}
		StopVanityActions();
		if (whoAmI == Main.myPlayer)
		{
			Main.NotifyOfEvent(GameNotificationType.SpawnOrDeath);
		}
		if (whoAmI == Main.myPlayer)
		{
			if (Main.mapTime < 5)
			{
				Main.mapTime = 5;
			}
			Main.instantBGTransitionCounter = 10;
			FindSpawn();
			if (!CheckSpawn(SpawnX, SpawnY))
			{
				SpawnX = -1;
				SpawnY = -1;
			}
			Main.maxQ = true;
			NPC.ResetNetOffsets();
		}
		if (Main.netMode == 1 && whoAmI == Main.myPlayer)
		{
			NetMessage.SendData(12, -1, -1, null, Main.myPlayer, (int)(byte)context);
		}
		headPosition = Vector2.Zero;
		bodyPosition = Vector2.Zero;
		legPosition = Vector2.Zero;
		headRotation = 0f;
		bodyRotation = 0f;
		legRotation = 0f;
		rabbitOrderFrame.Reset();
		lavaTime = lavaMax;
		if (!flag)
		{
			if (statLife <= 0)
			{
				int num = statLifeMax2 / 2;
				statLife = 100;
				if (num > statLife)
				{
					statLife = num;
				}
				breath = breathMax;
				if (spawnMax)
				{
					statLife = statLifeMax2;
					statMana = statManaMax2;
				}
			}
			immune = true;
			dead = false;
			immuneTime = 0;
		}
		active = true;
		Vector2 value = position;
		if (SpawnX >= 0 && SpawnY >= 0)
		{
			_ = SpawnX;
			_ = SpawnY;
			Spawn_SetPosition(SpawnX, SpawnY);
		}
		else
		{
			Spawn_SetPositionAtWorldSpawn();
		}
		wet = false;
		wetCount = 0;
		lavaWet = false;
		fallStart = (int)(position.Y / 16f);
		fallStart2 = fallStart;
		velocity.X = 0f;
		velocity.Y = 0f;
		ResetAdvancedShadows();
		for (int i = 0; i < 3; i++)
		{
			UpdateSocialShadow();
		}
		oldPosition = position + BlehOldPositionFixer;
		SetTalkNPC(-1);
		if (whoAmI == Main.myPlayer)
		{
			Main.npcChatCornerItem = 0;
		}
		if (!flag)
		{
			if (pvpDeath)
			{
				pvpDeath = false;
				immuneTime = 300;
				statLife = statLifeMax;
			}
			else if (context == PlayerSpawnContext.ReviveFromDeath)
			{
				immuneTime = 180;
			}
			else
			{
				immuneTime = 60;
			}
			if (immuneTime > 0 && !hostile)
			{
				immuneNoBlink = true;
			}
		}
		if (whoAmI == Main.myPlayer)
		{
			bool flag2 = Vector2.Distance(value, position) < new Vector2(Main.screenWidth, Main.screenHeight).Length() / 2f + 100f;
			if (flag2)
			{
				Main.SetCameraLerp(0.1f, 0);
				flag2 = true;
			}
			else
			{
				Main.BlackFadeIn = 255;
				Lighting.Clear();
				Main.screenLastPosition = Main.screenPosition;
				Main.instantBGTransitionCounter = 10;
			}
			if (!flag2)
			{
				Main.renderNow = true;
			}
			if (Main.netMode == 1)
			{
				Netplay.AddCurrentServerToRecentList();
			}
			if (true && !flag2)
			{
				Main.screenPosition.X = position.X + (float)(width / 2) - (float)(Main.screenWidth / 2);
				Main.screenPosition.Y = position.Y + (float)(height / 2) - (float)(Main.screenHeight / 2);
				ForceUpdateBiomes();
			}
		}
		if (flag)
		{
			immuneAlpha = 255;
		}
		UpdateGraveyard(now: true);
		if (whoAmI == Main.myPlayer && context == PlayerSpawnContext.ReviveFromDeath && difficulty == 3)
		{
			AutoFinchStaff();
		}
		if (whoAmI == Main.myPlayer && context == PlayerSpawnContext.SpawningIntoWorld)
		{
			Main.ReleaseHostAndPlayProcess();
			RefreshItems();
			SetPlayerDataToOutOfClassFields();
			Main.LocalGolfState.SetScoreTime();
			Main.ActivePlayerFileData.StartPlayTimer();
			Hooks.EnterWorld(whoAmI);
		}
	}

	public bool Spawn_GetPositionAtWorldSpawn(ref int floorX, ref int floorY)
	{
		int spawnTileX = Main.spawnTileX;
		int num = Main.spawnTileY;
		if (!Spawn_IsAreaAValidWorldSpawn(spawnTileX, num))
		{
			bool flag = false;
			if (!flag)
			{
				for (int i = 0; i < 30; i++)
				{
					if (Spawn_IsAreaAValidWorldSpawn(spawnTileX, num - i))
					{
						num -= i;
						flag = true;
						break;
					}
				}
			}
			if (!flag)
			{
				for (int j = 0; j < 30; j++)
				{
					if (Spawn_IsAreaAValidWorldSpawn(spawnTileX, num - j))
					{
						num -= j;
						flag = true;
						break;
					}
				}
			}
			if (flag)
			{
				floorX = spawnTileX;
				floorY = num;
				return true;
			}
			return false;
		}
		num = Spawn_DescendFromDefaultSpace(spawnTileX, num);
		floorX = spawnTileX;
		floorY = num;
		return false;
	}

	private void Spawn_SetPositionAtWorldSpawn()
	{
		int floorX = Main.spawnTileX;
		int floorY = Main.spawnTileY;
		bool num = Spawn_GetPositionAtWorldSpawn(ref floorX, ref floorY);
		Spawn_SetPosition(floorX, floorY);
		if (num && !Spawn_IsAreaAValidWorldSpawn(floorX, floorY))
		{
			Spawn_ForceClearArea(floorX, floorY);
		}
	}

	private static int Spawn_DescendFromDefaultSpace(int x, int y)
	{
		for (int i = 0; i < 50; i++)
		{
			bool flag = false;
			for (int j = -1; j <= 1; j++)
			{
				Tile tile = Main.tile[x + j, y + i];
				if (tile.nactive() && (Main.tileSolid[tile.type] || !Main.tileSolidTop[tile.type]))
				{
					flag = true;
					break;
				}
			}
			if (flag)
			{
				y += i;
				break;
			}
		}
		return y;
	}

	private static void Spawn_ForceClearArea(int floorX, int floorY)
	{
		for (int i = floorX - 1; i < floorX + 2; i++)
		{
			for (int j = floorY - 3; j < floorY; j++)
			{
				if (Main.tile[i, j] != null)
				{
					if (Main.tile[i, j].nactive() && Main.tileSolid[Main.tile[i, j].type] && !Main.tileSolidTop[Main.tile[i, j].type])
					{
						WorldGen.KillTile(i, j);
					}
					if (Main.tile[i, j].liquid > 0)
					{
						Main.tile[i, j].lava(lava: false);
						Main.tile[i, j].liquid = 0;
						WorldGen.SquareTileFrame(i, j);
					}
				}
			}
		}
	}

	private bool Spawn_IsAreaAValidWorldSpawn(int floorX, int floorY)
	{
		for (int i = floorX - 1; i < floorX + 2; i++)
		{
			for (int j = floorY - 3; j < floorY; j++)
			{
				if (Main.tile[i, j] != null)
				{
					if (Main.tile[i, j].nactive() && Main.tileSolid[Main.tile[i, j].type] && !Main.tileSolidTop[Main.tile[i, j].type])
					{
						return false;
					}
					if (Main.tile[i, j].liquid > 0)
					{
						return false;
					}
				}
			}
		}
		return true;
	}

	private void Spawn_SetPosition(int floorX, int floorY)
	{
		position.X = floorX * 16 + 8 - width / 2;
		position.Y = floorY * 16 - height;
	}

	public void SetImmuneTimeForAllTypes(int time)
	{
		immune = true;
		immuneTime = time;
		for (int i = 0; i < hurtCooldowns.Length; i++)
		{
			hurtCooldowns[i] = time;
		}
	}

	public void ShadowDodge()
	{
		SetImmuneTimeForAllTypes(longInvince ? 120 : 80);
		if (whoAmI != Main.myPlayer)
		{
			return;
		}
		for (int i = 0; i < maxBuffs; i++)
		{
			if (buffTime[i] > 0 && buffType[i] == 59)
			{
				DelBuff(i);
			}
		}
		PutHallowedArmorSetBonusOnCooldown();
		NetMessage.SendData(62, -1, -1, null, whoAmI, 2f);
	}

	private void PutHallowedArmorSetBonusOnCooldown()
	{
		shadowDodgeTimer = 1800;
	}

	public void BrainOfConfusionDodge()
	{
		SetImmuneTimeForAllTypes(longInvince ? 120 : 80);
		brainOfConfusionDodgeAnimationCounter = 300;
		if (whoAmI == Main.myPlayer)
		{
			AddBuff(321, 240, quiet: false);
			NetMessage.SendData(62, -1, -1, null, whoAmI, 4f);
		}
	}

	public void NinjaDodge()
	{
		SetImmuneTimeForAllTypes(longInvince ? 120 : 80);
		for (int i = 0; i < 100; i++)
		{
			int num = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 2f);
			Main.dust[num].position.X += Main.rand.Next(-20, 21);
			Main.dust[num].position.Y += Main.rand.Next(-20, 21);
			Main.dust[num].velocity *= 0.4f;
			Main.dust[num].scale *= 1f + (float)Main.rand.Next(40) * 0.01f;
			Main.dust[num].shader = GameShaders.Armor.GetSecondaryShader(cWaist, this);
			if (Main.rand.Next(2) == 0)
			{
				Main.dust[num].scale *= 1f + (float)Main.rand.Next(40) * 0.01f;
				Main.dust[num].noGravity = true;
			}
		}
		int num2 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
		Main.gore[num2].scale = 1.5f;
		Main.gore[num2].velocity.X = (float)Main.rand.Next(-50, 51) * 0.01f;
		Main.gore[num2].velocity.Y = (float)Main.rand.Next(-50, 51) * 0.01f;
		Main.gore[num2].velocity *= 0.4f;
		num2 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
		Main.gore[num2].scale = 1.5f;
		Main.gore[num2].velocity.X = 1.5f + (float)Main.rand.Next(-50, 51) * 0.01f;
		Main.gore[num2].velocity.Y = 1.5f + (float)Main.rand.Next(-50, 51) * 0.01f;
		Main.gore[num2].velocity *= 0.4f;
		num2 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
		Main.gore[num2].scale = 1.5f;
		Main.gore[num2].velocity.X = -1.5f - (float)Main.rand.Next(-50, 51) * 0.01f;
		Main.gore[num2].velocity.Y = 1.5f + (float)Main.rand.Next(-50, 51) * 0.01f;
		Main.gore[num2].velocity *= 0.4f;
		num2 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
		Main.gore[num2].scale = 1.5f;
		Main.gore[num2].velocity.X = 1.5f + (float)Main.rand.Next(-50, 51) * 0.01f;
		Main.gore[num2].velocity.Y = -1.5f - (float)Main.rand.Next(-50, 51) * 0.01f;
		Main.gore[num2].velocity *= 0.4f;
		num2 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
		Main.gore[num2].scale = 1.5f;
		Main.gore[num2].velocity.X = -1.5f - (float)Main.rand.Next(-50, 51) * 0.01f;
		Main.gore[num2].velocity.Y = -1.5f - (float)Main.rand.Next(-50, 51) * 0.01f;
		Main.gore[num2].velocity *= 0.4f;
		if (whoAmI == Main.myPlayer)
		{
			NetMessage.SendData(62, -1, -1, null, whoAmI, 1f);
		}
	}

	public void ApplyArmorSoundAndDustChanges()
	{
		int num = armor[0].headSlot;
		int num2 = armor[1].bodySlot;
		int num3 = armor[2].legSlot;
		if (armor[10].headSlot >= 0)
		{
			num = armor[10].headSlot;
		}
		if (armor[11].bodySlot >= 0)
		{
			num2 = armor[11].bodySlot;
		}
		if (armor[12].legSlot >= 0)
		{
			num3 = armor[12].legSlot;
		}
		if ((wereWolf || forceWerewolf) && !hideWolf)
		{
			num3 = 20;
			num2 = 21;
			num = 38;
		}
		if ((num == 75 || num == 7) && num2 == 7 && num3 == 7)
		{
			boneArmor = true;
		}
		if (num2 == 27 && num == 46 && num3 == 26)
		{
			frostArmor = true;
		}
	}

	public double Hurt(PlayerDeathReason damageSource, int Damage, int hitDirection, bool pvp = false, bool quiet = false, bool Crit = false, int cooldownCounter = -1, bool dodgeable = true)
	{
		if (shimmering && AllowShimmerDodge(damageSource, cooldownCounter, dodgeable))
		{
			return 0.0;
		}
		if (creativeGodMode)
		{
			return 0.0;
		}
		bool flag = !immune;
		bool flag2 = false;
		int hitContext = cooldownCounter;
		switch (cooldownCounter)
		{
		case 0:
		case 1:
		case 3:
		case 4:
			flag = hurtCooldowns[cooldownCounter] <= 0;
			break;
		case 2:
			flag2 = true;
			cooldownCounter = -1;
			break;
		}
		if (flag)
		{
			if (dodgeable)
			{
				if (whoAmI == Main.myPlayer && blackBelt && Main.rand.Next(10) == 0)
				{
					NinjaDodge();
					return 0.0;
				}
				if (whoAmI == Main.myPlayer && brainOfConfusionItem != null && !brainOfConfusionItem.IsAir && Main.rand.Next(6) == 0 && FindBuffIndex(321) == -1)
				{
					BrainOfConfusionDodge();
					return 0.0;
				}
				if (whoAmI == Main.myPlayer && shadowDodge)
				{
					ShadowDodge();
					return 0.0;
				}
			}
			if (whoAmI == Main.myPlayer && panic)
			{
				AddBuff(63, 480);
			}
			if (whoAmI == Main.myPlayer && setSquireT2)
			{
				AddBuff(205, 300);
			}
			stealth = 1f;
			if (Main.netMode == 1)
			{
				NetMessage.SendData(84, -1, -1, null, whoAmI);
			}
			int num = Damage;
			double num2 = Main.CalculateDamagePlayersTake(num, statDefense);
			if (Crit)
			{
				num *= 2;
			}
			if (num2 >= 1.0)
			{
				if (whoAmI == Main.myPlayer)
				{
					Main.NotifyOfEvent(GameNotificationType.Damage);
					if (hasFootball)
					{
						for (int i = 0; i < 59; i++)
						{
							if (inventory[i].stack > 0 && inventory[i].type == 4743)
							{
								Projectile.NewProjectile(GetProjectileSource_Misc(12), base.Center, new Vector2(-hitDirection * 4, -6f), 861, 0, 0f, whoAmI, 0f, 1f);
								inventory[i].SetDefaults();
								if (i == 58)
								{
									Main.mouseItem = new Item();
								}
							}
						}
					}
				}
				if (inventory[selectedItem].type == 4790 || inventory[selectedItem].type == 4788 || inventory[selectedItem].type == 4789)
				{
					for (int j = 0; j < 1000; j++)
					{
						if (Main.projectile[j].active && Main.projectile[j].owner == whoAmI && (Main.projectile[j].type == 879 || Main.projectile[j].type == 877 || Main.projectile[j].type == 878))
						{
							Main.projectile[j].active = false;
						}
					}
				}
				if (invis)
				{
					for (int k = 0; k < maxBuffs; k++)
					{
						if (buffType[k] == 10)
						{
							DelBuff(k);
						}
					}
				}
				num2 = (int)((double)(1f - endurance) * num2);
				if (num2 < 1.0)
				{
					num2 = 1.0;
				}
				if (ConsumeSolarFlare())
				{
					float num3 = 0.2f;
					num2 = (int)((double)(1f - num3) * num2);
					if (num2 < 1.0)
					{
						num2 = 1.0;
					}
					if (whoAmI == Main.myPlayer)
					{
						IEntitySource spawnSource = GetProjectileSource_SetBonus(1);
						Entity entity = null;
						if (damageSource.TryGetCausingEntity(out entity))
						{
							spawnSource = GetProjectileSource_OnHurt(entity, 1);
						}
						int num4 = Projectile.NewProjectile(spawnSource, base.Center.X, base.Center.Y, 0f, 0f, 608, (int)(150f * meleeDamage), 15f, Main.myPlayer);
						Main.projectile[num4].netUpdate = true;
						Main.projectile[num4].Kill();
					}
				}
				if (beetleDefense && beetleOrbs > 0)
				{
					float num5 = 0.15f * (float)beetleOrbs;
					num2 = (int)((double)(1f - num5) * num2);
					beetleOrbs--;
					for (int l = 0; l < maxBuffs; l++)
					{
						if (buffType[l] >= 95 && buffType[l] <= 97)
						{
							DelBuff(l);
						}
					}
					if (beetleOrbs > 0)
					{
						AddBuff(95 + beetleOrbs - 1, 5, quiet: false);
					}
					beetleCounter = 0f;
					if (num2 < 1.0)
					{
						num2 = 1.0;
					}
				}
				if (magicCuffs)
				{
					int num6 = num;
					statMana += num6;
					if (statMana > statManaMax2)
					{
						statMana = statManaMax2;
					}
					ManaEffect(num6);
				}
				if (defendedByPaladin)
				{
					if (whoAmI != Main.myPlayer)
					{
						if (Main.player[Main.myPlayer].hasPaladinShield)
						{
							Player player = Main.player[Main.myPlayer];
							if (player.team == team && team != 0)
							{
								float num7 = player.Distance(base.Center);
								bool flag3 = num7 < 800f;
								if (flag3)
								{
									for (int m = 0; m < 255; m++)
									{
										if (m != Main.myPlayer && Main.player[m].active && !Main.player[m].dead && !Main.player[m].immune && Main.player[m].hasPaladinShield && Main.player[m].team == team && (float)Main.player[m].statLife > (float)Main.player[m].statLifeMax2 * 0.25f)
										{
											float num8 = Main.player[m].Distance(base.Center);
											if (num7 > num8 || (num7 == num8 && m < Main.myPlayer))
											{
												flag3 = false;
												break;
											}
										}
									}
								}
								if (flag3)
								{
									int damage = (int)(num2 * 0.25);
									num2 = (int)(num2 * 0.75);
									player.Hurt(PlayerDeathReason.LegacyEmpty(), damage, 0);
								}
							}
						}
					}
					else
					{
						bool flag4 = false;
						for (int n = 0; n < 255; n++)
						{
							if (n != Main.myPlayer && Main.player[n].active && !Main.player[n].dead && !Main.player[n].immune && Main.player[n].hasPaladinShield && Main.player[n].team == team && (float)Main.player[n].statLife > (float)Main.player[n].statLifeMax2 * 0.25f)
							{
								flag4 = true;
								break;
							}
						}
						if (flag4)
						{
							num2 = (int)(num2 * 0.75);
						}
					}
				}
				if (brainOfConfusionItem != null && !brainOfConfusionItem.IsAir && Main.myPlayer == whoAmI)
				{
					for (int num9 = 0; num9 < 200; num9++)
					{
						if (!Main.npc[num9].active || Main.npc[num9].friendly)
						{
							continue;
						}
						int num10 = 300;
						num10 += (int)num2 * 2;
						if (Main.rand.Next(500) < num10)
						{
							float num11 = (Main.npc[num9].Center - base.Center).Length();
							float num12 = Main.rand.Next(200 + (int)num2 / 2, 301 + (int)num2 * 2);
							if (num12 > 500f)
							{
								num12 = 500f + (num12 - 500f) * 0.75f;
							}
							if (num12 > 700f)
							{
								num12 = 700f + (num12 - 700f) * 0.5f;
							}
							if (num12 > 900f)
							{
								num12 = 900f + (num12 - 900f) * 0.25f;
							}
							if (num11 < num12)
							{
								float num13 = Main.rand.Next(90 + (int)num2 / 3, 300 + (int)num2 / 2);
								Main.npc[num9].AddBuff(31, (int)num13);
							}
						}
					}
					Projectile.NewProjectile(GetProjectileSource_Accessory(brainOfConfusionItem), base.Center.X + (float)Main.rand.Next(-40, 40), base.Center.Y - (float)Main.rand.Next(20, 60), velocity.X * 0.3f, velocity.Y * 0.3f, 565, 0, 0f, whoAmI);
				}
				if (Main.netMode == 1 && whoAmI == Main.myPlayer && !quiet)
				{
					if (!noKnockback && hitDirection != 0 && (!mount.Active || !mount.Cart))
					{
						NetMessage.SendData(13, -1, -1, null, whoAmI);
					}
					NetMessage.SendData(16, -1, -1, null, whoAmI);
					NetMessage.SendPlayerHurt(whoAmI, damageSource, Damage, hitDirection, Crit, pvp, hitContext);
				}
				Color color = (Crit ? CombatText.DamagedFriendlyCrit : CombatText.DamagedFriendly);
				CombatText.NewText(new Rectangle((int)position.X, (int)position.Y, width, height), color, (int)num2, Crit);
				statLife -= (int)num2;
				switch (cooldownCounter)
				{
				case -1:
				{
					immune = true;
					int num14 = 0;
					num14 = (pvp ? 8 : ((num2 != 1.0) ? (longInvince ? 80 : 40) : (longInvince ? 40 : 20)));
					immuneTime = num14;
					break;
				}
				case 0:
					if (num2 == 1.0)
					{
						hurtCooldowns[cooldownCounter] = (longInvince ? 40 : 20);
					}
					else
					{
						hurtCooldowns[cooldownCounter] = (longInvince ? 80 : 40);
					}
					break;
				case 1:
				case 3:
				case 4:
					if (num2 == 1.0)
					{
						hurtCooldowns[cooldownCounter] = (longInvince ? 40 : 20);
					}
					else
					{
						hurtCooldowns[cooldownCounter] = (longInvince ? 80 : 40);
					}
					break;
				}
				lifeRegenTime = 0f;
				int? sourceProjectileType = damageSource.SourceProjectileType;
				if (sourceProjectileType.HasValue && ProjectileID.Sets.DismountsPlayersOnHit.IndexInRange(sourceProjectileType.Value) && ProjectileID.Sets.DismountsPlayersOnHit[sourceProjectileType.Value])
				{
					mount.Dismount(this);
				}
				if (whoAmI == Main.myPlayer)
				{
					if (starCloakItem != null && !starCloakItem.IsAir && (cooldownCounter == -1 || cooldownCounter == 1))
					{
						for (int num15 = 0; num15 < 3; num15++)
						{
							float x = position.X + (float)Main.rand.Next(-400, 400);
							float y = position.Y - (float)Main.rand.Next(500, 800);
							Vector2 vector = new Vector2(x, y);
							float num16 = position.X + (float)(width / 2) - vector.X;
							float num17 = position.Y + (float)(height / 2) - vector.Y;
							num16 += (float)Main.rand.Next(-100, 101);
							float num18 = (float)Math.Sqrt(num16 * num16 + num17 * num17);
							num18 = 23f / num18;
							num16 *= num18;
							num17 *= num18;
							int type = 726;
							Item item = starCloakItem;
							if (starCloakItem_starVeilOverrideItem != null)
							{
								item = starCloakItem_starVeilOverrideItem;
								type = 725;
							}
							if (starCloakItem_beeCloakOverrideItem != null)
							{
								item = starCloakItem_beeCloakOverrideItem;
								type = 724;
							}
							if (starCloakItem_manaCloakOverrideItem != null)
							{
								item = starCloakItem_manaCloakOverrideItem;
								type = 723;
							}
							int num19 = 75;
							if (Main.masterMode)
							{
								num19 *= 3;
							}
							else if (Main.expertMode)
							{
								num19 *= 2;
							}
							Projectile.NewProjectile(GetProjectileSource_Accessory(item), x, y, num16, num17, type, num19, 5f, whoAmI, 0f, position.Y);
						}
					}
					if (honeyCombItem != null && !honeyCombItem.IsAir)
					{
						int num20 = 1;
						if (Main.rand.Next(3) == 0)
						{
							num20++;
						}
						if (Main.rand.Next(3) == 0)
						{
							num20++;
						}
						if (strongBees && Main.rand.Next(3) == 0)
						{
							num20++;
						}
						float num21 = 13f;
						if (strongBees)
						{
							num21 = 18f;
						}
						if (Main.masterMode)
						{
							num21 *= 2f;
						}
						else if (Main.expertMode)
						{
							num21 *= 1.5f;
						}
						IEntitySource projectileSource_Accessory = GetProjectileSource_Accessory(honeyCombItem);
						for (int num22 = 0; num22 < num20; num22++)
						{
							float speedX = (float)Main.rand.Next(-35, 36) * 0.02f;
							float speedY = (float)Main.rand.Next(-35, 36) * 0.02f;
							Projectile.NewProjectile(projectileSource_Accessory, position.X, position.Y, speedX, speedY, beeType(), beeDamage((int)num21), beeKB(0f), Main.myPlayer);
						}
						AddBuff(48, 300);
					}
				}
				StopVanityActions();
				if (flag2 && hitDirection != 0)
				{
					if (!mount.Active || !mount.Cart)
					{
						float num23 = 10.5f;
						float y2 = -7.5f;
						if (noKnockback)
						{
							num23 = 2.5f;
							y2 = -1.5f;
						}
						velocity.X = num23 * (float)hitDirection;
						velocity.Y = y2;
						fallStart = (int)(position.Y / 16f);
					}
				}
				else if (!noKnockback && hitDirection != 0 && (!mount.Active || !mount.Cart))
				{
					velocity.X = 4.5f * (float)hitDirection;
					velocity.Y = -3.5f;
					fallStart = (int)(position.Y / 16f);
				}
				if (stoned)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				}
				else if (mount.Active && mount.Type == 52)
				{
					SoundEngine.PlaySound(3, (int)position.X, (int)position.Y, 6);
				}
				else if ((wereWolf || forceWerewolf) && !hideWolf)
				{
					SoundEngine.PlaySound(3, (int)position.X, (int)position.Y, 6);
				}
				else if (frostArmor)
				{
					SoundEngine.PlaySound(SoundID.Item27, position);
				}
				else if (boneArmor)
				{
					SoundEngine.PlaySound(3, (int)position.X, (int)position.Y, 2);
				}
				else if (Main.dontStarveWorld && !Main.remixWorld)
				{
					SoundEngine.PlaySound(Male ? SoundID.DSTMaleHurt : SoundID.DSTFemaleHurt, position);
				}
				else
				{
					SoundEngine.PlaySound(Male ? 1 : 20, position);
				}
				eyeHelper.BlinkBecausePlayerGotHurt();
				if (statLife > 0)
				{
					double num24 = num2 / (double)statLifeMax2 * 100.0;
					float num25 = 2 * hitDirection;
					float num26 = 0f;
					if (flag2)
					{
						num24 *= 12.0;
						num26 = 6f;
					}
					for (int num27 = 0; (double)num27 < num24; num27++)
					{
						if (stoned)
						{
							Dust.NewDust(position, width, height, 1, num25 + (float)hitDirection * num26 * Main.rand.NextFloat(), -2f);
						}
						else if (frostArmor)
						{
							int num28 = Dust.NewDust(position, width, height, 135, num25 + (float)hitDirection * num26 * Main.rand.NextFloat(), -2f);
							Main.dust[num28].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
						}
						else if (boneArmor)
						{
							int num29 = Dust.NewDust(position, width, height, 26, num25 + (float)hitDirection * num26 * Main.rand.NextFloat(), -2f);
							Main.dust[num29].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
						}
						else
						{
							Dust.NewDust(position, width, height, 5, num25 + (float)hitDirection * num26 * Main.rand.NextFloat(), -2f);
						}
					}
				}
				else
				{
					statLife = 0;
					if (whoAmI == Main.myPlayer)
					{
						KillMe(damageSource, num2, hitDirection, pvp);
					}
				}
			}
			if (pvp)
			{
				num2 = Main.CalculateDamagePlayersTakeInPVP(num, statDefense);
			}
			return num2;
		}
		return 0.0;
	}

	private static bool AllowShimmerDodge(PlayerDeathReason damageSource, int cooldownCounter, bool dodgeable)
	{
		if (!dodgeable)
		{
			return false;
		}
		if (cooldownCounter == 1)
		{
			return false;
		}
		Entity entity = null;
		if (!damageSource.TryGetCausingEntity(out entity))
		{
			return true;
		}
		if (entity is NPC { active: not false } nPC && (nPC.boss || NPC.GetNPCInvasionGroup(nPC.type) != 0 || NPCID.Sets.CanHitPastShimmer[nPC.type]))
		{
			return false;
		}
		if (entity is Projectile { active: not false } projectile && ProjectileID.Sets.CanHitPastShimmer[projectile.type])
		{
			return false;
		}
		return true;
	}

	public void KillMeForGood()
	{
		PlayerFileData activePlayerFileData = Main.ActivePlayerFileData;
		if (!activePlayerFileData.ServerSideCharacter)
		{
			bool isCloudSave = activePlayerFileData.IsCloudSave;
			if (FileUtilities.Exists(Main.playerPathName, isCloudSave))
			{
				FileUtilities.Delete(Main.playerPathName, isCloudSave);
			}
			if (FileUtilities.Exists(Main.playerPathName + ".bak", isCloudSave))
			{
				FileUtilities.Delete(Main.playerPathName + ".bak", isCloudSave);
			}
			Main.ActivePlayerFileData = new PlayerFileData();
		}
	}

	public void KillMe(PlayerDeathReason damageSource, double dmg, int hitDirection, bool pvp = false)
	{
		if (creativeGodMode || dead)
		{
			return;
		}
		StopVanityActions();
		if (pvp)
		{
			pvpDeath = true;
		}
		if (trapDebuffSource)
		{
			AchievementsHelper.HandleSpecialEvent(this, 4);
		}
		if (Main.myPlayer == whoAmI && _framesLeftEligibleForDeadmansChestDeathAchievement > 0)
		{
			AchievementsHelper.HandleSpecialEvent(this, 23);
		}
		if (whoAmI == Main.myPlayer)
		{
			Main.NotifyOfEvent(GameNotificationType.SpawnOrDeath);
		}
		if (pvpDeath)
		{
			numberOfDeathsPVP++;
		}
		else
		{
			numberOfDeathsPVE++;
		}
		lastDeathPostion = base.Center;
		lastDeathTime = DateTime.Now;
		showLastDeath = true;
		bool overFlowing;
		long coinsOwned = Utils.CoinsCount(out overFlowing, inventory);
		if (Main.myPlayer == whoAmI)
		{
			lostCoins = coinsOwned;
			lostCoinString = Main.ValueToCoins(lostCoins);
		}
		if (Main.myPlayer == whoAmI)
		{
			EndOngoingTorchGodEvent();
		}
		if (Main.myPlayer == whoAmI)
		{
			Main.mapFullscreen = false;
		}
		if (Main.myPlayer == whoAmI)
		{
			trashItem.SetDefaults();
			if (difficulty == 0 || difficulty == 3)
			{
				for (int i = 0; i < 59; i++)
				{
					if (inventory[i].stack > 0 && ((inventory[i].type >= 1522 && inventory[i].type <= 1527) || inventory[i].type == 3643))
					{
						int num = Item.NewItem(GetItemSource_Death(), (int)position.X, (int)position.Y, width, height, inventory[i].type);
						Main.item[num].netDefaults(inventory[i].netID);
						Main.item[num].Prefix(inventory[i].prefix);
						Main.item[num].stack = inventory[i].stack;
						Main.item[num].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
						Main.item[num].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
						Main.item[num].noGrabDelay = 100;
						Main.item[num].favorited = false;
						Main.item[num].newAndShiny = false;
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, num);
						}
						inventory[i].SetDefaults();
					}
				}
			}
			else if (difficulty == 1)
			{
				DropItems();
			}
			else if (difficulty == 2)
			{
				DropItems();
				KillMeForGood();
			}
		}
		if (Main.dontStarveWorld || Main.tenthAnniversaryWorld)
		{
			SoundEngine.PlaySound(Male ? SoundID.DSTMaleHurt : SoundID.DSTFemaleHurt, position);
		}
		else
		{
			SoundEngine.PlaySound(5, (int)position.X, (int)position.Y);
		}
		if (Main.tenthAnniversaryWorld)
		{
			for (int j = 0; j < 85; j++)
			{
				int type = Main.rand.Next(139, 143);
				int num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, type, 0f, -10f, 0, default(Color), 1.2f);
				Main.dust[num2].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num2].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num2].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num2].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.dust[num2].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
				Main.dust[num2].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
				Main.dust[num2].scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
			}
			for (int k = 0; k < 40; k++)
			{
				int type2 = Main.rand.Next(276, 283);
				int num3 = Gore.NewGore(position, new Vector2(0f, -10f), type2);
				Main.gore[num3].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num3].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num3].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num3].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
				Main.gore[num3].scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
				Main.gore[num3].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
				Main.gore[num3].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
			}
		}
		headVelocity.Y = (float)Main.rand.Next(-40, -10) * 0.1f;
		bodyVelocity.Y = (float)Main.rand.Next(-40, -10) * 0.1f;
		legVelocity.Y = (float)Main.rand.Next(-40, -10) * 0.1f;
		headVelocity.X = (float)Main.rand.Next(-20, 21) * 0.1f + (float)(2 * hitDirection);
		bodyVelocity.X = (float)Main.rand.Next(-20, 21) * 0.1f + (float)(2 * hitDirection);
		legVelocity.X = (float)Main.rand.Next(-20, 21) * 0.1f + (float)(2 * hitDirection);
		if (stoned)
		{
			headPosition = Vector2.Zero;
			bodyPosition = Vector2.Zero;
			legPosition = Vector2.Zero;
		}
		for (int l = 0; l < 100; l++)
		{
			if (stoned)
			{
				Dust.NewDust(position, width, height, 1, 2 * hitDirection, -2f);
			}
			else if (frostArmor)
			{
				int num4 = Dust.NewDust(position, width, height, 135, 2 * hitDirection, -2f);
				Main.dust[num4].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
			}
			else if (boneArmor)
			{
				int num5 = Dust.NewDust(position, width, height, 26, 2 * hitDirection, -2f);
				Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(ArmorSetDye(), this);
			}
			else
			{
				Dust.NewDust(position, width, height, 5, 2 * hitDirection, -2f);
			}
		}
		mount.Dismount(this);
		dead = true;
		respawnTimer = GetRespawnTime(pvp);
		immuneAlpha = 0;
		if (!ChildSafety.Disabled)
		{
			immuneAlpha = 255;
		}
		palladiumRegen = false;
		iceBarrier = false;
		crystalLeaf = false;
		NetworkText deathText = damageSource.GetDeathText(name);
		if (Main.netMode == 2)
		{
			ChatHelper.BroadcastChatMessage(deathText, new Color(225, 25, 25));
		}
		else if (Main.netMode == 0)
		{
			Main.NewText(deathText.ToString(), 225, 25, 25);
		}
		if (Main.netMode == 1 && whoAmI == Main.myPlayer)
		{
			NetMessage.SendPlayerDeath(whoAmI, damageSource, (int)dmg, hitDirection, pvp);
		}
		if (whoAmI == Main.myPlayer && (difficulty == 0 || difficulty == 3))
		{
			if (!pvp)
			{
				DropCoins();
			}
			else
			{
				lostCoins = 0L;
				lostCoinString = Main.ValueToCoins(lostCoins);
			}
		}
		DropTombstone(coinsOwned, deathText, hitDirection);
		if (whoAmI != Main.myPlayer)
		{
			return;
		}
		try
		{
			WorldGen.saveToonWhilePlaying();
		}
		catch
		{
		}
	}

	private int GetRespawnTime(bool pvp)
	{
		int num = 600;
		bool flag = false;
		if (Main.netMode != 0 && !pvp)
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && (Main.npc[i].boss || Main.npc[i].type == 13 || Main.npc[i].type == 14 || Main.npc[i].type == 15) && Math.Abs(base.Center.X - Main.npc[i].Center.X) + Math.Abs(base.Center.Y - Main.npc[i].Center.Y) < 4000f)
				{
					flag = true;
					break;
				}
			}
		}
		if (flag)
		{
			num += 600;
		}
		if (Main.expertMode)
		{
			num = (int)((double)num * 1.5);
		}
		if (flag && Main.getGoodWorld && Main.netMode != 0)
		{
			bool flag2 = false;
			for (int j = 0; j < 255; j++)
			{
				if (j != whoAmI && Main.player[j].active)
				{
					flag2 = true;
					break;
				}
			}
			if (flag2)
			{
				num *= 2;
			}
		}
		return num;
	}

	public void DropTombstone(long coinsOwned, NetworkText deathText, int hitDirection)
	{
		if (Main.netMode != 1)
		{
			float num;
			for (num = (float)Main.rand.Next(-35, 36) * 0.1f; num < 2f && num > -2f; num += (float)Main.rand.Next(-30, 31) * 0.1f)
			{
			}
			int num2 = Main.rand.Next(6);
			if (coinsOwned <= 100000)
			{
				num2 = ((num2 != 0) ? (200 + num2) : 43);
			}
			else
			{
				num2 = Main.rand.Next(5);
				num2 += 527;
			}
			IEntitySource projectileSource_Misc = GetProjectileSource_Misc(9);
			int damage = 0;
			int num3 = 0;
			if (Main.getGoodWorld)
			{
				damage = 70;
				num3 = 10;
			}
			int num4 = whoAmI;
			int num5 = ((!Main.getGoodWorld) ? Projectile.NewProjectile(projectileSource_Misc, position.X + (float)(width / 2), position.Y + (float)(height / 2), (float)Main.rand.Next(10, 30) * 0.1f * (float)hitDirection + num, (float)Main.rand.Next(-40, -20) * 0.1f, num2, damage, num3, Main.myPlayer, num4) : Projectile.NewProjectile(projectileSource_Misc, position.X + (float)(width / 2), position.Y + (float)(height / 2), ((float)Main.rand.Next(10, 30) * 0.1f * (float)hitDirection + num) * 1.5f, (float)Main.rand.Next(-40, -20) * 0.1f * 1.5f, num2, damage, num3, Main.myPlayer, num4));
			DateTime now = DateTime.Now;
			string text = now.ToString("D");
			if (GameCulture.FromCultureName(GameCulture.CultureName.English).IsActive)
			{
				text = now.ToString("MMMM d, yyy");
			}
			string miscText = deathText.ToString() + "\n" + text;
			Main.projectile[num5].miscText = miscText;
		}
	}

	public bool CanPullItem(Item item, ItemSpaceStatus status)
	{
		if (status.CanTakeItem)
		{
			return CanAcceptItemIntoInventory(item);
		}
		return false;
	}

	public ItemSpaceStatus ItemSpace(Item newItem)
	{
		if (ItemID.Sets.IsAPickup[newItem.type])
		{
			return new ItemSpaceStatus(CanTakeItem: true);
		}
		if (newItem.uniqueStack && HasItem(newItem.type))
		{
			return new ItemSpaceStatus(CanTakeItem: false);
		}
		int num = 50;
		if (newItem.IsACoin)
		{
			num = 54;
		}
		for (int i = 0; i < num; i++)
		{
			if (CanItemSlotAccept(inventory[i], newItem))
			{
				return new ItemSpaceStatus(CanTakeItem: true);
			}
		}
		if (newItem.ammo > 0 && !newItem.notAmmo)
		{
			for (int j = 54; j < 58; j++)
			{
				if (CanGoIntoAmmoOnPickup(inventory[j], newItem))
				{
					return new ItemSpaceStatus(CanTakeItem: true);
				}
			}
		}
		for (int k = 54; k < 58; k++)
		{
			if (inventory[k].type > 0 && inventory[k].stack < inventory[k].maxStack && newItem.IsTheSameAs(inventory[k]))
			{
				return new ItemSpaceStatus(CanTakeItem: true);
			}
		}
		if (ItemSpaceForCofveve(newItem))
		{
			return new ItemSpaceStatus(CanTakeItem: true, ItemIsGoingToVoidVault: true);
		}
		return new ItemSpaceStatus(CanTakeItem: false);
	}

	public bool ItemSpaceForCofveve(Item newItem)
	{
		if (!IsVoidVaultEnabled)
		{
			return false;
		}
		if (!CanVoidVaultAccept(newItem))
		{
			return false;
		}
		Item[] item = bank4.item;
		for (int i = 0; i < item.Length; i++)
		{
			if (CanItemSlotAccept(item[i], newItem))
			{
				return true;
			}
		}
		return false;
	}

	public bool CanItemSlotAccept(Item theSlot, Item theItemToAccept)
	{
		if (theSlot.type == 0)
		{
			return true;
		}
		if (theSlot.stack < theSlot.maxStack && theItemToAccept.IsTheSameAs(theSlot))
		{
			return true;
		}
		return false;
	}

	public bool CanGoIntoAmmoOnPickup(Item theSlot, Item theItemToAccept)
	{
		if (!theItemToAccept.CanFillEmptyAmmoSlot() && theSlot.type == 0)
		{
			return false;
		}
		return CanItemSlotAccept(theSlot, theItemToAccept);
	}

	public void DoCoins(int i)
	{
		if (inventory[i].stack != 100 || (inventory[i].type != 71 && inventory[i].type != 72 && inventory[i].type != 73))
		{
			return;
		}
		inventory[i].SetDefaults(inventory[i].type + 1);
		for (int j = 0; j < 54; j++)
		{
			if (inventory[j].IsTheSameAs(inventory[i]) && j != i && inventory[j].type == inventory[i].type && inventory[j].stack < inventory[j].maxStack)
			{
				inventory[j].stack++;
				inventory[i].SetDefaults();
				inventory[i].active = false;
				inventory[i].TurnToAir();
				DoCoins(j);
			}
		}
	}

	public Item FillAmmo(int plr, Item newItem, GetItemSettings settings)
	{
		for (int i = 54; i < 58; i++)
		{
			if (inventory[i].type <= 0 || inventory[i].stack >= inventory[i].maxStack || !newItem.IsTheSameAs(inventory[i]))
			{
				continue;
			}
			SoundEngine.PlaySound(7, (int)position.X, (int)position.Y);
			if (newItem.stack + inventory[i].stack <= inventory[i].maxStack)
			{
				inventory[i].stack += newItem.stack;
				if (!settings.NoText)
				{
					PopupText.NewText(PopupTextContext.RegularItemPickup, newItem, newItem.stack);
				}
				DoCoins(i);
				if (plr == Main.myPlayer)
				{
					Recipe.FindRecipes();
				}
				settings.HandlePostAction(inventory[i]);
				return new Item();
			}
			newItem.stack -= inventory[i].maxStack - inventory[i].stack;
			if (!settings.NoText)
			{
				PopupText.NewText(PopupTextContext.RegularItemPickup, newItem, inventory[i].maxStack - inventory[i].stack);
			}
			inventory[i].stack = inventory[i].maxStack;
			DoCoins(i);
			if (plr == Main.myPlayer)
			{
				Recipe.FindRecipes();
			}
			settings.HandlePostAction(inventory[i]);
		}
		if (newItem.CanFillEmptyAmmoSlot())
		{
			for (int j = 54; j < 58; j++)
			{
				if (inventory[j].type == 0)
				{
					newItem.shimmered = false;
					inventory[j] = newItem;
					if (!settings.NoText)
					{
						PopupText.NewText(PopupTextContext.RegularItemPickup, newItem, newItem.stack);
					}
					DoCoins(j);
					SoundEngine.PlaySound(7, (int)position.X, (int)position.Y);
					if (plr == Main.myPlayer)
					{
						Recipe.FindRecipes();
					}
					settings.HandlePostAction(inventory[j]);
					return new Item();
				}
			}
		}
		return newItem;
	}

	public Item GetItem(int plr, Item newItem, GetItemSettings settings)
	{
		bool isACoin = newItem.IsACoin;
		Item item = newItem;
		int num = 50;
		if (newItem.noGrabDelay > 0)
		{
			return item;
		}
		int num2 = 0;
		if (newItem.uniqueStack && HasItem(newItem.type))
		{
			return item;
		}
		if (isACoin)
		{
			num2 = -4;
			num = 54;
		}
		if (item.FitsAmmoSlot())
		{
			item = FillAmmo(plr, item, settings);
			if (item.type == 0 || item.stack == 0)
			{
				return new Item();
			}
		}
		for (int i = num2; i < 50; i++)
		{
			int num3 = i;
			if (num3 < 0)
			{
				num3 = 54 + i;
			}
			if (GetItem_FillIntoOccupiedSlot(plr, newItem, settings, item, num3))
			{
				return new Item();
			}
		}
		if (!isACoin && newItem.useStyle != 0)
		{
			for (int j = 0; j < 10; j++)
			{
				if (GetItem_FillEmptyInventorySlot(plr, newItem, settings, item, j))
				{
					return new Item();
				}
			}
		}
		if (newItem.favorited)
		{
			for (int k = 0; k < num; k++)
			{
				if (GetItem_FillEmptyInventorySlot(plr, newItem, settings, item, k))
				{
					return new Item();
				}
			}
		}
		else
		{
			for (int num4 = num - 1; num4 >= 0; num4--)
			{
				if (GetItem_FillEmptyInventorySlot(plr, newItem, settings, item, num4))
				{
					return new Item();
				}
			}
		}
		if (settings.CanGoIntoVoidVault && IsVoidVaultEnabled && CanVoidVaultAccept(newItem) && GetItem_VoidVault(plr, bank4.item, newItem, settings, item))
		{
			return new Item();
		}
		return item;
	}

	private bool GetItem_VoidVault(int plr, Item[] inventory, Item newItem, GetItemSettings settings, Item returnItem)
	{
		if (!CanVoidVaultAccept(newItem))
		{
			return false;
		}
		for (int i = 0; i < inventory.Length; i++)
		{
			if (GetItem_FillIntoOccupiedSlot_VoidBag(plr, inventory, newItem, settings, returnItem, i))
			{
				return true;
			}
		}
		for (int j = 0; j < inventory.Length; j++)
		{
			if (GetItem_FillEmptyInventorySlot_VoidBag(plr, inventory, newItem, settings, returnItem, j))
			{
				return true;
			}
		}
		return false;
	}

	private bool CanVoidVaultAccept(Item item)
	{
		if (item.questItem)
		{
			return false;
		}
		int type = item.type;
		if (type == 3822)
		{
			return false;
		}
		return true;
	}

	private bool GetItem_FillIntoOccupiedSlot_VoidBag(int plr, Item[] inv, Item newItem, GetItemSettings settings, Item returnItem, int i)
	{
		if (inv[i].type > 0 && inv[i].stack < inv[i].maxStack && returnItem.IsTheSameAs(inv[i]))
		{
			if (newItem.IsACoin)
			{
				SoundEngine.PlaySound(38, (int)position.X, (int)position.Y);
			}
			else
			{
				SoundEngine.PlaySound(7, (int)position.X, (int)position.Y);
			}
			if (returnItem.stack + inv[i].stack <= inv[i].maxStack)
			{
				inv[i].stack += returnItem.stack;
				if (!settings.NoText)
				{
					PopupText.NewText(PopupTextContext.ItemPickupToVoidContainer, newItem, returnItem.stack, noStack: false, settings.LongText);
				}
				AchievementsHelper.NotifyItemPickup(this, returnItem);
				settings.HandlePostAction(inv[i]);
				return true;
			}
			AchievementsHelper.NotifyItemPickup(this, returnItem, inv[i].maxStack - inv[i].stack);
			returnItem.stack -= inv[i].maxStack - inv[i].stack;
			if (!settings.NoText)
			{
				PopupText.NewText(PopupTextContext.ItemPickupToVoidContainer, newItem, inv[i].maxStack - inv[i].stack, noStack: false, settings.LongText);
			}
			inv[i].stack = inv[i].maxStack;
			settings.HandlePostAction(inv[i]);
		}
		return false;
	}

	private bool GetItem_FillIntoOccupiedSlot(int plr, Item newItem, GetItemSettings settings, Item returnItem, int i)
	{
		if (inventory[i].type > 0 && inventory[i].stack < inventory[i].maxStack && returnItem.IsTheSameAs(inventory[i]))
		{
			if (newItem.IsACoin)
			{
				SoundEngine.PlaySound(38, (int)position.X, (int)position.Y);
			}
			else
			{
				SoundEngine.PlaySound(7, (int)position.X, (int)position.Y);
			}
			if (returnItem.stack + inventory[i].stack <= inventory[i].maxStack)
			{
				inventory[i].stack += returnItem.stack;
				if (!settings.NoText)
				{
					PopupText.NewText(PopupTextContext.RegularItemPickup, newItem, returnItem.stack, noStack: false, settings.LongText);
				}
				DoCoins(i);
				if (plr == Main.myPlayer)
				{
					Recipe.FindRecipes();
				}
				AchievementsHelper.NotifyItemPickup(this, returnItem);
				settings.HandlePostAction(inventory[i]);
				return true;
			}
			AchievementsHelper.NotifyItemPickup(this, returnItem, inventory[i].maxStack - inventory[i].stack);
			returnItem.stack -= inventory[i].maxStack - inventory[i].stack;
			if (!settings.NoText)
			{
				PopupText.NewText(PopupTextContext.RegularItemPickup, newItem, inventory[i].maxStack - inventory[i].stack, noStack: false, settings.LongText);
			}
			inventory[i].stack = inventory[i].maxStack;
			DoCoins(i);
			if (plr == Main.myPlayer)
			{
				Recipe.FindRecipes();
			}
			settings.HandlePostAction(inventory[i]);
		}
		return false;
	}

	private bool GetItem_FillEmptyInventorySlot_VoidBag(int plr, Item[] inv, Item newItem, GetItemSettings settings, Item returnItem, int i)
	{
		if (inv[i].type != 0)
		{
			return false;
		}
		if (newItem.IsACoin)
		{
			SoundEngine.PlaySound(38, (int)position.X, (int)position.Y);
		}
		else
		{
			SoundEngine.PlaySound(7, (int)position.X, (int)position.Y);
		}
		returnItem.shimmered = false;
		inv[i] = returnItem;
		if (!settings.NoText)
		{
			PopupText.NewText(PopupTextContext.ItemPickupToVoidContainer, newItem, newItem.stack, noStack: false, settings.LongText);
		}
		DoCoins(i);
		if (plr == Main.myPlayer)
		{
			Recipe.FindRecipes();
		}
		AchievementsHelper.NotifyItemPickup(this, returnItem);
		settings.HandlePostAction(inv[i]);
		return true;
	}

	private bool GetItem_FillEmptyInventorySlot(int plr, Item newItem, GetItemSettings settings, Item returnItem, int i)
	{
		if (inventory[i].type != 0)
		{
			return false;
		}
		if (newItem.IsACoin)
		{
			SoundEngine.PlaySound(38, (int)position.X, (int)position.Y);
		}
		else
		{
			SoundEngine.PlaySound(7, (int)position.X, (int)position.Y);
		}
		returnItem.shimmered = false;
		inventory[i] = returnItem;
		if (!settings.NoText)
		{
			PopupText.NewText(PopupTextContext.RegularItemPickup, newItem, newItem.stack, noStack: false, settings.LongText);
		}
		DoCoins(i);
		if (plr == Main.myPlayer)
		{
			Recipe.FindRecipes();
		}
		AchievementsHelper.NotifyItemPickup(this, returnItem);
		if (plr == Main.myPlayer && newItem.type == 5095)
		{
			LucyAxeMessage.Create(LucyAxeMessage.MessageSource.PickedUp, base.Top, new Vector2(0f, -7f));
		}
		settings.HandlePostAction(inventory[i]);
		return true;
	}

	public void PlaceThing(ref ItemCheckContext context)
	{
		if (itemTime == 0)
		{
			dontConsumeWand = false;
		}
		PlaceThing_Paintbrush();
		PlaceThing_PaintRoller();
		PlaceThing_PaintScrapper();
		PlaceThing_CannonBall();
		PlaceThing_XMasTreeTops();
		PlaceThing_ItemInExtractinator(ref context);
		PlaceThing_LockChest();
		if (!noBuilding)
		{
			PlaceThing_Tiles();
			PlaceThing_Walls();
		}
	}

	private void PlaceThing_Walls()
	{
		if (inventory[selectedItem].createWall < 0 || !(position.X / 16f - (float)tileRangeX - (float)inventory[selectedItem].tileBoost - (float)blockRange <= (float)tileTargetX) || !((position.X + (float)width) / 16f + (float)tileRangeX + (float)inventory[selectedItem].tileBoost - 1f + (float)blockRange >= (float)tileTargetX) || !(position.Y / 16f - (float)tileRangeY - (float)inventory[selectedItem].tileBoost - (float)blockRange <= (float)tileTargetY) || !((position.Y + (float)height) / 16f + (float)tileRangeY + (float)inventory[selectedItem].tileBoost - 2f + (float)blockRange >= (float)tileTargetY))
		{
			return;
		}
		cursorItemIconEnabled = true;
		if (!ItemTimeIsZero || itemAnimation <= 0 || !controlUseItem || (!Main.tile[tileTargetX + 1, tileTargetY].active() && Main.tile[tileTargetX + 1, tileTargetY].wall <= 0 && !Main.tile[tileTargetX - 1, tileTargetY].active() && Main.tile[tileTargetX - 1, tileTargetY].wall <= 0 && !Main.tile[tileTargetX, tileTargetY + 1].active() && Main.tile[tileTargetX, tileTargetY + 1].wall <= 0 && !Main.tile[tileTargetX, tileTargetY - 1].active() && Main.tile[tileTargetX, tileTargetY - 1].wall <= 0) || Main.tile[tileTargetX, tileTargetY].wall == inventory[selectedItem].createWall)
		{
			return;
		}
		bool flag = true;
		if (TileReplacementEnabled)
		{
			flag = PlaceThing_TryReplacingWalls(flag);
		}
		if (!flag)
		{
			return;
		}
		WorldGen.PlaceWall(tileTargetX, tileTargetY, inventory[selectedItem].createWall);
		if (Main.tile[tileTargetX, tileTargetY].wall == inventory[selectedItem].createWall)
		{
			ApplyItemTime(inventory[selectedItem], wallSpeed);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(17, -1, -1, null, 3, tileTargetX, tileTargetY, inventory[selectedItem].createWall);
			}
			PlaceThing_Walls_FillEmptySpace();
			if (autoPaint && builderAccStatus[3] == 0)
			{
				TryPainting(tileTargetX, tileTargetY, paintingAWall: true, applyItemAnimation: false);
			}
		}
	}

	private void PlaceThing_Walls_FillEmptySpace()
	{
		if (inventory[selectedItem].stack <= 1)
		{
			return;
		}
		int createWall = inventory[selectedItem].createWall;
		for (int i = 0; i < 4; i++)
		{
			int num = tileTargetX;
			int num2 = tileTargetY;
			if (i == 0)
			{
				num--;
			}
			if (i == 1)
			{
				num++;
			}
			if (i == 2)
			{
				num2--;
			}
			if (i == 3)
			{
				num2++;
			}
			if (Main.tile[num, num2].wall != 0)
			{
				continue;
			}
			int num3 = 0;
			for (int j = 0; j < 4; j++)
			{
				int num4 = num;
				int num5 = num2;
				if (j == 0)
				{
					num4--;
				}
				if (j == 1)
				{
					num4++;
				}
				if (j == 2)
				{
					num5--;
				}
				if (j == 3)
				{
					num5++;
				}
				if (Main.tile[num4, num5].wall == createWall)
				{
					num3++;
				}
			}
			if (num3 != 4)
			{
				continue;
			}
			WorldGen.PlaceWall(num, num2, createWall);
			if (Main.tile[num, num2].wall == createWall)
			{
				inventory[selectedItem].stack--;
				if (inventory[selectedItem].stack == 0)
				{
					inventory[selectedItem].SetDefaults();
				}
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 3, num, num2, createWall);
				}
				if (autoPaint && builderAccStatus[3] == 0)
				{
					TryPainting(num, num2, paintingAWall: true, applyItemAnimation: false);
				}
			}
		}
	}

	private void PlaceThing_Tiles()
	{
		Item item = inventory[selectedItem];
		int tileToCreate = item.createTile;
		if (tileToCreate < 0 || !(position.X / 16f - (float)tileRangeX - (float)item.tileBoost - (float)blockRange <= (float)tileTargetX) || !((position.X + (float)width) / 16f + (float)tileRangeX + (float)item.tileBoost - 1f + (float)blockRange >= (float)tileTargetX) || !(position.Y / 16f - (float)tileRangeY - (float)item.tileBoost - (float)blockRange <= (float)tileTargetY) || !((position.Y + (float)height) / 16f + (float)tileRangeY + (float)item.tileBoost - 2f + (float)blockRange >= (float)tileTargetY))
		{
			return;
		}
		cursorItemIconEnabled = true;
		bool flag = PlaceThing_Tiles_CheckLavaBlocking();
		bool canUse = true;
		canUse = PlaceThing_Tiles_CheckGamepadTorchUsability(canUse);
		canUse = PlaceThing_Tiles_CheckWandUsability(canUse);
		canUse = PlaceThing_Tiles_CheckRopeUsability(canUse);
		canUse = PlaceThing_Tiles_CheckFlexibleWand(canUse);
		if (TileReplacementEnabled)
		{
			canUse = PlaceThing_TryReplacingTiles(canUse);
		}
		Tile tile = Main.tile[tileTargetX, tileTargetY];
		if (tile.active())
		{
			if (tileToCreate == 23 && tile.type == 59)
			{
				tileToCreate = 661;
			}
			if (tileToCreate == 199 && tile.type == 59)
			{
				tileToCreate = 662;
			}
		}
		if (canUse && ((!tile.active() && !flag) || (Main.tileCut[tile.type] && tile.type != 484) || (tile.type >= 373 && tile.type <= 375) || tile.type == 461 || tileToCreate == 199 || tileToCreate == 23 || tileToCreate == 662 || tileToCreate == 661 || tileToCreate == 2 || tileToCreate == 109 || tileToCreate == 60 || tileToCreate == 70 || tileToCreate == 633 || Main.tileMoss[tileToCreate] || TileID.Sets.BreakableWhenPlacing[tile.type]) && ItemTimeIsZero && itemAnimation > 0 && controlUseItem)
		{
			bool canPlace = false;
			bool newObjectType = false;
			bool? overrideCanPlace = null;
			int? forcedRandom = null;
			TileObject objectData = default(TileObject);
			FigureOutWhatToPlace(tile, item, out tileToCreate, out var previewPlaceStyle, out overrideCanPlace, out forcedRandom);
			if (overrideCanPlace.HasValue)
			{
				canPlace = overrideCanPlace.Value;
			}
			else if (TileObjectData.CustomPlace(tileToCreate, previewPlaceStyle) && tileToCreate != 82 && tileToCreate != 227)
			{
				newObjectType = true;
				canPlace = TileObject.CanPlace(tileTargetX, tileTargetY, (ushort)tileToCreate, previewPlaceStyle, direction, out objectData, onlyCheck: false, forcedRandom);
				PlaceThing_Tiles_BlockPlacementIfOverPlayers(ref canPlace, ref objectData);
				PlaceThing_Tiles_BlockPlacementForRepeatedPigronatas(ref canPlace, ref objectData);
				PlaceThing_Tiles_BlockPlacementForRepeatedPumpkins(ref canPlace, ref objectData);
				PlaceThing_Tiles_BlockPlacementForRepeatedCoralAndBeachPiles(ref canPlace, ref objectData);
			}
			else
			{
				canPlace = PlaceThing_Tiles_BlockPlacementForAssortedThings(canPlace);
			}
			if (canPlace)
			{
				PlaceThing_Tiles_PlaceIt(newObjectType, objectData, tileToCreate);
			}
		}
	}

	private bool ModifyFlexibleWandPlacementInfo(ref int tileType, ref int tileStyle, ref int? forcedRandom)
	{
		FlexibleTileWand flexibleTileWand = HeldItem.GetFlexibleTileWand();
		if (flexibleTileWand == null)
		{
			return true;
		}
		if (whoAmI == Main.myPlayer)
		{
			Point point = new Point(tileTargetX, tileTargetY);
			if (FlexibleWandLastPosition != point)
			{
				FlexibleWandLastPosition = point;
				FlexibleWandRandomSeed = Main.rand.Next();
			}
		}
		if (flexibleTileWand.TryGetPlacementOption(this, FlexibleWandRandomSeed, FlexibleWandCycleOffset, out var option, out var _))
		{
			tileType = option.TileIdToPlace;
			tileStyle = option.TileStyleToPlace;
			forcedRandom = FlexibleWandCycleOffset;
			return true;
		}
		return false;
	}

	private bool PlaceThing_TryReplacingWalls(bool canUse)
	{
		if (canUse && itemAnimation > 0 && ItemTimeIsZero && controlUseItem && PlaceThing_ValidWallForReplacement() && WorldGen.NearFriendlyWall(tileTargetX, tileTargetY) && WorldGen.ReplaceWall(tileTargetX, tileTargetY, (ushort)HeldItem.createWall))
		{
			canUse = false;
			ApplyItemTime(HeldItem, wallSpeed);
			NetMessage.SendData(17, -1, -1, null, 22, tileTargetX, tileTargetY, HeldItem.createWall);
			if (autoPaint && builderAccStatus[3] == 0)
			{
				TryPainting(tileTargetX, tileTargetY, paintingAWall: true, applyItemAnimation: false);
			}
		}
		return canUse;
	}

	private bool PlaceThing_ValidWallForReplacement()
	{
		_ = Main.tile[tileTargetX, tileTargetY];
		return Main.tile[tileTargetX, tileTargetY].wall > 0;
	}

	private bool PlaceThing_TryReplacingTiles(bool canUse)
	{
		bool flag = PlaceThing_ValidTileForReplacement();
		if (flag)
		{
			TileObject.objectPreview.Reset();
		}
		if (controlUseItem && canUse && Main.tile[tileTargetX, tileTargetY].active() && itemAnimation > 0 && ItemTimeIsZero && flag)
		{
			Item bestPickaxe = GetBestPickaxe();
			if (bestPickaxe == null)
			{
				return false;
			}
			Tile tile = Main.tile[tileTargetX, tileTargetY];
			_ = tile.type;
			int num = hitReplace.HitObject(tileTargetX, tileTargetY, 1);
			int pickaxeDamage = GetPickaxeDamage(tileTargetX, tileTargetY, bestPickaxe.pick, num, tile);
			if (pickaxeDamage == 0)
			{
				return false;
			}
			if (!WorldGen.IsTileReplacable(tileTargetX, tileTargetY))
			{
				return false;
			}
			if (0 == 0)
			{
				if (hitReplace.AddDamage(num, pickaxeDamage) < 100)
				{
					int num2 = WorldGen.KillTile_GetTileDustAmount(fail: true, tile);
					for (int i = 0; i < num2; i++)
					{
						WorldGen.KillTile_MakeTileDust(tileTargetX, tileTargetY, tile);
					}
					WorldGen.KillTile_PlaySounds(tileTargetX, tileTargetY, fail: true, tile);
					if (HeldItem.consumable)
					{
						HeldItem.stack++;
					}
					dontConsumeWand = true;
					ApplyItemTime(bestPickaxe, pickSpeed);
					SetItemAnimation((int)((float)bestPickaxe.useTime * pickSpeed));
					return false;
				}
				ClearMiningCacheAt(tileTargetX, tileTargetY, 1);
			}
			int[,] typeCaches = PlaceThing_Tiles_GetAutoAccessoryCache();
			ushort num3 = (ushort)HeldItem.createTile;
			int num4 = HeldItem.placeStyle;
			if (UsingBiomeTorches && num3 == 4)
			{
				num4 = BiomeTorchPlaceStyle(num4);
			}
			if (UsingBiomeTorches && num3 == 215)
			{
				num4 = BiomeCampfirePlaceStyle(num4);
			}
			if (WorldGen.ReplaceTile(tileTargetX, tileTargetY, num3, num4))
			{
				canUse = false;
				NetMessage.SendData(17, -1, -1, null, 21, tileTargetX, tileTargetY, (int)num3, num4);
				ApplyItemTime(HeldItem);
				SetItemAnimation(HeldItem.useAnimation);
				PlaceThing_Tiles_PlaceIt_AutoPaintAndActuate(typeCaches, num3);
			}
		}
		return canUse;
	}

	private bool PlaceThing_ValidTileForReplacement()
	{
		int createTile = HeldItem.createTile;
		int num = HeldItem.placeStyle;
		if (UsingBiomeTorches && createTile == 4)
		{
			num = BiomeTorchPlaceStyle(num);
		}
		if (UsingBiomeTorches && createTile == 215)
		{
			num = BiomeCampfirePlaceStyle(num);
		}
		Tile tile = Main.tile[tileTargetX, tileTargetY];
		if (WorldGen.WouldTileReplacementBeBlockedByLiquid(tileTargetX, tileTargetY, 1))
		{
			return false;
		}
		if (ItemID.Sets.SortingPriorityRopes[HeldItem.type] != -1)
		{
			return false;
		}
		if (Main.tileMoss[createTile])
		{
			return false;
		}
		if (TileID.Sets.DoesntPlaceWithTileReplacement[createTile])
		{
			return false;
		}
		if (TileID.Sets.DoesntGetReplacedWithTileReplacement[tile.type])
		{
			return false;
		}
		if (!PlaceThing_CheckSpecificValidtyCaseForBlockSwap(createTile, tile.type))
		{
			return false;
		}
		if (Main.tileCut[tile.type])
		{
			return false;
		}
		if (TileID.Sets.Platforms[tile.type] && tile.type == createTile)
		{
			return tile.frameY != num * 18;
		}
		if (tile.type == 4 && tile.type == createTile)
		{
			return tile.frameY != num * 22;
		}
		if (tile.type == 215 && tile.type == createTile)
		{
			return tile.frameX / 54 != num;
		}
		if (TileID.Sets.BasicChest[tile.type] && TileID.Sets.BasicChest[createTile])
		{
			if (tile.frameX / 36 == num)
			{
				return tile.type != createTile;
			}
			return true;
		}
		if (TileID.Sets.BasicDresser[tile.type] && TileID.Sets.BasicDresser[createTile])
		{
			if (tile.frameX / 54 == num)
			{
				return tile.type != createTile;
			}
			return true;
		}
		bool flag = false;
		if (Main.tileRope[tile.type])
		{
			if (createTile != 314 && !TileID.Sets.Platforms[createTile])
			{
				return false;
			}
			flag = true;
		}
		if (!flag && Main.tileFrameImportant[createTile] && !TileID.Sets.Platforms[createTile])
		{
			return false;
		}
		if (Main.tile[tileTargetX, tileTargetY].type == createTile)
		{
			return false;
		}
		if (Main.tile[tileTargetX, tileTargetY].type == 230 && Main.getGoodWorld)
		{
			return false;
		}
		if (!TileID.Sets.IgnoresTileReplacementDropCheckWhenBeingPlaced[createTile])
		{
			WorldGen.KillTile_GetItemDrops(tileTargetX, tileTargetY, tile, out var dropItem, out var _, out var _, out var _);
			if (dropItem == HeldItem.type)
			{
				return false;
			}
		}
		if (!WorldGen.WouldTileReplacementWork((ushort)createTile, tileTargetX, tileTargetY))
		{
			return false;
		}
		return true;
	}

	private bool PlaceThing_CheckSpecificValidtyCaseForBlockSwap(int tileTypeBeingPlaced, int tileTypeCurrentlyPlaced)
	{
		bool flag = TileID.Sets.Falling[tileTypeBeingPlaced];
		bool flag2 = TileID.Sets.Falling[tileTypeCurrentlyPlaced] && !flag;
		if (flag2)
		{
			Item bestPickaxe = GetBestPickaxe();
			if (bestPickaxe != null && bestPickaxe.pick >= 110)
			{
				flag2 = false;
			}
		}
		if (flag2 && tileTargetY > 0)
		{
			Tile tile = Main.tile[tileTargetX, tileTargetY - 1];
			bool flag3 = false;
			if (tile != null)
			{
				flag3 |= !tile.active();
				flag3 |= tile.active() && !TileID.Sets.Falling[tile.type];
			}
			if (flag3)
			{
				flag2 = false;
			}
		}
		if (flag2)
		{
			return false;
		}
		return true;
	}

	public Item GetBestPickaxe()
	{
		Item item = null;
		for (int i = 0; i < 50; i++)
		{
			if (inventory[i].stack > 0 && inventory[i].pick > 0 && (item == null || inventory[i].pick > item.pick))
			{
				item = inventory[i];
			}
		}
		return item;
	}

	private TileObject PlaceThing_Tiles_PlaceIt(bool newObjectType, TileObject data, int tileToCreate)
	{
		int num = inventory[selectedItem].placeStyle;
		if (!newObjectType)
		{
			num = PlaceThing_Tiles_PlaceIt_GetLegacyTileStyle(num);
		}
		int[,] typeCaches = PlaceThing_Tiles_GetAutoAccessoryCache();
		bool forced = false;
		bool flag;
		if (newObjectType)
		{
			flag = TileObject.Place(data);
			WorldGen.SquareTileFrame(tileTargetX, tileTargetY);
			if (Main.netMode != 1 || !TileID.Sets.IsAContainer[tileToCreate])
			{
				SoundEngine.PlaySound(0, tileTargetX * 16, tileTargetY * 16);
			}
		}
		else
		{
			if (UsingBiomeTorches && tileToCreate == 4 && num == 0)
			{
				num = BiomeTorchPlaceStyle(num);
			}
			flag = WorldGen.PlaceTile(tileTargetX, tileTargetY, tileToCreate, mute: false, forced, whoAmI, num);
		}
		if (flag)
		{
			ApplyItemTime(inventory[selectedItem], tileSpeed);
			if (newObjectType)
			{
				TileObjectData.CallPostPlacementPlayerHook(tileTargetX, tileTargetY, tileToCreate, num, direction, data.alternate, data);
				if (Main.netMode == 1 && !Main.tileContainer[tileToCreate] && tileToCreate != 423)
				{
					NetMessage.SendObjectPlacement(-1, tileTargetX, tileTargetY, data.type, data.style, data.alternate, data.random, direction);
				}
			}
			else
			{
				NetMessage.SendData(17, -1, -1, null, 1, tileTargetX, tileTargetY, tileToCreate, num);
				PlaceThing_Tiles_PlaceIt_SpinChairs();
				PlaceThing_Tiles_PlaceIt_SpinBedsAndBaths();
			}
			PlaceThing_Tiles_PlaceIt_AdjustPlants();
			PlaceThing_Tiles_PlaceIt_SpinTraps();
			PlaceThing_Tiles_PlaceIt_TriggerLogicLamp();
			PlaceThing_Tiles_PlaceIt_SpinSmartPlatform();
			PlaceThing_Tiles_PlaceIt_ConsumeFlexibleWandMaterial();
			PlaceThing_Tiles_PlaceIt_UnslopeForSolids();
			PlaceThing_Tiles_PlaceIt_KillGrassForSolids();
			PlaceThing_Tiles_PlaceIt_AutoPaintAndActuate(typeCaches, tileToCreate);
			if (PlayerInput.UsingGamepad && ItemID.Sets.SingleUseInGamepad[inventory[selectedItem].type] && Main.myPlayer == whoAmI && !Main.SmartCursorIsUsed)
			{
				Main.blockMouse = true;
			}
		}
		return data;
	}

	public void PlaceThing_Tiles_PlaceIt_ConsumeFlexibleWandMaterial()
	{
		FlexibleTileWand flexibleTileWand = inventory[selectedItem].GetFlexibleTileWand();
		if (flexibleTileWand != null && flexibleTileWand.TryGetPlacementOption(this, FlexibleWandRandomSeed, FlexibleWandCycleOffset, out var _, out var itemToConsume))
		{
			itemToConsume.stack--;
			if (itemToConsume.stack <= 0)
			{
				itemToConsume.TurnToAir();
			}
		}
	}

	public int BiomeTorchPlaceStyle(int style)
	{
		if (!UsingBiomeTorches || style != 0)
		{
			return style;
		}
		if (ZoneShimmer)
		{
			style = 23;
		}
		else if (ZoneLihzhardTemple)
		{
			style = 21;
		}
		else if (ZoneDungeon)
		{
			style = 13;
		}
		else if (position.Y > (float)(Main.UnderworldLayer * 16))
		{
			style = 7;
		}
		else if (ZoneHallow)
		{
			style = 20;
		}
		else if (ZoneCorrupt)
		{
			style = 18;
		}
		else if (ZoneCrimson)
		{
			style = 19;
		}
		else if (ZoneSnow)
		{
			style = 9;
		}
		else if (ZoneGlowshroom)
		{
			style = 22;
		}
		else if (ZoneJungle)
		{
			style = 21;
		}
		else if ((ZoneDesert && (double)position.Y < Main.worldSurface * 16.0) || ZoneUndergroundDesert)
		{
			style = 16;
		}
		else if (ZoneDesert && Main.remixWorld)
		{
			style = 16;
		}
		return style;
	}

	public int BiomeTorchHoldStyle(int style)
	{
		if (!UsingBiomeTorches || style != 8)
		{
			return style;
		}
		if (ZoneShimmer)
		{
			style = 5353;
		}
		else if (ZoneLihzhardTemple)
		{
			style = 4388;
		}
		else if (ZoneDungeon)
		{
			style = 3004;
		}
		else if (position.Y > (float)(Main.UnderworldLayer * 16))
		{
			style = 433;
		}
		else if (ZoneHallow)
		{
			style = 4387;
		}
		else if (ZoneCorrupt)
		{
			style = 4385;
		}
		else if (ZoneCrimson)
		{
			style = 4386;
		}
		else if (ZoneSnow)
		{
			style = 974;
		}
		else if (ZoneGlowshroom)
		{
			style = 5293;
		}
		else if (ZoneJungle)
		{
			style = 4388;
		}
		else if ((ZoneDesert && (double)position.Y < Main.worldSurface * 16.0) || ZoneUndergroundDesert)
		{
			style = 4383;
		}
		else if (ZoneDesert && Main.remixWorld)
		{
			style = 4383;
		}
		return style;
	}

	public int BiomeCampfirePlaceStyle(int style)
	{
		if (!UsingBiomeTorches || style != 0)
		{
			return style;
		}
		if (ZoneShimmer)
		{
			style = 15;
		}
		else if (ZoneLihzhardTemple)
		{
			style = 13;
		}
		else if (ZoneDungeon)
		{
			style = 7;
		}
		else if (position.Y > (float)(Main.UnderworldLayer * 16))
		{
			style = 2;
		}
		else if (ZoneHallow)
		{
			style = 12;
		}
		else if (ZoneCorrupt)
		{
			style = 10;
		}
		else if (ZoneCrimson)
		{
			style = 11;
		}
		else if (ZoneSnow)
		{
			style = 3;
		}
		else if (ZoneGlowshroom)
		{
			style = 14;
		}
		else if (ZoneJungle)
		{
			style = 13;
		}
		else if ((ZoneDesert && (double)position.Y < Main.worldSurface * 16.0) || ZoneUndergroundDesert)
		{
			style = 8;
		}
		else if (ZoneDesert && Main.remixWorld)
		{
			style = 8;
		}
		return style;
	}

	public int BiomeCampfireHoldStyle(int itemType)
	{
		if (!UsingBiomeTorches || itemType != 966)
		{
			return itemType;
		}
		if (ZoneShimmer)
		{
			itemType = 5357;
		}
		else if (ZoneLihzhardTemple)
		{
			itemType = 4694;
		}
		else if (ZoneDungeon)
		{
			itemType = 3724;
		}
		else if (position.Y > (float)(Main.UnderworldLayer * 16))
		{
			itemType = 3047;
		}
		else if (ZoneHallow)
		{
			itemType = 4693;
		}
		else if (ZoneCorrupt)
		{
			itemType = 4691;
		}
		else if (ZoneCrimson)
		{
			itemType = 4692;
		}
		else if (ZoneSnow)
		{
			itemType = 3048;
		}
		else if (ZoneJungle)
		{
			itemType = 4694;
		}
		else if (ZoneGlowshroom)
		{
			itemType = 5299;
		}
		else if ((ZoneDesert && (double)position.Y < Main.worldSurface * 16.0) || ZoneUndergroundDesert)
		{
			itemType = 4689;
		}
		else if (ZoneDesert && Main.remixWorld)
		{
			itemType = 4689;
		}
		return itemType;
	}

	private int[,] PlaceThing_Tiles_GetAutoAccessoryCache()
	{
		int[,] array = null;
		if (autoPaint || autoActuator)
		{
			array = new int[11, 11];
			for (int i = 0; i < 11; i++)
			{
				for (int j = 0; j < 11; j++)
				{
					int num = tileTargetX - 5 + i;
					int num2 = tileTargetY - 5 + j;
					if (Main.tile[num, num2].active())
					{
						array[i, j] = Main.tile[num, num2].type;
					}
					else
					{
						array[i, j] = -1;
					}
				}
			}
		}
		return array;
	}

	private int PlaceThing_Tiles_PlaceIt_GetLegacyTileStyle(int style)
	{
		int createTile = inventory[selectedItem].createTile;
		if (createTile == 36)
		{
			style = Main.rand.Next(7);
		}
		if (createTile == 212 && direction > 0)
		{
			style = 1;
		}
		if (createTile == 141)
		{
			style = Main.rand.Next(2);
		}
		if (createTile == 128 || createTile == 269 || createTile == 334)
		{
			style = ((direction >= 0) ? 1 : (-1));
		}
		if (createTile == 241 && inventory[selectedItem].placeStyle == 0)
		{
			style = Main.rand.Next(0, 9);
		}
		if (createTile == 35 && inventory[selectedItem].placeStyle == 0)
		{
			style = Main.rand.Next(9);
		}
		if (createTile == 314 && style == 2 && direction == 1)
		{
			style++;
		}
		if (createTile == 129)
		{
			style = (short)Main.rand.Next(18);
		}
		return style;
	}

	private void PlaceThing_Tiles_PlaceIt_UnslopeForSolids()
	{
		if (!Main.tileSolid[inventory[selectedItem].createTile] || (inventory[selectedItem].createTile >= 0 && TileID.Sets.Platforms[inventory[selectedItem].createTile]))
		{
			return;
		}
		int num = tileTargetX;
		int num2 = tileTargetY + 1;
		if (Main.tile[num, num2] != null && !TileID.Sets.Platforms[Main.tile[num, num2].type] && (Main.tile[num, num2].topSlope() || Main.tile[num, num2].halfBrick()))
		{
			WorldGen.SlopeTile(num, num2);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(17, -1, -1, null, 14, num, num2);
			}
		}
		num = tileTargetX;
		num2 = tileTargetY - 1;
		if (Main.tile[num, num2] != null && !TileID.Sets.Platforms[Main.tile[num, num2].type] && Main.tile[num, num2].bottomSlope())
		{
			WorldGen.SlopeTile(num, num2);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(17, -1, -1, null, 14, num, num2);
			}
		}
	}

	private void PlaceThing_Tiles_PlaceIt_KillGrassForSolids()
	{
		if (!Main.tileSolid[inventory[selectedItem].createTile])
		{
			return;
		}
		for (int i = tileTargetX - 1; i <= tileTargetX + 1; i++)
		{
			for (int j = tileTargetY - 1; j <= tileTargetY + 1; j++)
			{
				Tile tile = Main.tile[i, j];
				if (!tile.active() || inventory[selectedItem].createTile == tile.type || (tile.type != 2 && tile.type != 23 && tile.type != 60 && tile.type != 70 && tile.type != 109 && tile.type != 199 && tile.type != 477 && tile.type != 492 && tile.type != 633))
				{
					continue;
				}
				bool flag = true;
				for (int k = i - 1; k <= i + 1; k++)
				{
					for (int l = j - 1; l <= j + 1; l++)
					{
						if (!WorldGen.SolidTile(k, l))
						{
							flag = false;
						}
					}
				}
				if (flag)
				{
					WorldGen.KillTile(i, j, fail: true);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 0, i, j, 1f);
					}
				}
			}
		}
	}

	private void PlaceThing_Tiles_PlaceIt_AutoPaintAndActuate(int[,] typeCaches, int tileToCreate)
	{
		if (!autoPaint && !autoActuator)
		{
			return;
		}
		int num = 0;
		int num2 = 0;
		int num3 = 11;
		int num4 = 11;
		bool flag = TileID.Sets.Platforms[Main.tile[tileTargetX, tileTargetY].type];
		bool flag2 = TileID.Sets.Platforms[Main.tile[tileTargetX, tileTargetY].type] && TileID.Sets.Platforms[tileToCreate];
		if (!Main.tileFrameImportant[Main.tile[tileTargetX, tileTargetY].type] || flag)
		{
			num = (num2 = 5);
			num3 = (num4 = 6);
		}
		for (int i = num; i < num3; i++)
		{
			for (int j = num2; j < num4; j++)
			{
				int num5 = tileTargetX - 5 + i;
				int num6 = tileTargetY - 5 + j;
				if ((!Main.tile[num5, num6].active() && typeCaches[i, j] == -1) || (Main.tile[num5, num6].active() && !flag2 && (typeCaches[i, j] == Main.tile[num5, num6].type || Main.tile[num5, num6].type != tileToCreate)))
				{
					continue;
				}
				if (autoPaint && builderAccStatus[3] == 0)
				{
					TryPainting(num5, num6, paintingAWall: false, applyItemAnimation: false);
				}
				if (!autoActuator || builderAccStatus[2] != 0)
				{
					continue;
				}
				bool flag3 = Main.tileSolid[Main.tile[num5, num6].type] && !TileID.Sets.NotReallySolid[Main.tile[num5, num6].type];
				ushort type = Main.tile[num5, num6].type;
				if (type == 314 || (uint)(type - 386) <= 3u)
				{
					flag3 = false;
				}
				if (!flag3)
				{
					continue;
				}
				int num7 = FindItem(849);
				if (num7 > -1 && WorldGen.PlaceActuator(num5, num6))
				{
					NetMessage.SendData(17, -1, -1, null, 8, num5, num6);
					inventory[num7].stack--;
					if (inventory[num7].stack <= 0)
					{
						inventory[num7].SetDefaults();
					}
				}
			}
		}
	}

	private void PlaceThing_Tiles_PlaceIt_SpinSmartPlatform()
	{
		if (inventory[selectedItem].createTile < 0 || !TileID.Sets.Platforms[inventory[selectedItem].createTile] || !Main.SmartCursorIsUsed)
		{
			return;
		}
		int num = tileTargetX;
		int num2 = tileTargetY;
		int num3 = -1;
		int num4 = 0;
		int num5 = 0;
		bool flag = true;
		for (int i = -1; i < 2; i++)
		{
			for (int j = -1; j < 2; j++)
			{
				if ((i != 0 || j != 0) && TileID.Sets.Platforms[Main.tile[num + i, num2 + j].type])
				{
					flag = false;
				}
			}
		}
		if (flag)
		{
			return;
		}
		Tile tile = Main.tile[num - 1, num2 - 1];
		if (tile.active() && TileID.Sets.Platforms[tile.type] && tile.slope() != 2)
		{
			num4++;
		}
		tile = Main.tile[num - 1, num2 + 1];
		if (tile.active() && TileID.Sets.Platforms[tile.type] && tile.slope() != 1)
		{
			num5++;
		}
		tile = Main.tile[num + 1, num2 - 1];
		if (tile.active() && TileID.Sets.Platforms[tile.type] && tile.slope() != 1)
		{
			num5++;
		}
		tile = Main.tile[num + 1, num2 + 1];
		if (tile.active() && TileID.Sets.Platforms[tile.type] && tile.slope() != 2)
		{
			num4++;
		}
		tile = Main.tile[num - 1, num2];
		if (WorldGen.SolidTile(tile))
		{
			num4++;
			if (TileID.Sets.Platforms[tile.type] && tile.slope() == 0)
			{
				num4++;
			}
		}
		tile = Main.tile[num + 1, num2];
		if (WorldGen.SolidTile(tile))
		{
			num5++;
			if (TileID.Sets.Platforms[tile.type] && tile.slope() == 0)
			{
				num5++;
			}
		}
		if (num4 > num5)
		{
			num3 = 1;
		}
		else if (num5 > num4)
		{
			num3 = 2;
		}
		tile = Main.tile[num - 1, num2];
		if (tile.active() && TileID.Sets.Platforms[tile.type])
		{
			num3 = 0;
		}
		tile = Main.tile[num + 1, num2];
		if (tile.active() && TileID.Sets.Platforms[tile.type])
		{
			num3 = 0;
		}
		int num6 = 0;
		int num7 = 0;
		if (num3 != -1)
		{
			WorldGen.SlopeTile(num, num2, num3, noEffects: true);
			int num8 = Main.tile[num, num2].slope();
			if (Main.netMode == 1)
			{
				NetMessage.SendData(17, -1, -1, null, 14, tileTargetX, tileTargetY, num8);
			}
			if (num3 == 1)
			{
				num6 = -1;
				num7 = -1;
			}
			else
			{
				num6 = 1;
				num7 = -1;
			}
			tile = Main.tile[num + num6, num2 + num7];
			if (tile.active() && TileID.Sets.Platforms[tile.type] && tile.slope() == 0 && (!Main.tile[num + num6 + num6, num2 + num7].active() || !TileID.Sets.Platforms[Main.tile[num + num6 + num6, num2 + num7].type] || !Main.tile[num + num6 + num6, num2 + num7].halfBrick()))
			{
				WorldGen.SlopeTile(num + num6, num2 + num7, num3);
				num8 = tile.slope();
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 14, num + num6, num2 + num7, num8);
				}
			}
			if (num3 == 1)
			{
				num6 = 1;
				num7 = 1;
			}
			else
			{
				num6 = -1;
				num7 = 1;
			}
			tile = Main.tile[num + num6, num2 + num7];
			if (tile.active() && TileID.Sets.Platforms[tile.type] && tile.slope() == 0 && WorldGen.PlatformProperSides(num + num6, num2 + num7, acceptNonOpposing: true) <= 0)
			{
				WorldGen.SlopeTile(num + num6, num2 + num7, num3);
				num8 = tile.slope();
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 14, num + num6, num2 + num7, num8);
				}
			}
			return;
		}
		num3 = 0;
		int num9 = 0;
		num6 = -1;
		tile = Main.tile[num + num6, num2];
		if (tile.active() && TileID.Sets.Platforms[tile.type] && tile.slope() != 0)
		{
			int num10 = (tile.slope() == 1).ToDirectionInt() * num6;
			num3 = ((num10 != -1) ? tile.slope() : 0);
			bool flag2 = true;
			if (Main.tile[num + num6 * 2, num2 + num10].active() && TileID.Sets.Platforms[Main.tile[num + num6 * 2, num2].type] && num3 == Main.tile[num + num6 * 2, num2 + num10].slope())
			{
				flag2 = false;
			}
			if (Main.tile[num, num2 - num10].active() && TileID.Sets.Platforms[Main.tile[num, num2 - num10].type] && tile.slope() == Main.tile[num, num2 - num10].slope())
			{
				flag2 = false;
			}
			if (flag2)
			{
				WorldGen.SlopeTile(num + num6, num2, num3);
				num9 = tile.slope();
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 14, num + num6, num2, num9);
				}
			}
		}
		num6 = 1;
		num7 = 0;
		tile = Main.tile[num + num6, num2 + num7];
		if (tile.active() && TileID.Sets.Platforms[tile.type] && tile.slope() != 0)
		{
			int num11 = (tile.slope() == 1).ToDirectionInt() * num6;
			num3 = ((num11 != -1) ? tile.slope() : 0);
			bool flag3 = true;
			if (Main.tile[num + num6 * 2, num2 + num11].active() && TileID.Sets.Platforms[Main.tile[num + num6 * 2, num2].type] && num3 == Main.tile[num + num6 * 2, num2 + num11].slope())
			{
				flag3 = false;
			}
			if (Main.tile[num, num2 - num11].active() && TileID.Sets.Platforms[Main.tile[num, num2 - num11].type] && tile.slope() == Main.tile[num, num2 - num11].slope())
			{
				flag3 = false;
			}
			if (flag3)
			{
				WorldGen.SlopeTile(num + num6, num2, num3);
				num9 = tile.slope();
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 14, num + num6, num2, num9);
				}
			}
		}
		if (num4 != num5 || WorldGen.PlatformProperSides(num, num2) != 0)
		{
			return;
		}
		tile = Main.tile[num, num2 + 1];
		if (tile.active() && !tile.halfBrick() && tile.slope() == 0 && Main.tileSolid[tile.type])
		{
			num3 = ((direction != 1) ? 1 : 2);
			WorldGen.SlopeTile(num, num2, num3);
			num9 = Main.tile[num, num2].slope();
			if (Main.netMode == 1)
			{
				NetMessage.SendData(17, -1, -1, null, 14, tileTargetX, tileTargetY, num9);
			}
		}
	}

	private void PlaceThing_Tiles_PlaceIt_TriggerLogicLamp()
	{
		if (inventory[selectedItem].createTile == 419)
		{
			if (Main.netMode == 1)
			{
				NetMessage.SendData(17, -1, -1, null, 18, tileTargetX, tileTargetY);
			}
			else
			{
				Wiring.PokeLogicGate(tileTargetX, tileTargetY);
			}
		}
	}

	private void PlaceThing_Tiles_PlaceIt_SpinBedsAndBaths()
	{
		if ((inventory[selectedItem].createTile == 79 || inventory[selectedItem].createTile == 90) && Main.netMode == 1)
		{
			NetMessage.SendTileSquare(-1, tileTargetX, tileTargetY, 5);
		}
	}

	private void PlaceThing_Tiles_PlaceIt_SpinChairs()
	{
		if (inventory[selectedItem].createTile == 15)
		{
			if (direction == 1)
			{
				Main.tile[tileTargetX, tileTargetY].frameX += 18;
				Main.tile[tileTargetX, tileTargetY - 1].frameX += 18;
			}
			if (Main.netMode == 1)
			{
				NetMessage.SendTileSquare(-1, tileTargetX - 1, tileTargetY - 1, 3);
			}
		}
	}

	private void PlaceThing_Tiles_PlaceIt_SpinTraps()
	{
		if (inventory[selectedItem].createTile == 137)
		{
			if (direction == 1)
			{
				Main.tile[tileTargetX, tileTargetY].frameX += 18;
			}
			if (Main.netMode == 1)
			{
				NetMessage.SendTileSquare(-1, tileTargetX, tileTargetY);
			}
		}
	}

	private void PlaceThing_Tiles_PlaceIt_AdjustPlants()
	{
		if (inventory[selectedItem].createTile != 3)
		{
			return;
		}
		FlowerPacketInfo flowerPacketInfo = ItemID.Sets.flowerPacketInfo[inventory[selectedItem].type];
		if (flowerPacketInfo == null)
		{
			return;
		}
		List<int> stylesOnPurity = flowerPacketInfo.stylesOnPurity;
		if (stylesOnPurity.Count != 0)
		{
			int num = stylesOnPurity[Main.rand.Next(stylesOnPurity.Count)];
			Main.tile[tileTargetX, tileTargetY].frameX = (short)(num * 18);
			if (Main.netMode == 1)
			{
				NetMessage.SendTileSquare(-1, tileTargetX, tileTargetY);
			}
		}
	}

	private bool PlaceThing_Tiles_PlaceIt_StaffOfRegrowthCheck(bool placed)
	{
		bool flag = inventory[selectedItem].type == 213 || inventory[selectedItem].type == 5295;
		if (flag && !placed && Main.tile[tileTargetX, tileTargetY].type == 1 && Main.tile[tileTargetX, tileTargetY].active())
		{
			int num = 0;
			int num2 = 0;
			Point point = base.Center.ToTileCoordinates();
			Dictionary<ushort, int> dictionary = new Dictionary<ushort, int>();
			WorldUtils.Gen(new Point(point.X - 25, point.Y - 25), new Shapes.Rectangle(50, 50), new Actions.TileScanner(182, 515, 180, 513, 179, 512, 183, 516, 181, 514, 381, 517, 534, 535, 536, 537, 539, 540, 625, 626, 627, 628).Output(dictionary));
			foreach (KeyValuePair<ushort, int> item in dictionary)
			{
				if (item.Value > num2)
				{
					num2 = item.Value;
					num = item.Key;
				}
			}
			switch (num)
			{
			case 515:
				num = 182;
				break;
			case 513:
				num = 180;
				break;
			case 512:
				num = 179;
				break;
			case 516:
				num = 183;
				break;
			case 514:
				num = 181;
				break;
			case 517:
				num = 381;
				break;
			case 535:
				num = 534;
				break;
			case 537:
				num = 536;
				break;
			case 540:
				num = 539;
				break;
			case 626:
				num = 625;
				break;
			case 628:
				num = 627;
				break;
			}
			if (num2 == 0)
			{
				num = Utils.SelectRandom<int>(Main.rand, 182, 180, 179, 183, 181);
			}
			if (num != 0)
			{
				Main.tile[tileTargetX, tileTargetY].type = (ushort)num;
				WorldGen.SquareTileFrame(tileTargetX, tileTargetY);
				NetMessage.SendTileSquare(-1, tileTargetX, tileTargetY);
				placed = true;
			}
		}
		if (flag && !placed && Main.tile[tileTargetX, tileTargetY].type == 38 && Main.tile[tileTargetX, tileTargetY].active())
		{
			int num3 = 0;
			int num4 = 0;
			Point point2 = base.Center.ToTileCoordinates();
			Dictionary<ushort, int> dictionary2 = new Dictionary<ushort, int>();
			WorldUtils.Gen(new Point(point2.X - 25, point2.Y - 25), new Shapes.Rectangle(50, 50), new Actions.TileScanner(182, 515, 180, 513, 179, 512, 183, 516, 181, 514, 381, 517, 534, 535, 536, 537, 539, 540, 625, 626, 627, 628).Output(dictionary2));
			foreach (KeyValuePair<ushort, int> item2 in dictionary2)
			{
				if (item2.Value > num4)
				{
					num4 = item2.Value;
					num3 = item2.Key;
				}
			}
			switch (num3)
			{
			case 182:
				num3 = 515;
				break;
			case 180:
				num3 = 513;
				break;
			case 179:
				num3 = 512;
				break;
			case 183:
				num3 = 516;
				break;
			case 181:
				num3 = 514;
				break;
			case 381:
				num3 = 517;
				break;
			case 534:
				num3 = 535;
				break;
			case 536:
				num3 = 537;
				break;
			case 539:
				num3 = 540;
				break;
			case 625:
				num3 = 626;
				break;
			case 627:
				num3 = 628;
				break;
			}
			if (num4 == 0)
			{
				num3 = Utils.SelectRandom<int>(Main.rand, 515, 513, 512, 516, 514);
			}
			if (num3 != 0)
			{
				Main.tile[tileTargetX, tileTargetY].type = (ushort)num3;
				WorldGen.SquareTileFrame(tileTargetX, tileTargetY);
				NetMessage.SendTileSquare(-1, tileTargetX, tileTargetY);
				placed = true;
			}
		}
		return placed;
	}

	private bool PlaceThing_Tiles_BlockPlacementForAssortedThings(bool canPlace)
	{
		bool flag = inventory[selectedItem].type == 213 || inventory[selectedItem].type == 5295;
		if (flag)
		{
			if (Main.tile[tileTargetX, tileTargetY].type == 0 || Main.tile[tileTargetX, tileTargetY].type == 1 || Main.tile[tileTargetX, tileTargetY].type == 38)
			{
				canPlace = true;
			}
		}
		else if (inventory[selectedItem].createTile == 2 || inventory[selectedItem].createTile == 109)
		{
			if (Main.tile[tileTargetX, tileTargetY].nactive() && Main.tile[tileTargetX, tileTargetY].type == 0)
			{
				canPlace = true;
			}
		}
		else if (inventory[selectedItem].createTile == 23 || inventory[selectedItem].createTile == 199)
		{
			if (Main.tile[tileTargetX, tileTargetY].nactive())
			{
				if (Main.tile[tileTargetX, tileTargetY].type == 0)
				{
					canPlace = true;
				}
				else if (Main.tile[tileTargetX, tileTargetY].type == 59)
				{
					canPlace = true;
				}
			}
		}
		else if (inventory[selectedItem].createTile == 227)
		{
			canPlace = true;
		}
		else if (inventory[selectedItem].createTile >= 373 && inventory[selectedItem].createTile <= 375)
		{
			int num = tileTargetX;
			int num2 = tileTargetY - 1;
			if (Main.tile[num, num2].nactive() && Main.tileSolid[Main.tile[num, num2].type] && !Main.tileSolidTop[Main.tile[num, num2].type])
			{
				canPlace = true;
			}
		}
		else if (inventory[selectedItem].createTile == 461)
		{
			int num3 = tileTargetX;
			int num4 = tileTargetY - 1;
			if (Main.tile[num3, num4].nactive() && Main.tileSolid[Main.tile[num3, num4].type] && !Main.tileSolidTop[Main.tile[num3, num4].type])
			{
				canPlace = true;
			}
		}
		else if (inventory[selectedItem].createTile == 60 || inventory[selectedItem].createTile == 70 || inventory[selectedItem].createTile == 661 || inventory[selectedItem].createTile == 662)
		{
			if (Main.tile[tileTargetX, tileTargetY].nactive() && Main.tile[tileTargetX, tileTargetY].type == 59)
			{
				canPlace = true;
			}
		}
		else if (inventory[selectedItem].createTile == 4 || inventory[selectedItem].createTile == 136)
		{
			if (Main.tile[tileTargetX, tileTargetY].wall > 0)
			{
				canPlace = true;
			}
			else
			{
				if (!WorldGen.SolidTileNoAttach(tileTargetX, tileTargetY + 1) && !WorldGen.SolidTileNoAttach(tileTargetX - 1, tileTargetY) && !WorldGen.SolidTileNoAttach(tileTargetX + 1, tileTargetY))
				{
					if (!WorldGen.SolidTileNoAttach(tileTargetX, tileTargetY + 1) && (Main.tile[tileTargetX, tileTargetY + 1].halfBrick() || Main.tile[tileTargetX, tileTargetY + 1].slope() != 0))
					{
						if (!TileID.Sets.Platforms[Main.tile[tileTargetX, tileTargetY + 1].type])
						{
							WorldGen.SlopeTile(tileTargetX, tileTargetY + 1);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 14, tileTargetX, tileTargetY + 1);
							}
						}
					}
					else if (!WorldGen.SolidTileNoAttach(tileTargetX, tileTargetY + 1) && !WorldGen.SolidTileNoAttach(tileTargetX - 1, tileTargetY) && (Main.tile[tileTargetX - 1, tileTargetY].halfBrick() || Main.tile[tileTargetX - 1, tileTargetY].slope() != 0))
					{
						if (!TileID.Sets.Platforms[Main.tile[tileTargetX - 1, tileTargetY].type])
						{
							WorldGen.SlopeTile(tileTargetX - 1, tileTargetY);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 14, tileTargetX - 1, tileTargetY);
							}
						}
					}
					else if (!WorldGen.SolidTileNoAttach(tileTargetX, tileTargetY + 1) && !WorldGen.SolidTileNoAttach(tileTargetX + 1, tileTargetY) && (Main.tile[tileTargetX + 1, tileTargetY].halfBrick() || Main.tile[tileTargetX + 1, tileTargetY].slope() != 0) && !TileID.Sets.Platforms[Main.tile[tileTargetX + 1, tileTargetY].type])
					{
						WorldGen.SlopeTile(tileTargetX + 1, tileTargetY);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, null, 14, tileTargetX + 1, tileTargetY);
						}
					}
				}
				int num5 = Main.tile[tileTargetX, tileTargetY + 1].type;
				if (Main.tile[tileTargetX, tileTargetY].halfBrick())
				{
					num5 = -1;
				}
				int num6 = Main.tile[tileTargetX - 1, tileTargetY].type;
				int num7 = Main.tile[tileTargetX + 1, tileTargetY].type;
				int tree = Main.tile[tileTargetX - 1, tileTargetY - 1].type;
				int tree2 = Main.tile[tileTargetX + 1, tileTargetY - 1].type;
				int tree3 = Main.tile[tileTargetX - 1, tileTargetY - 1].type;
				int tree4 = Main.tile[tileTargetX + 1, tileTargetY + 1].type;
				if (!Main.tile[tileTargetX, tileTargetY + 1].nactive())
				{
					num5 = -1;
				}
				if (!Main.tile[tileTargetX - 1, tileTargetY].nactive())
				{
					num6 = -1;
				}
				if (!Main.tile[tileTargetX + 1, tileTargetY].nactive())
				{
					num7 = -1;
				}
				if (!Main.tile[tileTargetX - 1, tileTargetY - 1].nactive())
				{
					tree = -1;
				}
				if (!Main.tile[tileTargetX + 1, tileTargetY - 1].nactive())
				{
					tree2 = -1;
				}
				if (!Main.tile[tileTargetX - 1, tileTargetY + 1].nactive())
				{
					tree3 = -1;
				}
				if (!Main.tile[tileTargetX + 1, tileTargetY + 1].nactive())
				{
					tree4 = -1;
				}
				if (num5 >= 0 && Main.tileSolid[num5] && (!Main.tileNoAttach[num5] || (num5 >= 0 && TileID.Sets.Platforms[num5])))
				{
					canPlace = true;
				}
				else if ((num6 >= 0 && Main.tileSolid[num6] && !Main.tileNoAttach[num6]) || (WorldGen.IsTreeType(num6) && WorldGen.IsTreeType(tree) && WorldGen.IsTreeType(tree3)) || (num6 >= 0 && TileID.Sets.IsBeam[num6]))
				{
					canPlace = true;
				}
				else if ((num7 >= 0 && Main.tileSolid[num7] && !Main.tileNoAttach[num7]) || (WorldGen.IsTreeType(num7) && WorldGen.IsTreeType(tree2) && WorldGen.IsTreeType(tree4)) || (num7 >= 0 && TileID.Sets.IsBeam[num7]))
				{
					canPlace = true;
				}
			}
		}
		else if (inventory[selectedItem].createTile == 78 || inventory[selectedItem].createTile == 98 || inventory[selectedItem].createTile == 100 || inventory[selectedItem].createTile == 173 || inventory[selectedItem].createTile == 174 || inventory[selectedItem].createTile == 324)
		{
			if (Main.tile[tileTargetX, tileTargetY + 1].nactive() && (Main.tileSolid[Main.tile[tileTargetX, tileTargetY + 1].type] || Main.tileTable[Main.tile[tileTargetX, tileTargetY + 1].type]))
			{
				canPlace = true;
			}
		}
		else if (inventory[selectedItem].createTile == 419)
		{
			if (Main.tile[tileTargetX, tileTargetY + 1].active() && (Main.tile[tileTargetX, tileTargetY + 1].type == 419 || (inventory[selectedItem].placeStyle != 2 && Main.tile[tileTargetX, tileTargetY + 1].type == 420)))
			{
				canPlace = true;
			}
		}
		else if (inventory[selectedItem].createTile == 13 || inventory[selectedItem].createTile == 29 || inventory[selectedItem].createTile == 33 || inventory[selectedItem].createTile == 49 || inventory[selectedItem].createTile == 50 || inventory[selectedItem].createTile == 103)
		{
			if (Main.tile[tileTargetX, tileTargetY + 1].nactive() && Main.tileTable[Main.tile[tileTargetX, tileTargetY + 1].type])
			{
				canPlace = true;
			}
		}
		else if (inventory[selectedItem].createTile == 275 || inventory[selectedItem].createTile == 276 || inventory[selectedItem].createTile == 277)
		{
			canPlace = true;
		}
		else if (inventory[selectedItem].createTile == 51 || inventory[selectedItem].createTile == 330 || inventory[selectedItem].createTile == 331 || inventory[selectedItem].createTile == 332 || inventory[selectedItem].createTile == 333 || inventory[selectedItem].createTile == 336 || inventory[selectedItem].createTile == 340 || inventory[selectedItem].createTile == 342 || inventory[selectedItem].createTile == 341 || inventory[selectedItem].createTile == 343 || inventory[selectedItem].createTile == 344 || inventory[selectedItem].createTile == 379 || inventory[selectedItem].createTile == 351)
		{
			if (Main.tile[tileTargetX + 1, tileTargetY].active() || Main.tile[tileTargetX + 1, tileTargetY].wall > 0 || Main.tile[tileTargetX - 1, tileTargetY].active() || Main.tile[tileTargetX - 1, tileTargetY].wall > 0 || Main.tile[tileTargetX, tileTargetY + 1].active() || Main.tile[tileTargetX, tileTargetY + 1].wall > 0 || Main.tile[tileTargetX, tileTargetY - 1].active() || Main.tile[tileTargetX, tileTargetY - 1].wall > 0)
			{
				canPlace = true;
			}
		}
		else if (inventory[selectedItem].createTile == 314)
		{
			for (int i = tileTargetX - 1; i <= tileTargetX + 1; i++)
			{
				for (int j = tileTargetY - 1; j <= tileTargetY + 1; j++)
				{
					Tile tile = Main.tile[i, j];
					if (tile.active() || tile.wall > 0)
					{
						canPlace = true;
						break;
					}
				}
			}
		}
		else
		{
			Tile tile2 = Main.tile[tileTargetX - 1, tileTargetY];
			Tile tile3 = Main.tile[tileTargetX + 1, tileTargetY];
			Tile tile4 = Main.tile[tileTargetX, tileTargetY - 1];
			Tile tile5 = Main.tile[tileTargetX, tileTargetY + 1];
			if ((tile3.active() && (Main.tileSolid[tile3.type] || TileID.Sets.IsBeam[tile3.type] || Main.tileRope[tile3.type] || tile3.type == 314)) || tile3.wall > 0 || (tile2.active() && (Main.tileSolid[tile2.type] || TileID.Sets.IsBeam[tile2.type] || Main.tileRope[tile2.type] || tile2.type == 314)) || tile2.wall > 0 || (tile5.active() && (Main.tileSolid[tile5.type] || TileID.Sets.IsBeam[tile5.type] || Main.tileRope[tile5.type] || tile5.type == 314)) || tile5.wall > 0 || (tile4.active() && (Main.tileSolid[tile4.type] || TileID.Sets.IsBeam[tile4.type] || Main.tileRope[tile4.type] || tile4.type == 314)) || tile4.wall > 0)
			{
				canPlace = true;
			}
			else if (Main.tile[tileTargetX, tileTargetY].wall > 0)
			{
				canPlace = true;
			}
		}
		if (flag && Main.tile[tileTargetX, tileTargetY].active())
		{
			int num8 = tileTargetX;
			int num9 = tileTargetY;
			if (Main.tile[num8, num9].type == 3 || Main.tile[num8, num9].type == 73 || Main.tile[num8, num9].type == 84)
			{
				WorldGen.KillTile(tileTargetX, tileTargetY);
				if (!Main.tile[tileTargetX, tileTargetY].active() && Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 0, tileTargetX, tileTargetY);
				}
			}
			else if (Main.tile[num8, num9].type == 83)
			{
				bool flag2 = false;
				int num10 = Main.tile[num8, num9].frameX / 18;
				if (num10 == 0 && Main.dayTime)
				{
					flag2 = true;
				}
				if (num10 == 1 && !Main.dayTime)
				{
					flag2 = true;
				}
				if (num10 == 3 && !Main.dayTime && (Main.bloodMoon || Main.moonPhase == 0))
				{
					flag2 = true;
				}
				if (num10 == 4 && (Main.raining || Main.cloudAlpha > 0f))
				{
					flag2 = true;
				}
				if (num10 == 5 && !Main.raining && Main.dayTime && Main.time > 40500.0)
				{
					flag2 = true;
				}
				if (flag2)
				{
					WorldGen.KillTile(tileTargetX, tileTargetY);
					NetMessage.SendData(17, -1, -1, null, 0, tileTargetX, tileTargetY);
				}
			}
		}
		if (Main.tileAlch[inventory[selectedItem].createTile])
		{
			canPlace = true;
		}
		if (Main.tile[tileTargetX, tileTargetY].active() && (Main.tileCut[Main.tile[tileTargetX, tileTargetY].type] || TileID.Sets.BreakableWhenPlacing[Main.tile[tileTargetX, tileTargetY].type] || (Main.tile[tileTargetX, tileTargetY].type >= 373 && Main.tile[tileTargetX, tileTargetY].type <= 375) || Main.tile[tileTargetX, tileTargetY].type == 461))
		{
			if (Main.tile[tileTargetX, tileTargetY].type != inventory[selectedItem].createTile)
			{
				bool num11 = Main.tile[tileTargetX, tileTargetY + 1].type != 78 && Main.tile[tileTargetX, tileTargetY + 1].type != 380 && Main.tile[tileTargetX, tileTargetY + 1].type != 579;
				bool flag3 = Main.tile[tileTargetX, tileTargetY].type == 3 || Main.tile[tileTargetX, tileTargetY].type == 73;
				bool flag4 = Main.tileAlch[Main.tile[tileTargetX, tileTargetY].type] && WorldGen.IsHarvestableHerbWithSeed(Main.tile[tileTargetX, tileTargetY].type, Main.tile[tileTargetX, tileTargetY].frameX / 18);
				bool flag5 = Main.tileAlch[inventory[selectedItem].createTile];
				if (num11 || ((flag3 || flag4) && flag5))
				{
					WorldGen.KillTile(tileTargetX, tileTargetY);
					if (!Main.tile[tileTargetX, tileTargetY].active() && Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 0, tileTargetX, tileTargetY);
					}
				}
				else
				{
					canPlace = false;
				}
			}
			else
			{
				canPlace = false;
			}
		}
		if (!canPlace && inventory[selectedItem].createTile >= 0 && TileID.Sets.Platforms[inventory[selectedItem].createTile])
		{
			for (int k = tileTargetX - 1; k <= tileTargetX + 1; k++)
			{
				for (int l = tileTargetY - 1; l <= tileTargetY + 1; l++)
				{
					if (Main.tile[k, l].active())
					{
						canPlace = true;
						break;
					}
				}
			}
		}
		if (inventory[selectedItem].createTile == 3)
		{
			canPlace = WorldGen.IsFitToPlaceFlowerIn(tileTargetX, tileTargetY, 3);
			if (canPlace)
			{
				WorldGen.KillTile(tileTargetX, tileTargetY);
				if (Main.netMode == 1 && !Main.tile[tileTargetX, tileTargetY].active())
				{
					NetMessage.SendData(17, -1, -1, null, 0, tileTargetX, tileTargetY);
				}
			}
		}
		return canPlace;
	}

	private static void PlaceThing_Tiles_BlockPlacementForRepeatedPumpkins(ref bool canPlace, ref TileObject data)
	{
		if (data.type != 254)
		{
			return;
		}
		for (int i = -1; i < 1; i++)
		{
			for (int j = 0; j < 2; j++)
			{
				if (!WorldGen.CanCutTile(tileTargetX + j, tileTargetY + i, TileCuttingContext.TilePlacement))
				{
					canPlace = false;
				}
			}
		}
	}

	private static void PlaceThing_Tiles_BlockPlacementForRepeatedCoralAndBeachPiles(ref bool canPlace, ref TileObject data)
	{
		if (data.type == 81 || data.type == 324)
		{
			Tile tile = Main.tile[tileTargetX, tileTargetY];
			if (tile.active() && (Main.tileCut[tile.type] || TileID.Sets.BreakableWhenPlacing[tile.type] || (tile.type >= 373 && tile.type <= 375) || tile.type == 461))
			{
				canPlace = false;
			}
		}
	}

	private static void PlaceThing_Tiles_BlockPlacementForRepeatedPigronatas(ref bool canPlace, ref TileObject data)
	{
		if (data.type != 454)
		{
			return;
		}
		for (int i = -2; i < 2; i++)
		{
			Tile tile = Main.tile[tileTargetX + i, tileTargetY];
			if (tile.active() && tile.type == 454)
			{
				canPlace = false;
			}
		}
	}

	private static void PlaceThing_Tiles_BlockPlacementIfOverPlayers(ref bool canPlace, ref TileObject data)
	{
		int num = 0;
		int num2 = 0;
		int x = 0;
		int y = 0;
		switch (data.type)
		{
		case 138:
		case 664:
			num = 32;
			num2 = 32;
			x = data.xCoord * 16;
			y = data.yCoord * 16;
			break;
		case 484:
			num = 32;
			num2 = 32;
			x = data.xCoord * 16;
			y = data.yCoord * 16;
			break;
		case 235:
			num = 48;
			num2 = 16;
			x = data.xCoord * 16;
			y = data.yCoord * 16;
			break;
		case 476:
			num = 16;
			num2 = 16;
			x = data.xCoord * 16;
			y = data.yCoord * 16;
			break;
		case 387:
			num = 32;
			num2 = 16;
			x = data.xCoord * 16;
			y = data.yCoord * 16;
			break;
		}
		if (num == 0 || num2 == 0)
		{
			return;
		}
		Rectangle value = new Rectangle(x, y, num, num2);
		for (int i = 0; i < 255; i++)
		{
			Player player = Main.player[i];
			if (player.active && !player.dead && !player.ghost && player.Hitbox.Intersects(value))
			{
				canPlace = false;
				break;
			}
		}
	}

	private bool PlaceThing_Tiles_CheckLavaBlocking()
	{
		bool result = false;
		if (Main.tile[tileTargetX, tileTargetY].liquid > 0 && Main.tile[tileTargetX, tileTargetY].lava())
		{
			if (Main.tileSolid[inventory[selectedItem].createTile])
			{
				result = true;
			}
			else if (!TileObjectData.CheckLiquidPlacement(inventory[selectedItem].createTile, inventory[selectedItem].placeStyle, Main.tile[tileTargetX, tileTargetY]))
			{
				result = true;
			}
		}
		return result;
	}

	private bool PlaceThing_Tiles_CheckRopeUsability(bool canUse)
	{
		if (Main.tileRope[inventory[selectedItem].createTile] && canUse && Main.tile[tileTargetX, tileTargetY].active() && Main.tileRope[Main.tile[tileTargetX, tileTargetY].type])
		{
			int num = tileTargetY;
			int num2 = tileTargetX;
			bool flag = inventory[selectedItem].createTile == 214;
			while (Main.tile[num2, num].active() && (Main.tileRope[Main.tile[num2, num].type] || Main.tile[num2, num].type == 314 || TileID.Sets.Platforms[Main.tile[num2, num].type]) && num < Main.maxTilesY - 5 && Main.tile[num2, num + 2] != null && (flag || !Main.tile[num2, num + 1].lava()))
			{
				num++;
				if (Main.tile[num2, num] == null)
				{
					canUse = false;
					num = tileTargetY;
					break;
				}
			}
			if (!Main.tile[num2, num].active())
			{
				tileTargetY = num;
			}
		}
		return canUse;
	}

	private bool PlaceThing_Tiles_CheckFlexibleWand(bool canUse)
	{
		FlexibleTileWand.PlacementOption option;
		Item itemToConsume;
		return inventory[selectedItem].GetFlexibleTileWand()?.TryGetPlacementOption(this, FlexibleWandRandomSeed, FlexibleWandCycleOffset, out option, out itemToConsume) ?? canUse;
	}

	private bool PlaceThing_Tiles_CheckWandUsability(bool canUse)
	{
		if (inventory[selectedItem].tileWand > 0)
		{
			int tileWand = inventory[selectedItem].tileWand;
			canUse = false;
			for (int i = 0; i < 58; i++)
			{
				if (tileWand == inventory[i].type && inventory[i].stack > 0)
				{
					canUse = true;
					break;
				}
			}
		}
		return canUse;
	}

	private bool PlaceThing_Tiles_CheckGamepadTorchUsability(bool canUse)
	{
		if (PlayerInput.UsingGamepad && inventory[selectedItem].createTile == 4 && Main.SmartCursorIsUsed && !Main.SmartCursorShowing)
		{
			canUse = false;
		}
		return canUse;
	}

	private void PlaceThing_LockChest()
	{
		Tile tile = Main.tile[tileTargetX, tileTargetY];
		Item item = inventory[selectedItem];
		if (!tile.active() || item.type != 5328 || !TileID.Sets.IsAContainer[tile.type] || !(position.X / 16f - (float)tileRangeX - (float)item.tileBoost - (float)blockRange <= (float)tileTargetX) || !((position.X + (float)width) / 16f + (float)tileRangeX + (float)item.tileBoost - 1f + (float)blockRange >= (float)tileTargetX) || !(position.Y / 16f - (float)tileRangeY - (float)item.tileBoost - (float)blockRange <= (float)tileTargetY) || !((position.Y + (float)height) / 16f + (float)tileRangeY + (float)item.tileBoost - 2f + (float)blockRange >= (float)tileTargetY) || !ItemTimeIsZero || itemAnimation <= 0 || !controlUseItem)
		{
			return;
		}
		Tile tileSafely = Framing.GetTileSafely(tileTargetX, tileTargetY);
		int type = tileSafely.type;
		int num = tileSafely.frameX / 36;
		switch (type)
		{
		case 21:
			switch (num)
			{
			default:
				return;
			case 1:
			case 3:
			case 18:
			case 19:
			case 20:
			case 21:
			case 22:
			case 35:
			case 37:
			case 39:
				break;
			}
			break;
		case 467:
			if (num != 12)
			{
				return;
			}
			break;
		}
		if (inventory[selectedItem].stack <= 0)
		{
			return;
		}
		int num2;
		for (num2 = Main.tile[tileTargetX, tileTargetY].frameX / 18; num2 > 1; num2 -= 2)
		{
		}
		num2 = tileTargetX - num2;
		int num3 = tileTargetY - Main.tile[tileTargetX, tileTargetY].frameY / 18;
		if (Chest.Lock(num2, num3))
		{
			inventory[selectedItem].stack--;
			if (inventory[selectedItem].stack <= 0)
			{
				inventory[selectedItem] = new Item();
			}
			if (Main.netMode == 1)
			{
				NetMessage.SendData(52, -1, -1, null, whoAmI, 3f, num2, num3);
			}
		}
	}

	private void PlaceThing_ItemInExtractinator(ref ItemCheckContext context)
	{
		Tile tile = Main.tile[tileTargetX, tileTargetY];
		Item item = inventory[selectedItem];
		if (!tile.active() || !(position.X / 16f - (float)tileRangeX - (float)item.tileBoost - (float)blockRange <= (float)tileTargetX) || !((position.X + (float)width) / 16f + (float)tileRangeX + (float)item.tileBoost - 1f + (float)blockRange >= (float)tileTargetX) || !(position.Y / 16f - (float)tileRangeY - (float)item.tileBoost - (float)blockRange <= (float)tileTargetY) || !((position.Y + (float)height) / 16f + (float)tileRangeY + (float)item.tileBoost - 2f + (float)blockRange >= (float)tileTargetY) || !ItemTimeIsZero || itemAnimation <= 0 || !controlUseItem)
		{
			return;
		}
		float num = 1f;
		if (tile.type == 642)
		{
			num *= 0.33f;
		}
		ItemTrader itemTrader = TryGettingItemTraderFromBlock(tile);
		if (itemTrader != null && itemTrader.TryGetTradeOption(item, out var option))
		{
			SoundEngine.PlaySound(7);
			ApplyItemTime(item, num);
			context.SkipItemConsumption = true;
			item.stack -= option.TakingItemStack;
			if (item.stack <= 0)
			{
				item.TurnToAir();
			}
			DropItemFromExtractinator(option.GivingITemType, option.GivingItemStack);
		}
		else if (ItemID.Sets.ExtractinatorMode[item.type] >= 0 && (tile.type == 219 || tile.type == 642))
		{
			ApplyItemTime(item, num);
			SoundEngine.PlaySound(7);
			int extractType = ItemID.Sets.ExtractinatorMode[item.type];
			ExtractinatorUse(extractType, tile.type);
		}
	}

	private static ItemTrader TryGettingItemTraderFromBlock(Tile targetBlock)
	{
		ItemTrader result = null;
		if (targetBlock.type == 642)
		{
			result = ItemTrader.ChlorophyteExtractinator;
		}
		return result;
	}

	private void PlaceThing_XMasTreeTops()
	{
		if (inventory[selectedItem].type < 1874 || inventory[selectedItem].type > 1905 || !Main.tile[tileTargetX, tileTargetY].active() || Main.tile[tileTargetX, tileTargetY].type != 171 || !(position.X / 16f - (float)tileRangeX - (float)inventory[selectedItem].tileBoost - (float)blockRange <= (float)tileTargetX) || !((position.X + (float)width) / 16f + (float)tileRangeX + (float)inventory[selectedItem].tileBoost - 1f + (float)blockRange >= (float)tileTargetX) || !(position.Y / 16f - (float)tileRangeY - (float)inventory[selectedItem].tileBoost - (float)blockRange <= (float)tileTargetY) || !((position.Y + (float)height) / 16f + (float)tileRangeY + (float)inventory[selectedItem].tileBoost - 2f + (float)blockRange >= (float)tileTargetY) || !ItemTimeIsZero || itemAnimation <= 0 || !controlUseItem)
		{
			return;
		}
		int type = inventory[selectedItem].type;
		if (type >= 1874 && type <= 1877)
		{
			type -= 1873;
			if (WorldGen.checkXmasTreeDrop(tileTargetX, tileTargetY, 0) != type)
			{
				ApplyItemTime(inventory[selectedItem]);
				WorldGen.dropXmasTree(tileTargetX, tileTargetY, 0);
				WorldGen.setXmasTree(tileTargetX, tileTargetY, 0, type);
				int num = tileTargetX;
				int num2 = tileTargetY;
				if (Main.tile[tileTargetX, tileTargetY].frameX < 10)
				{
					num -= Main.tile[tileTargetX, tileTargetY].frameX;
					num2 -= Main.tile[tileTargetX, tileTargetY].frameY;
				}
				NetMessage.SendTileSquare(-1, num, num2);
			}
		}
		else if (type >= 1878 && type <= 1883)
		{
			type -= 1877;
			if (WorldGen.checkXmasTreeDrop(tileTargetX, tileTargetY, 1) != type)
			{
				ApplyItemTime(inventory[selectedItem]);
				WorldGen.dropXmasTree(tileTargetX, tileTargetY, 1);
				WorldGen.setXmasTree(tileTargetX, tileTargetY, 1, type);
				int num3 = tileTargetX;
				int num4 = tileTargetY;
				if (Main.tile[tileTargetX, tileTargetY].frameX < 10)
				{
					num3 -= Main.tile[tileTargetX, tileTargetY].frameX;
					num4 -= Main.tile[tileTargetX, tileTargetY].frameY;
				}
				NetMessage.SendTileSquare(-1, num3, num4);
			}
		}
		else if (type >= 1884 && type <= 1894)
		{
			type -= 1883;
			if (WorldGen.checkXmasTreeDrop(tileTargetX, tileTargetY, 2) != type)
			{
				ApplyItemTime(inventory[selectedItem]);
				WorldGen.dropXmasTree(tileTargetX, tileTargetY, 2);
				WorldGen.setXmasTree(tileTargetX, tileTargetY, 2, type);
				int num5 = tileTargetX;
				int num6 = tileTargetY;
				if (Main.tile[tileTargetX, tileTargetY].frameX < 10)
				{
					num5 -= Main.tile[tileTargetX, tileTargetY].frameX;
					num6 -= Main.tile[tileTargetX, tileTargetY].frameY;
				}
				NetMessage.SendTileSquare(-1, num5, num6);
			}
		}
		else
		{
			if (type < 1895 || type > 1905)
			{
				return;
			}
			type -= 1894;
			if (WorldGen.checkXmasTreeDrop(tileTargetX, tileTargetY, 3) != type)
			{
				ApplyItemTime(inventory[selectedItem]);
				WorldGen.dropXmasTree(tileTargetX, tileTargetY, 3);
				WorldGen.setXmasTree(tileTargetX, tileTargetY, 3, type);
				int num7 = tileTargetX;
				int num8 = tileTargetY;
				if (Main.tile[tileTargetX, tileTargetY].frameX < 10)
				{
					num7 -= Main.tile[tileTargetX, tileTargetY].frameX;
					num8 -= Main.tile[tileTargetX, tileTargetY].frameY;
				}
				NetMessage.SendTileSquare(-1, num7, num8);
			}
		}
	}

	private void PlaceThing_CannonBall()
	{
		if ((inventory[selectedItem].type == 929 || inventory[selectedItem].type == 1338 || inventory[selectedItem].type == 1345) && position.X / 16f - (float)tileRangeX - (float)inventory[selectedItem].tileBoost - (float)blockRange <= (float)tileTargetX && (position.X + (float)width) / 16f + (float)tileRangeX + (float)inventory[selectedItem].tileBoost - 1f + (float)blockRange >= (float)tileTargetX && position.Y / 16f - (float)tileRangeY - (float)inventory[selectedItem].tileBoost - (float)blockRange <= (float)tileTargetY && (position.Y + (float)height) / 16f + (float)tileRangeY + (float)inventory[selectedItem].tileBoost - 2f + (float)blockRange >= (float)tileTargetY)
		{
			int num = tileTargetX;
			int num2 = tileTargetY;
			if (Main.tile[num, num2].active() && Main.tile[num, num2].type == 209)
			{
				ShootFromCannon(num, num2);
			}
		}
	}

	private void PlaceThing_PaintScrapper()
	{
		if (ItemID.Sets.IsPaintScraper[inventory[selectedItem].type] && position.X / 16f - (float)tileRangeX - (float)inventory[selectedItem].tileBoost - (float)blockRange <= (float)tileTargetX && (position.X + (float)width) / 16f + (float)tileRangeX + (float)inventory[selectedItem].tileBoost - 1f + (float)blockRange >= (float)tileTargetX && position.Y / 16f - (float)tileRangeY - (float)inventory[selectedItem].tileBoost - (float)blockRange <= (float)tileTargetY && (position.Y + (float)height) / 16f + (float)tileRangeY + (float)inventory[selectedItem].tileBoost - 2f + (float)blockRange >= (float)tileTargetY)
		{
			int num = tileTargetX;
			int num2 = tileTargetY;
			if (Main.tile[num, num2] != null)
			{
				PlaceThing_PaintScrapper_TryScrapping(num, num2);
				PlaceThing_PaintScrapper_LongMoss(num, num2);
			}
		}
	}

	private void PlaceThing_PaintScrapper_LongMoss(int x, int y)
	{
		if (Main.tile[x, y].type != 184)
		{
			return;
		}
		cursorItemIconEnabled = true;
		if (!ItemTimeIsZero || itemAnimation <= 0 || !controlUseItem)
		{
			return;
		}
		_ = Main.tile[x, y].type;
		int frameX = Main.tile[x, y].frameX;
		WorldGen.KillTile(x, y);
		if (Main.tile[x, y].active())
		{
			return;
		}
		ApplyItemTime(inventory[selectedItem]);
		if (Main.netMode == 1)
		{
			NetMessage.SendData(17, -1, -1, null, 0, x, y);
		}
		if (Main.rand.Next(9) == 0)
		{
			int type = 4349 + frameX / 22;
			switch (frameX / 22)
			{
			case 6:
				type = 4377;
				break;
			case 7:
				type = 4378;
				break;
			case 8:
				type = 4389;
				break;
			case 9:
				type = 5127;
				break;
			case 10:
				type = 5128;
				break;
			}
			int number = Item.NewItem(new EntitySource_ItemUse(this, HeldItem), x * 16, y * 16, 16, 16, type);
			NetMessage.SendData(21, -1, -1, null, number, 1f);
		}
	}

	private void PlaceThing_PaintScrapper_TryScrapping(int x, int y)
	{
		Tile tile = Main.tile[x, y];
		if ((0u | ((tile.wall > 0 && (tile.wallColor() > 0 || tile.invisibleWall() || tile.fullbrightWall())) ? 1u : 0u) | ((tile.active() && (tile.color() > 0 || tile.invisibleBlock() || tile.fullbrightBlock())) ? 1u : 0u)) == 0)
		{
			return;
		}
		cursorItemIconEnabled = true;
		if (ItemTimeIsZero && itemAnimation > 0 && controlUseItem)
		{
			if (WorldGen.paintTile(x, y, 0, broadCast: true) || WorldGen.paintCoatTile(x, y, 0, broadcast: true))
			{
				ApplyItemTime(inventory[selectedItem], tileSpeed);
			}
			else if (WorldGen.paintWall(x, y, 0, broadCast: true) || WorldGen.paintCoatWall(x, y, 0, broadcast: true))
			{
				ApplyItemTime(inventory[selectedItem], wallSpeed);
			}
		}
	}

	private void PlaceThing_PaintRoller()
	{
		if ((inventory[selectedItem].type != 1072 && inventory[selectedItem].type != 1544) || !(position.X / 16f - (float)tileRangeX - (float)inventory[selectedItem].tileBoost - (float)blockRange <= (float)tileTargetX) || !((position.X + (float)width) / 16f + (float)tileRangeX + (float)inventory[selectedItem].tileBoost - 1f + (float)blockRange >= (float)tileTargetX) || !(position.Y / 16f - (float)tileRangeY - (float)inventory[selectedItem].tileBoost - (float)blockRange <= (float)tileTargetY) || !((position.Y + (float)height) / 16f + (float)tileRangeY + (float)inventory[selectedItem].tileBoost - 2f + (float)blockRange >= (float)tileTargetY))
		{
			return;
		}
		int num = tileTargetX;
		int num2 = tileTargetY;
		if (Main.tile[num, num2] != null && Main.tile[num, num2].wall > 0)
		{
			cursorItemIconEnabled = true;
			if (ItemTimeIsZero && itemAnimation > 0 && controlUseItem)
			{
				TryPainting(num, num2, paintingAWall: true);
			}
		}
	}

	private void PlaceThing_Paintbrush()
	{
		if ((inventory[selectedItem].type != 1071 && inventory[selectedItem].type != 1543) || !(position.X / 16f - (float)tileRangeX - (float)inventory[selectedItem].tileBoost - (float)blockRange <= (float)tileTargetX) || !((position.X + (float)width) / 16f + (float)tileRangeX + (float)inventory[selectedItem].tileBoost - 1f + (float)blockRange >= (float)tileTargetX) || !(position.Y / 16f - (float)tileRangeY - (float)inventory[selectedItem].tileBoost - (float)blockRange <= (float)tileTargetY) || !((position.Y + (float)height) / 16f + (float)tileRangeY + (float)inventory[selectedItem].tileBoost - 2f + (float)blockRange >= (float)tileTargetY))
		{
			return;
		}
		int num = tileTargetX;
		int num2 = tileTargetY;
		if (Main.tile[num, num2] != null && Main.tile[num, num2].active())
		{
			cursorItemIconEnabled = true;
			if (ItemTimeIsZero && itemAnimation > 0 && controlUseItem)
			{
				TryPainting(num, num2);
			}
		}
	}

	public Item FindPaintOrCoating()
	{
		for (int i = 54; i < 58; i++)
		{
			if (inventory[i].stack > 0 && inventory[i].PaintOrCoating)
			{
				return inventory[i];
			}
		}
		for (int j = 0; j < 58; j++)
		{
			if (inventory[j].stack > 0 && inventory[j].PaintOrCoating)
			{
				return inventory[j];
			}
		}
		return null;
	}

	private void TryPainting(int x, int y, bool paintingAWall = false, bool applyItemAnimation = true)
	{
		Item item = FindPaintOrCoating();
		if (item != null)
		{
			if (item.paintCoating != 0)
			{
				ApplyCoating(x, y, paintingAWall, applyItemAnimation, item);
			}
			if (item.paint != 0)
			{
				ApplyPaint(x, y, paintingAWall, applyItemAnimation, item);
			}
		}
	}

	private void ApplyCoating(int x, int y, bool paintingAWall, bool applyItemAnimation, Item targetItem)
	{
		byte paintCoating = targetItem.paintCoating;
		if (paintingAWall)
		{
			if (WorldGen.paintCoatWall(x, y, paintCoating, broadcast: true))
			{
				targetItem.stack--;
				if (targetItem.stack <= 0)
				{
					targetItem.SetDefaults();
				}
				if (applyItemAnimation)
				{
					ApplyItemTime(inventory[selectedItem], wallSpeed);
				}
			}
		}
		else if (WorldGen.paintCoatTile(x, y, paintCoating, broadcast: true))
		{
			targetItem.stack--;
			if (targetItem.stack <= 0)
			{
				targetItem.SetDefaults();
			}
			if (applyItemAnimation)
			{
				ApplyItemTime(inventory[selectedItem], tileSpeed);
			}
		}
	}

	private void ApplyPaint(int x, int y, bool paintingAWall, bool applyItemAnimation, Item targetItem)
	{
		byte paint = targetItem.paint;
		if (paintingAWall)
		{
			if (Main.tile[x, y].wallColor() != paint && WorldGen.paintWall(x, y, paint, broadCast: true))
			{
				targetItem.stack--;
				if (targetItem.stack <= 0)
				{
					targetItem.SetDefaults();
				}
				if (applyItemAnimation)
				{
					ApplyItemTime(inventory[selectedItem], wallSpeed);
				}
			}
		}
		else if (Main.tile[x, y].color() != paint && WorldGen.paintTile(x, y, paint, broadCast: true))
		{
			targetItem.stack--;
			if (targetItem.stack <= 0)
			{
				targetItem.SetDefaults();
			}
			if (applyItemAnimation)
			{
				ApplyItemTime(inventory[selectedItem], tileSpeed);
			}
		}
	}

	private void ShootFromCannon(int x, int y)
	{
		int num = 0;
		int num2 = Main.tile[x, y].frameX / 72;
		int type = inventory[selectedItem].type;
		if (num2 == 0 && type == 929)
		{
			num = 1;
		}
		else if (num2 == 1 && type == 1338)
		{
			num = 2;
		}
		else if (num2 == 2 && type == 1345)
		{
			num = 3;
		}
		if (num <= 0 || (num == 2 && !WorldGen.BunnyCannonCanFire()))
		{
			return;
		}
		cursorItemIconEnabled = true;
		if (ItemTimeIsZero && itemAnimation > 0 && controlUseItem)
		{
			int num3 = Main.tile[x, y].frameX / 18;
			int num4 = 0;
			int num5 = 0;
			while (num3 >= 4)
			{
				num4++;
				num3 -= 4;
			}
			num3 = x - num3;
			int num6;
			for (num6 = Main.tile[x, y].frameY / 18; num6 >= 3; num6 -= 3)
			{
				num5++;
			}
			num6 = y - num6;
			ApplyItemTime(inventory[selectedItem]);
			WorldGen.ShootFromCannon(num3, num6, num5, num, inventory[selectedItem].damage, 8f, Main.myPlayer, fromWire: false);
		}
	}

	private void ExtractinatorUse(int extractType, int extractinatorBlockType)
	{
		int num = 5000;
		int num2 = 25;
		int num3 = 50;
		int num4 = -1;
		int num5 = -1;
		int num6 = -1;
		int num7 = 1;
		switch (extractType)
		{
		case 1:
			num /= 3;
			num2 *= 2;
			num3 = 20;
			num4 = 10;
			break;
		case 2:
			num = -1;
			num2 = -1;
			num3 = -1;
			num4 = -1;
			num5 = 1;
			num7 = -1;
			break;
		case 3:
			num = -1;
			num2 = -1;
			num3 = -1;
			num4 = -1;
			num5 = -1;
			num7 = -1;
			num6 = 1;
			break;
		}
		int num8 = -1;
		int num9 = 1;
		if (num4 != -1 && Main.rand.Next(num4) == 0)
		{
			num8 = 3380;
			if (Main.rand.Next(5) == 0)
			{
				num9 += Main.rand.Next(2);
			}
			if (Main.rand.Next(10) == 0)
			{
				num9 += Main.rand.Next(3);
			}
			if (Main.rand.Next(15) == 0)
			{
				num9 += Main.rand.Next(4);
			}
		}
		else if (num7 != -1 && Main.rand.Next(2) == 0)
		{
			if (Main.rand.Next(12000) == 0)
			{
				num8 = 74;
				if (Main.rand.Next(14) == 0)
				{
					num9 += Main.rand.Next(0, 2);
				}
				if (Main.rand.Next(14) == 0)
				{
					num9 += Main.rand.Next(0, 2);
				}
				if (Main.rand.Next(14) == 0)
				{
					num9 += Main.rand.Next(0, 2);
				}
			}
			else if (Main.rand.Next(800) == 0)
			{
				num8 = 73;
				if (Main.rand.Next(6) == 0)
				{
					num9 += Main.rand.Next(1, 21);
				}
				if (Main.rand.Next(6) == 0)
				{
					num9 += Main.rand.Next(1, 21);
				}
				if (Main.rand.Next(6) == 0)
				{
					num9 += Main.rand.Next(1, 21);
				}
				if (Main.rand.Next(6) == 0)
				{
					num9 += Main.rand.Next(1, 21);
				}
				if (Main.rand.Next(6) == 0)
				{
					num9 += Main.rand.Next(1, 20);
				}
			}
			else if (Main.rand.Next(60) == 0)
			{
				num8 = 72;
				if (Main.rand.Next(4) == 0)
				{
					num9 += Main.rand.Next(5, 26);
				}
				if (Main.rand.Next(4) == 0)
				{
					num9 += Main.rand.Next(5, 26);
				}
				if (Main.rand.Next(4) == 0)
				{
					num9 += Main.rand.Next(5, 26);
				}
				if (Main.rand.Next(4) == 0)
				{
					num9 += Main.rand.Next(5, 25);
				}
			}
			else
			{
				num8 = 71;
				if (Main.rand.Next(3) == 0)
				{
					num9 += Main.rand.Next(10, 26);
				}
				if (Main.rand.Next(3) == 0)
				{
					num9 += Main.rand.Next(10, 26);
				}
				if (Main.rand.Next(3) == 0)
				{
					num9 += Main.rand.Next(10, 26);
				}
				if (Main.rand.Next(3) == 0)
				{
					num9 += Main.rand.Next(10, 25);
				}
			}
		}
		else if (num != -1 && Main.rand.Next(num) == 0)
		{
			num8 = 1242;
		}
		else if (num5 != -1)
		{
			num8 = ((Main.rand.Next(4) != 1) ? 2674 : ((Main.rand.Next(3) != 1) ? 2006 : ((Main.rand.Next(3) == 1) ? 2675 : 2002)));
		}
		else if (num6 != -1 && extractinatorBlockType == 642)
		{
			num8 = ((Main.rand.Next(10) == 1) ? (Main.rand.Next(5) switch
			{
				0 => 4354, 
				1 => 4389, 
				2 => 4377, 
				3 => 5127, 
				_ => 4378, 
			}) : (Main.rand.Next(5) switch
			{
				0 => 4349, 
				1 => 4350, 
				2 => 4351, 
				3 => 4352, 
				_ => 4353, 
			}));
		}
		else if (num6 != -1)
		{
			num8 = Main.rand.Next(5) switch
			{
				0 => 4349, 
				1 => 4350, 
				2 => 4351, 
				3 => 4352, 
				_ => 4353, 
			};
		}
		else if (num2 != -1 && Main.rand.Next(num2) == 0)
		{
			num8 = Main.rand.Next(6) switch
			{
				0 => 181, 
				1 => 180, 
				2 => 177, 
				3 => 179, 
				4 => 178, 
				_ => 182, 
			};
			if (Main.rand.Next(20) == 0)
			{
				num9 += Main.rand.Next(0, 2);
			}
			if (Main.rand.Next(30) == 0)
			{
				num9 += Main.rand.Next(0, 3);
			}
			if (Main.rand.Next(40) == 0)
			{
				num9 += Main.rand.Next(0, 4);
			}
			if (Main.rand.Next(50) == 0)
			{
				num9 += Main.rand.Next(0, 5);
			}
			if (Main.rand.Next(60) == 0)
			{
				num9 += Main.rand.Next(0, 6);
			}
		}
		else if (num3 != -1 && Main.rand.Next(num3) == 0)
		{
			num8 = 999;
			if (Main.rand.Next(20) == 0)
			{
				num9 += Main.rand.Next(0, 2);
			}
			if (Main.rand.Next(30) == 0)
			{
				num9 += Main.rand.Next(0, 3);
			}
			if (Main.rand.Next(40) == 0)
			{
				num9 += Main.rand.Next(0, 4);
			}
			if (Main.rand.Next(50) == 0)
			{
				num9 += Main.rand.Next(0, 5);
			}
			if (Main.rand.Next(60) == 0)
			{
				num9 += Main.rand.Next(0, 6);
			}
		}
		else if (Main.rand.Next(3) == 0)
		{
			if (Main.rand.Next(5000) == 0)
			{
				num8 = 74;
				if (Main.rand.Next(10) == 0)
				{
					num9 += Main.rand.Next(0, 3);
				}
				if (Main.rand.Next(10) == 0)
				{
					num9 += Main.rand.Next(0, 3);
				}
				if (Main.rand.Next(10) == 0)
				{
					num9 += Main.rand.Next(0, 3);
				}
				if (Main.rand.Next(10) == 0)
				{
					num9 += Main.rand.Next(0, 3);
				}
				if (Main.rand.Next(10) == 0)
				{
					num9 += Main.rand.Next(0, 3);
				}
			}
			else if (Main.rand.Next(400) == 0)
			{
				num8 = 73;
				if (Main.rand.Next(5) == 0)
				{
					num9 += Main.rand.Next(1, 21);
				}
				if (Main.rand.Next(5) == 0)
				{
					num9 += Main.rand.Next(1, 21);
				}
				if (Main.rand.Next(5) == 0)
				{
					num9 += Main.rand.Next(1, 21);
				}
				if (Main.rand.Next(5) == 0)
				{
					num9 += Main.rand.Next(1, 21);
				}
				if (Main.rand.Next(5) == 0)
				{
					num9 += Main.rand.Next(1, 20);
				}
			}
			else if (Main.rand.Next(30) == 0)
			{
				num8 = 72;
				if (Main.rand.Next(3) == 0)
				{
					num9 += Main.rand.Next(5, 26);
				}
				if (Main.rand.Next(3) == 0)
				{
					num9 += Main.rand.Next(5, 26);
				}
				if (Main.rand.Next(3) == 0)
				{
					num9 += Main.rand.Next(5, 26);
				}
				if (Main.rand.Next(3) == 0)
				{
					num9 += Main.rand.Next(5, 25);
				}
			}
			else
			{
				num8 = 71;
				if (Main.rand.Next(2) == 0)
				{
					num9 += Main.rand.Next(10, 26);
				}
				if (Main.rand.Next(2) == 0)
				{
					num9 += Main.rand.Next(10, 26);
				}
				if (Main.rand.Next(2) == 0)
				{
					num9 += Main.rand.Next(10, 26);
				}
				if (Main.rand.Next(2) == 0)
				{
					num9 += Main.rand.Next(10, 25);
				}
			}
		}
		else if (extractinatorBlockType == 642)
		{
			num8 = Main.rand.Next(14) switch
			{
				0 => 12, 
				1 => 11, 
				2 => 14, 
				3 => 13, 
				4 => 699, 
				5 => 700, 
				6 => 701, 
				7 => 702, 
				8 => 364, 
				9 => 1104, 
				10 => 365, 
				11 => 1105, 
				12 => 366, 
				_ => 1106, 
			};
			if (Main.rand.Next(20) == 0)
			{
				num9 += Main.rand.Next(0, 2);
			}
			if (Main.rand.Next(30) == 0)
			{
				num9 += Main.rand.Next(0, 3);
			}
			if (Main.rand.Next(40) == 0)
			{
				num9 += Main.rand.Next(0, 4);
			}
			if (Main.rand.Next(50) == 0)
			{
				num9 += Main.rand.Next(0, 5);
			}
			if (Main.rand.Next(60) == 0)
			{
				num9 += Main.rand.Next(0, 6);
			}
		}
		else
		{
			num8 = Main.rand.Next(8) switch
			{
				0 => 12, 
				1 => 11, 
				2 => 14, 
				3 => 13, 
				4 => 699, 
				5 => 700, 
				6 => 701, 
				_ => 702, 
			};
			if (Main.rand.Next(20) == 0)
			{
				num9 += Main.rand.Next(0, 2);
			}
			if (Main.rand.Next(30) == 0)
			{
				num9 += Main.rand.Next(0, 3);
			}
			if (Main.rand.Next(40) == 0)
			{
				num9 += Main.rand.Next(0, 4);
			}
			if (Main.rand.Next(50) == 0)
			{
				num9 += Main.rand.Next(0, 5);
			}
			if (Main.rand.Next(60) == 0)
			{
				num9 += Main.rand.Next(0, 6);
			}
		}
		if (num8 > 0)
		{
			DropItemFromExtractinator(num8, num9);
		}
	}

	private void DropItemFromExtractinator(int itemType, int stack)
	{
		Vector2 vector = Main.ReverseGravitySupport(Main.MouseScreen) + Main.screenPosition;
		if (Main.SmartCursorIsUsed || PlayerInput.UsingGamepad)
		{
			vector = base.Center;
		}
		int number = Item.NewItem(GetItemSource_TileInteraction(tileTargetX, tileTargetY), (int)vector.X, (int)vector.Y, 1, 1, itemType, stack, noBroadcast: false, -1);
		if (Main.netMode == 1)
		{
			NetMessage.SendData(21, -1, -1, null, number, 1f);
		}
	}

	public void ChangeDir(int dir)
	{
		if (!pulley || pulleyDir != 2)
		{
			direction = dir;
		}
		else
		{
			if (pulleyDir == 2 && dir == direction)
			{
				return;
			}
			int num = (int)(position.X + (float)(width / 2)) / 16 * 16 + 8 - width / 2;
			if (!Collision.SolidCollision(new Vector2(num, position.Y), width, height))
			{
				if (whoAmI == Main.myPlayer)
				{
					Main.cameraX = Main.cameraX + position.X - (float)num;
				}
				pulleyDir = 1;
				position.X = num;
				direction = dir;
			}
		}
	}

	public Rectangle getRect()
	{
		return new Rectangle((int)position.X, (int)position.Y, width, height);
	}

	public void HorsemansBlade_SpawnPumpkin(int npcIndex, int dmg, float kb)
	{
		Vector2 center = Main.npc[npcIndex].Center;
		int logicCheckScreenHeight = Main.LogicCheckScreenHeight;
		int logicCheckScreenWidth = Main.LogicCheckScreenWidth;
		int num = Main.rand.Next(100, 300);
		int num2 = Main.rand.Next(100, 300);
		num = ((Main.rand.Next(2) != 0) ? (num + (logicCheckScreenWidth / 2 - num)) : (num - (logicCheckScreenWidth / 2 + num)));
		num2 = ((Main.rand.Next(2) != 0) ? (num2 + (logicCheckScreenHeight / 2 - num2)) : (num2 - (logicCheckScreenHeight / 2 + num2)));
		num += (int)position.X;
		num2 += (int)position.Y;
		Vector2 vector = new Vector2(num, num2);
		float num3 = center.X - vector.X;
		float num4 = center.Y - vector.Y;
		float num5 = (float)Math.Sqrt(num3 * num3 + num4 * num4);
		num5 = 8f / num5;
		num3 *= num5;
		num4 *= num5;
		Projectile.NewProjectile(GetProjectileSource_Item(HeldItem), num, num2, num3, num4, 321, dmg, kb, whoAmI, npcIndex);
	}

	public void PutItemInInventoryFromItemUsage(int type, int theSelectedItem = -1)
	{
		for (int i = 0; i < 58; i++)
		{
			Item item = inventory[i];
			if (item.stack > 0 && item.type == type && item.stack < item.maxStack)
			{
				item.stack++;
				return;
			}
		}
		if (theSelectedItem >= 0 && (inventory[theSelectedItem].type == 0 || inventory[theSelectedItem].stack <= 0))
		{
			inventory[theSelectedItem].SetDefaults(type);
			return;
		}
		Item item2 = new Item();
		item2.SetDefaults(type);
		if (GetItem(whoAmI, item2, GetItemSettings.ItemCreatedFromItemUsage).stack > 0)
		{
			Item item3 = item2;
			if (theSelectedItem != -1)
			{
				item3 = inventory[theSelectedItem];
			}
			int number = Item.NewItem(new EntitySource_ItemUse(this, item3), (int)position.X, (int)position.Y, width, height, type, 1, noBroadcast: false, 0, noGrabDelay: true);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number, 1f);
			}
		}
		else
		{
			item2.position.X = base.Center.X - (float)(item2.width / 2);
			item2.position.Y = base.Center.Y - (float)(item2.height / 2);
			item2.active = true;
			PopupText.NewText(PopupTextContext.RegularItemPickup, item2, 0);
		}
	}

	public bool SummonItemCheck(Item item)
	{
		int type = item.type;
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.active && ((type == 43 && nPC.type == 4) || (type == 70 && nPC.type == 13) || ((type == 560) & (nPC.type == 50)) || (type == 544 && nPC.type == 125) || (type == 544 && nPC.type == 126) || (type == 556 && nPC.type == 134) || (type == 557 && nPC.type == 127) || (type == 1133 && nPC.type == 222) || (type == 1331 && nPC.type == 266) || (type == 4988 && nPC.type == 657) || (type == 5120 && nPC.type == 668)))
			{
				return false;
			}
		}
		return true;
	}

	public PlayerFishingConditions GetFishingConditions()
	{
		PlayerFishingConditions result = default(PlayerFishingConditions);
		Fishing_GetBestFishingPole(out result.PolePower, out result.PoleItemType);
		Fishing_GetBait(out result.BaitPower, out result.BaitItemType);
		if (result.BaitItemType == 2673)
		{
			return result;
		}
		if (result.BaitPower == 0 || result.PolePower == 0)
		{
			return result;
		}
		int num = 0;
		if (FindBuffIndex(25) != -1)
		{
			num += 5;
		}
		if (canFloatInWater && wet)
		{
			num += 5;
		}
		if (sitting.TryGetSittingBlock(this, out var tile) && ((tile.type == 15 && tile.frameY / 40 == 1) || tile.type == 497))
		{
			num += 5;
		}
		int num2 = result.BaitPower + result.PolePower + fishingSkill + num;
		result.LevelMultipliers = Fishing_GetPowerMultiplier();
		result.FinalFishingLevel = (int)((float)num2 * result.LevelMultipliers);
		return result;
	}

	private static float Fishing_GetPowerMultiplier()
	{
		float num = 1f;
		if (Main.raining)
		{
			num *= 1.2f;
		}
		if (Main.cloudBGAlpha > 0f)
		{
			num *= 1.1f;
		}
		if (Main.dayTime && (Main.time < 5400.0 || Main.time > 48600.0))
		{
			num *= 1.3f;
		}
		if (Main.dayTime && Main.time > 16200.0 && Main.time < 37800.0)
		{
			num *= 0.8f;
		}
		if (!Main.dayTime && Main.time > 6480.0 && Main.time < 25920.0)
		{
			num *= 0.8f;
		}
		if (Main.moonPhase == 0)
		{
			num *= 1.1f;
		}
		if (Main.moonPhase == 1 || Main.moonPhase == 7)
		{
			num *= 1.05f;
		}
		if (Main.moonPhase == 3 || Main.moonPhase == 5)
		{
			num *= 0.95f;
		}
		if (Main.moonPhase == 4)
		{
			num *= 0.9f;
		}
		if (Main.bloodMoon)
		{
			num *= 1.1f;
		}
		return num;
	}

	private void Fishing_GetBait(out int baitPower, out int baitType)
	{
		baitPower = 0;
		baitType = 0;
		for (int i = 54; i < 58; i++)
		{
			if (inventory[i].stack > 0 && inventory[i].bait > 0)
			{
				baitPower = inventory[i].bait;
				baitType = inventory[i].type;
				break;
			}
		}
		if (baitPower != 0 || baitType != 0)
		{
			return;
		}
		for (int j = 0; j < 50; j++)
		{
			if (inventory[j].stack > 0 && inventory[j].bait > 0)
			{
				baitPower = inventory[j].bait;
				baitType = inventory[j].type;
				break;
			}
		}
	}

	private void Fishing_GetBestFishingPole(out int fishingPolePower, out int fishingPoleType)
	{
		fishingPolePower = inventory[selectedItem].fishingPole;
		fishingPoleType = inventory[selectedItem].type;
		if (fishingPolePower != 0)
		{
			return;
		}
		for (int i = 0; i < 58; i++)
		{
			if (inventory[i].fishingPole > fishingPolePower)
			{
				fishingPolePower = inventory[i].fishingPole;
				fishingPoleType = inventory[i].type;
			}
		}
	}

	public bool HasUnityPotion()
	{
		for (int i = 0; i < 58; i++)
		{
			if (inventory[i].type == 2997 && inventory[i].stack > 0)
			{
				return true;
			}
		}
		if (useVoidBag())
		{
			for (int j = 0; j < 40; j++)
			{
				if (bank4.item[j].type == 2997 && bank4.item[j].stack > 0)
				{
					return true;
				}
			}
		}
		return false;
	}

	public void TakeUnityPotion()
	{
		for (int i = 0; i < 58; i++)
		{
			if (inventory[i].type == 2997 && inventory[i].stack > 0)
			{
				inventory[i].stack--;
				if (inventory[i].stack <= 0)
				{
					inventory[i].SetDefaults();
				}
				return;
			}
		}
		if (!useVoidBag())
		{
			return;
		}
		for (int j = 0; j < 40; j++)
		{
			if (bank4.item[j].type == 2997 && bank4.item[j].stack > 0)
			{
				bank4.item[j].stack--;
				if (bank4.item[j].stack <= 0)
				{
					bank4.item[j].SetDefaults();
				}
				break;
			}
		}
	}

	public void UnityTeleport(Vector2 telePos)
	{
		int num = 3;
		if (Main.netMode == 0)
		{
			Teleport(telePos, num);
		}
		else
		{
			NetMessage.SendData(65, -1, -1, null, 2, whoAmI, telePos.X, telePos.Y, num);
		}
	}

	private void PayDD2CrystalsBeforeUse(Item item)
	{
		int requiredDD2CrystalsToUse = GetRequiredDD2CrystalsToUse(item);
		for (int i = 0; i < requiredDD2CrystalsToUse; i++)
		{
			ConsumeItem(3822, reverseOrder: true);
		}
	}

	private bool CheckDD2CrystalPaymentLock(Item item)
	{
		if (!DD2Event.Ongoing)
		{
			return true;
		}
		int requiredDD2CrystalsToUse = GetRequiredDD2CrystalsToUse(item);
		return CountItem(3822, requiredDD2CrystalsToUse) >= requiredDD2CrystalsToUse;
	}

	private int GetRequiredDD2CrystalsToUse(Item item)
	{
		switch (item.type)
		{
		case 3818:
		case 3819:
		case 3820:
			return 10;
		case 3824:
		case 3825:
		case 3826:
			return 10;
		case 3832:
		case 3833:
		case 3834:
			return 10;
		case 3829:
		case 3830:
		case 3831:
			return 10;
		default:
			return 0;
		}
	}

	public void SporeSac(Item sourceItem)
	{
		int damage = 70;
		float knockBack = 1.5f;
		if (Main.rand.Next(15) != 0)
		{
			return;
		}
		int num = 0;
		for (int i = 0; i < 1000; i++)
		{
			if (Main.projectile[i].active && Main.projectile[i].owner == whoAmI && (Main.projectile[i].type == 567 || Main.projectile[i].type == 568))
			{
				num++;
			}
		}
		if (Main.rand.Next(15) < num || num >= 10)
		{
			return;
		}
		int num2 = 50;
		int num3 = 24;
		int num4 = 90;
		for (int j = 0; j < num2; j++)
		{
			int num5 = Main.rand.Next(200 - j * 2, 400 + j * 2);
			Vector2 center = base.Center;
			center.X += Main.rand.Next(-num5, num5 + 1);
			center.Y += Main.rand.Next(-num5, num5 + 1);
			if (Collision.SolidCollision(center, num3, num3) || Collision.WetCollision(center, num3, num3))
			{
				continue;
			}
			center.X += num3 / 2;
			center.Y += num3 / 2;
			if (!Collision.CanHit(new Vector2(base.Center.X, position.Y), 1, 1, center, 1, 1) && !Collision.CanHit(new Vector2(base.Center.X, position.Y - 50f), 1, 1, center, 1, 1))
			{
				continue;
			}
			int num6 = (int)center.X / 16;
			int num7 = (int)center.Y / 16;
			bool flag = false;
			if (Main.rand.Next(3) == 0 && Main.tile[num6, num7] != null && Main.tile[num6, num7].wall > 0)
			{
				flag = true;
			}
			else
			{
				center.X -= num4 / 2;
				center.Y -= num4 / 2;
				if (Collision.SolidCollision(center, num4, num4))
				{
					center.X += num4 / 2;
					center.Y += num4 / 2;
					flag = true;
				}
				else if (Main.tile[num6, num7] != null && Main.tile[num6, num7].active() && Main.tile[num6, num7].type == 19)
				{
					flag = true;
				}
			}
			if (!flag)
			{
				continue;
			}
			for (int k = 0; k < 1000; k++)
			{
				if (Main.projectile[k].active && Main.projectile[k].owner == whoAmI && Main.projectile[k].aiStyle == 105 && (center - Main.projectile[k].Center).Length() < 48f)
				{
					flag = false;
					break;
				}
			}
			if (flag && Main.myPlayer == whoAmI)
			{
				Projectile.NewProjectile(GetProjectileSource_Accessory(sourceItem), center.X, center.Y, 0f, 0f, 567 + Main.rand.Next(2), damage, knockBack, whoAmI);
				break;
			}
		}
	}

	public void VolatileGelatin(Item sourceItem)
	{
		if (Main.myPlayer != whoAmI)
		{
			return;
		}
		volatileGelatinCounter++;
		if (volatileGelatinCounter <= 40)
		{
			return;
		}
		volatileGelatinCounter = 0;
		int damage = 65;
		float knockBack = 7f;
		float num = 640f;
		NPC nPC = null;
		for (int i = 0; i < 200; i++)
		{
			NPC nPC2 = Main.npc[i];
			if (nPC2 != null && nPC2.active && nPC2.CanBeChasedBy(this) && Collision.CanHit(this, nPC2))
			{
				float num2 = Vector2.Distance(nPC2.Center, base.Center);
				if (num2 < num)
				{
					num = num2;
					nPC = nPC2;
				}
			}
		}
		if (nPC != null)
		{
			Vector2 v = nPC.Center - base.Center;
			v = v.SafeNormalize(Vector2.Zero) * 12f;
			v.Y -= 1.3f;
			Projectile.NewProjectile(GetProjectileSource_Accessory(sourceItem), base.Center.X, base.Center.Y, v.X, v.Y, 937, damage, knockBack, whoAmI);
		}
	}

	public bool CanHit(Entity ent)
	{
		if (!Collision.CanHit(position, width, height, ent.position, ent.width, ent.height) && !Collision.CanHitLine(base.Center + new Vector2(direction * width / 2, gravDir * (float)(-height) / 3f), 0, 0, ent.Center + new Vector2(0f, -ent.height / 3), 0, 0) && !Collision.CanHitLine(base.Center + new Vector2(direction * width / 2, gravDir * (float)(-height) / 3f), 0, 0, ent.Center, 0, 0))
		{
			return Collision.CanHitLine(base.Center + new Vector2(direction * width / 2, 0f), 0, 0, ent.Center + new Vector2(0f, ent.height / 3), 0, 0);
		}
		return true;
	}

	public Rectangle GetItemDrawFrame(int type)
	{
		if (Main.dedServ)
		{
			return Rectangle.Empty;
		}
		Main.instance.LoadItem(type);
		if (ItemID.Sets.IsFood[type])
		{
			return TextureAssets.Item[type].Frame(1, 3, 0, 1);
		}
		if (Main.itemAnimations[type] != null)
		{
			return Main.itemAnimations[type].GetFrame(TextureAssets.Item[type].Value);
		}
		return TextureAssets.Item[type].Frame();
	}

	public float GetAdjustedItemScale(Item item)
	{
		float scale = item.scale;
		if (item.melee)
		{
			ApplyMeleeScale(ref scale);
		}
		return scale;
	}

	public void ApplyMeleeScale(ref float scale)
	{
		if (meleeScaleGlove)
		{
			scale *= 1.1f;
		}
	}

	public Vector2 ApplyRangeCompensation(float rangeCompensation, Vector2 startPos, Vector2 targetPos)
	{
		Vector2 v = targetPos - startPos;
		Vector2 vector = v.SafeNormalize(Vector2.Zero);
		vector.Y -= 1f;
		float num = v.Length();
		num = (float)Math.Pow(num / 700f, 2.0) * 700f;
		targetPos.Y += vector.Y * num * rangeCompensation * 1f;
		targetPos.X += (0f - vector.X) * num * rangeCompensation * 1f;
		return targetPos;
	}

	public void ItemCheck()
	{
		if (CCed)
		{
			channel = false;
			itemAnimation = (itemAnimationMax = 0);
			return;
		}
		float heightOffsetHitboxCenter = HeightOffsetHitboxCenter;
		Item item = inventory[selectedItem];
		ItemCheckContext context = default(ItemCheckContext);
		bool flag = false;
		if (Main.myPlayer == whoAmI)
		{
			if (PlayerInput.ShouldFastUseItem)
			{
				controlUseItem = true;
				flag = true;
			}
			if (!cursorItemIconEnabled && item.stack > 0 && item.fishingPole > 0)
			{
				Fishing_GetBait(out var _, out var baitType);
				if (baitType > 0)
				{
					cursorItemIconEnabled = true;
					cursorItemIconID = baitType;
					cursorItemIconPush = 6;
				}
			}
			if (!cursorItemIconEnabled && item.stack > 0 && (item.type == 779 || item.type == 5134))
			{
				for (int i = 54; i < 58; i++)
				{
					if (inventory[i].ammo == item.useAmmo && inventory[i].stack > 0)
					{
						cursorItemIconEnabled = true;
						cursorItemIconID = inventory[i].type;
						cursorItemIconPush = 10;
						break;
					}
				}
				if (!cursorItemIconEnabled)
				{
					for (int j = 0; j < 54; j++)
					{
						if (inventory[j].ammo == item.useAmmo && inventory[j].stack > 0)
						{
							cursorItemIconEnabled = true;
							cursorItemIconID = inventory[j].type;
							cursorItemIconPush = 10;
							break;
						}
					}
				}
			}
		}
		ItemCheck_HandleMount();
		int weaponDamage = GetWeaponDamage(item);
		ItemCheck_HandleMPItemAnimation(item);
		ItemCheck_HackHoldStyles(item);
		if (itemAnimation < 0)
		{
			itemAnimation = 0;
		}
		if (itemTime < 0)
		{
			itemTime = 0;
		}
		if (itemAnimation == 0 && reuseDelay > 0)
		{
			ApplyReuseDelay();
		}
		UpdatePlacementPreview(item);
		if (itemAnimation == 0 && altFunctionUse == 2)
		{
			altFunctionUse = 0;
		}
		bool flag2 = true;
		if (gravDir == -1f && GolfHelper.IsPlayerHoldingClub(this))
		{
			flag2 = false;
		}
		if (flag2 && controlUseItem && releaseUseItem && itemAnimation == 0 && item.useStyle != 0)
		{
			if (altFunctionUse == 1)
			{
				altFunctionUse = 2;
			}
			if (item.shoot == 0)
			{
				itemRotation = 0f;
			}
			bool flag3 = ItemCheck_CheckCanUse(item);
			if (item.potion && flag3)
			{
				ApplyPotionDelay(item);
			}
			if (item.mana > 0 && flag3 && whoAmI == Main.myPlayer && item.buffType != 0 && item.buffTime != 0)
			{
				AddBuff(item.buffType, item.buffTime);
			}
			if (item.shoot <= 0 || !ProjectileID.Sets.MinionTargettingFeature[item.shoot] || altFunctionUse != 2)
			{
				ItemCheck_ApplyPetBuffs(item);
			}
			if (whoAmI == Main.myPlayer && gravDir == 1f && item.mountType != -1 && mount.CanMount(item.mountType, this))
			{
				mount.SetMount(item.mountType, this);
			}
			if ((item.shoot <= 0 || !ProjectileID.Sets.MinionTargettingFeature[item.shoot] || altFunctionUse != 2) && flag3 && whoAmI == Main.myPlayer && item.shoot >= 0 && item.shoot < ProjectileID.Count && (ProjectileID.Sets.LightPet[item.shoot] || Main.projPet[item.shoot]))
			{
				FreeUpPetsAndMinions(item);
			}
			if (flag3)
			{
				ItemCheck_StartActualUse(item);
			}
		}
		bool flag4 = controlUseItem;
		if (mount.Active && mount.Type == 8)
		{
			flag4 = controlUseItem || controlUseTile;
		}
		if (!flag4)
		{
			channel = false;
		}
		Item item2 = ((itemAnimation > 0) ? lastVisualizedSelectedItem : item);
		Rectangle drawHitbox = Item.GetDrawHitbox(item2.type, this);
		compositeFrontArm.enabled = false;
		compositeBackArm.enabled = false;
		if (itemAnimation > 0)
		{
			if (item.mana > 0)
			{
				ItemCheck_ApplyManaRegenDelay(item);
			}
			if (Main.dedServ)
			{
				itemHeight = item.height;
				itemWidth = item.width;
			}
			else
			{
				itemHeight = drawHitbox.Height;
				itemWidth = drawHitbox.Width;
			}
			itemAnimation--;
			if (itemAnimation == 0 && whoAmI == Main.myPlayer)
			{
				PlayerInput.TryEndingFastUse();
			}
		}
		releaseUseItem = !controlUseItem;
		if (itemTime > 0)
		{
			itemTime--;
			if (ItemTimeIsZero && whoAmI == Main.myPlayer && !JustDroppedAnItem)
			{
				int type = item.type;
				if (type == 65 || type == 724 || type == 989 || type == 1226)
				{
					EmitMaxManaEffect();
				}
			}
		}
		if (itemAnimation > 0)
		{
			ItemCheck_ApplyUseStyle(heightOffsetHitboxCenter, item2, drawHitbox);
		}
		else
		{
			ItemCheck_ApplyHoldStyle(heightOffsetHitboxCenter, item2, drawHitbox);
		}
		if (!JustDroppedAnItem)
		{
			ItemCheck_EmitHeldItemLight(item);
			ItemCheck_EmitFoodParticles(item);
			ItemCheck_EmitDrinkParticles(item);
			if (whoAmI == Main.myPlayer)
			{
				ItemCheck_OwnerOnlyCode(ref context, item, weaponDamage, drawHitbox);
			}
			if (ItemTimeIsZero && itemAnimation > 0)
			{
				if (item.hairDye >= 0)
				{
					ApplyItemTime(item);
					if (whoAmI == Main.myPlayer)
					{
						hairDye = (byte)item.hairDye;
						NetMessage.SendData(4, -1, -1, null, whoAmI);
					}
				}
				if (item.healLife > 0 || item.healMana > 0)
				{
					ApplyLifeAndOrMana(item);
					ApplyItemTime(item);
					if (Main.myPlayer == whoAmI && item.type == 126 && breath == 0)
					{
						AchievementsHelper.HandleSpecialEvent(this, 25);
					}
				}
				if (item.buffType > 0)
				{
					if (whoAmI == Main.myPlayer && item.buffType != 90 && item.buffType != 27)
					{
						AddBuff(item.buffType, item.buffTime);
					}
					ApplyItemTime(item);
				}
				if (item.type == 678)
				{
					if (Main.getGoodWorld)
					{
						ApplyItemTime(item);
						if (whoAmI == Main.myPlayer)
						{
							for (int k = 0; k < 3; k++)
							{
								int type2 = 0;
								int timeToAdd = 108000;
								switch (Main.rand.Next(18))
								{
								case 0:
									type2 = 16;
									break;
								case 1:
									type2 = 111;
									break;
								case 2:
									type2 = 114;
									break;
								case 3:
									type2 = 8;
									break;
								case 4:
									type2 = 105;
									break;
								case 5:
									type2 = 17;
									break;
								case 6:
									type2 = 116;
									break;
								case 7:
									type2 = 5;
									break;
								case 8:
									type2 = 113;
									break;
								case 9:
									type2 = 7;
									break;
								case 10:
									type2 = 6;
									break;
								case 11:
									type2 = 104;
									break;
								case 12:
									type2 = 115;
									break;
								case 13:
									type2 = 2;
									break;
								case 14:
									type2 = 9;
									break;
								case 15:
									type2 = 3;
									break;
								case 16:
									type2 = 117;
									break;
								case 17:
									type2 = 1;
									break;
								}
								AddBuff(type2, timeToAdd);
							}
						}
					}
					else
					{
						ApplyItemTime(item);
						if (whoAmI == Main.myPlayer)
						{
							AddBuff(20, 216000);
							AddBuff(22, 216000);
							AddBuff(23, 216000);
							AddBuff(24, 216000);
							AddBuff(30, 216000);
							AddBuff(31, 216000);
							AddBuff(32, 216000);
							AddBuff(33, 216000);
							AddBuff(35, 216000);
							AddBuff(36, 216000);
							AddBuff(68, 216000);
						}
					}
				}
			}
			if ((item.type == 50 || item.type == 3124 || item.type == 3199 || item.type == 5358) && itemAnimation > 0)
			{
				if (Main.rand.Next(2) == 0)
				{
					Dust.NewDust(position, width, height, 15, 0f, 0f, 150, default(Color), 1.1f);
				}
				if (ItemTimeIsZero)
				{
					ApplyItemTime(item);
				}
				else if (itemTime == item.useTime / 2)
				{
					for (int l = 0; l < 70; l++)
					{
						Dust.NewDust(position, width, height, 15, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 1.5f);
					}
					RemoveAllGrapplingHooks();
					Spawn(PlayerSpawnContext.RecallFromItem);
					for (int m = 0; m < 70; m++)
					{
						Dust.NewDust(position, width, height, 15, 0f, 0f, 150, default(Color), 1.5f);
					}
				}
			}
			if ((item.type == 4263 || item.type == 5360) && itemAnimation > 0)
			{
				Vector2 vector = Vector2.UnitY.RotatedBy((float)itemAnimation * ((float)Math.PI * 2f) / 30f) * new Vector2(15f, 0f);
				for (int n = 0; n < 2; n++)
				{
					if (Main.rand.Next(3) == 0)
					{
						Dust dust = Dust.NewDustPerfect(base.Bottom + vector, Dust.dustWater());
						dust.velocity.Y *= 0f;
						dust.velocity.Y -= 4.5f;
						dust.velocity.X *= 1.5f;
						dust.scale = 0.8f;
						dust.alpha = 130;
						dust.noGravity = true;
						dust.fadeIn = 1.1f;
					}
				}
				if (ItemTimeIsZero)
				{
					ApplyItemTime(item);
				}
				else if (itemTime == item.useTime / 2)
				{
					if (Main.netMode == 0)
					{
						MagicConch();
					}
					else if (Main.netMode == 1 && whoAmI == Main.myPlayer)
					{
						NetMessage.SendData(73, -1, -1, null, 1);
					}
				}
			}
			if ((item.type == 4819 || item.type == 5361) && itemAnimation > 0)
			{
				Vector2 vector2 = Vector2.UnitY.RotatedBy((float)itemAnimation * ((float)Math.PI * 2f) / 30f) * new Vector2(15f, 0f);
				for (int num = 0; num < 2; num++)
				{
					if (Main.rand.Next(3) == 0)
					{
						Dust dust2 = Dust.NewDustPerfect(base.Bottom + vector2, 35);
						dust2.velocity.Y *= 0f;
						dust2.velocity.Y -= 4.5f;
						dust2.velocity.X *= 1.5f;
						dust2.scale = 0.8f;
						dust2.alpha = 130;
						dust2.noGravity = true;
						dust2.fadeIn = 1.1f;
					}
				}
				if (ItemTimeIsZero)
				{
					ApplyItemTime(item);
				}
				else if (itemTime == item.useTime / 2)
				{
					if (Main.netMode == 0)
					{
						DemonConch();
					}
					else if (Main.netMode == 1 && whoAmI == Main.myPlayer)
					{
						NetMessage.SendData(73, -1, -1, null, 2);
					}
				}
			}
			if (item.type == 5359 && itemAnimation > 0)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num2 = Main.rand.Next(4);
					Color color = Color.Green;
					switch (num2)
					{
					case 0:
					case 1:
						color = new Color(100, 255, 100);
						break;
					case 2:
						color = Color.Yellow;
						break;
					case 3:
						color = Color.White;
						break;
					}
					Dust dust3 = Dust.NewDustPerfect(Main.rand.NextVector2FromRectangle(base.Hitbox), 267);
					dust3.noGravity = true;
					dust3.color = color;
					dust3.velocity *= 2f;
					dust3.scale = 0.8f + Main.rand.NextFloat() * 0.6f;
				}
				if (ItemTimeIsZero)
				{
					ApplyItemTime(item);
				}
				else if (itemTime == item.useTime / 2)
				{
					if (Main.netMode == 0)
					{
						Shellphone_Spawn();
					}
					else if (Main.netMode == 1 && whoAmI == Main.myPlayer)
					{
						NetMessage.SendData(73, -1, -1, null, 3);
					}
				}
			}
			if (item.type == 2350 && itemAnimation > 0)
			{
				if (ItemTimeIsZero)
				{
					ApplyItemTime(item);
					SoundEngine.PlaySound(SoundID.Item3, position);
					for (int num3 = 0; num3 < 10; num3++)
					{
						Main.dust[Dust.NewDust(position, width, height, 15, velocity.X * 0.2f, velocity.Y * 0.2f, 150, Color.Cyan, 1.2f)].velocity *= 0.5f;
					}
				}
				else if (itemTime == 20)
				{
					SoundEngine.PlaySound(HeldItem.UseSound, position);
					for (int num4 = 0; num4 < 70; num4++)
					{
						Main.dust[Dust.NewDust(position, width, height, 15, velocity.X * 0.2f, velocity.Y * 0.2f, 150, Color.Cyan, 1.2f)].velocity *= 0.5f;
					}
					RemoveAllGrapplingHooks();
					bool flag5 = immune;
					int num5 = immuneTime;
					Spawn(PlayerSpawnContext.RecallFromItem);
					immune = flag5;
					immuneTime = num5;
					for (int num6 = 0; num6 < 70; num6++)
					{
						Main.dust[Dust.NewDust(position, width, height, 15, 0f, 0f, 150, Color.Cyan, 1.2f)].velocity *= 0.5f;
					}
					if (item.stack > 0)
					{
						item.stack--;
					}
				}
			}
			if (item.type == 4870 && itemAnimation > 0)
			{
				if (ItemTimeIsZero)
				{
					ApplyItemTime(item);
					SoundEngine.PlaySound(SoundID.Item3, position);
					for (int num7 = 0; num7 < 10; num7++)
					{
						Main.dust[Dust.NewDust(position, width, height, 15, velocity.X * 0.2f, velocity.Y * 0.2f, 150, Color.Cyan, 1.2f)].velocity *= 0.5f;
					}
				}
				else if (itemTime == 20)
				{
					SoundEngine.PlaySound(HeldItem.UseSound, position);
					for (int num8 = 0; num8 < 70; num8++)
					{
						Main.dust[Dust.NewDust(position, width, height, 15, velocity.X * 0.2f, velocity.Y * 0.2f, 150, Color.Cyan, 1.2f)].velocity *= 0.5f;
					}
					if (whoAmI == Main.myPlayer)
					{
						DoPotionOfReturnTeleportationAndSetTheComebackPoint();
					}
					for (int num9 = 0; num9 < 70; num9++)
					{
						Main.dust[Dust.NewDust(position, width, height, 15, 0f, 0f, 150, Color.Cyan, 1.2f)].velocity *= 0.5f;
					}
					if (item.stack > 0)
					{
						item.stack--;
					}
				}
			}
			if (item.type == 2351 && itemAnimation > 0)
			{
				if (ItemTimeIsZero)
				{
					ApplyItemTime(item);
				}
				else if (itemTime == 2)
				{
					if (Main.netMode == 0)
					{
						TeleportationPotion();
					}
					else if (Main.netMode == 1 && whoAmI == Main.myPlayer)
					{
						NetMessage.SendData(73);
					}
					if (item.stack > 0)
					{
						item.stack--;
					}
				}
			}
			if (item.type == 2756 && itemAnimation > 0)
			{
				if (ItemTimeIsZero)
				{
					ApplyItemTime(item);
				}
				else if (itemTime == 2)
				{
					if (whoAmI == Main.myPlayer)
					{
						Male = !Male;
						if (Main.netMode == 1)
						{
							NetMessage.SendData(4, -1, -1, null, whoAmI);
						}
					}
					if (item.stack > 0)
					{
						item.stack--;
					}
				}
				else
				{
					float num10 = item.useTime;
					num10 = (num10 - (float)itemTime) / num10;
					float num11 = 44f;
					float num12 = (float)Math.PI * 3f;
					Vector2 vector3 = new Vector2(15f, 0f).RotatedBy(num12 * num10);
					vector3.X *= direction;
					for (int num13 = 0; num13 < 2; num13++)
					{
						int type3 = 221;
						if (num13 == 1)
						{
							vector3.X *= -1f;
							type3 = 219;
						}
						Vector2 vector4 = new Vector2(vector3.X, num11 * (1f - num10) - num11 + (float)(height / 2));
						vector4 += base.Center;
						int num14 = Dust.NewDust(vector4, 0, 0, type3, 0f, 0f, 100);
						Main.dust[num14].position = vector4;
						Main.dust[num14].noGravity = true;
						Main.dust[num14].velocity = Vector2.Zero;
						Main.dust[num14].scale = 1.3f;
						Main.dust[num14].customData = this;
					}
				}
			}
			if (whoAmI == Main.myPlayer)
			{
				if ((itemTimeMax != 0 && itemTime == itemTimeMax) | (!item.IsAir && item.IsNotTheSameAs(lastVisualizedSelectedItem)))
				{
					lastVisualizedSelectedItem = item.Clone();
				}
			}
			else
			{
				lastVisualizedSelectedItem = item.Clone();
			}
			if (whoAmI == Main.myPlayer)
			{
				if (!dontConsumeWand && itemTime == (int)((float)item.useTime * tileSpeed) && item.tileWand > 0)
				{
					int tileWand = item.tileWand;
					for (int num15 = 0; num15 < 58; num15++)
					{
						if (tileWand == inventory[num15].type && inventory[num15].stack > 0)
						{
							inventory[num15].stack--;
							if (inventory[num15].stack <= 0)
							{
								inventory[num15] = new Item();
							}
							break;
						}
					}
				}
				if (itemTimeMax != 0 && itemTime == itemTimeMax && item.consumable && !context.SkipItemConsumption)
				{
					bool flag6 = true;
					if (item.ranged)
					{
						if (huntressAmmoCost90 && Main.rand.Next(10) == 0)
						{
							flag6 = false;
						}
						if (chloroAmmoCost80 && Main.rand.Next(5) == 0)
						{
							flag6 = false;
						}
						if (ammoCost80 && Main.rand.Next(5) == 0)
						{
							flag6 = false;
						}
						if (ammoCost75 && Main.rand.Next(4) == 0)
						{
							flag6 = false;
						}
					}
					if (item.IsACoin)
					{
						flag6 = true;
					}
					bool? flag7 = ItemID.Sets.ForceConsumption[item.type];
					if (flag7.HasValue)
					{
						flag6 = flag7.Value;
					}
					if (flag6)
					{
						if (item.stack > 0)
						{
							item.stack--;
						}
						if (item.stack <= 0)
						{
							itemTime = itemAnimation;
							Main.blockMouse = true;
						}
					}
				}
				if (item.stack <= 0 && itemAnimation == 0)
				{
					inventory[selectedItem] = new Item();
				}
				if (selectedItem == 58 && itemAnimation != 0)
				{
					Main.mouseItem = item.Clone();
				}
			}
		}
		if (itemAnimation == 0)
		{
			JustDroppedAnItem = false;
		}
		if (whoAmI == Main.myPlayer && flag)
		{
			PlayerInput.TryEndingFastUse();
		}
	}

	private void UpdatePlacementPreview(Item sItem)
	{
		if (Main.myPlayer == whoAmI && itemAnimation == 0)
		{
			Tile targetTile = Main.tile[tileTargetX, tileTargetY];
			FigureOutWhatToPlace(targetTile, sItem, out var tileToCreate, out var previewPlaceStyle, out var overrideCanPlace, out var forcedRandom);
			if ((!overrideCanPlace.HasValue || overrideCanPlace.Value) && TileObjectData.CustomPlace(tileToCreate, previewPlaceStyle))
			{
				TileObject.CanPlace(tileTargetX, tileTargetY, tileToCreate, previewPlaceStyle, direction, out var _, onlyCheck: true, forcedRandom);
			}
		}
	}

	private void FigureOutWhatToPlace(Tile targetTile, Item sItem, out int tileToCreate, out int previewPlaceStyle, out bool? overrideCanPlace, out int? forcedRandom)
	{
		tileToCreate = sItem.createTile;
		previewPlaceStyle = sItem.placeStyle;
		overrideCanPlace = null;
		forcedRandom = null;
		if (UsingBiomeTorches && tileToCreate == 215 && previewPlaceStyle == 0)
		{
			previewPlaceStyle = BiomeCampfirePlaceStyle(previewPlaceStyle);
		}
		if (targetTile != null && targetTile.active())
		{
			ushort type = targetTile.type;
			if (tileToCreate == 23 && type == 59)
			{
				tileToCreate = 661;
			}
			if (tileToCreate == 199 && type == 59)
			{
				tileToCreate = 662;
			}
		}
		if (!ModifyFlexibleWandPlacementInfo(ref tileToCreate, ref previewPlaceStyle, ref forcedRandom))
		{
			overrideCanPlace = false;
		}
	}

	private void ItemCheck_OwnerOnlyCode(ref ItemCheckContext context, Item sItem, int weaponDamage, Rectangle heldItemFrame)
	{
		bool flag = true;
		int type = sItem.type;
		if ((type == 65 || type == 676 || type == 723 || type == 724 || type == 757 || type == 674 || type == 675 || type == 989 || type == 1226 || type == 1227) && !ItemAnimationJustStarted)
		{
			flag = false;
		}
		if (type == 5097 && ItemAnimationJustStarted)
		{
			_batbatCanHeal = true;
		}
		if (type == 5094 && ItemAnimationJustStarted)
		{
			_spawnTentacleSpikes = true;
		}
		if (type == 795 && ItemAnimationJustStarted)
		{
			_spawnBloodButcherer = true;
		}
		if (type == 121 && ItemAnimationJustStarted)
		{
			_spawnVolcanoExplosion = true;
		}
		if (type == 155 && ItemAnimationJustStarted)
		{
			_spawnMuramasaCut = true;
		}
		if (type == 3852)
		{
			if (itemAnimation < itemAnimationMax - 12)
			{
				flag = false;
			}
			if (altFunctionUse == 2 && !ItemAnimationJustStarted)
			{
				flag = false;
			}
		}
		if (type == 4956 && itemAnimation < itemAnimationMax - 3 * sItem.useTime)
		{
			flag = false;
		}
		if (type == 4952 && itemAnimation < itemAnimationMax - 8)
		{
			flag = false;
		}
		if (type == 4953 && itemAnimation < itemAnimationMax - 10)
		{
			flag = false;
		}
		if (type == 5451 && ownedProjectileCounts[1020] > 0)
		{
			flag = false;
		}
		ItemCheck_TurretAltFeatureUse(sItem, flag);
		ItemCheck_MinionAltFeatureUse(sItem, flag);
		bool flag2 = itemAnimation > 0 && ItemTimeIsZero && flag;
		if (sItem.shootsEveryUse)
		{
			flag2 = ItemAnimationJustStarted;
		}
		if (sItem.shoot > 0 && flag2)
		{
			ItemCheck_Shoot(whoAmI, sItem, weaponDamage);
		}
		ItemCheck_UseWiringTools(sItem);
		ItemCheck_UseLawnMower(sItem);
		ItemCheck_PlayInstruments(sItem);
		ItemCheck_UseBuckets(sItem);
		if (!channel)
		{
			toolTime = itemTime;
		}
		else
		{
			toolTime--;
			if (toolTime < 0)
			{
				toolTime = sItem.useTime;
			}
		}
		ItemCheck_TryDestroyingDrones(sItem);
		ItemCheck_UseMiningTools(sItem);
		ItemCheck_UseTeleportRod(sItem);
		ItemCheck_UseLifeCrystal(sItem);
		ItemCheck_UseLifeFruit(sItem);
		ItemCheck_UseManaCrystal(sItem);
		ItemCheck_UseDemonHeart(sItem);
		ItemCheck_UseMinecartPowerUp(sItem);
		ItemCheck_UseTorchGodsFavor(sItem);
		ItemCheck_UseArtisanLoaf(sItem);
		ItemCheck_UseEventItems(sItem);
		ItemCheck_UseBossSpawners(whoAmI, sItem);
		ItemCheck_UseCombatBook(sItem);
		ItemCheck_UsePeddlersSatchel(sItem);
		ItemCheck_UsePetLicenses(sItem);
		ItemCheck_UseShimmerPermanentItems(sItem);
		if (sItem.type == 4095 && itemAnimation == 2)
		{
			Main.LocalGolfState.ResetGolfBall();
		}
		PlaceThing(ref context);
		if (sItem.makeNPC > 0)
		{
			if (!Main.GamepadDisableCursorItemIcon && position.X / 16f - (float)tileRangeX - (float)sItem.tileBoost <= (float)tileTargetX && (position.X + (float)width) / 16f + (float)tileRangeX + (float)sItem.tileBoost - 1f >= (float)tileTargetX && position.Y / 16f - (float)tileRangeY - (float)sItem.tileBoost <= (float)tileTargetY && (position.Y + (float)height) / 16f + (float)tileRangeY + (float)sItem.tileBoost - 2f >= (float)tileTargetY)
			{
				cursorItemIconEnabled = true;
				Main.ItemIconCacheUpdate(sItem.type);
			}
			if (ItemTimeIsZero && itemAnimation > 0 && controlUseItem)
			{
				ItemCheck_ReleaseCritter(sItem);
			}
		}
		if (boneGloveItem != null && !boneGloveItem.IsAir && boneGloveTimer == 0 && itemAnimation > 0 && sItem.damage > 0)
		{
			boneGloveTimer = 60;
			Vector2 center = base.Center;
			Vector2 vector = DirectionTo(ApplyRangeCompensation(0.2f, center, Main.MouseWorld)) * 10f;
			Projectile.NewProjectile(GetProjectileSource_Accessory(boneGloveItem), center.X, center.Y, vector.X, vector.Y, 532, 25, 5f, whoAmI);
		}
		if (((sItem.damage < 0 || sItem.type <= 0 || sItem.noMelee) && sItem.type != 1450 && sItem.type != 1991 && sItem.type != 3183 && sItem.type != 4821 && sItem.type != 3542 && sItem.type != 3779) || itemAnimation <= 0)
		{
			return;
		}
		ItemCheck_GetMeleeHitbox(sItem, heldItemFrame, out var dontAttack, out var itemRectangle);
		if (dontAttack)
		{
			return;
		}
		itemRectangle = ItemCheck_EmitUseVisuals(sItem, itemRectangle);
		if (Main.myPlayer == whoAmI && (sItem.type == 1991 || sItem.type == 3183 || sItem.type == 4821))
		{
			itemRectangle = ItemCheck_CatchCritters(sItem, itemRectangle);
		}
		if (sItem.type == 3183 || sItem.type == 4821)
		{
			bool[] shouldIgnore = ItemCheck_GetTileCutIgnoreList(sItem);
			ItemCheck_CutTiles(sItem, itemRectangle, shouldIgnore);
		}
		if (sItem.damage > 0)
		{
			UpdateMeleeHitCooldowns();
			float knockBack = sItem.knockBack;
			float num = 1f;
			if (kbGlove)
			{
				num += 1f;
			}
			if (kbBuff)
			{
				num += 0.5f;
			}
			knockBack *= num;
			if (inventory[selectedItem].type == 3106)
			{
				knockBack += knockBack * (1f - stealth);
			}
			bool[] shouldIgnore2 = ItemCheck_GetTileCutIgnoreList(sItem);
			ItemCheck_CutTiles(sItem, itemRectangle, shouldIgnore2);
			ItemCheck_MeleeHitNPCs(sItem, itemRectangle, weaponDamage, knockBack);
			ItemCheck_MeleeHitPVP(sItem, itemRectangle, weaponDamage, knockBack);
			ItemCheck_EmitHammushProjectiles(whoAmI, sItem, itemRectangle, weaponDamage);
		}
	}

	private void ItemCheck_EmitFoodParticles(Item sItem)
	{
		if (itemAnimation < 1)
		{
			return;
		}
		Color[] array = ItemID.Sets.FoodParticleColors[sItem.type];
		if (array != null && array.Length != 0 && Main.rand.Next(2) != 0)
		{
			Vector2? mouthPosition = MouthPosition;
			if (mouthPosition.HasValue)
			{
				Vector2 vector = mouthPosition.Value + Main.rand.NextVector2Square(-4f, 4f);
				Vector2 spinningpoint = new Vector2(direction, (0f - gravDir) * 0.8f);
				Dust.NewDustPerfect(vector, 284, 1.3f * spinningpoint.RotatedBy((float)Math.PI / 5f * Main.rand.NextFloatDirection()), 0, array[Main.rand.Next(array.Length)], 0.8f + 0.2f * Main.rand.NextFloat()).fadeIn = 0f;
			}
		}
	}

	private void ItemCheck_EmitDrinkParticles(Item sItem)
	{
		if (itemAnimation < 1)
		{
			return;
		}
		Color[] array = ItemID.Sets.DrinkParticleColors[sItem.type];
		if (array != null && array.Length != 0)
		{
			Vector2? mouthPosition = MouthPosition;
			if (mouthPosition.HasValue)
			{
				Vector2 vector = mouthPosition.Value + Main.rand.NextVector2Square(-4f, 4f);
				Vector2 spinningpoint = new Vector2((float)direction * 0.1f, (0f - gravDir) * 0.1f);
				Dust.NewDustPerfect(vector, 284, 1.3f * spinningpoint.RotatedBy(-(float)Math.PI / 5f * Main.rand.NextFloatDirection()), 0, array[Main.rand.Next(array.Length)] * 0.7f, 0.8f + 0.2f * Main.rand.NextFloat()).fadeIn = 0f;
			}
		}
	}

	private void ItemCheck_UseBossSpawners(int onWhichPlayer, Item sItem)
	{
		if (!ItemTimeIsZero || itemAnimation <= 0 || (sItem.type != 43 && sItem.type != 70 && sItem.type != 544 && sItem.type != 556 && sItem.type != 557 && sItem.type != 560 && sItem.type != 1133 && sItem.type != 1331 && sItem.type != 4988 && sItem.type != 5120 && sItem.type != 5334) || !SummonItemCheck(sItem))
		{
			return;
		}
		if (sItem.type == 560)
		{
			ApplyItemTime(sItem);
			SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
			if (Main.netMode != 1)
			{
				NPC.SpawnOnPlayer(onWhichPlayer, 50);
			}
			else
			{
				NetMessage.SendData(61, -1, -1, null, whoAmI, 50f);
			}
		}
		else if (sItem.type == 43)
		{
			if (!Main.IsItDay())
			{
				ApplyItemTime(sItem);
				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
				if (Main.netMode != 1)
				{
					NPC.SpawnOnPlayer(onWhichPlayer, 4);
				}
				else
				{
					NetMessage.SendData(61, -1, -1, null, whoAmI, 4f);
				}
			}
		}
		else if (sItem.type == 70)
		{
			if (ZoneCorrupt)
			{
				ApplyItemTime(sItem);
				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
				if (Main.netMode != 1)
				{
					NPC.SpawnOnPlayer(onWhichPlayer, 13);
				}
				else
				{
					NetMessage.SendData(61, -1, -1, null, whoAmI, 13f);
				}
			}
		}
		else if (sItem.type == 544)
		{
			if (!Main.IsItDay() && sItem.Variant != ItemVariants.DisabledBossSummonVariant)
			{
				ApplyItemTime(sItem);
				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
				if (Main.netMode != 1)
				{
					NPC.SpawnOnPlayer(onWhichPlayer, 125);
					NPC.SpawnOnPlayer(onWhichPlayer, 126);
				}
				else
				{
					NetMessage.SendData(61, -1, -1, null, whoAmI, 125f);
					NetMessage.SendData(61, -1, -1, null, whoAmI, 126f);
				}
			}
		}
		else if (sItem.type == 556)
		{
			if (!Main.IsItDay() && sItem.Variant != ItemVariants.DisabledBossSummonVariant)
			{
				ApplyItemTime(sItem);
				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
				if (Main.netMode != 1)
				{
					NPC.SpawnOnPlayer(onWhichPlayer, 134);
				}
				else
				{
					NetMessage.SendData(61, -1, -1, null, whoAmI, 134f);
				}
			}
		}
		else if (sItem.type == 557)
		{
			if (!Main.IsItDay() && sItem.Variant != ItemVariants.DisabledBossSummonVariant)
			{
				ApplyItemTime(sItem);
				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
				if (Main.netMode != 1)
				{
					NPC.SpawnOnPlayer(onWhichPlayer, 127);
				}
				else
				{
					NetMessage.SendData(61, -1, -1, null, whoAmI, 127f);
				}
			}
		}
		else if (sItem.type == 5334)
		{
			if (NPC.SpawnMechQueen(whoAmI))
			{
				ApplyItemTime(sItem);
				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
			}
		}
		else if (sItem.type == 1133)
		{
			ApplyItemTime(sItem);
			SoundEngine.PlaySound(SoundID.Item173, (int)position.X, (int)position.Y);
			if (Main.netMode != 1)
			{
				NPC.SpawnOnPlayer(onWhichPlayer, 222);
			}
			else
			{
				NetMessage.SendData(61, -1, -1, null, whoAmI, 222f);
			}
		}
		else if (sItem.type == 1331)
		{
			if (ZoneCrimson)
			{
				ApplyItemTime(sItem);
				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
				if (Main.netMode != 1)
				{
					NPC.SpawnOnPlayer(onWhichPlayer, 266);
				}
				else
				{
					NetMessage.SendData(61, -1, -1, null, whoAmI, 266f);
				}
			}
		}
		else if (sItem.type == 4988)
		{
			if (ZoneHallow)
			{
				ApplyItemTime(sItem);
				SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
				if (Main.netMode != 1)
				{
					NPC.SpawnOnPlayer(onWhichPlayer, 657);
				}
				else
				{
					NetMessage.SendData(61, -1, -1, null, whoAmI, 657f);
				}
			}
		}
		else if (sItem.type == 5120 && ZoneSnow)
		{
			ApplyItemTime(sItem);
			SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
			if (Main.netMode != 1)
			{
				NPC.SpawnOnPlayer(onWhichPlayer, 668);
			}
			else
			{
				NetMessage.SendData(61, -1, -1, null, whoAmI, 668f);
			}
		}
	}

	private void ItemCheck_UseEventItems(Item sItem)
	{
		if (ItemTimeIsZero && itemAnimation > 0 && sItem.type == 361 && Main.CanStartInvasion(1, ignoreDelay: true))
		{
			ApplyItemTime(sItem);
			SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
			if (Main.netMode != 1)
			{
				if (Main.invasionType == 0)
				{
					Main.invasionDelay = 0;
					Main.StartInvasion();
				}
			}
			else
			{
				NetMessage.SendData(61, -1, -1, null, whoAmI, -1f);
			}
		}
		if (ItemTimeIsZero && itemAnimation > 0 && sItem.type == 602 && Main.CanStartInvasion(2, ignoreDelay: true))
		{
			ApplyItemTime(sItem);
			SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
			if (Main.netMode != 1)
			{
				if (Main.invasionType == 0)
				{
					Main.invasionDelay = 0;
					Main.StartInvasion(2);
				}
			}
			else
			{
				NetMessage.SendData(61, -1, -1, null, whoAmI, -2f);
			}
		}
		if (ItemTimeIsZero && itemAnimation > 0 && sItem.type == 1315 && Main.CanStartInvasion(3, ignoreDelay: true))
		{
			ApplyItemTime(sItem);
			SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
			if (Main.netMode != 1)
			{
				if (Main.invasionType == 0)
				{
					Main.invasionDelay = 0;
					Main.StartInvasion(3);
				}
			}
			else
			{
				NetMessage.SendData(61, -1, -1, null, whoAmI, -3f);
			}
		}
		if (ItemTimeIsZero && itemAnimation > 0 && sItem.type == 1844 && !Main.dayTime && !Main.pumpkinMoon && !Main.snowMoon && !DD2Event.Ongoing)
		{
			ApplyItemTime(sItem);
			SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
			if (Main.netMode != 1)
			{
				Main.NewText(Lang.misc[31].Value, 50, byte.MaxValue, 130);
				Main.startPumpkinMoon();
			}
			else
			{
				NetMessage.SendData(61, -1, -1, null, whoAmI, -4f);
			}
		}
		if (ItemTimeIsZero && itemAnimation > 0 && sItem.type == 2767 && Main.dayTime && !Main.eclipse)
		{
			SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
			ApplyItemTime(sItem);
			if (Main.netMode == 0)
			{
				Main.eclipse = true;
				if (Main.remixWorld)
				{
					Main.NewText(Lang.misc[106].Value, 50, byte.MaxValue, 130);
				}
				else
				{
					Main.NewText(Lang.misc[20].Value, 50, byte.MaxValue, 130);
				}
			}
			else
			{
				NetMessage.SendData(61, -1, -1, null, whoAmI, -6f);
			}
		}
		if (ItemTimeIsZero && itemAnimation > 0 && sItem.type == 4271 && !Main.dayTime && !Main.bloodMoon)
		{
			SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
			ApplyItemTime(sItem);
			if (Main.netMode == 0)
			{
				AchievementsHelper.NotifyProgressionEvent(4);
				Main.bloodMoon = true;
				if (Main.GetMoonPhase() == MoonPhase.Empty)
				{
					Main.moonPhase = 5;
				}
				Main.NewText(Lang.misc[8].Value, 50, byte.MaxValue, 130);
			}
			else
			{
				NetMessage.SendData(61, -1, -1, null, whoAmI, -10f);
			}
		}
		if (ItemTimeIsZero && itemAnimation > 0 && sItem.type == 3601 && NPC.downedGolemBoss && Main.hardMode && !NPC.AnyDanger() && !NPC.AnyoneNearCultists())
		{
			SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
			ApplyItemTime(sItem);
			if (Main.netMode == 0)
			{
				WorldGen.StartImpendingDoom(720);
			}
			else
			{
				NetMessage.SendData(61, -1, -1, null, whoAmI, -8f);
			}
		}
		if (ItemTimeIsZero && itemAnimation > 0 && sItem.type == 1958 && !Main.dayTime && !Main.pumpkinMoon && !Main.snowMoon && !DD2Event.Ongoing)
		{
			ApplyItemTime(sItem);
			SoundEngine.PlaySound(15, (int)position.X, (int)position.Y, 0);
			if (Main.netMode != 1)
			{
				Main.NewText(Lang.misc[34].Value, 50, byte.MaxValue, 130);
				Main.startSnowMoon();
			}
			else
			{
				NetMessage.SendData(61, -1, -1, null, whoAmI, -5f);
			}
		}
	}

	private void ItemCheck_ReleaseCritter(Item sItem)
	{
		if (sItem.makeNPC == 614)
		{
			ApplyItemTime(sItem);
			NPC.ReleaseNPC((int)base.Center.X, (int)base.Bottom.Y, sItem.makeNPC, sItem.placeStyle, whoAmI);
		}
		else if (position.X / 16f - (float)tileRangeX - (float)sItem.tileBoost <= (float)tileTargetX && (position.X + (float)width) / 16f + (float)tileRangeX + (float)sItem.tileBoost - 1f >= (float)tileTargetX && position.Y / 16f - (float)tileRangeY - (float)sItem.tileBoost <= (float)tileTargetY && (position.Y + (float)height) / 16f + (float)tileRangeY + (float)sItem.tileBoost - 2f >= (float)tileTargetY)
		{
			int num = Main.mouseX + (int)Main.screenPosition.X;
			int num2 = Main.mouseY + (int)Main.screenPosition.Y;
			int i = num / 16;
			int j = num2 / 16;
			if (!WorldGen.SolidTile(i, j))
			{
				ApplyItemTime(sItem);
				NPC.ReleaseNPC(num, num2, sItem.makeNPC, sItem.placeStyle, whoAmI);
			}
		}
	}

	private void ItemCheck_MeleeHitPVP(Item sItem, Rectangle itemRectangle, int damage, float knockBack)
	{
		if (!hostile)
		{
			return;
		}
		for (int i = 0; i < 255; i++)
		{
			Player player = Main.player[i];
			if (i == whoAmI || !player.active || !player.hostile || player.immune || player.dead || (team != 0 && team == player.team) || !itemRectangle.Intersects(player.Hitbox) || !CanHit(player))
			{
				continue;
			}
			bool flag = false;
			if (Main.rand.Next(1, 101) <= 10)
			{
				flag = true;
			}
			int num = Main.DamageVar(damage, luck);
			StatusToPlayerPvP(sItem.type, i);
			OnHit(player.Center.X, player.Center.Y, player);
			PlayerDeathReason playerDeathReason = PlayerDeathReason.ByPlayer(whoAmI);
			int num2 = (int)player.Hurt(playerDeathReason, num, direction, pvp: true, quiet: false, flag);
			if (inventory[selectedItem].type == 3211)
			{
				Vector2 vector = new Vector2(direction * 100 + Main.rand.Next(-25, 26), Main.rand.Next(-75, 76));
				vector.Normalize();
				vector *= (float)Main.rand.Next(30, 41) * 0.1f;
				Vector2 vector2 = new Vector2(itemRectangle.X + Main.rand.Next(itemRectangle.Width), itemRectangle.Y + Main.rand.Next(itemRectangle.Height));
				vector2 = (vector2 + player.Center * 2f) / 3f;
				Projectile.NewProjectile(GetProjectileSource_Item(HeldItem), vector2.X, vector2.Y, vector.X, vector.Y, 524, (int)((double)damage * 0.7), knockBack * 0.7f, whoAmI);
			}
			if (sItem.type == 5097)
			{
				BatBat_TryLifeLeeching(player);
			}
			if (beetleOffense)
			{
				beetleCounter += num2;
				beetleCountdown = 0;
			}
			if (meleeEnchant == 7)
			{
				Projectile.NewProjectile(GetProjectileSource_Misc(8), player.Center.X, player.Center.Y, player.velocity.X, player.velocity.Y, 289, 0, 0f, whoAmI);
			}
			if (sItem.type == 1123)
			{
				int num3 = Main.rand.Next(1, 4);
				if (strongBees && Main.rand.Next(3) == 0)
				{
					num3++;
				}
				for (int j = 0; j < num3; j++)
				{
					float num4 = (float)(direction * 2) + (float)Main.rand.Next(-35, 36) * 0.02f;
					float num5 = (float)Main.rand.Next(-35, 36) * 0.02f;
					num4 *= 0.2f;
					num5 *= 0.2f;
					int num6 = Projectile.NewProjectile(GetProjectileSource_Item(sItem), itemRectangle.X + itemRectangle.Width / 2, itemRectangle.Y + itemRectangle.Height / 2, num4, num5, beeType(), beeDamage(num / 3), beeKB(0f), whoAmI);
					Main.projectile[num6].melee = true;
				}
			}
			if (inventory[selectedItem].type == 3106)
			{
				stealth = 1f;
				if (Main.netMode == 1)
				{
					NetMessage.SendData(84, -1, -1, null, whoAmI);
				}
			}
			if (Main.netMode != 0)
			{
				NetMessage.SendPlayerHurt(i, playerDeathReason, num, direction, flag, pvp: true, -1);
			}
			ApplyAttackCooldown();
		}
	}

	private void Volcano_TrySpawningVolcano(NPC npc, Item sItem, float damage, float knockBack, Rectangle itemRectangle)
	{
		if (_spawnVolcanoExplosion && Main.myPlayer == whoAmI && (npc == null || npc.HittableForOnHitRewards()))
		{
			Vector2 center = npc.Center;
			int num = 2;
			Projectile.NewProjectile(GetProjectileSource_Item(sItem), center.X, center.Y, 0f, -1f * gravDir, 978, (int)damage, knockBack, whoAmI, 0f, num);
			_spawnVolcanoExplosion = false;
		}
	}

	private void TentacleSpike_TrySpiking(NPC npc, Item sItem, float damage, float knockBack)
	{
		if (_spawnTentacleSpikes && Main.myPlayer == whoAmI && (npc == null || npc.CanBeChasedBy(this)))
		{
			Vector2 v = npc.Center - MountedCenter;
			v = v.SafeNormalize(Vector2.Zero);
			Vector2 vector = npc.Hitbox.ClosestPointInRect(MountedCenter) + v;
			Vector2 vector2 = (npc.Center - vector) * 0.8f;
			int num = Projectile.NewProjectile(GetProjectileSource_Item(sItem), vector.X, vector.Y, vector2.X, vector2.Y, 971, (int)damage, knockBack, whoAmI, 1f, npc.whoAmI);
			Main.projectile[num].StatusNPC(npc.whoAmI);
			Projectile.KillOldestJavelin(num, 971, npc.whoAmI, _tentacleSpikesMax5);
			_spawnTentacleSpikes = false;
		}
	}

	private void BloodButcherer_TryButchering(NPC npc, Item sItem, float damage, float knockBack)
	{
		if (_spawnBloodButcherer && Main.myPlayer == whoAmI && (npc == null || npc.CanBeChasedBy(this)))
		{
			Vector2 v = npc.Center - MountedCenter;
			v = v.SafeNormalize(Vector2.Zero);
			Vector2 vector = npc.Hitbox.ClosestPointInRect(MountedCenter) + v;
			Vector2 spinningpoint = (npc.Center - vector) * 0.8f;
			spinningpoint = spinningpoint.RotatedBy(Main.rand.NextFloatDirection() * (float)Math.PI * 0.25f);
			int num = Projectile.NewProjectile(GetProjectileSource_Item(sItem), vector.X, vector.Y, spinningpoint.X, spinningpoint.Y, 975, (int)damage, knockBack, whoAmI, 1f, npc.whoAmI);
			Main.projectile[num].StatusNPC(npc.whoAmI);
			Projectile.KillOldestJavelin(num, 975, npc.whoAmI, _bloodButchererMax5);
			_spawnBloodButcherer = false;
		}
	}

	private void BatBat_TryLifeLeeching(Entity entity)
	{
		if (_batbatCanHeal && statLife < statLifeMax2 && (!(entity is NPC nPC) || nPC.HittableForOnHitRewards()))
		{
			_batbatCanHeal = false;
			Heal(1);
		}
	}

	public bool HasNPCBannerBuff(int bannerType)
	{
		return Main.SceneMetrics.NPCBannerBuff[bannerType];
	}

	public void ResetMeleeHitCooldowns()
	{
		if (Main.myPlayer == whoAmI)
		{
			for (int i = 0; i < 200; i++)
			{
				meleeNPCHitCooldown[i] = 0;
			}
		}
	}

	public void UpdateMeleeHitCooldowns()
	{
		if (Main.myPlayer == whoAmI)
		{
			for (int i = 0; i < 200; i++)
			{
				meleeNPCHitCooldown[i]--;
			}
		}
	}

	public bool CanHitNPCWithMeleeHit(int npcIndex)
	{
		return meleeNPCHitCooldown[npcIndex] <= 0;
	}

	public void SetMeleeHitCooldown(int npcIndex, int timeInFrames)
	{
		meleeNPCHitCooldown[npcIndex] = timeInFrames;
	}

	private void ItemCheck_MeleeHitNPCs(Item sItem, Rectangle itemRectangle, int originalDamage, float knockBack)
	{
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.active && nPC.immune[whoAmI] == 0 && CanHitNPCWithMeleeHit(i) && attackCD <= 0)
			{
				nPC.position += nPC.netOffset;
				ProcessHitAgainstNPC(sItem, itemRectangle, originalDamage, knockBack, i);
				nPC.position -= nPC.netOffset;
			}
		}
	}

	public void TakeDamageFromJellyfish(int npcIndex)
	{
		NPC nPC = Main.npc[npcIndex];
		Hurt(PlayerDeathReason.ByNPC(npcIndex), (int)((double)nPC.damage * 1.3), -direction);
		SetMeleeHitCooldown(npcIndex, itemAnimation);
		ApplyAttackCooldown();
	}

	private void ProcessHitAgainstNPC(Item sItem, Rectangle itemRectangle, int originalDamage, float knockBack, int npcIndex)
	{
		NPC nPC = Main.npc[npcIndex];
		if (nPC.dontTakeDamage || !CanNPCBeHitByPlayerOrPlayerProjectile(nPC))
		{
			if (NPCID.Sets.ZappingJellyfish[nPC.type] && itemRectangle.Intersects(nPC.Hitbox) && (nPC.noTileCollide || CanHit(nPC)))
			{
				TakeDamageFromJellyfish(npcIndex);
			}
		}
		else
		{
			if (nPC.friendly && (nPC.type != 22 || !killGuide) && (nPC.type != 54 || !killClothier) && (!nPC.isLikeATownNPC || sItem.type != 5129))
			{
				return;
			}
			Rectangle rectangle = new Rectangle((int)nPC.position.X, (int)nPC.position.Y, nPC.width, nPC.height);
			bool flag = itemRectangle.Intersects(rectangle);
			int type = sItem.type;
			if (type == 121)
			{
				GetPointOnSwungItemPath(70f, 70f, 0f, GetAdjustedItemScale(sItem), out var location, out var outwardDirection);
				GetPointOnSwungItemPath(70f, 70f, 0.9f, GetAdjustedItemScale(sItem), out var location2, out outwardDirection);
				bool flag2 = Utils.LineRectangleDistance(rectangle, location, location2) <= 16f;
				flag = ((!_spawnVolcanoExplosion) ? (flag || flag2) : flag2);
			}
			if (!flag || (!nPC.noTileCollide && !CanHit(nPC)))
			{
				return;
			}
			int num = originalDamage;
			bool flag3 = false;
			int weaponCrit = GetWeaponCrit(sItem);
			if (Main.rand.Next(1, 101) <= weaponCrit)
			{
				flag3 = true;
			}
			int num2 = Item.NPCtoBanner(nPC.BannerID());
			if (num2 > 0 && HasNPCBannerBuff(num2))
			{
				num = ((!Main.expertMode) ? ((int)((float)num * ItemID.Sets.BannerStrength[Item.BannerToItem(num2)].NormalDamageDealt)) : ((int)((float)num * ItemID.Sets.BannerStrength[Item.BannerToItem(num2)].ExpertDamageDealt)));
			}
			if (parryDamageBuff && sItem.melee)
			{
				num *= 5;
				parryDamageBuff = false;
				ClearBuff(198);
			}
			if (sItem.type == 426 && (float)nPC.life >= (float)nPC.lifeMax * 0.9f)
			{
				num = (int)((float)num * 2.5f);
			}
			if (sItem.type == 5096)
			{
				int num3 = 0;
				if (FindBuffIndex(26) != -1)
				{
					num3 = 1;
				}
				if (FindBuffIndex(206) != -1)
				{
					num3 = 2;
				}
				if (FindBuffIndex(207) != -1)
				{
					num3 = 3;
				}
				float num4 = 1f + 0.05f * (float)num3;
				num = (int)((float)num * num4);
			}
			if (sItem.type == 671)
			{
				float t = (float)nPC.life / (float)nPC.lifeMax;
				float lerpValue = Utils.GetLerpValue(1f, 0.1f, t, clamped: true);
				float num5 = 1f * lerpValue;
				num = (int)((float)num * (1f + num5));
				Vector2 point = itemRectangle.Center.ToVector2();
				Vector2 positionInWorld = nPC.Hitbox.ClosestPointInRect(point);
				ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.Keybrand, new ParticleOrchestraSettings
				{
					PositionInWorld = positionInWorld
				}, whoAmI);
			}
			int num6 = Main.DamageVar(num, luck);
			float armorPenetrationPercent = 0f;
			if (sItem.type == 5129 && nPC.isLikeATownNPC)
			{
				armorPenetrationPercent = 1f;
				if (nPC.type == 18)
				{
					num6 *= 2;
				}
			}
			if (sItem.type == 3258)
			{
				ParticleOrchestraSettings particleOrchestraSettings = default(ParticleOrchestraSettings);
				particleOrchestraSettings.PositionInWorld = nPC.Center;
				ParticleOrchestraSettings settings = particleOrchestraSettings;
				ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.SlapHand, settings, whoAmI);
			}
			if (sItem.type == 5382)
			{
				ParticleOrchestraSettings particleOrchestraSettings = default(ParticleOrchestraSettings);
				particleOrchestraSettings.PositionInWorld = nPC.Center;
				ParticleOrchestraSettings settings2 = particleOrchestraSettings;
				ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.WaffleIron, settings2, whoAmI);
			}
			if (sItem.type == 5129)
			{
				ParticleOrchestraSettings particleOrchestraSettings = default(ParticleOrchestraSettings);
				particleOrchestraSettings.PositionInWorld = nPC.Center;
				ParticleOrchestraSettings settings3 = particleOrchestraSettings;
				ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.FlyMeal, settings3, whoAmI);
			}
			StatusToNPC(sItem.type, npcIndex);
			if (nPC.life > 5)
			{
				OnHit(nPC.Center.X, nPC.Center.Y, nPC);
			}
			num6 += nPC.checkArmorPenetration(armorPenetration, armorPenetrationPercent);
			NPCKillAttempt attempt = new NPCKillAttempt(nPC);
			int dmgDone = (int)nPC.StrikeNPC(num6, knockBack, direction, flag3);
			ApplyNPCOnHitEffects(sItem, itemRectangle, num, knockBack, npcIndex, num6, dmgDone);
			int num7 = Item.NPCtoBanner(nPC.BannerID());
			if (num7 >= 0)
			{
				lastCreatureHit = num7;
			}
			if (Main.netMode != 0)
			{
				if (flag3)
				{
					NetMessage.SendData(28, -1, -1, null, npcIndex, num6, knockBack, direction, 1);
				}
				else
				{
					NetMessage.SendData(28, -1, -1, null, npcIndex, num6, knockBack, direction);
				}
			}
			if (accDreamCatcher)
			{
				addDPS(num6);
			}
			SetMeleeHitCooldown(npcIndex, itemAnimation);
			if (attempt.DidNPCDie())
			{
				OnKillNPC(ref attempt, sItem);
			}
			ApplyAttackCooldown();
		}
	}

	public void ApplyAttackCooldown()
	{
		attackCD = Math.Max(1, (int)((double)itemAnimationMax * 0.33));
	}

	public void ApplyAttackCooldown(int frames)
	{
		if (attackCD < frames)
		{
			attackCD = frames;
		}
	}

	private void ApplyNPCOnHitEffects(Item sItem, Rectangle itemRectangle, int damage, float knockBack, int npcIndex, int dmgRandomized, int dmgDone)
	{
		bool flag = !Main.npc[npcIndex].immortal;
		if (sItem.type == 3211)
		{
			Vector2 vector = new Vector2(direction * 100 + Main.rand.Next(-25, 26), Main.rand.Next(-75, 76));
			vector.Normalize();
			vector *= (float)Main.rand.Next(30, 41) * 0.1f;
			Vector2 vector2 = new Vector2(itemRectangle.X + Main.rand.Next(itemRectangle.Width), itemRectangle.Y + Main.rand.Next(itemRectangle.Height));
			vector2 = (vector2 + Main.npc[npcIndex].Center * 2f) / 3f;
			Projectile.NewProjectile(GetProjectileSource_Item(sItem), vector2.X, vector2.Y, vector.X, vector.Y, 524, (int)((double)damage * 0.5), knockBack * 0.7f, whoAmI);
		}
		if (beetleOffense && flag)
		{
			beetleCounter += dmgDone;
			beetleCountdown = 0;
		}
		if (meleeEnchant == 7)
		{
			Projectile.NewProjectile(GetProjectileSource_Misc(8), Main.npc[npcIndex].Center.X, Main.npc[npcIndex].Center.Y, Main.npc[npcIndex].velocity.X, Main.npc[npcIndex].velocity.Y, 289, 0, 0f, whoAmI);
		}
		if (sItem.type == 3106)
		{
			stealth = 1f;
			if (Main.netMode == 1)
			{
				NetMessage.SendData(84, -1, -1, null, whoAmI);
			}
		}
		if (sItem.type == 5094)
		{
			TentacleSpike_TrySpiking(Main.npc[npcIndex], sItem, damage, knockBack);
		}
		if (sItem.type == 795)
		{
			BloodButcherer_TryButchering(Main.npc[npcIndex], sItem, damage, knockBack);
		}
		if (sItem.type == 121)
		{
			Volcano_TrySpawningVolcano(Main.npc[npcIndex], sItem, (int)((float)damage * 0.75f), knockBack, itemRectangle);
		}
		if (sItem.type == 5097)
		{
			BatBat_TryLifeLeeching(Main.npc[npcIndex]);
		}
		if (sItem.type == 1123 && flag)
		{
			int num = Main.rand.Next(1, 4);
			if (strongBees && Main.rand.Next(3) == 0)
			{
				num++;
			}
			for (int i = 0; i < num; i++)
			{
				float num2 = (float)(direction * 2) + (float)Main.rand.Next(-35, 36) * 0.02f;
				float num3 = (float)Main.rand.Next(-35, 36) * 0.02f;
				num2 *= 0.2f;
				num3 *= 0.2f;
				int num4 = Projectile.NewProjectile(GetProjectileSource_Item(sItem), itemRectangle.X + itemRectangle.Width / 2, itemRectangle.Y + itemRectangle.Height / 2, num2, num3, beeType(), beeDamage(dmgRandomized / 3), beeKB(0f), whoAmI);
				Main.projectile[num4].melee = true;
			}
		}
		if (sItem.type == 155 && flag && _spawnMuramasaCut)
		{
			_spawnMuramasaCut = false;
			int num5 = Main.rand.Next(1, 4);
			num5 = 1;
			for (int j = 0; j < num5; j++)
			{
				NPC nPC = Main.npc[npcIndex];
				Rectangle hitbox = nPC.Hitbox;
				hitbox.Inflate(30, 16);
				hitbox.Y -= 8;
				Vector2 vector3 = Main.rand.NextVector2FromRectangle(hitbox);
				Vector2 vector4 = hitbox.Center.ToVector2();
				Vector2 spinningpoint = (vector4 - vector3).SafeNormalize(new Vector2(direction, gravDir)) * 8f;
				Main.rand.NextFloat();
				float num6 = (float)(Main.rand.Next(2) * 2 - 1) * ((float)Math.PI / 5f + (float)Math.PI * 4f / 5f * Main.rand.NextFloat());
				num6 *= 0.5f;
				spinningpoint = spinningpoint.RotatedBy(0.7853981852531433);
				int num7 = 3;
				int num8 = 10 * num7;
				int num9 = 5;
				int num10 = num9 * num7;
				vector3 = vector4;
				for (int k = 0; k < num10; k++)
				{
					vector3 -= spinningpoint;
					spinningpoint = spinningpoint.RotatedBy((0f - num6) / (float)num8);
				}
				vector3 += nPC.velocity * num9;
				Projectile.NewProjectile(GetProjectileSource_Item(sItem), vector3, spinningpoint, 977, (int)((float)dmgRandomized * 0.5f), 0f, whoAmI, num6);
			}
		}
		if (Main.npc[npcIndex].value > 0f && hasLuckyCoin && Main.rand.Next(5) == 0)
		{
			int type = 71;
			if (Main.rand.Next(10) == 0)
			{
				type = 72;
			}
			if (Main.rand.Next(100) == 0)
			{
				type = 73;
			}
			int num11 = Item.NewItem(GetItemSource_OnHit(Main.npc[npcIndex], 2), (int)Main.npc[npcIndex].position.X, (int)Main.npc[npcIndex].position.Y, Main.npc[npcIndex].width, Main.npc[npcIndex].height, type);
			Main.item[num11].stack = Main.rand.Next(1, 11);
			Main.item[num11].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
			Main.item[num11].velocity.X = (float)Main.rand.Next(10, 31) * 0.2f * (float)direction;
			Main.item[num11].timeLeftInWhichTheItemCannotBeTakenByEnemies = 60;
			if (Main.netMode == 1)
			{
				NetMessage.SendData(148, -1, -1, null, num11);
			}
		}
	}

	private void ItemCheck_EmitHammushProjectiles(int i, Item sItem, Rectangle itemRectangle, int damage)
	{
		if (sItem.type != 787)
		{
			return;
		}
		int num = itemAnimationMax;
		if (itemAnimation != (int)((double)num * 0.1) && itemAnimation != (int)((double)num * 0.3) && itemAnimation != (int)((double)num * 0.5) && itemAnimation != (int)((double)num * 0.7) && itemAnimation != (int)((double)num * 0.9))
		{
			return;
		}
		float num2 = 0f;
		float num3 = 0f;
		float num4 = 0f;
		float num5 = 0f;
		if (itemAnimation == (int)((double)num * 0.9))
		{
			num2 = -7f;
		}
		if (itemAnimation == (int)((double)num * 0.7))
		{
			num2 = -6f;
			num3 = 2f;
		}
		if (itemAnimation == (int)((double)num * 0.5))
		{
			num2 = -4f;
			num3 = 4f;
		}
		if (itemAnimation == (int)((double)num * 0.3))
		{
			num2 = -2f;
			num3 = 6f;
		}
		if (itemAnimation == (int)((double)num * 0.1))
		{
			num3 = 7f;
		}
		if (itemAnimation == (int)((double)num * 0.7))
		{
			num5 = 26f;
		}
		if (itemAnimation == (int)((double)num * 0.3))
		{
			num5 -= 4f;
			num4 -= 20f;
		}
		if (itemAnimation == (int)((double)num * 0.1))
		{
			num4 += 6f;
		}
		if (direction == -1)
		{
			if (itemAnimation == (int)((double)num * 0.9))
			{
				num5 -= 8f;
			}
			if (itemAnimation == (int)((double)num * 0.7))
			{
				num5 -= 6f;
			}
		}
		num2 *= 1.5f;
		num3 *= 1.5f;
		num5 *= (float)direction;
		num4 *= gravDir;
		Projectile.NewProjectile(GetProjectileSource_Item(sItem), (float)(itemRectangle.X + itemRectangle.Width / 2) + num5, (float)(itemRectangle.Y + itemRectangle.Height / 2) + num4, (float)direction * num3, num2 * gravDir, 131, damage / 2, 0f, i);
	}

	private bool[] ItemCheck_GetTileCutIgnoreList(Item sItem)
	{
		bool allowRegrowth = false;
		int type = sItem.type;
		if (type == 213 || type == 5295)
		{
			allowRegrowth = true;
		}
		return GetTileCutIgnorance(allowRegrowth, fromTrap: false);
	}

	public bool[] GetTileCutIgnorance(bool allowRegrowth, bool fromTrap)
	{
		bool[] result = TileID.Sets.TileCutIgnore.None;
		if (allowRegrowth)
		{
			result = TileID.Sets.TileCutIgnore.Regrowth;
		}
		if (!fromTrap && dontHurtNature)
		{
			result = TileID.Sets.TileCutIgnore.IgnoreDontHurtNature;
		}
		return result;
	}

	private void ItemCheck_CutTiles(Item sItem, Rectangle itemRectangle, bool[] shouldIgnore)
	{
		int minX = itemRectangle.X / 16;
		int maxX = (itemRectangle.X + itemRectangle.Width) / 16 + 1;
		int minY = itemRectangle.Y / 16;
		int maxY = (itemRectangle.Y + itemRectangle.Height) / 16 + 1;
		Utils.ClampWithinWorld(ref minX, ref minY, ref maxX, ref maxY);
		for (int i = minX; i < maxX; i++)
		{
			for (int j = minY; j < maxY; j++)
			{
				if (Main.tile[i, j] == null || !Main.tileCut[Main.tile[i, j].type] || shouldIgnore[Main.tile[i, j].type] || !WorldGen.CanCutTile(i, j, TileCuttingContext.AttackMelee))
				{
					continue;
				}
				if (sItem.type == 1786)
				{
					ushort type = Main.tile[i, j].type;
					WorldGen.KillTile(i, j);
					if (!Main.tile[i, j].active())
					{
						int num = 0;
						switch (type)
						{
						case 3:
						case 24:
						case 61:
						case 110:
						case 201:
						case 529:
						case 637:
							num = Main.rand.Next(1, 3);
							break;
						case 73:
						case 74:
						case 113:
							num = Main.rand.Next(2, 5);
							break;
						}
						if (num > 0)
						{
							int number = Item.NewItem(new EntitySource_ItemUse(this, sItem), i * 16, j * 16, 16, 16, 1727, num);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(21, -1, -1, null, number, 1f);
							}
						}
					}
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 0, i, j);
					}
				}
				else
				{
					WorldGen.KillTile(i, j);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 0, i, j);
					}
				}
			}
		}
	}

	private Rectangle ItemCheck_CatchCritters(Item sItem, Rectangle itemRectangle)
	{
		bool flag = sItem.type == 3183 || sItem.type == 4821;
		for (int i = 0; i < 200; i++)
		{
			if (!Main.npc[i].active || Main.npc[i].catchItem <= 0)
			{
				continue;
			}
			Rectangle value = new Rectangle((int)Main.npc[i].position.X, (int)Main.npc[i].position.Y, Main.npc[i].width, Main.npc[i].height);
			if (!itemRectangle.Intersects(value))
			{
				continue;
			}
			if (!flag && ItemID.Sets.IsLavaBait[Main.npc[i].catchItem])
			{
				if (Main.myPlayer == whoAmI && Hurt(PlayerDeathReason.ByNPC(i), 1, (Main.npc[i].Center.X < base.Center.X) ? 1 : (-1), pvp: false, quiet: false, Crit: false, 3) > 0.0 && !dead)
				{
					AddBuff(24, 300, quiet: false);
				}
			}
			else if (Main.npc[i].type == 585 || Main.npc[i].type == 583 || Main.npc[i].type == 584)
			{
				if (Main.npc[i].ai[2] <= 1f)
				{
					NPC.CatchNPC(i, whoAmI);
				}
			}
			else
			{
				NPC.CatchNPC(i, whoAmI);
			}
		}
		return itemRectangle;
	}

	private void GetPointOnSwungItemPath(float spriteWidth, float spriteHeight, float normalizedPointOnPath, float itemScale, out Vector2 location, out Vector2 outwardDirection)
	{
		float num = (float)Math.Sqrt(spriteWidth * spriteWidth + spriteHeight * spriteHeight);
		float num2 = (float)(direction == 1).ToInt() * ((float)Math.PI / 2f);
		if (gravDir == -1f)
		{
			num2 += (float)Math.PI / 2f * (float)direction;
		}
		outwardDirection = itemRotation.ToRotationVector2().RotatedBy(3.926991f + num2);
		location = RotatedRelativePoint(itemLocation + outwardDirection * num * normalizedPointOnPath * itemScale);
	}

	private Rectangle ItemCheck_EmitUseVisuals(Item sItem, Rectangle itemRectangle)
	{
		if (sItem.type == 989 && Main.rand.Next(5) == 0)
		{
			int num = Main.rand.Next(3);
			int num2 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, num switch
			{
				0 => 15, 
				1 => 57, 
				_ => 58, 
			}, direction * 2, 0f, 150, default(Color), 1.3f);
			Main.dust[num2].velocity *= 0.2f;
		}
		if (sItem.type == 2880 && Main.rand.Next(2) == 0)
		{
			int type = Utils.SelectRandom<int>(Main.rand, 226, 229);
			int num3 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, type, direction * 2, 0f, 150);
			Main.dust[num3].velocity *= 0.2f;
			Main.dust[num3].noGravity = true;
		}
		if ((sItem.type == 44 || sItem.type == 45 || sItem.type == 103 || sItem.type == 104) && Main.rand.Next(15) == 0)
		{
			Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 14, direction * 2, 0f, 150, default(Color), 1.3f);
		}
		if (sItem.type == 46 && Main.rand.Next(15) == 0)
		{
			Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 14, direction * 2, 0f, 150, default(Color), 1.3f);
		}
		if (sItem.type == 273 || sItem.type == 675)
		{
			if (Main.rand.Next(5) == 0)
			{
				Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 14, direction * 2, 0f, 150, default(Color), 1.4f);
			}
			int num4 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 27, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.2f);
			Main.dust[num4].noGravity = true;
			Main.dust[num4].velocity.X /= 2f;
			Main.dust[num4].velocity.Y /= 2f;
		}
		if (sItem.type == 723 && Main.rand.Next(2) == 0)
		{
			int num5 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 64, 0f, 0f, 150, default(Color), 1.2f);
			Main.dust[num5].noGravity = true;
		}
		if (sItem.type == 65)
		{
			if (Main.rand.Next(5) == 0)
			{
				Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 58, 0f, 0f, 150, default(Color), 1.2f);
			}
			if (Main.rand.Next(10) == 0)
			{
				Gore.NewGore(new Vector2(itemRectangle.X, itemRectangle.Y), default(Vector2), Main.rand.Next(16, 18));
			}
		}
		if (sItem.type == 3065)
		{
			int num6 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 58, 0f, 0f, 150, default(Color), 1.2f);
			Main.dust[num6].velocity *= 0.5f;
			if (Main.rand.Next(8) == 0)
			{
				int num7 = Gore.NewGore(new Vector2(itemRectangle.Center.X, itemRectangle.Center.Y), default(Vector2), 16);
				Main.gore[num7].velocity *= 0.5f;
				Main.gore[num7].velocity += new Vector2(direction, 0f);
			}
		}
		if (sItem.type == 190)
		{
			int num8 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 40, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 0, default(Color), 1.2f);
			Main.dust[num8].noGravity = true;
		}
		else if (sItem.type == 213 || sItem.type == 5295)
		{
			int num9 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 3, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 0, default(Color), 1.2f);
			Main.dust[num9].noGravity = true;
		}
		if (sItem.type == 121)
		{
			for (int i = 0; i < 2; i++)
			{
				GetPointOnSwungItemPath(70f, 70f, 0.2f + 0.8f * Main.rand.NextFloat(), GetAdjustedItemScale(sItem), out var location, out var outwardDirection);
				Vector2 vector = outwardDirection.RotatedBy((float)Math.PI / 2f * (float)direction * gravDir);
				Dust.NewDustPerfect(location, 6, vector * 4f, 100, default(Color), 2.5f).noGravity = true;
			}
		}
		if (sItem.type == 122 || sItem.type == 217)
		{
			int num10 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 6, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.9f);
			Main.dust[num10].noGravity = true;
		}
		if (sItem.type == 155)
		{
			int num11 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 172, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 0.9f);
			Main.dust[num11].noGravity = true;
			Main.dust[num11].velocity *= 0.1f;
		}
		if (sItem.type == 676 && Main.rand.Next(3) == 0)
		{
			int num12 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 67, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 90, default(Color), 1.5f);
			Main.dust[num12].noGravity = true;
			Main.dust[num12].velocity *= 0.2f;
		}
		if (sItem.type == 3063)
		{
			int num13 = Dust.NewDust(itemRectangle.TopLeft(), itemRectangle.Width, itemRectangle.Height, 66, 0f, 0f, 150, Color.Transparent, 0.85f);
			Main.dust[num13].color = Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f);
			Main.dust[num13].noGravity = true;
			Main.dust[num13].velocity /= 2f;
		}
		if (sItem.type == 3823)
		{
			Dust dust = Dust.NewDustDirect(itemRectangle.TopLeft(), itemRectangle.Width, itemRectangle.Height, 6, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, Color.Transparent, 0.7f);
			dust.noGravity = true;
			dust.velocity *= 2f;
			dust.fadeIn = 0.9f;
		}
		if (sItem.type == 724 && Main.rand.Next(5) == 0)
		{
			int num14 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 67, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 90, default(Color), 1.5f);
			Main.dust[num14].noGravity = true;
			Main.dust[num14].velocity *= 0.2f;
		}
		if (sItem.type >= 795 && sItem.type <= 802)
		{
			for (int j = 0; j < 2; j++)
			{
				GetPointOnSwungItemPath(60f, 60f, 0.2f + 0.8f * Main.rand.NextFloat(), GetAdjustedItemScale(sItem), out var location2, out var outwardDirection2);
				Vector2 vector2 = outwardDirection2.RotatedBy((float)Math.PI / 2f * (float)direction * gravDir);
				Dust.NewDustPerfect(location2, 5, vector2 * 2f, 100, default(Color), 0.7f + Main.rand.NextFloat() * 0.6f);
				if (Main.rand.Next(20) == 0)
				{
					int num15 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 115, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 140, default(Color), 0.7f);
					Main.dust[num15].position = location2;
					Main.dust[num15].fadeIn = 1.2f;
					Main.dust[num15].noGravity = true;
					Main.dust[num15].velocity *= 0.25f;
					Main.dust[num15].velocity += vector2 * 5f;
				}
			}
		}
		if (sItem.type == 367)
		{
			int num16 = 0;
			if (Main.rand.Next(3) == 0)
			{
				num16 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 57, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.1f);
				Main.dust[num16].noGravity = true;
				Main.dust[num16].velocity.X /= 2f;
				Main.dust[num16].velocity.Y /= 2f;
				Main.dust[num16].velocity.X += direction * 2;
			}
			if (Main.rand.Next(4) == 0)
			{
				num16 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 43, 0f, 0f, 254, default(Color), 0.3f);
				Main.dust[num16].velocity *= 0f;
			}
		}
		else if (sItem.type != 368)
		{
			_ = sItem.type;
			_ = 674;
		}
		if (sItem.type == 4258 || sItem.type == 4259 || (sItem.type >= 198 && sItem.type <= 203) || (sItem.type >= 3764 && sItem.type <= 3769))
		{
			float num17 = 0.5f;
			float num18 = 0.5f;
			float num19 = 0.5f;
			if (sItem.type == 198 || sItem.type == 3764)
			{
				num17 *= 0.1f;
				num18 *= 0.5f;
				num19 *= 1.2f;
			}
			else if (sItem.type == 199 || sItem.type == 3765)
			{
				num17 *= 1f;
				num18 *= 0.2f;
				num19 *= 0.1f;
			}
			else if (sItem.type == 200 || sItem.type == 3766)
			{
				num17 *= 0.1f;
				num18 *= 1f;
				num19 *= 0.2f;
			}
			else if (sItem.type == 201 || sItem.type == 3767)
			{
				num17 *= 0.8f;
				num18 *= 0.1f;
				num19 *= 1f;
			}
			else if (sItem.type == 202 || sItem.type == 3768)
			{
				num17 *= 0.8f;
				num18 *= 0.9f;
				num19 *= 1f;
			}
			else if (sItem.type == 203 || sItem.type == 3769)
			{
				num17 *= 0.8f;
				num18 *= 0.8f;
				num19 *= 0f;
			}
			else if (sItem.type == 4258 || sItem.type == 4259)
			{
				num17 *= 0.9f;
				num18 *= 0.5f;
				num19 *= 0f;
			}
			Lighting.AddLight((int)((itemLocation.X + 6f + velocity.X) / 16f), (int)((itemLocation.Y - 14f) / 16f), num17, num18, num19);
		}
		if (frostBurn && sItem.melee && !sItem.noMelee && !sItem.noUseGraphic && Main.rand.Next(2) == 0)
		{
			int num20 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 135, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 2.5f);
			Main.dust[num20].noGravity = true;
			Main.dust[num20].velocity *= 0.7f;
			Main.dust[num20].velocity.Y -= 0.5f;
		}
		if (sItem.melee && !sItem.noMelee && !sItem.noUseGraphic && meleeEnchant > 0)
		{
			if (meleeEnchant == 1)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num21 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 171, 0f, 0f, 100);
					Main.dust[num21].noGravity = true;
					Main.dust[num21].fadeIn = 1.5f;
					Main.dust[num21].velocity *= 0.25f;
				}
			}
			else if (meleeEnchant == 2)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num22 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 75, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 2.5f);
					Main.dust[num22].noGravity = true;
					Main.dust[num22].velocity *= 0.7f;
					Main.dust[num22].velocity.Y -= 0.5f;
				}
			}
			else if (meleeEnchant == 3)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num23 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 6, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 2.5f);
					Main.dust[num23].noGravity = true;
					Main.dust[num23].velocity *= 0.7f;
					Main.dust[num23].velocity.Y -= 0.5f;
				}
			}
			else if (meleeEnchant == 4)
			{
				int num24 = 0;
				if (Main.rand.Next(2) == 0)
				{
					num24 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 57, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.1f);
					Main.dust[num24].noGravity = true;
					Main.dust[num24].velocity.X /= 2f;
					Main.dust[num24].velocity.Y /= 2f;
				}
			}
			else if (meleeEnchant == 5)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num25 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 169, 0f, 0f, 100);
					Main.dust[num25].velocity.X += direction;
					Main.dust[num25].velocity.Y += 0.2f;
					Main.dust[num25].noGravity = true;
				}
			}
			else if (meleeEnchant == 6)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num26 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 135, 0f, 0f, 100);
					Main.dust[num26].velocity.X += direction;
					Main.dust[num26].velocity.Y += 0.2f;
					Main.dust[num26].noGravity = true;
				}
			}
			else if (meleeEnchant == 7)
			{
				if (Main.rand.Next(20) == 0)
				{
					int type2 = Main.rand.Next(139, 143);
					int num27 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, type2, velocity.X, velocity.Y, 0, default(Color), 1.2f);
					Main.dust[num27].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num27].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num27].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.dust[num27].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.dust[num27].scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
				}
				if (Main.rand.Next(40) == 0)
				{
					int type3 = Main.rand.Next(276, 283);
					int num28 = Gore.NewGore(new Vector2(itemRectangle.X, itemRectangle.Y), velocity, type3);
					Main.gore[num28].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num28].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num28].scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					Main.gore[num28].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.gore[num28].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
				}
			}
			else if (meleeEnchant == 8 && Main.rand.Next(4) == 0)
			{
				int num29 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 46, 0f, 0f, 100);
				Main.dust[num29].noGravity = true;
				Main.dust[num29].fadeIn = 1.5f;
				Main.dust[num29].velocity *= 0.25f;
			}
		}
		if (magmaStone && sItem.melee && !sItem.noMelee && !sItem.noUseGraphic && Main.rand.Next(3) != 0)
		{
			int num30 = Dust.NewDust(new Vector2(itemRectangle.X, itemRectangle.Y), itemRectangle.Width, itemRectangle.Height, 6, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 2.5f);
			Main.dust[num30].noGravity = true;
			Main.dust[num30].velocity.X *= 2f;
			Main.dust[num30].velocity.Y *= 2f;
		}
		return itemRectangle;
	}

	private void ItemCheck_GetMeleeHitbox(Item sItem, Rectangle heldItemFrame, out bool dontAttack, out Rectangle itemRectangle)
	{
		dontAttack = false;
		itemRectangle = new Rectangle((int)itemLocation.X, (int)itemLocation.Y, 32, 32);
		if (!Main.dedServ)
		{
			int num = heldItemFrame.Width;
			int num2 = heldItemFrame.Height;
			switch (sItem.type)
			{
			case 5094:
				num -= 10;
				num2 -= 10;
				break;
			case 5095:
				num -= 10;
				num2 -= 10;
				break;
			case 5096:
				num -= 12;
				num2 -= 12;
				break;
			case 5097:
				num -= 8;
				num2 -= 8;
				break;
			}
			itemRectangle = new Rectangle((int)itemLocation.X, (int)itemLocation.Y, num, num2);
		}
		float adjustedItemScale = GetAdjustedItemScale(sItem);
		itemRectangle.Width = (int)((float)itemRectangle.Width * adjustedItemScale);
		itemRectangle.Height = (int)((float)itemRectangle.Height * adjustedItemScale);
		if (direction == -1)
		{
			itemRectangle.X -= itemRectangle.Width;
		}
		if (gravDir == 1f)
		{
			itemRectangle.Y -= itemRectangle.Height;
		}
		if (sItem.useStyle == 1)
		{
			if ((double)itemAnimation < (double)itemAnimationMax * 0.333)
			{
				if (direction == -1)
				{
					itemRectangle.X -= (int)((double)itemRectangle.Width * 1.4 - (double)itemRectangle.Width);
				}
				itemRectangle.Width = (int)((double)itemRectangle.Width * 1.4);
				itemRectangle.Y += (int)((double)itemRectangle.Height * 0.5 * (double)gravDir);
				itemRectangle.Height = (int)((double)itemRectangle.Height * 1.1);
			}
			else if (!((double)itemAnimation < (double)itemAnimationMax * 0.666))
			{
				if (direction == 1)
				{
					itemRectangle.X -= (int)((double)itemRectangle.Width * 1.2);
				}
				itemRectangle.Width *= 2;
				itemRectangle.Y -= (int)(((double)itemRectangle.Height * 1.4 - (double)itemRectangle.Height) * (double)gravDir);
				itemRectangle.Height = (int)((double)itemRectangle.Height * 1.4);
			}
		}
		else if (sItem.useStyle == 3)
		{
			if ((double)itemAnimation > (double)itemAnimationMax * 0.666)
			{
				dontAttack = true;
			}
			else
			{
				if (direction == -1)
				{
					itemRectangle.X -= (int)((double)itemRectangle.Width * 1.4 - (double)itemRectangle.Width);
				}
				itemRectangle.Width = (int)((double)itemRectangle.Width * 1.4);
				itemRectangle.Y += (int)((double)itemRectangle.Height * 0.6);
				itemRectangle.Height = (int)((double)itemRectangle.Height * 0.6);
				if (sItem.type == 946 || sItem.type == 4707)
				{
					itemRectangle.Height += 14;
					itemRectangle.Width -= 10;
					if (direction == -1)
					{
						itemRectangle.X += 10;
					}
				}
			}
		}
		if (sItem.type == 1450 && Main.rand.Next(3) == 0)
		{
			int num3 = -1;
			float x = itemRectangle.X + Main.rand.Next(itemRectangle.Width);
			float y = itemRectangle.Y + Main.rand.Next(itemRectangle.Height);
			if (Main.rand.Next(500) == 0)
			{
				num3 = Gore.NewGore(new Vector2(x, y), default(Vector2), 415, (float)Main.rand.Next(51, 101) * 0.01f);
			}
			else if (Main.rand.Next(250) == 0)
			{
				num3 = Gore.NewGore(new Vector2(x, y), default(Vector2), 414, (float)Main.rand.Next(51, 101) * 0.01f);
			}
			else if (Main.rand.Next(80) == 0)
			{
				num3 = Gore.NewGore(new Vector2(x, y), default(Vector2), 413, (float)Main.rand.Next(51, 101) * 0.01f);
			}
			else if (Main.rand.Next(10) == 0)
			{
				num3 = Gore.NewGore(new Vector2(x, y), default(Vector2), 412, (float)Main.rand.Next(51, 101) * 0.01f);
			}
			else if (Main.rand.Next(3) == 0)
			{
				num3 = Gore.NewGore(new Vector2(x, y), default(Vector2), 411, (float)Main.rand.Next(51, 101) * 0.01f);
			}
			if (num3 >= 0)
			{
				Main.gore[num3].velocity.X += direction * 2;
				Main.gore[num3].velocity.Y *= 0.3f;
			}
		}
		if (sItem.type == 3542)
		{
			dontAttack = true;
		}
		if (sItem.type == 3779)
		{
			dontAttack = true;
			Vector2 vector = itemLocation + new Vector2(direction * 30, -8f);
			Vector2 vector2 = vector - position;
			for (float num4 = 0f; num4 < 1f; num4 += 0.2f)
			{
				Vector2 vector3 = Vector2.Lerp(oldPosition + vector2 + new Vector2(0f, gfxOffY), vector, num4);
				Dust obj = Main.dust[Dust.NewDust(vector - Vector2.One * 8f, 16, 16, 27, 0f, -2f)];
				obj.noGravity = true;
				obj.position = vector3;
				obj.velocity = new Vector2(0f, (0f - gravDir) * 2f);
				obj.scale = 1.2f;
				obj.alpha = 200;
			}
		}
	}

	private void ItemCheck_UseDemonHeart(Item sItem)
	{
		if (sItem.type == 3335 && itemAnimation > 0 && !extraAccessory && Main.expertMode && ItemTimeIsZero)
		{
			ApplyItemTime(sItem);
			extraAccessory = true;
			NetMessage.SendData(4, -1, -1, null, whoAmI);
		}
	}

	private void ItemCheck_UseMinecartPowerUp(Item sItem)
	{
		if (sItem.type == 5289 && itemAnimation > 0 && ItemTimeIsZero)
		{
			ApplyItemTime(sItem);
			if (!unlockedSuperCart)
			{
				unlockedSuperCart = true;
				NetMessage.SendData(4, -1, -1, null, whoAmI);
			}
			QuickSpawnItem(GetItemSource_OpenItem(5289), 3353);
		}
	}

	private void ItemCheck_UseArtisanLoaf(Item sItem)
	{
		if (sItem.type == 5326 && itemAnimation > 0 && !ateArtisanBread && ItemTimeIsZero)
		{
			ApplyItemTime(sItem);
			ateArtisanBread = true;
			NetMessage.SendData(4, -1, -1, null, whoAmI);
		}
	}

	private void ItemCheck_UseTorchGodsFavor(Item sItem)
	{
		if (sItem.type == 5043 && itemAnimation > 0 && !unlockedBiomeTorches && ItemTimeIsZero)
		{
			ApplyItemTime(sItem);
			unlockedBiomeTorches = true;
			UsingBiomeTorches = true;
			AchievementsHelper.HandleSpecialEvent(this, 24);
			if (Main.netMode == 0)
			{
				NPC nPC = new NPC();
				nPC.SetDefaults(664);
				Main.BestiaryTracker.Kills.RegisterKill(nPC);
			}
			NetMessage.SendData(4, -1, -1, null, whoAmI);
			NetMessage.SendData(51, -1, -1, null, whoAmI, 5f);
		}
	}

	private void ItemCheck_TryDestroyingDrones(Item sItem)
	{
		if (sItem.type != 5451 || ownedProjectileCounts[1020] <= 0 || !controlUseItem || !ItemTimeIsZero || mouseInterface)
		{
			return;
		}
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile = Main.projectile[i];
			if (projectile.owner == whoAmI && projectile.type == 1020)
			{
				projectile.Kill();
			}
		}
		releaseUseItem = false;
	}

	private void ItemCheck_UseManaCrystal(Item sItem)
	{
		if (sItem.type == 109 && itemAnimation > 0 && statManaMax < 200 && ItemTimeIsZero)
		{
			ApplyItemTime(sItem);
			statManaMax += 20;
			statManaMax2 += 20;
			statMana += 20;
			if (Main.myPlayer == whoAmI)
			{
				ManaEffect(20);
			}
			AchievementsHelper.HandleSpecialEvent(this, 1);
		}
	}

	private void ItemCheck_UseLifeFruit(Item sItem)
	{
		if (sItem.type == 1291 && itemAnimation > 0 && statLifeMax >= 400 && statLifeMax < 500 && ItemTimeIsZero)
		{
			ApplyItemTime(sItem);
			statLifeMax += 5;
			statLifeMax2 += 5;
			statLife += 5;
			if (Main.myPlayer == whoAmI)
			{
				HealEffect(5);
			}
			AchievementsHelper.HandleSpecialEvent(this, 2);
		}
	}

	private void ItemCheck_UseLifeCrystal(Item sItem)
	{
		if (sItem.type == 29 && itemAnimation > 0 && statLifeMax < 400 && ItemTimeIsZero)
		{
			ApplyItemTime(sItem);
			statLifeMax += 20;
			statLifeMax2 += 20;
			statLife += 20;
			if (Main.myPlayer == whoAmI)
			{
				HealEffect(20);
			}
			AchievementsHelper.HandleSpecialEvent(this, 0);
		}
	}

	private void ItemCheck_UseCombatBook(Item sItem)
	{
		if (!NPC.combatBookWasUsed && sItem.type == 4382 && itemAnimation > 0 && ItemTimeIsZero)
		{
			ApplyItemTime(sItem);
			if (Main.netMode == 0)
			{
				NPC.combatBookWasUsed = true;
				Main.NewText(Language.GetTextValue("Misc.CombatBookUsed"), 50, byte.MaxValue, 130);
			}
			else
			{
				NetMessage.SendData(61, -1, -1, null, whoAmI, -11f);
			}
		}
		if (!NPC.combatBookVolumeTwoWasUsed && sItem.type == 5336 && itemAnimation > 0 && ItemTimeIsZero)
		{
			ApplyItemTime(sItem);
			if (Main.netMode == 0)
			{
				NPC.combatBookVolumeTwoWasUsed = true;
				Main.NewText(Language.GetTextValue("Misc.CombatBookVolumeTwoUsed"), 50, byte.MaxValue, 130);
			}
			else
			{
				NetMessage.SendData(61, -1, -1, null, whoAmI, -17f);
			}
		}
	}

	private void ItemCheck_UsePetLicenses(Item sItem)
	{
		if (sItem.type == 4829 && itemAnimation > 0)
		{
			LicenseOrExchangePet(sItem, ref NPC.boughtCat, 637, "Misc.LicenseCatUsed", -12);
		}
		if (sItem.type == 4830 && itemAnimation > 0)
		{
			LicenseOrExchangePet(sItem, ref NPC.boughtDog, 638, "Misc.LicenseDogUsed", -13);
		}
		if (sItem.type == 4910 && itemAnimation > 0)
		{
			LicenseOrExchangePet(sItem, ref NPC.boughtBunny, 656, "Misc.LicenseBunnyUsed", -14);
		}
	}

	private void ItemCheck_UsePeddlersSatchel(Item sItem)
	{
		if (!NPC.peddlersSatchelWasUsed && sItem.type == 5343 && itemAnimation > 0 && ItemTimeIsZero)
		{
			ApplyItemTime(sItem);
			if (Main.netMode == 0)
			{
				NPC.peddlersSatchelWasUsed = true;
				Main.NewText(Language.GetTextValue("Misc.PeddlersSatchelUsed"), 50, byte.MaxValue, 130);
			}
			else
			{
				NetMessage.SendData(61, -1, -1, null, whoAmI, -18f);
			}
		}
	}

	private void ItemCheck_UseShimmerPermanentItems(Item sItem)
	{
		if (sItem.type == 5337 && itemAnimation > 0 && !usedAegisCrystal && ItemTimeIsZero)
		{
			ApplyItemTime(sItem);
			usedAegisCrystal = true;
			NetMessage.SendData(4, -1, -1, null, whoAmI);
		}
		if (sItem.type == 5338 && itemAnimation > 0 && !usedAegisFruit && ItemTimeIsZero)
		{
			ApplyItemTime(sItem);
			usedAegisFruit = true;
			NetMessage.SendData(4, -1, -1, null, whoAmI);
		}
		if (sItem.type == 5339 && itemAnimation > 0 && !usedArcaneCrystal && ItemTimeIsZero)
		{
			ApplyItemTime(sItem);
			usedArcaneCrystal = true;
			NetMessage.SendData(4, -1, -1, null, whoAmI);
		}
		if (sItem.type == 5340 && itemAnimation > 0 && !usedGalaxyPearl && ItemTimeIsZero)
		{
			ApplyItemTime(sItem);
			usedGalaxyPearl = true;
			NetMessage.SendData(4, -1, -1, null, whoAmI);
		}
		if (sItem.type == 5341 && itemAnimation > 0 && !usedGummyWorm && ItemTimeIsZero)
		{
			ApplyItemTime(sItem);
			usedGummyWorm = true;
			NetMessage.SendData(4, -1, -1, null, whoAmI);
		}
		if (sItem.type == 5342 && itemAnimation > 0 && !usedAmbrosia && ItemTimeIsZero)
		{
			ApplyItemTime(sItem);
			usedAmbrosia = true;
			NetMessage.SendData(4, -1, -1, null, whoAmI);
		}
	}

	private void LicenseOrExchangePet(Item sItem, ref bool petBoughtFlag, int npcType, string textKeyForLicense, int netMessageData)
	{
		if (ItemTimeIsZero && (!petBoughtFlag || NPC.AnyNPCs(npcType)))
		{
			ApplyItemTime(sItem);
			NPC.UnlockOrExchangePet(ref petBoughtFlag, npcType, textKeyForLicense, netMessageData);
		}
	}

	public void LimitPointToPlayerReachableArea(ref Vector2 pointPoisition)
	{
		Vector2 center = base.Center;
		Vector2 vector = pointPoisition - center;
		float num = Math.Abs(vector.X);
		float num2 = Math.Abs(vector.Y);
		float num3 = 1f;
		if (num > 960f)
		{
			float num4 = 960f / num;
			if (num3 > num4)
			{
				num3 = num4;
			}
		}
		if (num2 > 600f)
		{
			float num5 = 600f / num2;
			if (num3 > num5)
			{
				num3 = num5;
			}
		}
		Vector2 vector2 = vector * num3;
		pointPoisition = center + vector2;
	}

	private void ItemCheck_UseTeleportRod(Item sItem)
	{
		if (Main.myPlayer != whoAmI || (sItem.type != 1326 && sItem.type != 5335) || itemAnimation <= 0 || !ItemTimeIsZero)
		{
			return;
		}
		ApplyItemTime(sItem);
		Vector2 pointPoisition = default(Vector2);
		pointPoisition.X = (float)Main.mouseX + Main.screenPosition.X;
		if (gravDir == 1f)
		{
			pointPoisition.Y = (float)Main.mouseY + Main.screenPosition.Y - (float)height;
		}
		else
		{
			pointPoisition.Y = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY;
		}
		pointPoisition.X -= width / 2;
		LimitPointToPlayerReachableArea(ref pointPoisition);
		if (!(pointPoisition.X > 50f) || !(pointPoisition.X < (float)(Main.maxTilesX * 16 - 50)) || !(pointPoisition.Y > 50f) || !(pointPoisition.Y < (float)(Main.maxTilesY * 16 - 50)))
		{
			return;
		}
		int num = (int)(pointPoisition.X / 16f);
		int num2 = (int)(pointPoisition.Y / 16f);
		if ((Main.tile[num, num2].wall == 87 && !NPC.downedPlantBoss && (Main.remixWorld || (double)num2 > Main.worldSurface)) || Collision.SolidCollision(pointPoisition, width, height))
		{
			return;
		}
		Teleport(pointPoisition, 1);
		NetMessage.SendData(65, -1, -1, null, 0, whoAmI, pointPoisition.X, pointPoisition.Y, 1);
		if (sItem.type != 1326)
		{
			return;
		}
		if (chaosState)
		{
			statLife -= statLifeMax2 / 7;
			PlayerDeathReason damageSource = PlayerDeathReason.ByOther(13);
			if (Main.rand.Next(2) == 0)
			{
				damageSource = PlayerDeathReason.ByOther(Male ? 14 : 15);
			}
			if (statLife <= 0)
			{
				KillMe(damageSource, 1.0, 0);
			}
			lifeRegenCount = 0;
			lifeRegenTime = 0f;
		}
		AddBuff(88, 360);
	}

	private bool IsTilePoundable(Tile targetTile)
	{
		if (!Main.tileHammer[targetTile.type] && !Main.tileSolid[targetTile.type] && targetTile.type != 314 && targetTile.type != 424 && targetTile.type != 442)
		{
			return targetTile.type != 351;
		}
		return false;
	}

	private void UseShovel(Player user, Item item, int sX, int sY)
	{
		for (int i = sX - 1; i <= sX + 1; i++)
		{
			for (int j = sY - 1; j <= sY + 1; j++)
			{
				DamageTileWithShovel(user, item, i, j);
			}
		}
		itemTime = (int)((float)item.useTime * pickSpeed);
	}

	private void DamageTileWithShovel(Player user, Item item, int x, int y)
	{
		Tile tileSafely = Framing.GetTileSafely(x, y);
		if (TileID.Sets.CanBeDugByShovel[tileSafely.type])
		{
			int pickPower = 30;
			if (tileSafely.active() && (TileID.Sets.Conversion.Grass[tileSafely.type] || TileID.Sets.Conversion.JungleGrass[tileSafely.type] || tileSafely.type == 70 || tileSafely.type == 633))
			{
				PickTile(x, y, 100);
			}
			PickTile(x, y, pickPower);
		}
	}

	private void ItemCheck_UseMiningTools(Item sItem)
	{
		SpecialToolUsageSettings specialToolUsageSettings = default(SpecialToolUsageSettings);
		if (sItem.type == 4711)
		{
			SpecialToolUsageSettings specialToolUsageSettings2 = default(SpecialToolUsageSettings);
			specialToolUsageSettings2.IsAValidTool = true;
			specialToolUsageSettings2.UsageAction = UseShovel;
			specialToolUsageSettings = specialToolUsageSettings2;
		}
		if (sItem.pick <= 0 && sItem.axe <= 0 && sItem.hammer <= 0 && !specialToolUsageSettings.IsAValidTool)
		{
			return;
		}
		bool flag = IsTargetTileInItemRange(sItem);
		if (noBuilding)
		{
			flag = false;
		}
		if (flag && specialToolUsageSettings.UsageCondition != null)
		{
			flag = specialToolUsageSettings.UsageCondition(this, sItem, tileTargetX, tileTargetY);
		}
		if (toolTime == 0 && itemAnimation > 0 && controlUseItem)
		{
			Tile tile = Main.tile[tileTargetX, tileTargetY];
			if (!tile.active() || IsTilePoundable(tile))
			{
				poundRelease = false;
			}
		}
		if (!flag)
		{
			return;
		}
		if (!Main.GamepadDisableCursorItemIcon)
		{
			cursorItemIconEnabled = true;
			Main.ItemIconCacheUpdate(sItem.type);
		}
		bool canHitWalls = false;
		if (toolTime == 0 && itemAnimation > 0 && controlUseItem)
		{
			if (specialToolUsageSettings.UsageAction != null)
			{
				specialToolUsageSettings.UsageAction(this, sItem, tileTargetX, tileTargetY);
				return;
			}
			ItemCheck_UseMiningTools_ActuallyUseMiningTool(sItem, out canHitWalls, tileTargetX, tileTargetY);
		}
		if (releaseUseItem)
		{
			poundRelease = true;
		}
		if (toolTime == 0 && itemAnimation > 0 && controlUseItem && canHitWalls)
		{
			ItemCheck_UseMiningTools_TryFindingWallToHammer(out var wX, out var wY);
			ItemCheck_UseMiningTools_TryHittingWall(sItem, wX, wY);
		}
	}

	private void ItemCheck_UseMiningTools_ActuallyUseMiningTool(Item sItem, out bool canHitWalls, int x, int y)
	{
		int num = -1;
		int num2 = 0;
		canHitWalls = true;
		Tile tile = Main.tile[x, y];
		if (!tile.active())
		{
			return;
		}
		if ((sItem.pick > 0 && !Main.tileAxe[tile.type] && !Main.tileHammer[tile.type]) || (sItem.axe > 0 && Main.tileAxe[tile.type]) || (sItem.hammer > 0 && Main.tileHammer[tile.type]))
		{
			canHitWalls = false;
		}
		num = hitTile.HitObject(x, y, 1);
		if (Main.tileNoFail[tile.type])
		{
			num2 = 100;
		}
		if (Main.tileHammer[tile.type])
		{
			canHitWalls = false;
			if (sItem.hammer > 0)
			{
				num2 += sItem.hammer;
				if (!WorldGen.CanKillTile(x, y))
				{
					num2 = 0;
				}
				if (tile.type == 26 && (sItem.hammer < 80 || !Main.hardMode))
				{
					num2 = 0;
					Hurt(PlayerDeathReason.ByOther(4), statLife / 2, -direction);
				}
				AchievementsHelper.CurrentlyMining = true;
				if (hitTile.AddDamage(num, num2) >= 100)
				{
					ClearMiningCacheAt(x, y, 1);
					WorldGen.KillTile(x, y);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 0, x, y);
					}
				}
				else
				{
					WorldGen.KillTile(x, y, fail: true);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 0, x, y, 1f);
					}
				}
				if (num2 != 0)
				{
					hitTile.Prune();
				}
				ApplyItemTime(sItem);
				AchievementsHelper.CurrentlyMining = false;
			}
		}
		else if (Main.tileAxe[tile.type])
		{
			num2 = ((tile.type != 80) ? (num2 + (int)((float)sItem.axe * 1.2f)) : (num2 + (int)((float)(sItem.axe * 3) * 1.2f)));
			if (Main.getGoodWorld)
			{
				num2 = (int)((double)num2 * 1.3);
			}
			if (sItem.axe > 0)
			{
				AchievementsHelper.CurrentlyMining = true;
				if (!WorldGen.CanKillTile(x, y))
				{
					num2 = 0;
				}
				if (Main.dontStarveWorld && Main.myPlayer == whoAmI && num2 > 0 && tile.type == 80)
				{
					Hurt(PlayerDeathReason.ByOther(3), Main.DamageVar(6f, luck), 0, pvp: false, quiet: false, Crit: false, 0);
				}
				if (hitTile.AddDamage(num, num2) >= 100)
				{
					if (whoAmI == Main.myPlayer && sItem.type == 5095 && (TileID.Sets.IsATreeTrunk[tile.type] || tile.type == 323 || tile.type == 80))
					{
						LucyAxeMessage.MessageSource source = LucyAxeMessage.MessageSource.ChoppedTree;
						if (TileID.Sets.CountsAsGemTree[tile.type])
						{
							source = LucyAxeMessage.MessageSource.ChoppedGemTree;
						}
						if (tile.type == 80)
						{
							source = LucyAxeMessage.MessageSource.ChoppedCactus;
							LucyAxeMessage.TryCreatingMessageWithCooldown(source, base.Top, new Vector2(direction * 7, -7f), 420);
						}
						else
						{
							LucyAxeMessage.Create(source, base.Top, new Vector2(direction * 7, -7f));
						}
					}
					ClearMiningCacheAt(x, y, 1);
					bool flag = IsBottomOfTreeTrunkNoRoots(x, y);
					WorldGen.KillTile(x, y);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 0, x, y);
					}
					if (sItem.type == 5295 && flag)
					{
						TryReplantingTree();
					}
				}
				else
				{
					WorldGen.KillTile(x, y, fail: true);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 0, x, y, 1f);
					}
				}
				if (num2 != 0)
				{
					hitTile.Prune();
				}
				ApplyItemTime(sItem);
				AchievementsHelper.CurrentlyMining = false;
			}
		}
		else if (sItem.pick > 0)
		{
			PickTile(x, y, sItem.pick);
		}
		if (sItem.pick > 0)
		{
			itemTime = (int)((float)sItem.useTime * pickSpeed);
		}
		ItemCheck_UseMiningTools_TryPoundingTile(sItem, num, ref canHitWalls, x, y);
	}

	private bool IsBottomOfTreeTrunkNoRoots(int x, int y)
	{
		Tile tile = Main.tile[x, y];
		if (!tile.active())
		{
			return false;
		}
		if (!TileID.Sets.IsATreeTrunk[tile.type] && tile.type != 323)
		{
			return false;
		}
		short frameX = tile.frameX;
		short frameY = tile.frameY;
		ushort type = tile.type;
		if (type != 323 && frameY >= 132 && frameY <= 176 && (frameX == 22 || frameX == 44))
		{
			return false;
		}
		return true;
	}

	private void TryReplantingTree()
	{
		ushort type = 20;
		int style = 0;
		if (!TileObject.CanPlace(tileTargetX, tileTargetY, type, style, direction, out var objectData))
		{
			return;
		}
		bool num = TileObject.Place(objectData);
		WorldGen.SquareTileFrame(tileTargetX, tileTargetY);
		if (num)
		{
			TileObjectData.CallPostPlacementPlayerHook(tileTargetX, tileTargetY, type, style, direction, objectData.alternate, objectData);
			if (Main.netMode == 1)
			{
				NetMessage.SendObjectPlacement(-1, tileTargetX, tileTargetY, objectData.type, objectData.style, objectData.alternate, objectData.random, direction);
			}
		}
	}

	private static void ItemCheck_UseMiningTools_TryFindingWallToHammer(out int wX, out int wY)
	{
		wX = tileTargetX;
		wY = tileTargetY;
		bool flag = true;
		if (Main.tile[wX, wY].wall > 0)
		{
			if (!Main.wallHouse[Main.tile[wX, wY].wall])
			{
				for (int i = wX - 1; i < wX + 2; i++)
				{
					for (int j = wY - 1; j < wY + 2; j++)
					{
						if (Main.tile[i, j].wall != Main.tile[wX, wY].wall)
						{
							flag = false;
							break;
						}
					}
				}
			}
			else
			{
				flag = false;
			}
		}
		if (!flag || Main.tile[wX, wY].active())
		{
			return;
		}
		int num = -1;
		if ((double)(((float)Main.mouseX + Main.screenPosition.X) / 16f) < Math.Round(((float)Main.mouseX + Main.screenPosition.X) / 16f))
		{
			num = 0;
		}
		int num2 = -1;
		if ((double)(((float)Main.mouseY + Main.screenPosition.Y) / 16f) < Math.Round(((float)Main.mouseY + Main.screenPosition.Y) / 16f))
		{
			num2 = 0;
		}
		for (int k = tileTargetX + num; k <= tileTargetX + num + 1; k++)
		{
			for (int l = tileTargetY + num2; l <= tileTargetY + num2 + 1; l++)
			{
				if (!flag)
				{
					continue;
				}
				wX = k;
				wY = l;
				if (Main.tile[wX, wY].wall <= 0)
				{
					continue;
				}
				if (!Main.wallHouse[Main.tile[wX, wY].wall])
				{
					for (int m = wX - 1; m < wX + 2; m++)
					{
						for (int n = wY - 1; n < wY + 2; n++)
						{
							if (Main.tile[m, n].wall != Main.tile[wX, wY].wall)
							{
								flag = false;
								break;
							}
						}
					}
				}
				else
				{
					flag = false;
				}
			}
		}
	}

	private void ItemCheck_UseMiningTools_TryHittingWall(Item sItem, int wX, int wY)
	{
		if (Main.tile[wX, wY].wall > 0 && (!Main.tile[wX, wY].active() || wX != tileTargetX || wY != tileTargetY || (!Main.tileHammer[Main.tile[wX, wY].type] && !poundRelease)) && toolTime == 0 && itemAnimation > 0 && controlUseItem && sItem.hammer > 0 && CanPlayerSmashWall(wX, wY))
		{
			int damage = (int)((float)sItem.hammer * 1.5f);
			PickWall(wX, wY, damage);
			itemTime = sItem.useTime / 2;
		}
	}

	public static bool CanPlayerSmashWall(int X, int Y)
	{
		bool result = true;
		if (!Main.wallHouse[Main.tile[X, Y].wall])
		{
			result = false;
			for (int i = X - 1; i < X + 2; i++)
			{
				for (int j = Y - 1; j < Y + 2; j++)
				{
					if (Main.tile[i, j].wall == 0 || Main.wallHouse[Main.tile[i, j].wall])
					{
						result = true;
						break;
					}
				}
			}
		}
		return result;
	}

	public void PickWall(int x, int y, int damage)
	{
		int tileId = hitTile.HitObject(x, y, 2);
		if (hitTile.AddDamage(tileId, damage) >= 100)
		{
			hitTile.Clear(tileId);
			ClearMiningCacheAt(x, y, 2);
			WorldGen.KillWall(x, y);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(17, -1, -1, null, 2, x, y);
			}
		}
		else
		{
			WorldGen.KillWall(x, y, fail: true);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(17, -1, -1, null, 2, x, y, 1f);
			}
		}
		if (damage != 0)
		{
			hitTile.Prune();
		}
	}

	private void ItemCheck_UseMiningTools_TryPoundingTile(Item sItem, int tileHitId, ref bool hitWall, int x, int y)
	{
		Tile tile = Main.tile[x, y];
		if (sItem.hammer > 0 && tile.active() && (Main.tileSolid[tile.type] || tile.type == 314 || tile.type == 351 || tile.type == 424 || tile.type == 442) && poundRelease)
		{
			hitWall = false;
			ApplyItemTime(sItem);
			int damageAmount = 100;
			if (WorldGen.IsLockedDoor(x, y - 1) || WorldGen.IsLockedDoor(x, y + 1))
			{
				damageAmount = 0;
			}
			if (hitTile.AddDamage(tileHitId, damageAmount) >= 100)
			{
				ClearMiningCacheAt(x, y, 1);
				if (!poundRelease)
				{
					return;
				}
				if (TileID.Sets.Platforms[Main.tile[x, y].type])
				{
					if (tile.halfBrick())
					{
						WorldGen.PoundTile(x, y);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, null, 7, x, y, 1f);
						}
					}
					else
					{
						int num = 1;
						int slope = 2;
						if (TileID.Sets.Platforms[Main.tile[x + 1, y - 1].type] || TileID.Sets.Platforms[Main.tile[x - 1, y + 1].type] || (WorldGen.SolidTile(x + 1, y) && !WorldGen.SolidTile(x - 1, y)))
						{
							num = 2;
							slope = 1;
						}
						if (Main.tile[x, y].slope() == 0)
						{
							WorldGen.SlopeTile(x, y, num);
							int num2 = Main.tile[x, y].slope();
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 14, x, y, num2);
							}
						}
						else if (Main.tile[x, y].slope() == num)
						{
							WorldGen.SlopeTile(x, y, slope);
							int num3 = Main.tile[x, y].slope();
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 14, x, y, num3);
							}
						}
						else
						{
							WorldGen.SlopeTile(x, y);
							int num4 = Main.tile[x, y].slope();
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 14, x, y, num4);
							}
							WorldGen.PoundTile(x, y);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(17, -1, -1, null, 7, x, y, 1f);
							}
						}
					}
				}
				else if (Main.tile[x, y].type == 314)
				{
					if (Minecart.FrameTrack(x, y, pound: true) && Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 15, x, y, 1f);
					}
				}
				else if (Main.tile[x, y].type == 137)
				{
					int num5 = 0;
					switch (Main.tile[x, y].frameY / 18)
					{
					case 0:
					case 1:
					case 2:
					case 5:
						switch (Main.tile[x, y].frameX / 18)
						{
						case 0:
							num5 = 2;
							break;
						case 1:
							num5 = 3;
							break;
						case 2:
							num5 = 4;
							break;
						case 3:
							num5 = 5;
							break;
						case 4:
							num5 = 1;
							break;
						case 5:
							num5 = 0;
							break;
						}
						break;
					case 3:
					case 4:
						switch (Main.tile[x, y].frameX / 18)
						{
						case 0:
						case 1:
							num5 = 3;
							break;
						case 3:
							num5 = 2;
							break;
						case 2:
							num5 = 4;
							break;
						case 4:
							num5 = 0;
							break;
						}
						break;
					}
					Main.tile[x, y].frameX = (short)(num5 * 18);
					if (Main.netMode == 1)
					{
						NetMessage.SendTileSquare(-1, x, y);
					}
				}
				else if (Main.tile[x, y].type == 424)
				{
					if (Main.tile[x, y].frameX == 0)
					{
						Main.tile[x, y].frameX = 18;
					}
					else if (Main.tile[x, y].frameX == 18)
					{
						Main.tile[x, y].frameX = 36;
					}
					else
					{
						Main.tile[x, y].frameX = 0;
					}
					if (Main.netMode == 1)
					{
						NetMessage.SendTileSquare(-1, x, y);
					}
				}
				else if (Main.tile[x, y].type == 442)
				{
					Tile tile2 = Main.tile[x, y - 1];
					Tile tile3 = Main.tile[x, y + 1];
					Tile tile4 = Main.tile[x - 1, y];
					Tile tile5 = Main.tile[x + 1, y];
					Tile tile6 = Main.tile[x - 1, y + 1];
					Tile tile7 = Main.tile[x + 1, y + 1];
					Tile tile8 = Main.tile[x - 1, y - 1];
					Tile tile9 = Main.tile[x + 1, y - 1];
					int num6 = -1;
					int num7 = -1;
					int num8 = -1;
					int num9 = -1;
					int tree = -1;
					int tree2 = -1;
					int tree3 = -1;
					int tree4 = -1;
					if (tile2 != null && tile2.nactive() && !tile2.bottomSlope())
					{
						num7 = tile2.type;
					}
					if (tile3 != null && tile3.nactive() && !tile3.halfBrick() && !tile3.topSlope())
					{
						num6 = tile3.type;
					}
					if (tile4 != null && tile4.nactive() && (tile4.slope() == 0 || tile4.slope() % 2 != 1))
					{
						num8 = tile4.type;
					}
					if (tile5 != null && tile5.nactive() && (tile5.slope() == 0 || tile5.slope() % 2 != 0))
					{
						num9 = tile5.type;
					}
					if (tile6 != null && tile6.nactive())
					{
						tree = tile6.type;
					}
					if (tile7 != null && tile7.nactive())
					{
						tree2 = tile7.type;
					}
					if (tile8 != null && tile8.nactive())
					{
						tree3 = tile8.type;
					}
					if (tile9 != null && tile9.nactive())
					{
						tree4 = tile9.type;
					}
					bool flag = false;
					bool flag2 = false;
					bool flag3 = false;
					bool flag4 = false;
					if (num6 >= 0 && Main.tileSolid[num6] && (!Main.tileNoAttach[num6] || TileID.Sets.Platforms[num6]) && (tile3.bottomSlope() || tile3.slope() == 0) && !tile3.halfBrick())
					{
						flag4 = true;
					}
					if (num7 >= 0 && Main.tileSolid[num7] && (!Main.tileNoAttach[num7] || (TileID.Sets.Platforms[num7] && tile2.halfBrick())) && (tile2.topSlope() || tile2.slope() == 0 || tile2.halfBrick()))
					{
						flag = true;
					}
					if ((num8 >= 0 && Main.tileSolid[num8] && !Main.tileNoAttach[num8] && (tile4.leftSlope() || tile4.slope() == 0) && !tile4.halfBrick()) || (num8 >= 0 && TileID.Sets.IsBeam[num8]) || (WorldGen.IsTreeType(num8) && WorldGen.IsTreeType(tree3) && WorldGen.IsTreeType(tree)))
					{
						flag2 = true;
					}
					if ((num9 >= 0 && Main.tileSolid[num9] && !Main.tileNoAttach[num9] && (tile5.rightSlope() || tile5.slope() == 0) && !tile5.halfBrick()) || (num9 >= 0 && TileID.Sets.IsBeam[num9]) || (WorldGen.IsTreeType(num9) && WorldGen.IsTreeType(tree4) && WorldGen.IsTreeType(tree2)))
					{
						flag3 = true;
					}
					int num10 = Main.tile[x, y].frameX / 22;
					short num11 = -2;
					switch (num10)
					{
					case 0:
						num11 = (short)((!flag2) ? (flag ? 1 : ((!flag3) ? (-1) : 3)) : 2);
						break;
					case 2:
						num11 = (short)(flag ? 1 : ((!flag3) ? ((!flag4) ? (-1) : 0) : 3));
						break;
					case 1:
						num11 = (short)((!flag3) ? ((!flag4) ? ((!flag2) ? (-1) : 2) : 0) : 3);
						break;
					case 3:
						num11 = (short)((!flag4) ? ((!flag2) ? (flag ? 1 : (-1)) : 2) : 0);
						break;
					}
					if (num11 != -1)
					{
						if (num11 == -2)
						{
							num11 = 0;
						}
						Main.tile[x, y].frameX = (short)(22 * num11);
						if (Main.netMode == 1)
						{
							NetMessage.SendTileSquare(-1, x, y);
						}
					}
				}
				else if ((Main.tile[x, y].halfBrick() || Main.tile[x, y].slope() != 0) && !Main.tileSolidTop[Main.tile[x, y].type])
				{
					int num12 = 1;
					int num13 = 1;
					int num14 = 2;
					if ((WorldGen.SolidTile(x + 1, y) || Main.tile[x + 1, y].slope() == 1 || Main.tile[x + 1, y].slope() == 3) && !WorldGen.SolidTile(x - 1, y))
					{
						num13 = 2;
						num14 = 1;
					}
					if (WorldGen.SolidTile(x, y - 1) && !WorldGen.SolidTile(x, y + 1))
					{
						num12 = -1;
					}
					if (num12 == 1)
					{
						if (Main.tile[x, y].slope() == 0)
						{
							WorldGen.SlopeTile(x, y, num13);
						}
						else if (Main.tile[x, y].slope() == num13)
						{
							WorldGen.SlopeTile(x, y, num14);
						}
						else if (Main.tile[x, y].slope() == num14)
						{
							WorldGen.SlopeTile(x, y, num13 + 2);
						}
						else if (Main.tile[x, y].slope() == num13 + 2)
						{
							WorldGen.SlopeTile(x, y, num14 + 2);
						}
						else
						{
							WorldGen.SlopeTile(x, y);
						}
					}
					else if (Main.tile[x, y].slope() == 0)
					{
						WorldGen.SlopeTile(x, y, num13 + 2);
					}
					else if (Main.tile[x, y].slope() == num13 + 2)
					{
						WorldGen.SlopeTile(x, y, num14 + 2);
					}
					else if (Main.tile[x, y].slope() == num14 + 2)
					{
						WorldGen.SlopeTile(x, y, num13);
					}
					else if (Main.tile[x, y].slope() == num13)
					{
						WorldGen.SlopeTile(x, y, num14);
					}
					else
					{
						WorldGen.SlopeTile(x, y);
					}
					int num15 = Main.tile[x, y].slope();
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 14, x, y, num15);
					}
				}
				else
				{
					WorldGen.PoundTile(x, y);
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 7, x, y, 1f);
					}
				}
				poundRelease = false;
			}
			else
			{
				WorldGen.KillTile(x, y, fail: true, effectOnly: true);
				SoundEngine.PlaySound(0, x * 16, y * 16);
			}
		}
		else
		{
			poundRelease = false;
		}
	}

	public bool IsTargetTileInItemRange(Item sItem)
	{
		if (position.X / 16f - (float)tileRangeX - (float)sItem.tileBoost <= (float)tileTargetX && (position.X + (float)width) / 16f + (float)tileRangeX + (float)sItem.tileBoost - 1f >= (float)tileTargetX && position.Y / 16f - (float)tileRangeY - (float)sItem.tileBoost <= (float)tileTargetY)
		{
			return (position.Y + (float)height) / 16f + (float)tileRangeY + (float)sItem.tileBoost - 2f >= (float)tileTargetY;
		}
		return false;
	}

	private void ItemCheck_UseBuckets(Item sItem)
	{
		if (((sItem.type < 205 || sItem.type > 207) && sItem.type != 1128 && sItem.type != 3031 && sItem.type != 3032 && sItem.type != 4820 && sItem.type != 4872 && sItem.type != 5302 && sItem.type != 5303 && sItem.type != 5304 && sItem.type != 5364) || noBuilding || !(position.X / 16f - (float)tileRangeX - (float)sItem.tileBoost <= (float)tileTargetX) || !((position.X + (float)width) / 16f + (float)tileRangeX + (float)sItem.tileBoost - 1f >= (float)tileTargetX) || !(position.Y / 16f - (float)tileRangeY - (float)sItem.tileBoost <= (float)tileTargetY) || !((position.Y + (float)height) / 16f + (float)tileRangeY + (float)sItem.tileBoost - 2f >= (float)tileTargetY))
		{
			return;
		}
		if (!Main.GamepadDisableCursorItemIcon)
		{
			cursorItemIconEnabled = true;
			Main.ItemIconCacheUpdate(sItem.type);
		}
		if (!ItemTimeIsZero || itemAnimation <= 0 || !controlUseItem)
		{
			return;
		}
		if ((sItem.type == 205 && !Main.tile[tileTargetX, tileTargetY].shimmer()) || (sItem.type == 3032 && Main.tile[tileTargetX, tileTargetY].liquidType() == 0) || (sItem.type == 3032 && Main.tile[tileTargetX, tileTargetY].shimmer()) || (sItem.type == 4872 && Main.tile[tileTargetX, tileTargetY].lava()) || (sItem.type == 5303 && Main.tile[tileTargetX, tileTargetY].honey()) || sItem.type == 5304)
		{
			int num = Main.tile[tileTargetX, tileTargetY].liquidType();
			int num2 = 0;
			for (int i = tileTargetX - 1; i <= tileTargetX + 1; i++)
			{
				for (int j = tileTargetY - 1; j <= tileTargetY + 1; j++)
				{
					if (Main.tile[i, j].liquidType() == num)
					{
						num2 += Main.tile[i, j].liquid;
					}
				}
			}
			if (Main.tile[tileTargetX, tileTargetY].liquid <= 0 || (num2 <= 100 && sItem.type != 3032 && sItem.type != 4872 && sItem.type != 5303 && sItem.type != 5304))
			{
				return;
			}
			int liquidType = Main.tile[tileTargetX, tileTargetY].liquidType();
			if (sItem.type != 3032 && sItem.type != 4872 && sItem.type != 5303 && sItem.type != 5304)
			{
				if (Main.tile[tileTargetX, tileTargetY].honey() && sItem.type == 205)
				{
					sItem.stack--;
					PutItemInInventoryFromItemUsage(1128, selectedItem);
				}
				else if (Main.tile[tileTargetX, tileTargetY].lava() && sItem.type == 205)
				{
					sItem.stack--;
					PutItemInInventoryFromItemUsage(207, selectedItem);
				}
				else
				{
					if (Main.tile[tileTargetX, tileTargetY].shimmer() && sItem.type == 205)
					{
						return;
					}
					sItem.stack--;
					PutItemInInventoryFromItemUsage(206, selectedItem);
				}
			}
			SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
			ApplyItemTime(sItem);
			int num3 = Main.tile[tileTargetX, tileTargetY].liquid;
			Main.tile[tileTargetX, tileTargetY].liquid = 0;
			Main.tile[tileTargetX, tileTargetY].lava(lava: false);
			Main.tile[tileTargetX, tileTargetY].honey(honey: false);
			WorldGen.SquareTileFrame(tileTargetX, tileTargetY, resetFrame: false);
			if (Main.netMode == 1)
			{
				NetMessage.sendWater(tileTargetX, tileTargetY);
			}
			else
			{
				Liquid.AddWater(tileTargetX, tileTargetY);
			}
			if (num3 >= 255)
			{
				return;
			}
			for (int k = tileTargetX - 1; k <= tileTargetX + 1; k++)
			{
				for (int l = tileTargetY - 1; l <= tileTargetY + 1; l++)
				{
					if ((k != tileTargetX || l != tileTargetY) && Main.tile[k, l].liquid > 0 && Main.tile[k, l].liquidType() == num)
					{
						int num4 = Main.tile[k, l].liquid;
						if (num4 + num3 > 255)
						{
							num4 = 255 - num3;
						}
						num3 += num4;
						Main.tile[k, l].liquid -= (byte)num4;
						Main.tile[k, l].liquidType(liquidType);
						if (Main.tile[k, l].liquid == 0)
						{
							Main.tile[k, l].lava(lava: false);
							Main.tile[k, l].honey(honey: false);
						}
						WorldGen.SquareTileFrame(k, l, resetFrame: false);
						if (Main.netMode == 1)
						{
							NetMessage.sendWater(k, l);
						}
						else
						{
							Liquid.AddWater(k, l);
						}
					}
				}
			}
		}
		else
		{
			if (Main.tile[tileTargetX, tileTargetY].liquid >= 200 || (Main.tile[tileTargetX, tileTargetY].nactive() && Main.tileSolid[Main.tile[tileTargetX, tileTargetY].type] && !Main.tileSolidTop[Main.tile[tileTargetX, tileTargetY].type] && Main.tile[tileTargetX, tileTargetY].type != 546))
			{
				return;
			}
			if (sItem.type == 207 || sItem.type == 4820)
			{
				if (Main.tile[tileTargetX, tileTargetY].liquid == 0 || Main.tile[tileTargetX, tileTargetY].liquidType() == 1)
				{
					SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
					Main.tile[tileTargetX, tileTargetY].liquidType(1);
					Main.tile[tileTargetX, tileTargetY].liquid = byte.MaxValue;
					WorldGen.SquareTileFrame(tileTargetX, tileTargetY);
					if (sItem.type != 4820)
					{
						sItem.stack--;
						PutItemInInventoryFromItemUsage(205, selectedItem);
					}
					ApplyItemTime(sItem);
					if (Main.netMode == 1)
					{
						NetMessage.sendWater(tileTargetX, tileTargetY);
					}
				}
			}
			else if (sItem.type == 206 || sItem.type == 3031)
			{
				if (Main.tile[tileTargetX, tileTargetY].liquid == 0 || Main.tile[tileTargetX, tileTargetY].liquidType() == 0)
				{
					SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
					Main.tile[tileTargetX, tileTargetY].liquidType(0);
					Main.tile[tileTargetX, tileTargetY].liquid = byte.MaxValue;
					WorldGen.SquareTileFrame(tileTargetX, tileTargetY);
					if (sItem.type != 3031)
					{
						sItem.stack--;
						PutItemInInventoryFromItemUsage(205, selectedItem);
					}
					ApplyItemTime(sItem);
					if (Main.netMode == 1)
					{
						NetMessage.sendWater(tileTargetX, tileTargetY);
					}
				}
			}
			else if (sItem.type == 1128 || sItem.type == 5302)
			{
				if (Main.tile[tileTargetX, tileTargetY].liquid == 0 || Main.tile[tileTargetX, tileTargetY].liquidType() == 2)
				{
					SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
					Main.tile[tileTargetX, tileTargetY].liquidType(2);
					Main.tile[tileTargetX, tileTargetY].liquid = byte.MaxValue;
					WorldGen.SquareTileFrame(tileTargetX, tileTargetY);
					if (sItem.type != 5302)
					{
						sItem.stack--;
						PutItemInInventoryFromItemUsage(205, selectedItem);
					}
					ApplyItemTime(sItem);
					if (Main.netMode == 1)
					{
						NetMessage.sendWater(tileTargetX, tileTargetY);
					}
				}
			}
			else if (sItem.type == 5364 && (Main.tile[tileTargetX, tileTargetY].liquid == 0 || Main.tile[tileTargetX, tileTargetY].liquidType() == 3))
			{
				SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
				Main.tile[tileTargetX, tileTargetY].liquidType(3);
				Main.tile[tileTargetX, tileTargetY].liquid = byte.MaxValue;
				WorldGen.SquareTileFrame(tileTargetX, tileTargetY);
				ApplyItemTime(sItem);
				if (Main.netMode == 1)
				{
					NetMessage.sendWater(tileTargetX, tileTargetY);
				}
			}
		}
	}

	private void ItemCheck_PlayInstruments(Item sItem)
	{
		Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
		float num = (float)Main.mouseX + Main.screenPosition.X - vector.X;
		float num2 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
		float num3 = (float)Math.Sqrt(num * num + num2 * num2);
		float num4 = (float)Main.screenHeight / Main.GameViewMatrix.Zoom.Y;
		num3 /= num4 / 2f;
		if (num3 > 1f)
		{
			num3 = 1f;
		}
		musicDist = num3;
		if (itemAnimation > 0 && ItemTimeIsZero && (sItem.type == 508 || sItem.type == 507))
		{
			ApplyItemTime(sItem);
			Vector2 vector2 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num5 = (float)Main.mouseX + Main.screenPosition.X - vector2.X;
			float num6 = (float)Main.mouseY + Main.screenPosition.Y - vector2.Y;
			float num7 = (float)Math.Sqrt(num5 * num5 + num6 * num6);
			float num8 = (float)Main.screenHeight / Main.GameViewMatrix.Zoom.Y;
			num7 /= num8 / 2f;
			if (num7 > 1f)
			{
				num7 = 1f;
			}
			num7 = num7 * 2f - 1f;
			if (num7 < -1f)
			{
				num7 = -1f;
			}
			if (num7 > 1f)
			{
				num7 = 1f;
			}
			num7 = (float)Math.Round(num7 * (float)musicNotes);
			num7 = (Main.musicPitch = num7 / (float)musicNotes);
			LegacySoundStyle type = SoundID.Item26;
			if (sItem.type == 507)
			{
				type = SoundID.Item35;
			}
			SoundEngine.PlaySound(type, position);
			NetMessage.SendData(58, -1, -1, null, whoAmI, num7);
		}
		if (itemAnimation <= 0 || mouseInterface)
		{
			return;
		}
		if (Main.mouseLeft && Main.mouseLeftRelease)
		{
			if (sItem.type == 1305)
			{
				Vector2 vector3 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num9 = (float)Main.mouseX + Main.screenPosition.X - vector3.X;
				float num10 = (float)Main.mouseY + Main.screenPosition.Y - vector3.Y;
				float num11 = (float)Math.Sqrt(num9 * num9 + num10 * num10);
				float num12 = (float)Main.screenHeight / Main.GameViewMatrix.Zoom.Y;
				num11 /= num12 / 2f;
				if (num11 > 1f)
				{
					num11 = 1f;
				}
				num11 = num11 * 2f - 1f;
				if (num11 < -1f)
				{
					num11 = -1f;
				}
				if (num11 > 1f)
				{
					num11 = 1f;
				}
				num11 = (float)Math.Round(num11 * (float)musicNotes);
				num11 = (Main.musicPitch = num11 / (float)musicNotes);
				SoundEngine.PlaySound(SoundID.Item47, position);
				NetMessage.SendData(58, -1, -1, null, whoAmI, num11);
			}
			else if (sItem.type == 4057 || sItem.type == 4372)
			{
				Vector2 vector4 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num13 = (float)Main.mouseX + Main.screenPosition.X - vector4.X;
				float num14 = (float)Main.mouseY + Main.screenPosition.Y - vector4.Y;
				float num15 = (float)Math.Sqrt(num13 * num13 + num14 * num14);
				float num16 = (float)Main.screenHeight / Main.GameViewMatrix.Zoom.Y;
				num15 /= num16 / 2f;
				if (num15 > 1f)
				{
					num15 = 1f;
				}
				PlayGuitarChord(num15);
				NetMessage.SendData(58, -1, -1, null, whoAmI, num15);
			}
		}
		if (sItem.type == 4715 && ((Main.mouseLeft && Main.mouseLeftRelease) | ItemAnimationJustStarted))
		{
			Vector2 vector5 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num17 = (float)Main.mouseX + Main.screenPosition.X - vector5.X;
			float num18 = (float)Main.mouseY + Main.screenPosition.Y - vector5.Y;
			float num19 = (float)Math.Sqrt(num17 * num17 + num18 * num18);
			float num20 = (float)Main.screenHeight / Main.GameViewMatrix.Zoom.Y;
			num19 /= num20 / 2f;
			if (num19 > 1f)
			{
				num19 = 1f;
			}
			PlayGuitarChord(num19);
			NetMessage.SendData(58, -1, -1, null, whoAmI, num19);
		}
		if (sItem.type != 4673)
		{
			return;
		}
		int num21 = (int)base.Center.X / 16;
		int num22 = (int)base.Center.Y / 16;
		if (WorldGen.InWorld(num21, num22) && Main.tile[num21, num22] != null && Main.tile[num21, num22].type == 486 && ((Main.mouseLeft && Main.mouseLeftRelease) || (Main.mouseRight && Main.mouseRightRelease)))
		{
			Vector2 vector6 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num23 = (float)Main.mouseX + Main.screenPosition.X - vector6.X;
			float num24 = (float)Main.mouseY + Main.screenPosition.Y - vector6.Y;
			float num25 = (float)Math.Sqrt(num23 * num23 + num24 * num24);
			float num26 = (float)Main.screenHeight / Main.GameViewMatrix.Zoom.Y;
			num25 /= num26 / 2f;
			if (num25 > 1f)
			{
				num25 = 1f;
			}
			PlayDrums(num25);
			NetMessage.SendData(58, -1, -1, null, whoAmI, num25);
		}
	}

	private bool GetSparkleGuitarTarget(out List<NPC> validTargets)
	{
		validTargets = new List<NPC>();
		Rectangle value = Utils.CenteredRectangle(base.Center, new Vector2(1000f, 800f));
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.CanBeChasedBy(this) && nPC.Hitbox.Intersects(value))
			{
				validTargets.Add(nPC);
			}
		}
		if (validTargets.Count == 0)
		{
			return false;
		}
		return true;
	}

	private bool GetZenithTarget(Vector2 searchCenter, float maxDistance, out int npcTargetIndex)
	{
		npcTargetIndex = 0;
		int? num = null;
		float num2 = maxDistance;
		for (int i = 0; i < 200; i++)
		{
			NPC nPC = Main.npc[i];
			if (nPC.CanBeChasedBy(this))
			{
				float num3 = searchCenter.Distance(nPC.Center);
				if (!(num2 <= num3))
				{
					num = i;
					num2 = num3;
				}
			}
		}
		if (!num.HasValue)
		{
			return false;
		}
		npcTargetIndex = num.Value;
		return true;
	}

	public void PlayGuitarChord(float range)
	{
		int num = 6;
		float num2 = 1f / (float)num;
		if (range > num2 * 5f)
		{
			SoundEngine.PlaySound(49, base.Center);
		}
		else if (range > num2 * 4f)
		{
			SoundEngine.PlaySound(48, base.Center);
		}
		else if (range > num2 * 3f)
		{
			SoundEngine.PlaySound(47, base.Center);
		}
		else if (range > num2 * 2f)
		{
			SoundEngine.PlaySound(51, base.Center);
		}
		else if (range > num2 * 1f)
		{
			SoundEngine.PlaySound(52, base.Center);
		}
		else
		{
			SoundEngine.PlaySound(50, base.Center);
		}
	}

	public void PlayDrums(float range)
	{
		int num = 10;
		float num2 = 1f / (float)num;
		if (range > num2 * 9f)
		{
			SoundEngine.PlaySound(59, base.Center);
		}
		else if (range > num2 * 8f)
		{
			SoundEngine.PlaySound(58, base.Center);
		}
		else if (range > num2 * 7f)
		{
			SoundEngine.PlaySound(53, base.Center);
		}
		else if (range > num2 * 6f)
		{
			SoundEngine.PlaySound(57, base.Center);
		}
		else if (range > num2 * 5f)
		{
			SoundEngine.PlaySound(62, base.Center);
		}
		else if (range > num2 * 4f)
		{
			SoundEngine.PlaySound(61, base.Center);
		}
		else if (range > num2 * 3f)
		{
			SoundEngine.PlaySound(54, base.Center);
		}
		else if (range > num2 * 2f)
		{
			SoundEngine.PlaySound(56, base.Center);
		}
		else if (range > num2 * 1f)
		{
			SoundEngine.PlaySound(55, base.Center);
		}
		else
		{
			SoundEngine.PlaySound(60, base.Center);
		}
	}

	private void ItemCheck_UseWiringTools(Item sItem)
	{
		if ((sItem.type != 509 && sItem.type != 510 && sItem.type != 849 && sItem.type != 850 && sItem.type != 851 && sItem.type != 3612 && sItem.type != 3620 && sItem.type != 3625) || !(position.X / 16f - (float)tileRangeX - (float)sItem.tileBoost - (float)blockRange <= (float)tileTargetX) || !((position.X + (float)width) / 16f + (float)tileRangeX + (float)sItem.tileBoost - 1f + (float)blockRange >= (float)tileTargetX) || !(position.Y / 16f - (float)tileRangeY - (float)sItem.tileBoost - (float)blockRange <= (float)tileTargetY) || !((position.Y + (float)height) / 16f + (float)tileRangeY + (float)sItem.tileBoost - 2f + (float)blockRange >= (float)tileTargetY))
		{
			return;
		}
		if (!Main.GamepadDisableCursorItemIcon)
		{
			cursorItemIconEnabled = true;
			Main.ItemIconCacheUpdate(sItem.type);
		}
		if (!CanDoWireStuffHere(tileTargetX, tileTargetY) || itemAnimation <= 0 || !ItemTimeIsZero || !controlUseItem)
		{
			return;
		}
		int num = tileTargetX;
		int num2 = tileTargetY;
		if (sItem.type == 509)
		{
			int num3 = -1;
			for (int i = 0; i < 58; i++)
			{
				if (inventory[i].stack > 0 && inventory[i].type == 530)
				{
					num3 = i;
					break;
				}
			}
			if (num3 >= 0 && WorldGen.PlaceWire(num, num2))
			{
				inventory[num3].stack--;
				if (inventory[num3].stack <= 0)
				{
					inventory[num3].SetDefaults();
				}
				ApplyItemTime(sItem);
				NetMessage.SendData(17, -1, -1, null, 5, tileTargetX, tileTargetY);
			}
		}
		else if (sItem.type == 850)
		{
			int num4 = -1;
			for (int j = 0; j < 58; j++)
			{
				if (inventory[j].stack > 0 && inventory[j].type == 530)
				{
					num4 = j;
					break;
				}
			}
			if (num4 >= 0 && WorldGen.PlaceWire2(num, num2))
			{
				inventory[num4].stack--;
				if (inventory[num4].stack <= 0)
				{
					inventory[num4].SetDefaults();
				}
				ApplyItemTime(sItem);
				NetMessage.SendData(17, -1, -1, null, 10, tileTargetX, tileTargetY);
			}
		}
		if (sItem.type == 851)
		{
			int num5 = -1;
			for (int k = 0; k < 58; k++)
			{
				if (inventory[k].stack > 0 && inventory[k].type == 530)
				{
					num5 = k;
					break;
				}
			}
			if (num5 >= 0 && WorldGen.PlaceWire3(num, num2))
			{
				inventory[num5].stack--;
				if (inventory[num5].stack <= 0)
				{
					inventory[num5].SetDefaults();
				}
				ApplyItemTime(sItem);
				NetMessage.SendData(17, -1, -1, null, 12, tileTargetX, tileTargetY);
			}
		}
		if (sItem.type == 3612)
		{
			int num6 = -1;
			for (int l = 0; l < 58; l++)
			{
				if (inventory[l].stack > 0 && inventory[l].type == 530)
				{
					num6 = l;
					break;
				}
			}
			if (num6 >= 0 && WorldGen.PlaceWire4(num, num2))
			{
				inventory[num6].stack--;
				if (inventory[num6].stack <= 0)
				{
					inventory[num6].SetDefaults();
				}
				ApplyItemTime(sItem);
				NetMessage.SendData(17, -1, -1, null, 16, tileTargetX, tileTargetY);
			}
		}
		else if (sItem.type == 510)
		{
			if (WorldGen.KillActuator(num, num2))
			{
				ApplyItemTime(sItem);
				NetMessage.SendData(17, -1, -1, null, 9, tileTargetX, tileTargetY);
			}
			else if (WorldGen.KillWire4(num, num2))
			{
				ApplyItemTime(sItem);
				NetMessage.SendData(17, -1, -1, null, 17, tileTargetX, tileTargetY);
			}
			else if (WorldGen.KillWire3(num, num2))
			{
				ApplyItemTime(sItem);
				NetMessage.SendData(17, -1, -1, null, 13, tileTargetX, tileTargetY);
			}
			else if (WorldGen.KillWire2(num, num2))
			{
				ApplyItemTime(sItem);
				NetMessage.SendData(17, -1, -1, null, 11, tileTargetX, tileTargetY);
			}
			else if (WorldGen.KillWire(num, num2))
			{
				ApplyItemTime(sItem);
				NetMessage.SendData(17, -1, -1, null, 6, tileTargetX, tileTargetY);
			}
		}
		else if (sItem.type == 849 && sItem.stack > 0 && WorldGen.PlaceActuator(num, num2))
		{
			ApplyItemTime(sItem);
			NetMessage.SendData(17, -1, -1, null, 8, tileTargetX, tileTargetY);
			sItem.stack--;
			if (sItem.stack <= 0)
			{
				sItem.SetDefaults();
			}
		}
		if (sItem.type == 3620)
		{
			Tile tile = Main.tile[num, num2];
			if (tile != null && tile.actuator())
			{
				bool flag = tile.inActive();
				if ((!ActuationRodLock || ActuationRodLockSetting == tile.inActive()) && Wiring.Actuate(num, num2) && flag != tile.inActive())
				{
					ActuationRodLock = true;
					ActuationRodLockSetting = !tile.inActive();
					ApplyItemTime(sItem);
					NetMessage.SendData(17, -1, -1, null, 19, tileTargetX, tileTargetY);
				}
			}
		}
		if (sItem.type == 3625)
		{
			Point point = new Point(tileTargetX, tileTargetY);
			ApplyItemTime(sItem);
			WiresUI.Settings.MultiToolMode toolMode = WiresUI.Settings.ToolMode;
			WiresUI.Settings.ToolMode &= ~WiresUI.Settings.MultiToolMode.Actuator;
			if (Main.netMode == 1)
			{
				NetMessage.SendData(109, -1, -1, null, point.X, point.Y, point.X, point.Y, (int)WiresUI.Settings.ToolMode);
			}
			else
			{
				Wiring.MassWireOperation(point, point, this);
			}
			WiresUI.Settings.ToolMode = toolMode;
		}
	}

	public bool CanDoWireStuffHere(int x, int y)
	{
		if (!WorldGen.InWorld(x, y))
		{
			return false;
		}
		if (!NPC.downedGolemBoss && Main.tile[x, y].wall == 87)
		{
			return false;
		}
		return true;
	}

	private void ItemCheck_UseLawnMower(Item sItem)
	{
		if (sItem.type == 4049 && position.X / 16f - (float)tileRangeX - (float)sItem.tileBoost - (float)blockRange <= (float)tileTargetX && (position.X + (float)width) / 16f + (float)tileRangeX + (float)sItem.tileBoost - 1f + (float)blockRange >= (float)tileTargetX && position.Y / 16f - (float)tileRangeY - (float)sItem.tileBoost - (float)blockRange <= (float)tileTargetY && (position.Y + (float)height) / 16f + (float)tileRangeY + (float)sItem.tileBoost - 2f + (float)blockRange >= (float)tileTargetY && itemAnimation > 0 && ItemTimeIsZero && controlUseItem)
		{
			MowGrassTile(new Point(tileTargetX, tileTargetY).ToWorldCoordinates());
			ApplyItemTime(sItem);
		}
	}

	private void DestroyOldestProximityMinesOverMinesCap(int minesCap)
	{
		_oldestProjCheckList.Clear();
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile = Main.projectile[i];
			if (projectile.active && projectile.owner == whoAmI)
			{
				switch (projectile.type)
				{
				case 135:
				case 138:
				case 141:
				case 144:
				case 778:
				case 782:
				case 786:
				case 789:
				case 792:
				case 795:
				case 798:
				case 801:
					_oldestProjCheckList.Add(projectile);
					break;
				}
			}
		}
		while (_oldestProjCheckList.Count > minesCap)
		{
			Projectile projectile2 = _oldestProjCheckList[0];
			for (int j = 1; j < _oldestProjCheckList.Count; j++)
			{
				if (_oldestProjCheckList[j].timeLeft < projectile2.timeLeft)
				{
					projectile2 = _oldestProjCheckList[j];
				}
			}
			projectile2.Kill();
			_oldestProjCheckList.Remove(projectile2);
		}
		_oldestProjCheckList.Clear();
	}

	private void ItemCheck_Shoot(int i, Item sItem, int weaponDamage)
	{
		int projToShoot = sItem.shoot;
		float speed = sItem.shootSpeed;
		int damage = sItem.damage;
		if (sItem.melee && !ProjectileID.Sets.NoMeleeSpeedVelocityScaling[projToShoot])
		{
			speed /= meleeSpeed;
		}
		bool canShoot = false;
		int Damage = weaponDamage;
		float KnockBack = sItem.knockBack;
		int usedAmmoItemId = 0;
		if (sItem.useAmmo > 0)
		{
			PickAmmo(sItem, ref projToShoot, ref speed, ref canShoot, ref Damage, ref KnockBack, out usedAmmoItemId, ItemID.Sets.gunProj[sItem.type]);
		}
		else
		{
			canShoot = true;
		}
		if (ItemID.Sets.gunProj[sItem.type])
		{
			KnockBack = sItem.knockBack;
			Damage = weaponDamage;
			speed = sItem.shootSpeed;
		}
		if (sItem.IsACoin)
		{
			canShoot = false;
		}
		if (sItem.type == 1254 && projToShoot == 14)
		{
			projToShoot = 242;
		}
		if (sItem.type == 1255 && projToShoot == 14)
		{
			projToShoot = 242;
		}
		if (sItem.type == 1265 && projToShoot == 14)
		{
			projToShoot = 242;
		}
		if (sItem.type == 3542)
		{
			if (Main.rand.Next(100) < 20)
			{
				projToShoot++;
				Damage *= 3;
			}
			else
			{
				speed -= 1f;
			}
		}
		if (sItem.type == 1928)
		{
			Damage = (int)((float)Damage * 1f);
		}
		if (sItem.type == 3063)
		{
			Damage = (int)((float)Damage * 1.25f);
		}
		if (sItem.type == 1306)
		{
			Damage = (int)((double)Damage * 0.67);
		}
		if (sItem.type == 1227)
		{
			Damage = (int)((double)Damage * 0.7);
		}
		if (!canShoot)
		{
			return;
		}
		KnockBack = GetWeaponKnockback(sItem, KnockBack);
		IEntitySource projectileSource_Item_WithPotentialAmmo = GetProjectileSource_Item_WithPotentialAmmo(sItem, usedAmmoItemId);
		if (projToShoot == 228)
		{
			KnockBack = 0f;
		}
		if (projToShoot == 1 && sItem.type == 120)
		{
			projToShoot = 2;
		}
		if (sItem.type == 682)
		{
			projToShoot = 117;
		}
		if (sItem.type == 725)
		{
			projToShoot = 120;
		}
		if (sItem.type == 2796)
		{
			projToShoot = 442;
		}
		if (sItem.type == 2223)
		{
			projToShoot = 357;
		}
		if (sItem.type == 5117)
		{
			projToShoot = 968;
		}
		if (sItem.fishingPole > 0 && overrideFishingBobber > -1)
		{
			projToShoot = overrideFishingBobber;
		}
		ApplyItemTime(sItem);
		Vector2 pointPoisition = RotatedRelativePoint(MountedCenter);
		bool flag = true;
		int type = sItem.type;
		if (type == 723 || type == 3611)
		{
			flag = false;
		}
		Vector2 value = Vector2.UnitX.RotatedBy(fullRotation);
		Vector2 vector = Main.MouseWorld - pointPoisition;
		Vector2 v = itemRotation.ToRotationVector2() * direction;
		if (sItem.type == 3852 && !ItemAnimationJustStarted)
		{
			vector = (v.ToRotation() + fullRotation).ToRotationVector2();
		}
		if (vector != Vector2.Zero)
		{
			vector.Normalize();
		}
		float num = Vector2.Dot(value, vector);
		if (flag)
		{
			if (num > 0f)
			{
				ChangeDir(1);
			}
			else
			{
				ChangeDir(-1);
			}
		}
		if (sItem.type == 3094 || sItem.type == 3378 || sItem.type == 3543)
		{
			pointPoisition.Y = position.Y + (float)(height / 3);
		}
		if (sItem.type == 5117)
		{
			pointPoisition.Y = position.Y + (float)(height / 3);
		}
		if (sItem.type == 517)
		{
			pointPoisition.X += (float)Main.rand.Next(-3, 4) * 3.5f;
			pointPoisition.Y += (float)Main.rand.Next(-3, 4) * 3.5f;
		}
		if (sItem.type == 2611)
		{
			Vector2 vector2 = vector;
			if (vector2 != Vector2.Zero)
			{
				vector2.Normalize();
			}
			pointPoisition += vector2;
		}
		if (sItem.type == 3827)
		{
			pointPoisition += vector.SafeNormalize(Vector2.Zero).RotatedBy((float)direction * (-(float)Math.PI / 2f)) * 24f;
		}
		if (projToShoot == 9)
		{
			pointPoisition = new Vector2(position.X + (float)width * 0.5f + (float)(Main.rand.Next(201) * -direction) + ((float)Main.mouseX + Main.screenPosition.X - position.X), MountedCenter.Y - 600f);
			KnockBack = 0f;
			Damage = (int)((float)Damage * 1.5f);
		}
		if (sItem.type == 986 || sItem.type == 281)
		{
			pointPoisition.X += 6 * direction;
			pointPoisition.Y -= 6f * gravDir;
		}
		if (sItem.type == 3007)
		{
			pointPoisition.X -= 4 * direction;
			pointPoisition.Y -= 2f * gravDir;
		}
		float num2 = (float)Main.mouseX + Main.screenPosition.X - pointPoisition.X;
		float num3 = (float)Main.mouseY + Main.screenPosition.Y - pointPoisition.Y;
		if (sItem.type == 3852 && !ItemAnimationJustStarted)
		{
			Vector2 vector3 = vector;
			num2 = vector3.X;
			num3 = vector3.Y;
		}
		if (gravDir == -1f)
		{
			num3 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - pointPoisition.Y;
		}
		float num4 = (float)Math.Sqrt(num2 * num2 + num3 * num3);
		float num5 = num4;
		if ((float.IsNaN(num2) && float.IsNaN(num3)) || (num2 == 0f && num3 == 0f))
		{
			num2 = direction;
			num3 = 0f;
			num4 = speed;
		}
		else
		{
			num4 = speed / num4;
		}
		if (sItem.type == 1929 || sItem.type == 2270)
		{
			num2 += (float)Main.rand.Next(-50, 51) * 0.03f / num4;
			num3 += (float)Main.rand.Next(-50, 51) * 0.03f / num4;
		}
		num2 *= num4;
		num3 *= num4;
		if (projToShoot == 250)
		{
			for (int j = 0; j < 1000; j++)
			{
				if (Main.projectile[j].active && Main.projectile[j].owner == whoAmI && (Main.projectile[j].type == 250 || Main.projectile[j].type == 251))
				{
					Main.projectile[j].Kill();
				}
			}
		}
		if (projToShoot == 12 && Collision.CanHitLine(base.Center, 0, 0, pointPoisition + new Vector2(num2, num3) * 4f, 0, 0))
		{
			pointPoisition += new Vector2(num2, num3) * 3f;
		}
		if (projToShoot == 728 && !Collision.CanHitLine(base.Center, 0, 0, pointPoisition + new Vector2(num2, num3) * 2f, 0, 0))
		{
			Vector2 vector4 = new Vector2(num2, num3) * 0.25f;
			pointPoisition = base.Center - vector4;
		}
		if (projToShoot == 85)
		{
			pointPoisition += new Vector2(0f, -6f * (float)direction * Directions.Y).RotatedBy(vector.ToRotation());
			if (Collision.CanHitLine(pointPoisition, 0, 0, pointPoisition + new Vector2(num2, num3) * 5f, 0, 0))
			{
				pointPoisition += new Vector2(num2, num3) * 4f;
			}
		}
		if (projToShoot == 802 || projToShoot == 842)
		{
			Vector2 v2 = new Vector2(num2, num3);
			float num6 = (float)Math.PI / 4f;
			Vector2 vector5 = v2.SafeNormalize(Vector2.Zero).RotatedBy(num6 * (Main.rand.NextFloat() - 0.5f)) * (v2.Length() - Main.rand.NextFloatDirection() * 0.7f);
			num2 = vector5.X;
			num3 = vector5.Y;
		}
		if (sItem.useStyle == 5)
		{
			if (sItem.type == 3029)
			{
				Vector2 vector6 = new Vector2(num2, num3);
				vector6.X = (float)Main.mouseX + Main.screenPosition.X - pointPoisition.X;
				vector6.Y = (float)Main.mouseY + Main.screenPosition.Y - pointPoisition.Y - 1000f;
				itemRotation = (float)Math.Atan2(vector6.Y * (float)direction, vector6.X * (float)direction);
				NetMessage.SendData(13, -1, -1, null, whoAmI);
				NetMessage.SendData(41, -1, -1, null, whoAmI);
			}
			else if (sItem.type == 4381)
			{
				Vector2 vector7 = new Vector2(num2, num3);
				vector7.X = (float)Main.mouseX + Main.screenPosition.X - pointPoisition.X;
				vector7.Y = (float)Main.mouseY + Main.screenPosition.Y - pointPoisition.Y - 1000f;
				itemRotation = (float)Math.Atan2(vector7.Y * (float)direction, vector7.X * (float)direction);
				NetMessage.SendData(13, -1, -1, null, whoAmI);
				NetMessage.SendData(41, -1, -1, null, whoAmI);
			}
			else if (sItem.type == 3779)
			{
				itemRotation = 0f;
				NetMessage.SendData(13, -1, -1, null, whoAmI);
				NetMessage.SendData(41, -1, -1, null, whoAmI);
			}
			else
			{
				itemRotation = (float)Math.Atan2(num3 * (float)direction, num2 * (float)direction) - fullRotation;
				NetMessage.SendData(13, -1, -1, null, whoAmI);
				NetMessage.SendData(41, -1, -1, null, whoAmI);
			}
		}
		if (sItem.useStyle == 13)
		{
			itemRotation = (float)Math.Atan2(num3 * (float)direction, num2 * (float)direction) - fullRotation;
			NetMessage.SendData(13, -1, -1, null, whoAmI);
			NetMessage.SendData(41, -1, -1, null, whoAmI);
		}
		if (projToShoot == 17)
		{
			pointPoisition.X = (float)Main.mouseX + Main.screenPosition.X;
			pointPoisition.Y = (float)Main.mouseY + Main.screenPosition.Y;
			if (gravDir == -1f)
			{
				pointPoisition.Y = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY;
			}
			LimitPointToPlayerReachableArea(ref pointPoisition);
		}
		if (projToShoot == 76)
		{
			projToShoot += Main.rand.Next(3);
			float num7 = (float)Main.screenHeight / Main.GameViewMatrix.Zoom.Y;
			num5 /= num7 / 2f;
			if (num5 > 1f)
			{
				num5 = 1f;
			}
			float num8 = num2 + (float)Main.rand.Next(-40, 41) * 0.01f;
			float num9 = num3 + (float)Main.rand.Next(-40, 41) * 0.01f;
			num8 *= num5 + 0.25f;
			num9 *= num5 + 0.25f;
			int num10 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num8, num9, projToShoot, Damage, KnockBack, i);
			Main.projectile[num10].ai[1] = 1f;
			num5 = num5 * 2f - 1f;
			if (num5 < -1f)
			{
				num5 = -1f;
			}
			if (num5 > 1f)
			{
				num5 = 1f;
			}
			num5 = (float)Math.Round(num5 * (float)musicNotes);
			num5 /= (float)musicNotes;
			Main.projectile[num10].ai[0] = num5;
			NetMessage.SendData(27, -1, -1, null, num10);
		}
		else if (sItem.type == 3029)
		{
			int num11 = 3;
			if (projToShoot == 91 || projToShoot == 4 || projToShoot == 5 || projToShoot == 41)
			{
				if (Main.rand.Next(3) == 0)
				{
					num11--;
				}
			}
			else if (Main.rand.Next(3) == 0)
			{
				num11++;
			}
			for (int k = 0; k < num11; k++)
			{
				pointPoisition = new Vector2(position.X + (float)width * 0.5f + (float)(Main.rand.Next(201) * -direction) + ((float)Main.mouseX + Main.screenPosition.X - position.X), MountedCenter.Y - 600f);
				pointPoisition.X = (pointPoisition.X * 10f + base.Center.X) / 11f + (float)Main.rand.Next(-100, 101);
				pointPoisition.Y -= 150 * k;
				num2 = (float)Main.mouseX + Main.screenPosition.X - pointPoisition.X;
				num3 = (float)Main.mouseY + Main.screenPosition.Y - pointPoisition.Y;
				if (num3 < 0f)
				{
					num3 *= -1f;
				}
				if (num3 < 20f)
				{
					num3 = 20f;
				}
				num4 = (float)Math.Sqrt(num2 * num2 + num3 * num3);
				num4 = speed / num4;
				num2 *= num4;
				num3 *= num4;
				float num12 = num2 + (float)Main.rand.Next(-40, 41) * 0.03f;
				float speedY = num3 + (float)Main.rand.Next(-40, 41) * 0.03f;
				num12 *= (float)Main.rand.Next(75, 150) * 0.01f;
				pointPoisition.X += Main.rand.Next(-50, 51);
				int num13 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num12, speedY, projToShoot, Damage, KnockBack, i);
				Main.projectile[num13].noDropItem = true;
			}
		}
		else if (sItem.type == 4381)
		{
			int num14 = Main.rand.Next(1, 3);
			if (Main.rand.Next(3) == 0)
			{
				num14++;
			}
			for (int l = 0; l < num14; l++)
			{
				pointPoisition = new Vector2(position.X + (float)width * 0.5f + (float)(Main.rand.Next(61) * -direction) + ((float)Main.mouseX + Main.screenPosition.X - position.X), MountedCenter.Y - 600f);
				pointPoisition.X = (pointPoisition.X * 10f + base.Center.X) / 11f + (float)Main.rand.Next(-30, 31);
				pointPoisition.Y -= 150f * Main.rand.NextFloat();
				num2 = (float)Main.mouseX + Main.screenPosition.X - pointPoisition.X;
				num3 = (float)Main.mouseY + Main.screenPosition.Y - pointPoisition.Y;
				if (num3 < 0f)
				{
					num3 *= -1f;
				}
				if (num3 < 20f)
				{
					num3 = 20f;
				}
				num4 = (float)Math.Sqrt(num2 * num2 + num3 * num3);
				num4 = speed / num4;
				num2 *= num4;
				num3 *= num4;
				float num15 = num2 + (float)Main.rand.Next(-20, 21) * 0.03f;
				float speedY2 = num3 + (float)Main.rand.Next(-40, 41) * 0.03f;
				num15 *= (float)Main.rand.Next(55, 80) * 0.01f;
				pointPoisition.X += Main.rand.Next(-50, 51);
				int num16 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num15, speedY2, projToShoot, Damage, KnockBack, i);
				Main.projectile[num16].noDropItem = true;
			}
		}
		else if (sItem.type == 98 || sItem.type == 533)
		{
			float speedX = num2 + (float)Main.rand.Next(-40, 41) * 0.01f;
			float speedY3 = num3 + (float)Main.rand.Next(-40, 41) * 0.01f;
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, speedX, speedY3, projToShoot, Damage, KnockBack, i);
		}
		else if (sItem.type == 1319)
		{
			float speedX2 = num2 + (float)Main.rand.Next(-40, 41) * 0.02f;
			float speedY4 = num3 + (float)Main.rand.Next(-40, 41) * 0.02f;
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, speedX2, speedY4, projToShoot, Damage, KnockBack, i);
		}
		else if (sItem.type == 3107)
		{
			float speedX3 = num2 + (float)Main.rand.Next(-40, 41) * 0.02f;
			float speedY5 = num3 + (float)Main.rand.Next(-40, 41) * 0.02f;
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, speedX3, speedY5, projToShoot, Damage, KnockBack, i);
		}
		else if (ProjectileID.Sets.IsAGolfBall[projToShoot])
		{
			Vector2 vector8 = new Vector2((float)Main.mouseX + Main.screenPosition.X, (float)Main.mouseY + Main.screenPosition.Y);
			Vector2 vector9 = vector8 - base.Center;
			bool flag2 = false;
			if (vector9.Length() < 100f)
			{
				flag2 = TryPlacingAGolfBallNearANearbyTee(vector8);
			}
			if (!flag2)
			{
				if (vector9.Length() > 100f || !Collision.CanHit(base.Center, 1, 1, vector8, 1, 1))
				{
					Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, projToShoot, Damage, KnockBack, i);
				}
				else
				{
					Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector8.X, vector8.Y, 0f, 0f, projToShoot, Damage, KnockBack, i);
				}
			}
		}
		else if (sItem.type == 3053)
		{
			bool flag3 = false;
			if (itemAnimation <= sItem.useTime + 1)
			{
				flag3 = true;
			}
			Vector2 vector10 = new Vector2(num2, num3);
			vector10.Normalize();
			vector10 *= 4f;
			if (!flag3)
			{
				Vector2 vector11 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
				vector11.Normalize();
				vector10 += vector11;
			}
			vector10.Normalize();
			vector10 *= sItem.shootSpeed;
			float num17 = (float)Main.rand.Next(10, 80) * 0.001f;
			if (Main.rand.Next(2) == 0)
			{
				num17 *= -1f;
			}
			float num18 = (float)Main.rand.Next(10, 80) * 0.001f;
			if (Main.rand.Next(2) == 0)
			{
				num18 *= -1f;
			}
			if (flag3)
			{
				num18 = (num17 = 0f);
			}
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, vector10.X, vector10.Y, projToShoot, Damage, KnockBack, i, num18, num17);
		}
		else if (sItem.type == 3019)
		{
			Vector2 vector12 = new Vector2(num2, num3);
			float num19 = vector12.Length();
			vector12.X += (float)Main.rand.Next(-100, 101) * 0.01f * num19 * 0.15f;
			vector12.Y += (float)Main.rand.Next(-100, 101) * 0.01f * num19 * 0.15f;
			float num20 = num2 + (float)Main.rand.Next(-40, 41) * 0.03f;
			float num21 = num3 + (float)Main.rand.Next(-40, 41) * 0.03f;
			vector12.Normalize();
			vector12 *= num19;
			num20 *= (float)Main.rand.Next(50, 150) * 0.01f;
			num21 *= (float)Main.rand.Next(50, 150) * 0.01f;
			Vector2 vector13 = new Vector2(num20, num21);
			vector13.X += (float)Main.rand.Next(-100, 101) * 0.025f;
			vector13.Y += (float)Main.rand.Next(-100, 101) * 0.025f;
			vector13.Normalize();
			vector13 *= num19;
			num20 = vector13.X;
			num21 = vector13.Y;
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num20, num21, projToShoot, Damage, KnockBack, i, vector12.X, vector12.Y);
		}
		else if (sItem.type == 2797)
		{
			Vector2 vector14 = Vector2.Normalize(new Vector2(num2, num3)) * 40f * sItem.scale;
			if (Collision.CanHit(pointPoisition, 0, 0, pointPoisition + vector14, 0, 0))
			{
				pointPoisition += vector14;
			}
			float ai = new Vector2(num2, num3).ToRotation();
			float num22 = (float)Math.PI * 2f / 3f;
			int num23 = Main.rand.Next(4, 5);
			if (Main.rand.Next(4) == 0)
			{
				num23++;
			}
			for (int m = 0; m < num23; m++)
			{
				float num24 = (float)Main.rand.NextDouble() * 0.2f + 0.05f;
				Vector2 vector15 = new Vector2(num2, num3).RotatedBy(num22 * (float)Main.rand.NextDouble() - num22 / 2f) * num24;
				int num25 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, vector15.X, vector15.Y, 444, Damage, KnockBack, i, ai);
				Main.projectile[num25].localAI[0] = projToShoot;
				Main.projectile[num25].localAI[1] = speed;
			}
		}
		else if (sItem.type == 2270)
		{
			float num26 = num2 + (float)Main.rand.Next(-40, 41) * 0.05f;
			float num27 = num3 + (float)Main.rand.Next(-40, 41) * 0.05f;
			if (Main.rand.Next(3) == 0)
			{
				num26 *= 1f + (float)Main.rand.Next(-30, 31) * 0.02f;
				num27 *= 1f + (float)Main.rand.Next(-30, 31) * 0.02f;
			}
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num26, num27, projToShoot, Damage, KnockBack, i);
		}
		else if (sItem.type == 5117)
		{
			float speedX4 = num2 + (float)Main.rand.Next(-15, 16) * 0.075f;
			float speedY6 = num3 + (float)Main.rand.Next(-15, 16) * 0.075f;
			int num28 = Main.rand.Next(Main.projFrames[sItem.shoot]);
			int damage2 = Damage;
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, speedX4, speedY6, projToShoot, damage2, KnockBack, i, 0f, num28);
		}
		else if (sItem.type == 1930)
		{
			int num29 = 2 + Main.rand.Next(3);
			for (int n = 0; n < num29; n++)
			{
				float num30 = num2;
				float num31 = num3;
				float num32 = 0.025f * (float)n;
				num30 += (float)Main.rand.Next(-35, 36) * num32;
				num31 += (float)Main.rand.Next(-35, 36) * num32;
				num4 = (float)Math.Sqrt(num30 * num30 + num31 * num31);
				num4 = speed / num4;
				num30 *= num4;
				num31 *= num4;
				float x = pointPoisition.X + num2 * (float)(num29 - n) * 1.75f;
				float y = pointPoisition.Y + num3 * (float)(num29 - n) * 1.75f;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, x, y, num30, num31, projToShoot, Damage, KnockBack, i, Main.rand.Next(0, 10 * (n + 1)));
			}
		}
		else if (sItem.type == 1931)
		{
			int num33 = 2;
			for (int num34 = 0; num34 < num33; num34++)
			{
				pointPoisition = new Vector2(position.X + (float)width * 0.5f + (float)(Main.rand.Next(201) * -direction) + ((float)Main.mouseX + Main.screenPosition.X - position.X), MountedCenter.Y - 600f);
				pointPoisition.X = (pointPoisition.X + base.Center.X) / 2f + (float)Main.rand.Next(-200, 201);
				pointPoisition.Y -= 100 * num34;
				num2 = (float)Main.mouseX + Main.screenPosition.X - pointPoisition.X;
				num3 = (float)Main.mouseY + Main.screenPosition.Y - pointPoisition.Y;
				if (gravDir == -1f)
				{
					num3 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - pointPoisition.Y;
				}
				if (num3 < 0f)
				{
					num3 *= -1f;
				}
				if (num3 < 20f)
				{
					num3 = 20f;
				}
				num4 = (float)Math.Sqrt(num2 * num2 + num3 * num3);
				num4 = speed / num4;
				num2 *= num4;
				num3 *= num4;
				float speedX5 = num2 + (float)Main.rand.Next(-40, 41) * 0.02f;
				float speedY7 = num3 + (float)Main.rand.Next(-40, 41) * 0.02f;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, speedX5, speedY7, projToShoot, Damage, KnockBack, i, 0f, Main.rand.Next(5));
			}
		}
		else if (sItem.type == 2750)
		{
			int num35 = 1;
			for (int num36 = 0; num36 < num35; num36++)
			{
				pointPoisition = new Vector2(position.X + (float)width * 0.5f + (float)(Main.rand.Next(201) * -direction) + ((float)Main.mouseX + Main.screenPosition.X - position.X), MountedCenter.Y - 600f);
				pointPoisition.X = (pointPoisition.X + base.Center.X) / 2f + (float)Main.rand.Next(-200, 201);
				pointPoisition.Y -= 100 * num36;
				num2 = (float)Main.mouseX + Main.screenPosition.X - pointPoisition.X + (float)Main.rand.Next(-40, 41) * 0.03f;
				num3 = (float)Main.mouseY + Main.screenPosition.Y - pointPoisition.Y;
				if (gravDir == -1f)
				{
					num3 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - pointPoisition.Y;
				}
				if (num3 < 0f)
				{
					num3 *= -1f;
				}
				if (num3 < 20f)
				{
					num3 = 20f;
				}
				num4 = (float)Math.Sqrt(num2 * num2 + num3 * num3);
				num4 = speed / num4;
				num2 *= num4;
				num3 *= num4;
				float num37 = num2;
				float num38 = num3 + (float)Main.rand.Next(-40, 41) * 0.02f;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num37 * 0.75f, num38 * 0.75f, projToShoot + Main.rand.Next(3), Damage, KnockBack, i, 0f, 0.5f + (float)Main.rand.NextDouble() * 0.3f);
			}
		}
		else if (sItem.type == 3570)
		{
			int num39 = 3;
			for (int num40 = 0; num40 < num39; num40++)
			{
				pointPoisition = new Vector2(position.X + (float)width * 0.5f + (float)(Main.rand.Next(201) * -direction) + ((float)Main.mouseX + Main.screenPosition.X - position.X), MountedCenter.Y - 600f);
				pointPoisition.X = (pointPoisition.X + base.Center.X) / 2f + (float)Main.rand.Next(-200, 201);
				pointPoisition.Y -= 100 * num40;
				num2 = (float)Main.mouseX + Main.screenPosition.X - pointPoisition.X;
				num3 = (float)Main.mouseY + Main.screenPosition.Y - pointPoisition.Y;
				float ai2 = num3 + pointPoisition.Y;
				if (num3 < 0f)
				{
					num3 *= -1f;
				}
				if (num3 < 20f)
				{
					num3 = 20f;
				}
				num4 = (float)Math.Sqrt(num2 * num2 + num3 * num3);
				num4 = speed / num4;
				num2 *= num4;
				num3 *= num4;
				Vector2 vector16 = new Vector2(num2, num3) / 2f;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, vector16.X, vector16.Y, projToShoot, Damage, KnockBack, i, 0f, ai2);
			}
		}
		else if (sItem.type == 5065)
		{
			Vector2 farthestSpawnPositionOnLine = GetFarthestSpawnPositionOnLine(pointPoisition, num2, num3);
			Vector2 zero = Vector2.Zero;
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, farthestSpawnPositionOnLine, zero, projToShoot, Damage, KnockBack, i);
		}
		else if (sItem.type == 3065)
		{
			Vector2 vector17 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY);
			float num41 = vector17.Y;
			if (num41 > base.Center.Y - 200f)
			{
				num41 = base.Center.Y - 200f;
			}
			for (int num42 = 0; num42 < 3; num42++)
			{
				pointPoisition = base.Center + new Vector2(-Main.rand.Next(0, 401) * direction, -600f);
				pointPoisition.Y -= 100 * num42;
				Vector2 vector18 = vector17 - pointPoisition;
				if (vector18.Y < 0f)
				{
					vector18.Y *= -1f;
				}
				if (vector18.Y < 20f)
				{
					vector18.Y = 20f;
				}
				vector18.Normalize();
				vector18 *= speed;
				num2 = vector18.X;
				num3 = vector18.Y;
				float speedX6 = num2;
				float speedY8 = num3 + (float)Main.rand.Next(-40, 41) * 0.02f;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, speedX6, speedY8, projToShoot, Damage, KnockBack, i, 0f, num41);
			}
		}
		else if (sItem.type == 2624)
		{
			float num43 = (float)Math.PI / 10f;
			int num44 = 5;
			Vector2 vector19 = new Vector2(num2, num3);
			vector19.Normalize();
			vector19 *= 40f;
			bool flag4 = Collision.CanHit(pointPoisition, 0, 0, pointPoisition + vector19, 0, 0);
			for (int num45 = 0; num45 < num44; num45++)
			{
				float num46 = (float)num45 - ((float)num44 - 1f) / 2f;
				Vector2 vector20 = vector19.RotatedBy(num43 * num46);
				if (!flag4)
				{
					vector20 -= vector19;
				}
				int num47 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X + vector20.X, pointPoisition.Y + vector20.Y, num2, num3, projToShoot, Damage, KnockBack, i);
				Main.projectile[num47].noDropItem = true;
			}
		}
		else if (sItem.type == 1929)
		{
			float speedX7 = num2 + (float)Main.rand.Next(-40, 41) * 0.03f;
			float speedY9 = num3 + (float)Main.rand.Next(-40, 41) * 0.03f;
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, speedX7, speedY9, projToShoot, Damage, KnockBack, i);
		}
		else if (sItem.type == 1553)
		{
			float speedX8 = num2 + (float)Main.rand.Next(-40, 41) * 0.005f;
			float speedY10 = num3 + (float)Main.rand.Next(-40, 41) * 0.005f;
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, speedX8, speedY10, projToShoot, Damage, KnockBack, i);
		}
		else if (sItem.type == 518)
		{
			float num48 = num2;
			float num49 = num3;
			num48 += (float)Main.rand.Next(-40, 41) * 0.04f;
			num49 += (float)Main.rand.Next(-40, 41) * 0.04f;
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num48, num49, projToShoot, Damage, KnockBack, i);
		}
		else if (sItem.type == 1265)
		{
			float num50 = num2;
			float num51 = num3;
			num50 += (float)Main.rand.Next(-30, 31) * 0.03f;
			num51 += (float)Main.rand.Next(-30, 31) * 0.03f;
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num50, num51, projToShoot, Damage, KnockBack, i);
		}
		else if (sItem.type == 4262)
		{
			float num52 = 2.6666667f;
			_ = base.Bottom;
			_ = (int)base.Bottom.X / 16;
			int num53 = 4;
			float num54 = Math.Abs((float)Main.mouseX + Main.screenPosition.X - position.X) / 16f;
			if (direction < 0)
			{
				num54 += 1f;
			}
			num53 = (int)num54;
			if (num53 > 15)
			{
				num53 = 15;
			}
			Point point = base.Center.ToTileCoordinates();
			int maxDistance = 31;
			for (int num55 = num53; num55 >= 0; num55--)
			{
				if (Collision.CanHitLine(base.Center, 1, 1, base.Center + new Vector2(16 * num55 * direction, 0f), 1, 1) && WorldUtils.Find(new Point(point.X + direction * num55, point.Y), Searches.Chain(new Searches.Down(maxDistance), new Conditions.MysticSnake()), out var result))
				{
					int num56 = result.Y;
					while (Main.tile[result.X, num56 - 1].active())
					{
						num56--;
						if (Main.tile[result.X, num56 - 1] == null || num56 < 10 || result.Y - num56 > 7)
						{
							num56 = -1;
							break;
						}
					}
					if (num56 >= 10)
					{
						result.Y = num56;
						for (int num57 = 0; num57 < 1000; num57++)
						{
							Projectile projectile = Main.projectile[num57];
							if (projectile.active && projectile.owner == whoAmI && projectile.type == projToShoot)
							{
								if (projectile.ai[1] == 2f)
								{
									projectile.timeLeft = 4;
								}
								else
								{
									projectile.Kill();
								}
							}
						}
						Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, result.X * 16 + 8, result.Y * 16 + 8 - 16, 0f, 0f - num52, projToShoot, Damage, KnockBack, i, result.Y * 16 + 8 - 16);
						break;
					}
				}
			}
		}
		else if (sItem.type == 4952)
		{
			Vector2 vector21 = Main.rand.NextVector2Circular(1f, 1f) + Main.rand.NextVector2CircularEdge(3f, 3f);
			if (vector21.Y > 0f)
			{
				vector21.Y *= -1f;
			}
			float num58 = (float)itemAnimation / (float)itemAnimationMax * 0.66f + miscCounterNormalized;
			pointPoisition = MountedCenter + new Vector2(direction * 15, gravDir * 3f);
			Point point2 = pointPoisition.ToTileCoordinates();
			Tile tile = Main.tile[point2.X, point2.Y];
			if (tile != null && tile.nactive() && Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type] && !TileID.Sets.Platforms[tile.type])
			{
				pointPoisition = MountedCenter;
			}
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, vector21.X, vector21.Y, projToShoot, Damage, KnockBack, i, -1f, num58 % 1f);
		}
		else if (sItem.type == 4953)
		{
			float num59 = (float)Math.PI / 10f;
			int num60 = 5;
			Vector2 vector22 = new Vector2(num2, num3);
			vector22.Normalize();
			vector22 *= 40f;
			bool num61 = Collision.CanHit(pointPoisition, 0, 0, pointPoisition + vector22, 0, 0);
			int num62 = (itemAnimationMax - itemAnimation) / 2;
			int num63 = num62;
			if (direction == 1)
			{
				num63 = 4 - num62;
			}
			float num64 = (float)num63 - ((float)num60 - 1f) / 2f;
			Vector2 vector23 = vector22.RotatedBy(num59 * num64);
			if (!num61)
			{
				vector23 -= vector22;
			}
			Vector2 mouseWorld = Main.MouseWorld;
			Vector2 origin = pointPoisition + vector23;
			Vector2 vector24 = origin.DirectionTo(mouseWorld).SafeNormalize(-Vector2.UnitY);
			Vector2 value2 = base.Center.DirectionTo(base.Center + new Vector2(num2, num3)).SafeNormalize(-Vector2.UnitY);
			float lerpValue = Utils.GetLerpValue(100f, 40f, mouseWorld.Distance(base.Center), clamped: true);
			if (lerpValue > 0f)
			{
				vector24 = Vector2.Lerp(vector24, value2, lerpValue).SafeNormalize(new Vector2(num2, num3).SafeNormalize(-Vector2.UnitY));
			}
			Vector2 v3 = vector24 * speed;
			if (num62 == 2)
			{
				projToShoot = 932;
				Damage *= 2;
			}
			if (projToShoot == 932)
			{
				float ai3 = miscCounterNormalized * 12f % 1f;
				v3 = v3.SafeNormalize(Vector2.Zero) * (speed * 2f);
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, origin, v3, projToShoot, Damage, KnockBack, i, 0f, ai3);
			}
			else
			{
				int num65 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, origin, v3, projToShoot, Damage, KnockBack, i);
				Main.projectile[num65].noDropItem = true;
			}
		}
		else if (sItem.type == 534)
		{
			int num66 = Main.rand.Next(4, 6);
			for (int num67 = 0; num67 < num66; num67++)
			{
				float num68 = num2;
				float num69 = num3;
				num68 += (float)Main.rand.Next(-40, 41) * 0.05f;
				num69 += (float)Main.rand.Next(-40, 41) * 0.05f;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num68, num69, projToShoot, Damage, KnockBack, i);
			}
		}
		else if (sItem.type == 4703)
		{
			float num70 = (float)Math.PI / 2f;
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, projToShoot, Damage, KnockBack, i);
			for (int num71 = 0; num71 < 7; num71++)
			{
				Vector2 v4 = new Vector2(num2, num3);
				float num72 = v4.Length();
				v4 += v4.SafeNormalize(Vector2.Zero).RotatedBy(num70 * Main.rand.NextFloat()) * Main.rand.NextFloatDirection() * 5f;
				v4 = v4.SafeNormalize(Vector2.Zero) * num72;
				float x2 = v4.X;
				float y2 = v4.Y;
				x2 += (float)Main.rand.Next(-40, 41) * 0.05f;
				y2 += (float)Main.rand.Next(-40, 41) * 0.05f;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, x2, y2, projToShoot, Damage, KnockBack, i);
			}
		}
		else if (sItem.type == 4270)
		{
			Vector2 pointPoisition2 = Main.MouseWorld;
			LimitPointToPlayerReachableArea(ref pointPoisition2);
			Vector2 vector25 = pointPoisition2 + Main.rand.NextVector2Circular(8f, 8f);
			Vector2 vector26 = FindSharpTearsSpot(vector25).ToWorldCoordinates(Main.rand.Next(17), Main.rand.Next(17));
			Vector2 vector27 = (vector25 - vector26).SafeNormalize(-Vector2.UnitY) * 16f;
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector26.X, vector26.Y, vector27.X, vector27.Y, projToShoot, Damage, KnockBack, i, 0f, Main.rand.NextFloat() * 0.5f + 0.6f);
		}
		else if (sItem.type == 4715)
		{
			Vector2 vector28 = Main.MouseWorld;
			List<NPC> validTargets;
			bool sparkleGuitarTarget = GetSparkleGuitarTarget(out validTargets);
			if (sparkleGuitarTarget)
			{
				NPC nPC = validTargets[Main.rand.Next(validTargets.Count)];
				vector28 = nPC.Center + nPC.velocity * 20f;
			}
			Vector2 vector29 = vector28 - base.Center;
			if (!sparkleGuitarTarget)
			{
				vector28 += Main.rand.NextVector2Circular(24f, 24f);
				if (vector29.Length() > 700f)
				{
					vector29 *= 700f / vector29.Length();
					vector28 = base.Center + vector29;
				}
			}
			Vector2 vector30 = Main.rand.NextVector2CircularEdge(1f, 1f);
			if (vector30.Y > 0f)
			{
				vector30 *= -1f;
			}
			if (Math.Abs(vector30.Y) < 0.5f)
			{
				vector30.Y = (0f - Main.rand.NextFloat()) * 0.5f - 0.5f;
			}
			vector30 *= vector29.Length() * 2f;
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, vector30.X, vector30.Y, projToShoot, Damage, KnockBack, i, vector28.X, vector28.Y);
		}
		else if (sItem.type == 4722)
		{
			Vector2 vector31 = Main.MouseWorld;
			List<NPC> validTargets2;
			bool sparkleGuitarTarget2 = GetSparkleGuitarTarget(out validTargets2);
			if (sparkleGuitarTarget2)
			{
				NPC nPC2 = validTargets2[Main.rand.Next(validTargets2.Count)];
				vector31 = nPC2.Center + nPC2.velocity * 20f;
			}
			Vector2 vector32 = vector31 - base.Center;
			Vector2 vector33 = Main.rand.NextVector2CircularEdge(1f, 1f);
			float num73 = 1f;
			int num74 = 1;
			for (int num75 = 0; num75 < num74; num75++)
			{
				if (!sparkleGuitarTarget2)
				{
					vector31 += Main.rand.NextVector2Circular(24f, 24f);
					if (vector32.Length() > 700f)
					{
						vector32 *= 700f / vector32.Length();
						vector31 = base.Center + vector32;
					}
					float num76 = Utils.GetLerpValue(0f, 6f, velocity.Length(), clamped: true) * 0.8f;
					vector33 *= 1f - num76;
					vector33 += velocity * num76;
					vector33 = vector33.SafeNormalize(Vector2.UnitX);
				}
				float num77 = 60f;
				float num78 = Main.rand.NextFloatDirection() * (float)Math.PI * (1f / num77) * 0.5f * num73;
				float num79 = num77 / 2f;
				float num80 = 12f + Main.rand.NextFloat() * 2f;
				Vector2 vector34 = vector33 * num80;
				Vector2 vector35 = new Vector2(0f, 0f);
				Vector2 vector36 = vector34;
				for (int num81 = 0; (float)num81 < num79; num81++)
				{
					vector35 += vector36;
					vector36 = vector36.RotatedBy(num78);
				}
				Vector2 vector37 = -vector35;
				Vector2 vector38 = vector31 + vector37;
				float lerpValue2 = Utils.GetLerpValue(itemAnimationMax, 0f, itemAnimation, clamped: true);
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector38, vector34, projToShoot, Damage, KnockBack, i, num78, lerpValue2);
			}
		}
		else if (sItem.type == 4607)
		{
			SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, projToShoot, damage, KnockBack);
		}
		else if (sItem.type == 5069)
		{
			SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, projToShoot, damage, KnockBack);
		}
		else if (sItem.type == 5114)
		{
			SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, projToShoot, damage, KnockBack);
		}
		else if (sItem.type == 2188)
		{
			int num82 = 4;
			if (Main.rand.Next(3) == 0)
			{
				num82++;
			}
			if (Main.rand.Next(4) == 0)
			{
				num82++;
			}
			if (Main.rand.Next(5) == 0)
			{
				num82++;
			}
			for (int num83 = 0; num83 < num82; num83++)
			{
				float num84 = num2;
				float num85 = num3;
				float num86 = 0.05f * (float)num83;
				num84 += (float)Main.rand.Next(-35, 36) * num86;
				num85 += (float)Main.rand.Next(-35, 36) * num86;
				num4 = (float)Math.Sqrt(num84 * num84 + num85 * num85);
				num4 = speed / num4;
				num84 *= num4;
				num85 *= num4;
				float x3 = pointPoisition.X;
				float y3 = pointPoisition.Y;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, x3, y3, num84, num85, projToShoot, Damage, KnockBack, i);
			}
		}
		else if (sItem.type == 1308)
		{
			int num87 = 3;
			if (Main.rand.Next(3) == 0)
			{
				num87++;
			}
			for (int num88 = 0; num88 < num87; num88++)
			{
				float num89 = num2;
				float num90 = num3;
				float num91 = 0.05f * (float)num88;
				num89 += (float)Main.rand.Next(-35, 36) * num91;
				num90 += (float)Main.rand.Next(-35, 36) * num91;
				num4 = (float)Math.Sqrt(num89 * num89 + num90 * num90);
				num4 = speed / num4;
				num89 *= num4;
				num90 *= num4;
				float x4 = pointPoisition.X;
				float y4 = pointPoisition.Y;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, x4, y4, num89, num90, projToShoot, Damage, KnockBack, i);
			}
		}
		else if (sItem.type == 1258)
		{
			float num92 = num2;
			float num93 = num3;
			num92 += (float)Main.rand.Next(-40, 41) * 0.01f;
			num93 += (float)Main.rand.Next(-40, 41) * 0.01f;
			pointPoisition.X += (float)Main.rand.Next(-40, 41) * 0.05f;
			pointPoisition.Y += (float)Main.rand.Next(-45, 36) * 0.05f;
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num92, num93, projToShoot, Damage, KnockBack, i);
		}
		else if (sItem.type == 964)
		{
			int num94 = Main.rand.Next(3, 5);
			for (int num95 = 0; num95 < num94; num95++)
			{
				float num96 = num2;
				float num97 = num3;
				num96 += (float)Main.rand.Next(-35, 36) * 0.04f;
				num97 += (float)Main.rand.Next(-35, 36) * 0.04f;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num96, num97, projToShoot, Damage, KnockBack, i);
			}
		}
		else if (sItem.type == 1569)
		{
			int num98 = 4;
			if (Main.rand.Next(2) == 0)
			{
				num98++;
			}
			if (Main.rand.Next(4) == 0)
			{
				num98++;
			}
			if (Main.rand.Next(8) == 0)
			{
				num98++;
			}
			if (Main.rand.Next(16) == 0)
			{
				num98++;
			}
			for (int num99 = 0; num99 < num98; num99++)
			{
				float num100 = num2;
				float num101 = num3;
				float num102 = 0.05f * (float)num99;
				num100 += (float)Main.rand.Next(-35, 36) * num102;
				num101 += (float)Main.rand.Next(-35, 36) * num102;
				num4 = (float)Math.Sqrt(num100 * num100 + num101 * num101);
				num4 = speed / num4;
				num100 *= num4;
				num101 *= num4;
				float x5 = pointPoisition.X;
				float y5 = pointPoisition.Y;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, x5, y5, num100, num101, projToShoot, Damage, KnockBack, i);
			}
		}
		else if (sItem.type == 1572 || sItem.type == 2366 || sItem.type == 3571 || sItem.type == 3569 || sItem.type == 5119)
		{
			bool num103 = sItem.type == 3571 || sItem.type == 3569;
			int num104 = (int)((float)Main.mouseX + Main.screenPosition.X) / 16;
			int num105 = (int)((float)Main.mouseY + Main.screenPosition.Y) / 16;
			if (gravDir == -1f)
			{
				num105 = (int)(Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16;
			}
			if (!num103)
			{
				for (; num105 < Main.maxTilesY - 10 && Main.tile[num104, num105] != null && !WorldGen.SolidTile2(num104, num105) && Main.tile[num104 - 1, num105] != null && !WorldGen.SolidTile2(num104 - 1, num105) && Main.tile[num104 + 1, num105] != null && !WorldGen.SolidTile2(num104 + 1, num105); num105++)
				{
				}
				num105--;
			}
			int num106 = 0;
			switch (sItem.type)
			{
			case 1572:
				num106 = 60;
				break;
			case 5119:
				num106 = 90;
				break;
			}
			int num107 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, (float)Main.mouseX + Main.screenPosition.X, num105 * 16 - 24, 0f, 15f, projToShoot, Damage, KnockBack, i, num106);
			Main.projectile[num107].originalDamage = damage;
			UpdateMaxTurrets();
		}
		else if (sItem.type == 1244 || sItem.type == 1256)
		{
			int num108 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, projToShoot, Damage, KnockBack, i);
			Main.projectile[num108].ai[0] = (float)Main.mouseX + Main.screenPosition.X;
			Main.projectile[num108].ai[1] = (float)Main.mouseY + Main.screenPosition.Y;
		}
		else if (sItem.type == 1229)
		{
			int num109 = 2;
			if (Main.rand.Next(3) == 0)
			{
				num109++;
			}
			for (int num110 = 0; num110 < num109; num110++)
			{
				float num111 = num2;
				float num112 = num3;
				if (num110 > 0)
				{
					num111 += (float)Main.rand.Next(-35, 36) * 0.04f;
					num112 += (float)Main.rand.Next(-35, 36) * 0.04f;
				}
				if (num110 > 1)
				{
					num111 += (float)Main.rand.Next(-35, 36) * 0.04f;
					num112 += (float)Main.rand.Next(-35, 36) * 0.04f;
				}
				if (num110 > 2)
				{
					num111 += (float)Main.rand.Next(-35, 36) * 0.04f;
					num112 += (float)Main.rand.Next(-35, 36) * 0.04f;
				}
				int num113 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num111, num112, projToShoot, Damage, KnockBack, i);
				Main.projectile[num113].noDropItem = true;
			}
		}
		else if (sItem.type == 1121)
		{
			int num114 = Main.rand.Next(1, 4);
			if (Main.rand.Next(6) == 0)
			{
				num114++;
			}
			if (Main.rand.Next(6) == 0)
			{
				num114++;
			}
			if (strongBees && Main.rand.Next(3) == 0)
			{
				num114++;
			}
			for (int num115 = 0; num115 < num114; num115++)
			{
				float num116 = num2;
				float num117 = num3;
				num116 += (float)Main.rand.Next(-35, 36) * 0.02f;
				num117 += (float)Main.rand.Next(-35, 36) * 0.02f;
				int num118 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num116, num117, beeType(), beeDamage(Damage), beeKB(KnockBack), i);
				Main.projectile[num118].magic = true;
			}
		}
		else if (sItem.type == 1155)
		{
			int num119 = Main.rand.Next(2, 5);
			for (int num120 = 0; num120 < num119; num120++)
			{
				float num121 = num2;
				float num122 = num3;
				num121 += (float)Main.rand.Next(-35, 36) * 0.02f;
				num122 += (float)Main.rand.Next(-35, 36) * 0.02f;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num121, num122, projToShoot, Damage, KnockBack, i);
			}
		}
		else if (sItem.type == 1801)
		{
			int num123 = Main.rand.Next(2, 4);
			for (int num124 = 0; num124 < num123; num124++)
			{
				float num125 = num2;
				float num126 = num3;
				num125 += (float)Main.rand.Next(-35, 36) * 0.05f;
				num126 += (float)Main.rand.Next(-35, 36) * 0.05f;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num125, num126, projToShoot, Damage, KnockBack, i);
			}
		}
		else if (sItem.type == 679)
		{
			for (int num127 = 0; num127 < 6; num127++)
			{
				float num128 = num2;
				float num129 = num3;
				num128 += (float)Main.rand.Next(-40, 41) * 0.05f;
				num129 += (float)Main.rand.Next(-40, 41) * 0.05f;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num128, num129, projToShoot, Damage, KnockBack, i);
			}
		}
		else if (sItem.type == 1156)
		{
			for (int num130 = 0; num130 < 3; num130++)
			{
				float num131 = num2;
				float num132 = num3;
				num131 += (float)Main.rand.Next(-40, 41) * 0.05f;
				num132 += (float)Main.rand.Next(-40, 41) * 0.05f;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num131, num132, projToShoot, Damage, KnockBack, i);
			}
		}
		else if (sItem.type == 4682)
		{
			for (int num133 = 0; num133 < 3; num133++)
			{
				float num134 = num2;
				float num135 = num3;
				num134 += (float)Main.rand.Next(-20, 21) * 0.1f;
				num135 += (float)Main.rand.Next(-20, 21) * 0.1f;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num134, num135, projToShoot, Damage, KnockBack, i);
			}
		}
		else if (sItem.type == 2623)
		{
			for (int num136 = 0; num136 < 3; num136++)
			{
				float num137 = num2;
				float num138 = num3;
				num137 += (float)Main.rand.Next(-40, 41) * 0.1f;
				num138 += (float)Main.rand.Next(-40, 41) * 0.1f;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num137, num138, projToShoot, Damage, KnockBack, i);
			}
		}
		else if (sItem.type == 3210)
		{
			Vector2 vector39 = new Vector2(num2, num3);
			vector39.X += (float)Main.rand.Next(-30, 31) * 0.04f;
			vector39.Y += (float)Main.rand.Next(-30, 31) * 0.03f;
			vector39.Normalize();
			vector39 *= (float)Main.rand.Next(70, 91) * 0.1f;
			vector39.X += (float)Main.rand.Next(-30, 31) * 0.04f;
			vector39.Y += (float)Main.rand.Next(-30, 31) * 0.03f;
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, vector39.X, vector39.Y, projToShoot, Damage, KnockBack, i, Main.rand.Next(20));
		}
		else if (sItem.type == 434)
		{
			float num139 = num2;
			float num140 = num3;
			if (itemAnimation < 5)
			{
				num139 += (float)Main.rand.Next(-40, 41) * 0.01f;
				num140 += (float)Main.rand.Next(-40, 41) * 0.01f;
				num139 *= 1.1f;
				num140 *= 1.1f;
			}
			else if (itemAnimation < 10)
			{
				num139 += (float)Main.rand.Next(-20, 21) * 0.01f;
				num140 += (float)Main.rand.Next(-20, 21) * 0.01f;
				num139 *= 1.05f;
				num140 *= 1.05f;
			}
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num139, num140, projToShoot, Damage, KnockBack, i);
		}
		else if (sItem.type == 1157)
		{
			projToShoot = Main.rand.Next(191, 195);
			int num141 = SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, projToShoot, damage, KnockBack);
			Main.projectile[num141].localAI[0] = 30f;
		}
		else if (sItem.type == 1802)
		{
			SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, projToShoot, damage, KnockBack);
		}
		else if (sItem.type == 2364 || sItem.type == 2365)
		{
			SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, projToShoot, damage, KnockBack);
		}
		else if (sItem.type == 2535)
		{
			num2 = 0f;
			num3 = 0f;
			Vector2 spinningpoint = new Vector2(num2, num3);
			spinningpoint = spinningpoint.RotatedBy(1.5707963705062866);
			SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, projToShoot, damage, KnockBack, spinningpoint, spinningpoint);
			spinningpoint = spinningpoint.RotatedBy(-3.1415927410125732);
			SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, projToShoot + 1, damage, KnockBack, spinningpoint, spinningpoint);
		}
		else if (sItem.type == 2551)
		{
			SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, projToShoot + nextCycledSpiderMinionType, damage, KnockBack);
			nextCycledSpiderMinionType++;
			nextCycledSpiderMinionType %= 3;
		}
		else if (sItem.type == 2584)
		{
			SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, projToShoot + Main.rand.Next(3), damage, KnockBack);
		}
		else if (sItem.type == 2621)
		{
			SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, projToShoot, damage, KnockBack);
		}
		else if (sItem.type == 2749 || sItem.type == 3249 || sItem.type == 3474 || sItem.type == 4273 || sItem.type == 4281)
		{
			SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, projToShoot, damage, KnockBack);
		}
		else if (sItem.type == 3531)
		{
			int num142 = -1;
			int num143 = -1;
			for (int num144 = 0; num144 < 1000; num144++)
			{
				if (Main.projectile[num144].active && Main.projectile[num144].owner == Main.myPlayer)
				{
					if (num142 == -1 && Main.projectile[num144].type == 625)
					{
						num142 = num144;
					}
					if (num143 == -1 && Main.projectile[num144].type == 628)
					{
						num143 = num144;
					}
					if (num142 != -1 && num143 != -1)
					{
						break;
					}
				}
			}
			if (num142 == -1 && num143 == -1)
			{
				num2 = 0f;
				num3 = 0f;
				pointPoisition.X = (float)Main.mouseX + Main.screenPosition.X;
				pointPoisition.Y = (float)Main.mouseY + Main.screenPosition.Y;
				int num145 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, projToShoot, Damage, KnockBack, i);
				int num146 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, projToShoot + 1, Damage, KnockBack, i, num145);
				int num147 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, projToShoot + 2, Damage, KnockBack, i, num146);
				int num148 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, projToShoot + 3, Damage, KnockBack, i, num147);
				Main.projectile[num146].localAI[1] = num147;
				Main.projectile[num147].localAI[1] = num148;
				Main.projectile[num145].originalDamage = damage;
				Main.projectile[num146].originalDamage = damage;
				Main.projectile[num147].originalDamage = damage;
				Main.projectile[num148].originalDamage = damage;
			}
			else if (num142 != -1 && num143 != -1)
			{
				int num149 = (int)Main.projectile[num143].ai[0];
				int num150 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, projToShoot + 1, Damage, KnockBack, i, num149);
				int num151 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, projToShoot + 2, Damage, KnockBack, i, num150);
				Main.projectile[num150].localAI[1] = num151;
				Main.projectile[num150].netUpdate = true;
				Main.projectile[num150].ai[1] = 1f;
				Main.projectile[num151].localAI[1] = num143;
				Main.projectile[num151].netUpdate = true;
				Main.projectile[num151].ai[1] = 1f;
				Main.projectile[num143].ai[0] = num151;
				Main.projectile[num143].netUpdate = true;
				Main.projectile[num143].ai[1] = 1f;
				Main.projectile[num150].originalDamage = damage;
				Main.projectile[num151].originalDamage = damage;
				Main.projectile[num143].originalDamage = damage;
			}
		}
		else if (sItem.type == 1309 || sItem.type == 4758 || sItem.type == 4269 || sItem.type == 5005)
		{
			SpawnMinionOnCursor(projectileSource_Item_WithPotentialAmmo, i, projToShoot, damage, KnockBack);
		}
		else if (sItem.shoot > 0 && (Main.projPet[sItem.shoot] || sItem.shoot == 72 || sItem.shoot == 18 || sItem.shoot == 500 || sItem.shoot == 650) && !sItem.summon)
		{
			for (int num152 = 0; num152 < 1000; num152++)
			{
				Projectile projectile2 = Main.projectile[num152];
				if (projectile2.active && projectile2.owner == whoAmI)
				{
					if (sItem.shoot == 72 && (projectile2.type == 72 || projectile2.type == 86 || projectile2.type == 87))
					{
						projectile2.Kill();
					}
					else if (sItem.type == 5131 && (projectile2.type == 881 || projectile2.type == 934))
					{
						projectile2.Kill();
					}
					else if (sItem.shoot == projectile2.type)
					{
						projectile2.Kill();
					}
				}
			}
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, projToShoot, 0, 0f, i);
		}
		else if (sItem.type == 3006)
		{
			pointPoisition = GetFarthestSpawnPositionOnLine(pointPoisition, num2, num3);
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, 0f, 0f, projToShoot, Damage, KnockBack, i);
		}
		else if (sItem.type == 3014)
		{
			Vector2 pointPoisition3 = default(Vector2);
			pointPoisition3.X = Main.MouseWorld.X;
			pointPoisition3.Y = Main.MouseWorld.Y;
			LimitPointToPlayerReachableArea(ref pointPoisition3);
			while (Collision.CanHitLine(position, width, height, pointPoisition, 1, 1))
			{
				pointPoisition.X += num2;
				pointPoisition.Y += num3;
				if ((pointPoisition - pointPoisition3).Length() < 20f + Math.Abs(num2) + Math.Abs(num3))
				{
					pointPoisition = pointPoisition3;
					break;
				}
			}
			bool flag5 = false;
			int num153 = (int)pointPoisition.Y / 16;
			int num154 = (int)pointPoisition.X / 16;
			int num155;
			for (num155 = num153; num153 < Main.maxTilesY - 10 && num153 - num155 < 30 && !WorldGen.SolidTile(num154, num153) && !TileID.Sets.Platforms[Main.tile[num154, num153].type]; num153++)
			{
			}
			if (!WorldGen.SolidTile(num154, num153) && !TileID.Sets.Platforms[Main.tile[num154, num153].type])
			{
				flag5 = true;
			}
			float num156 = num153 * 16;
			num153 = num155;
			while (num153 > 10 && num155 - num153 < 30 && !WorldGen.SolidTile(num154, num153))
			{
				num153--;
			}
			float num157 = num153 * 16 + 16;
			float num158 = num156 - num157;
			int num159 = 15;
			if (num158 > (float)(16 * num159))
			{
				num158 = 16 * num159;
			}
			num157 = num156 - num158;
			pointPoisition.X = (int)(pointPoisition.X / 16f) * 16;
			if (!flag5)
			{
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, 0f, 0f, projToShoot, Damage, KnockBack, i, num157, num158);
			}
		}
		else if (sItem.type == 3384)
		{
			int num160 = ((altFunctionUse == 2) ? 1 : 0);
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, projToShoot, Damage, KnockBack, i, 0f, num160);
		}
		else if (sItem.type == 3473)
		{
			float ai4 = (Main.rand.NextFloat() - 0.5f) * ((float)Math.PI / 4f);
			Vector2 vector40 = new Vector2(num2, num3);
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, vector40.X, vector40.Y, projToShoot, Damage, KnockBack, i, 0f, ai4);
		}
		else if (sItem.type == 4956)
		{
			int num161 = (itemAnimationMax - itemAnimation) / itemTime;
			Vector2 vector41 = new Vector2(num2, num3);
			int num162 = FinalFractalHelper.GetRandomProfileIndex();
			if (num161 == 0)
			{
				num162 = 4956;
			}
			Vector2 pointPoisition4 = Main.MouseWorld;
			LimitPointToPlayerReachableArea(ref pointPoisition4);
			Vector2 vector42 = pointPoisition4 - MountedCenter;
			if (num161 == 1 || num161 == 2)
			{
				int npcTargetIndex;
				bool zenithTarget = GetZenithTarget(pointPoisition4, 400f, out npcTargetIndex);
				if (zenithTarget)
				{
					vector42 = Main.npc[npcTargetIndex].Center - MountedCenter;
				}
				bool flag6 = num161 == 2;
				if (num161 == 1 && !zenithTarget)
				{
					flag6 = true;
				}
				if (flag6)
				{
					vector42 += Main.rand.NextVector2Circular(150f, 150f);
				}
			}
			vector41 = vector42 / 2f;
			float ai5 = Main.rand.Next(-100, 101);
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition, vector41, projToShoot, Damage, KnockBack, i, ai5, num162);
		}
		else if (sItem.type == 3836)
		{
			float ai6 = Main.rand.NextFloat() * speed * 0.75f * (float)direction;
			Projectile.NewProjectile(velocity: new Vector2(num2, num3), spawnSource: projectileSource_Item_WithPotentialAmmo, position: pointPoisition, Type: projToShoot, Damage: Damage, KnockBack: KnockBack, Owner: i, ai0: ai6);
		}
		else if (sItem.type == 3858)
		{
			bool num163 = altFunctionUse == 2;
			Vector2 vector43 = new Vector2(num2, num3);
			if (num163)
			{
				vector43 *= 1.5f;
				float ai7 = (0.3f + 0.7f * Main.rand.NextFloat()) * speed * 1.75f * (float)direction;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition, vector43, 708, (int)((float)Damage * 0.5f), KnockBack + 4f, i, ai7);
			}
			else
			{
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition, vector43, projToShoot, Damage, KnockBack, i);
			}
		}
		else if (sItem.type == 3859)
		{
			Vector2 vector44 = new Vector2(num2, num3);
			projToShoot = 710;
			vector44 *= 0.8f;
			Vector2 vector45 = vector44.SafeNormalize(-Vector2.UnitY);
			float num164 = (float)Math.PI / 180f * (float)(-direction);
			for (float num165 = -2.5f; num165 < 3f; num165 += 1f)
			{
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition, (vector44 + vector45 * num165 * 0.5f).RotatedBy(num165 * num164), projToShoot, Damage, KnockBack, i);
			}
		}
		else if (sItem.type == 3870)
		{
			Vector2 vector46 = Vector2.Normalize(new Vector2(num2, num3)) * 40f * sItem.scale;
			if (Collision.CanHit(pointPoisition, 0, 0, pointPoisition + vector46, 0, 0))
			{
				pointPoisition += vector46;
			}
			Vector2 vector47 = new Vector2(num2, num3);
			vector47 *= 0.8f;
			Vector2 vector48 = vector47.SafeNormalize(-Vector2.UnitY);
			float num166 = (float)Math.PI / 180f * (float)(-direction);
			for (int num167 = 0; num167 <= 2; num167++)
			{
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition, (vector47 + vector48 * num167 * 1f).RotatedBy((float)num167 * num166), projToShoot, Damage, KnockBack, i);
			}
		}
		else if (sItem.type == 3542)
		{
			float num168 = (Main.rand.NextFloat() - 0.5f) * ((float)Math.PI / 4f) * 0.7f;
			for (int num169 = 0; num169 < 10; num169++)
			{
				if (Collision.CanHit(pointPoisition, 0, 0, pointPoisition + new Vector2(num2, num3).RotatedBy(num168) * 100f, 0, 0))
				{
					break;
				}
				num168 = (Main.rand.NextFloat() - 0.5f) * ((float)Math.PI / 4f) * 0.7f;
			}
			Vector2 vector49 = new Vector2(num2, num3).RotatedBy(num168) * (0.95f + Main.rand.NextFloat() * 0.3f);
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, vector49.X, vector49.Y, projToShoot, Damage, KnockBack, i);
		}
		else if (sItem.type == 3779)
		{
			float num170 = Main.rand.NextFloat() * ((float)Math.PI * 2f);
			for (int num171 = 0; num171 < 10; num171++)
			{
				if (Collision.CanHit(pointPoisition, 0, 0, pointPoisition + new Vector2(num2, num3).RotatedBy(num170) * 100f, 0, 0))
				{
					break;
				}
				num170 = Main.rand.NextFloat() * ((float)Math.PI * 2f);
			}
			Vector2 vector50 = new Vector2(num2, num3).RotatedBy(num170) * (0.95f + Main.rand.NextFloat() * 0.3f);
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition + vector50 * 30f, Vector2.Zero, projToShoot, Damage, KnockBack, i, -2f);
		}
		else if (sItem.type == 3787)
		{
			float f = Main.rand.NextFloat() * ((float)Math.PI * 2f);
			float value3 = 20f;
			float value4 = 60f;
			Vector2 vector51 = pointPoisition + f.ToRotationVector2() * MathHelper.Lerp(value3, value4, Main.rand.NextFloat());
			for (int num172 = 0; num172 < 50; num172++)
			{
				vector51 = pointPoisition + f.ToRotationVector2() * MathHelper.Lerp(value3, value4, Main.rand.NextFloat());
				if (Collision.CanHit(pointPoisition, 0, 0, vector51 + (vector51 - pointPoisition).SafeNormalize(Vector2.UnitX) * 8f, 0, 0))
				{
					break;
				}
				f = Main.rand.NextFloat() * ((float)Math.PI * 2f);
			}
			Vector2 v5 = Main.MouseWorld - vector51;
			Vector2 vector52 = new Vector2(num2, num3).SafeNormalize(Vector2.UnitY) * speed;
			v5 = v5.SafeNormalize(vector52) * speed;
			v5 = Vector2.Lerp(v5, vector52, 0.25f);
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector51, v5, projToShoot, Damage, KnockBack, i);
		}
		else if (sItem.type == 3788)
		{
			Vector2 vector53 = new Vector2(num2, num3);
			float num173 = (float)Math.PI / 4f;
			for (int num174 = 0; num174 < 2; num174++)
			{
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition, vector53 + vector53.SafeNormalize(Vector2.Zero).RotatedBy(num173 * (Main.rand.NextFloat() * 0.5f + 0.5f)) * Main.rand.NextFloatDirection() * 2f, projToShoot, Damage, KnockBack, i);
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition, vector53 + vector53.SafeNormalize(Vector2.Zero).RotatedBy((0f - num173) * (Main.rand.NextFloat() * 0.5f + 0.5f)) * Main.rand.NextFloatDirection() * 2f, projToShoot, Damage, KnockBack, i);
			}
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition, vector53.SafeNormalize(Vector2.UnitX * direction) * (speed * 1.3f), 661, Damage * 2, KnockBack, i);
		}
		else if (sItem.type == 4463 || sItem.type == 486)
		{
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition, new Vector2(num2, num3), projToShoot, Damage, KnockBack, i);
		}
		else if (sItem.type == 46)
		{
			Vector2 vector54 = new Vector2(direction, gravDir * 4f).SafeNormalize(Vector2.UnitY).RotatedBy((float)Math.PI * 2f * Main.rand.NextFloatDirection() * 0.05f);
			Vector2 searchCenter = MountedCenter + new Vector2(70f, -40f) * Directions + vector54 * -10f;
			if (GetZenithTarget(searchCenter, 50f, out var npcTargetIndex2))
			{
				NPC nPC3 = Main.npc[npcTargetIndex2];
				searchCenter = nPC3.Center + Main.rand.NextVector2Circular(nPC3.width / 2, nPC3.height / 2);
			}
			else
			{
				searchCenter += Main.rand.NextVector2Circular(20f, 20f);
			}
			float ai8 = 1f;
			if (Main.rand.Next(100) < meleeCrit)
			{
				ai8 = 2f;
				Damage *= 2;
			}
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, searchCenter, vector54 * 0.001f, projToShoot, (int)((double)Damage * 0.5), KnockBack, i, ai8);
			NetMessage.SendData(13, -1, -1, null, whoAmI);
		}
		else if (sItem.type == 273)
		{
			float adjustedItemScale = GetAdjustedItemScale(sItem);
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, MountedCenter, new Vector2(direction, 0f), projToShoot, Damage, KnockBack, i, (float)direction * gravDir, itemAnimationMax, adjustedItemScale);
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, MountedCenter, new Vector2(num2, num3), projToShoot, Damage, KnockBack, i, (float)direction * gravDir * 0.1f, 30f, adjustedItemScale);
			NetMessage.SendData(13, -1, -1, null, whoAmI);
		}
		else if (sItem.type == 368)
		{
			float adjustedItemScale2 = GetAdjustedItemScale(sItem);
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, MountedCenter, new Vector2(direction, 0f), projToShoot, Damage, KnockBack, i, (float)direction * gravDir, itemAnimationMax, adjustedItemScale2);
			NetMessage.SendData(13, -1, -1, null, whoAmI);
		}
		else if (sItem.type == 1826)
		{
			float adjustedItemScale3 = GetAdjustedItemScale(sItem);
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, MountedCenter, new Vector2(direction, 0f), projToShoot, Damage, KnockBack, i, (float)direction * gravDir, itemAnimationMax, adjustedItemScale3);
			NetMessage.SendData(13, -1, -1, null, whoAmI);
		}
		else if (sItem.type == 675)
		{
			float adjustedItemScale4 = GetAdjustedItemScale(sItem);
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, MountedCenter, new Vector2(direction, 0f), 972, Damage, KnockBack, i, (float)direction * gravDir, itemAnimationMax, adjustedItemScale4);
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, MountedCenter, new Vector2(num2, num3), projToShoot, Damage / 2, KnockBack, i, (float)direction * gravDir, 32f, adjustedItemScale4);
			NetMessage.SendData(13, -1, -1, null, whoAmI);
		}
		else if (sItem.type == 674)
		{
			float adjustedItemScale5 = GetAdjustedItemScale(sItem);
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, MountedCenter, new Vector2(direction, 0f), projToShoot, Damage, KnockBack, i, (float)direction * gravDir, itemAnimationMax, adjustedItemScale5);
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, MountedCenter, new Vector2(direction, 0f), 982, 0, KnockBack, i, (float)direction * gravDir, itemAnimationMax, adjustedItemScale5);
			NetMessage.SendData(13, -1, -1, null, whoAmI);
		}
		else if (sItem.type == 757)
		{
			float adjustedItemScale6 = GetAdjustedItemScale(sItem);
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, MountedCenter, new Vector2(direction, 0f), 984, Damage, KnockBack, i, (float)direction * gravDir, itemAnimationMax, adjustedItemScale6);
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, MountedCenter, new Vector2(num2, num3) * 5f, projToShoot, Damage, KnockBack, i, (float)direction * gravDir, 18f, adjustedItemScale6);
			NetMessage.SendData(13, -1, -1, null, whoAmI);
		}
		else if (sItem.type == 190)
		{
			Vector2 vector55 = MountedCenter + new Vector2(70f, -40f) * Directions;
			int npcTargetIndex3;
			bool zenithTarget2 = GetZenithTarget(vector55, 150f, out npcTargetIndex3);
			if (zenithTarget2)
			{
				NPC nPC4 = Main.npc[npcTargetIndex3];
				vector55 = Main.rand.NextVector2FromRectangle(nPC4.Hitbox);
			}
			else
			{
				vector55 += Main.rand.NextVector2Circular(20f, 20f);
			}
			Vector2 vector56 = base.Center + new Vector2(Main.rand.NextFloatDirection() * (float)width / 2f, height / 2) * Directions;
			Vector2 v6 = vector55 - vector56;
			float num175 = ((float)Math.PI + (float)Math.PI * 2f * Main.rand.NextFloat() * 1.5f) * ((float)(-direction) * gravDir);
			int num176 = 60;
			float num177 = num175 / (float)num176;
			float num178 = 16f;
			float num179 = v6.Length();
			if (Math.Abs(num177) >= 0.17f)
			{
				num177 *= 0.7f;
			}
			_ = direction;
			_ = gravDir;
			Vector2 vector57 = Vector2.UnitX * num178;
			Vector2 v7 = vector57;
			int num180 = 0;
			while (v7.Length() < num179 && num180 < num176)
			{
				num180++;
				v7 += vector57;
				vector57 = vector57.RotatedBy(num177);
			}
			float num181 = v7.ToRotation();
			Vector2 spinningpoint2 = v6.SafeNormalize(Vector2.UnitY).RotatedBy(0f - num181 - num177) * num178;
			if (num180 == num176)
			{
				spinningpoint2 = new Vector2(direction, 0f) * num178;
			}
			if (!zenithTarget2)
			{
				vector56.Y -= gravDir * 24f;
				spinningpoint2 = spinningpoint2.RotatedBy((float)direction * gravDir * ((float)Math.PI * 2f) * 0.14f);
			}
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector56, spinningpoint2, projToShoot, (int)((double)Damage * 0.25), KnockBack, i, num177, num180);
			NetMessage.SendData(13, -1, -1, null, whoAmI);
		}
		else if (sItem.type == 3475)
		{
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, 615, Damage, KnockBack, i, 5 * Main.rand.Next(0, 20));
		}
		else if (sItem.type == 3930)
		{
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, 714, Damage, KnockBack, i, 5 * Main.rand.Next(0, 20));
		}
		else if (sItem.type == 3540)
		{
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, 630, Damage, KnockBack, i);
		}
		else if (sItem.type == 5451)
		{
			for (int num182 = 0; num182 < 1000; num182++)
			{
				Projectile projectile3 = Main.projectile[num182];
				if (projectile3.type == projToShoot && projectile3.owner == whoAmI)
				{
					projectile3.Kill();
				}
			}
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, projToShoot, Damage, KnockBack, i);
		}
		else if (sItem.type == 3854)
		{
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, 705, Damage, KnockBack, i);
		}
		else if (sItem.type == 3546)
		{
			for (int num183 = 0; num183 < 2; num183++)
			{
				float num184 = num2;
				float num185 = num3;
				num184 += (float)Main.rand.Next(-40, 41) * 0.05f;
				num185 += (float)Main.rand.Next(-40, 41) * 0.05f;
				Vector2 vector58 = pointPoisition + Vector2.Normalize(new Vector2(num184, num185).RotatedBy(-(float)Math.PI / 2f * (float)direction)) * 6f;
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, vector58.X, vector58.Y, num184, num185, 167 + Main.rand.Next(4), Damage, KnockBack, i, 0f, 1f);
			}
		}
		else if (sItem.type == 3350)
		{
			float num186 = num2;
			float num187 = num3;
			num186 += (float)Main.rand.Next(-1, 2) * 0.5f;
			num187 += (float)Main.rand.Next(-1, 2) * 0.5f;
			if (Collision.CanHitLine(base.Center, 0, 0, pointPoisition + new Vector2(num186, num187) * 2f, 0, 0))
			{
				pointPoisition += new Vector2(num186, num187);
			}
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y - gravDir * 4f, num186, num187, projToShoot, Damage, KnockBack, i, 0f, (float)Main.rand.Next(12) / 6f);
		}
		else if (sItem.type == 3852)
		{
			if (altFunctionUse == 2)
			{
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, base.Bottom.Y - 100f, (float)direction * speed, 0f, 704, (int)((float)Damage * 1.75f), KnockBack, i);
			}
			else
			{
				Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, projToShoot, Damage, KnockBack, i);
			}
		}
		else if (sItem.type == 3818 || sItem.type == 3819 || sItem.type == 3820 || sItem.type == 3824 || sItem.type == 3825 || sItem.type == 3826 || sItem.type == 3829 || sItem.type == 3830 || sItem.type == 3831 || sItem.type == 3832 || sItem.type == 3833 || sItem.type == 3834)
		{
			PayDD2CrystalsBeforeUse(sItem);
			FindSentryRestingSpot(sItem.shoot, out var worldX, out var worldY, out var pushYUp);
			int num188 = 0;
			int num189 = 0;
			int num190 = 0;
			switch (sItem.type)
			{
			case 3824:
			case 3825:
			case 3826:
				num188 = 1;
				num189 = Projectile.GetBallistraShotDelay(this);
				break;
			case 3832:
			case 3833:
			case 3834:
				num190 = Projectile.GetExplosiveTrapCooldown(this);
				break;
			case 3818:
				num188 = 1;
				num189 = 80;
				break;
			case 3819:
				num188 = 1;
				num189 = 70;
				break;
			case 3820:
				num188 = 1;
				num189 = 60;
				break;
			}
			int num191 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, worldX, worldY - pushYUp, 0f, 0f, projToShoot, Damage, KnockBack, i, num188, num189);
			Main.projectile[num191].originalDamage = damage;
			Main.projectile[num191].localAI[0] = num190;
			UpdateMaxTurrets();
		}
		else if (sItem.type == 65)
		{
			Vector2 vector59 = new Vector2(num2, num3);
			new Vector2(100f, 0f);
			Vector2 mouseWorld2 = Main.MouseWorld;
			Vector2 vec = mouseWorld2;
			Vector2 vector60 = (pointPoisition - mouseWorld2).SafeNormalize(new Vector2(0f, -1f));
			while (vec.Y > pointPoisition.Y && WorldGen.SolidTile(vec.ToTileCoordinates()))
			{
				vec += vector60 * 16f;
			}
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition, vector59, projToShoot, Damage, KnockBack, i, 0f, vec.Y);
		}
		else if (sItem.type == 4923)
		{
			float adjustedItemScale7 = GetAdjustedItemScale(sItem);
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, projToShoot, Damage, KnockBack, i, 0f, adjustedItemScale7);
		}
		else if (sItem.type == 1910)
		{
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, projToShoot, Damage, KnockBack, i, 1f);
		}
		else if (sItem.type == 5134)
		{
			Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, projToShoot, Damage, KnockBack, i, 0f, 1f);
		}
		else
		{
			int num192 = Projectile.NewProjectile(projectileSource_Item_WithPotentialAmmo, pointPoisition.X, pointPoisition.Y, num2, num3, projToShoot, Damage, KnockBack, i);
			if (sItem.type == 726)
			{
				Main.projectile[num192].magic = true;
			}
			if (sItem.type == 724 || sItem.type == 676)
			{
				Main.projectile[num192].melee = true;
			}
			if (projToShoot == 80)
			{
				Main.projectile[num192].ai[0] = tileTargetX;
				Main.projectile[num192].ai[1] = tileTargetY;
			}
			if (sItem.type == 760)
			{
				DestroyOldestProximityMinesOverMinesCap(20);
			}
			if (projToShoot == 442)
			{
				Main.projectile[num192].ai[0] = tileTargetX;
				Main.projectile[num192].ai[1] = tileTargetY;
			}
			if (projToShoot == 826)
			{
				Main.projectile[num192].ai[1] = Main.rand.Next(3);
			}
			if (sItem.type == 949)
			{
				Main.projectile[num192].ai[1] = 1f;
			}
			if (Main.projectile[num192].aiStyle == 99)
			{
				AchievementsHelper.HandleSpecialEvent(this, 7);
			}
			if (Main.projectile[num192].aiStyle == 160 && Main.IsItAHappyWindyDay)
			{
				AchievementsHelper.HandleSpecialEvent(this, 17);
			}
			NetMessage.SendData(13, -1, -1, null, whoAmI);
		}
	}

	public Vector2 GetFarthestSpawnPositionOnLine(Vector2 startPos, float speedX, float speedY)
	{
		Vector2 pointPoisition = Main.ReverseGravitySupport(Main.MouseScreen) + Main.screenPosition;
		LimitPointToPlayerReachableArea(ref pointPoisition);
		int num = 0;
		float num2 = new Vector2(speedX, speedY).Length();
		float num3 = (pointPoisition - startPos).Length();
		Vector2 center = base.Center;
		center.X += direction * 16;
		while (Collision.CanHitLine(center, 0, 0, startPos, 0, 0))
		{
			num++;
			startPos.X += speedX;
			startPos.Y += speedY;
			if ((startPos - pointPoisition).Length() < 20f + Math.Abs(speedX) + Math.Abs(speedY))
			{
				startPos = pointPoisition;
				break;
			}
			if (num2 * (float)num >= num3)
			{
				startPos = pointPoisition;
				break;
			}
		}
		return startPos;
	}

	public int SpawnMinionOnCursor(IEntitySource projectileSource, int ownerIndex, int minionProjectileId, int originalDamageNotScaledByMinionDamage, float KnockBack, Vector2 offsetFromCursor = default(Vector2), Vector2 velocityOnSpawn = default(Vector2))
	{
		Vector2 pointPoisition = Main.MouseWorld;
		pointPoisition += offsetFromCursor;
		LimitPointToPlayerReachableArea(ref pointPoisition);
		float ai = 0f;
		if (projectileSource is EntitySource_ItemUse entitySource_ItemUse)
		{
			switch (entitySource_ItemUse.Item.type)
			{
			case 1157:
				ai = 60f;
				break;
			case 2364:
			case 2365:
			case 2535:
			case 2621:
			case 2749:
			case 3474:
				ai = 1f;
				break;
			}
		}
		int num = Projectile.NewProjectile(projectileSource, pointPoisition, velocityOnSpawn, minionProjectileId, originalDamageNotScaledByMinionDamage, KnockBack, ownerIndex, 0f, ai);
		Main.projectile[num].originalDamage = originalDamageNotScaledByMinionDamage;
		return num;
	}

	private Point FindSharpTearsSpot(Vector2 targetSpot)
	{
		Point point = targetSpot.ToTileCoordinates();
		Vector2 center = base.Center;
		Vector2 endPoint = targetSpot;
		int samplesToTake = 3;
		float samplingWidth = 4f;
		Collision.AimingLaserScan(center, endPoint, samplingWidth, samplesToTake, out var vectorTowardsTarget, out var samples);
		float num = float.PositiveInfinity;
		for (int i = 0; i < samples.Length; i++)
		{
			if (samples[i] < num)
			{
				num = samples[i];
			}
		}
		targetSpot = center + vectorTowardsTarget.SafeNormalize(Vector2.Zero) * num;
		point = targetSpot.ToTileCoordinates();
		Rectangle value = new Rectangle(point.X, point.Y, 1, 1);
		value.Inflate(6, 16);
		Rectangle value2 = new Rectangle(0, 0, Main.maxTilesX, Main.maxTilesY);
		value2.Inflate(-40, -40);
		value = Rectangle.Intersect(value, value2);
		List<Point> list = new List<Point>();
		List<Point> list2 = new List<Point>();
		for (int j = value.Left; j <= value.Right; j++)
		{
			for (int k = value.Top; k <= value.Bottom; k++)
			{
				if (!WorldGen.SolidTile2(j, k))
				{
					continue;
				}
				Vector2 value3 = new Vector2(j * 16 + 8, k * 16 + 8);
				if (!(Vector2.Distance(targetSpot, value3) > 200f))
				{
					if (FindSharpTearsOpening(j, k, j > point.X, j < point.X, k > point.Y, k < point.Y))
					{
						list.Add(new Point(j, k));
					}
					else
					{
						list2.Add(new Point(j, k));
					}
				}
			}
		}
		if (list.Count == 0 && list2.Count == 0)
		{
			list.Add((base.Center.ToTileCoordinates().ToVector2() + Main.rand.NextVector2Square(-2f, 2f)).ToPoint());
		}
		List<Point> list3 = list;
		if (list3.Count == 0)
		{
			list3 = list2;
		}
		int index = Main.rand.Next(list3.Count);
		return list3[index];
	}

	private bool FindSharpTearsOpening(int x, int y, bool acceptLeft, bool acceptRight, bool acceptUp, bool acceptDown)
	{
		if (acceptLeft && !WorldGen.SolidTile(x - 1, y))
		{
			return true;
		}
		if (acceptRight && !WorldGen.SolidTile(x + 1, y))
		{
			return true;
		}
		if (acceptUp && !WorldGen.SolidTile(x, y - 1))
		{
			return true;
		}
		if (acceptDown && !WorldGen.SolidTile(x, y + 1))
		{
			return true;
		}
		return false;
	}

	public bool TryPlacingAGolfBallNearANearbyTee(Vector2 placePosition)
	{
		int num = 0;
		int value = (int)(placePosition.X / 16f) - tileRangeX - num + 1;
		int value2 = (int)(placePosition.X / 16f) + tileRangeX + num - 1;
		int value3 = (int)(placePosition.Y / 16f) - tileRangeY - num + 1;
		int value4 = (int)(placePosition.Y / 16f) + tileRangeY + num - 2;
		value = Utils.Clamp(value, 10, Main.maxTilesX - 10);
		value2 = Utils.Clamp(value2, 10, Main.maxTilesX - 10);
		value3 = Utils.Clamp(value3, 10, Main.maxTilesY - 10);
		value4 = Utils.Clamp(value4, 10, Main.maxTilesY - 10);
		Vector2 value5 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY);
		if (gravDir == -1f)
		{
			value5.Y = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY;
		}
		Point point = placePosition.ToTileCoordinates();
		List<Tuple<int, int>> list = new List<Tuple<int, int>>();
		for (int i = -2; i <= 2; i++)
		{
			for (int j = -2; j <= 2; j++)
			{
				int num2 = point.X + i;
				int num3 = point.Y + j;
				if (WorldGen.InWorld(num2, num3, 1))
				{
					Tile tileSafely = Framing.GetTileSafely(num2, num3);
					if (tileSafely.active() && tileSafely.type == 494)
					{
						list.Add(new Tuple<int, int>(num2, num3));
						break;
					}
				}
			}
		}
		bool result = false;
		if (list.Count > 0)
		{
			float num4 = -1f;
			Tuple<int, int> tuple = list[0];
			for (int k = 0; k < list.Count; k++)
			{
				float num5 = Vector2.Distance(new Vector2(list[k].Item1, list[k].Item2) * 16f + Vector2.One * 8f, value5);
				if (num4 == -1f || num5 < num4)
				{
					num4 = num5;
					tuple = list[k];
				}
			}
			if (Collision.InTileBounds(tuple.Item1, tuple.Item2, value, value3, value2, value4))
			{
				result = true;
				for (int l = 0; l < 1000; l++)
				{
					if (ProjectileID.Sets.IsAGolfBall[Main.projectile[l].type] && Main.projectile[l].owner == whoAmI)
					{
						Main.projectile[l].Kill();
					}
				}
				GetPreferredGolfBallToUse(out var projType);
				Projectile.NewProjectile(GetProjectileSource_TileInteraction(tuple.Item1, tuple.Item2), (float)(tuple.Item1 * 16) + 8.5f, tuple.Item2 * 16 + 6, 0f, 0f, projType, 0, 0f, whoAmI, 0f, -1f);
			}
		}
		return result;
	}

	public void GetPreferredGolfBallToUse(out int projType)
	{
		projType = 721;
		Item item = inventory[selectedItem];
		if (!item.IsAir && item.shoot > 0 && ProjectileID.Sets.IsAGolfBall[item.shoot])
		{
			projType = item.shoot;
			return;
		}
		for (int num = 19; num >= 0; num--)
		{
			if (IsItemSlotUnlockedAndUsable(num))
			{
				_ = num % 10;
				Item item2 = armor[num];
				if (!item2.IsAir && item2.shoot > 0 && ProjectileID.Sets.IsAGolfBall[item2.shoot])
				{
					projType = item2.shoot;
					return;
				}
			}
		}
		for (int i = 0; i < 50; i++)
		{
			Item item3 = inventory[i];
			if (!item3.IsAir && item3.shoot > 0 && ProjectileID.Sets.IsAGolfBall[item3.shoot])
			{
				projType = item3.shoot;
				break;
			}
		}
	}

	private void ItemCheck_MinionAltFeatureUse(Item sItem, bool cShoot)
	{
		if (sItem.shoot > 0 && ProjectileID.Sets.MinionTargettingFeature[sItem.shoot] && altFunctionUse == 2 && cShoot && ItemTimeIsZero)
		{
			ApplyItemTime(sItem);
			MinionNPCTargetAim(doNotDisableIfTheTargetIsTheSame: false);
		}
	}

	private void ItemCheck_TurretAltFeatureUse(Item sItem, bool cShoot)
	{
		if (sItem.shoot <= 0 || !ProjectileID.Sets.TurretFeature[sItem.shoot] || altFunctionUse != 2 || !cShoot || !ItemTimeIsZero)
		{
			return;
		}
		ApplyItemTime(sItem);
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile = Main.projectile[i];
			if (projectile.active && projectile.owner == Main.myPlayer && ProjectileID.Sets.TurretFeature[projectile.type])
			{
				projectile.Kill();
			}
		}
	}

	private void EmitMaxManaEffect()
	{
		SoundEngine.PlaySound(25);
		for (int i = 0; i < 5; i++)
		{
			int num = Dust.NewDust(position, width, height, 45, 0f, 0f, 255, default(Color), (float)Main.rand.Next(20, 26) * 0.1f);
			Main.dust[num].noLight = true;
			Main.dust[num].noGravity = true;
			Main.dust[num].velocity *= 0.5f;
		}
	}

	private void ItemCheck_EmitHeldItemLight(Item sItem)
	{
		Vector2? handPosition = HandPosition;
		if (((ItemID.Sets.Torches[sItem.type] && !wet) || ItemID.Sets.WaterTorches[sItem.type]) && !pulley && !happyFunTorchTime)
		{
			float R = 1f;
			float G = 0.95f;
			float B = 0.8f;
			int num = 0;
			int num2 = BiomeTorchHoldStyle(sItem.type);
			if (num2 == 523)
			{
				num = 8;
			}
			else if (num2 == 974)
			{
				num = 9;
			}
			else if (num2 == 1245)
			{
				num = 10;
			}
			else if (num2 == 1333)
			{
				num = 11;
			}
			else if (num2 == 2274)
			{
				num = 12;
			}
			else if (num2 == 3004)
			{
				num = 13;
			}
			else if (num2 == 3045)
			{
				num = 14;
			}
			else if (num2 == 3114)
			{
				num = 15;
			}
			else if (num2 == 4383)
			{
				num = 16;
			}
			else if (num2 == 4384)
			{
				num = 17;
			}
			else if (num2 == 4385)
			{
				num = 18;
			}
			else if (num2 == 4386)
			{
				num = 19;
			}
			else if (num2 == 4387)
			{
				num = 20;
			}
			else if (num2 == 4388)
			{
				num = 21;
			}
			else if (num2 == 5293)
			{
				num = 22;
			}
			else if (num2 == 5353)
			{
				num = 23;
			}
			else if (num2 >= 427)
			{
				num = num2 - 426;
			}
			num = (int)MathHelper.Clamp(num, 0f, TorchID.Count - 1);
			TorchID.TorchColor(num, out R, out G, out B);
			int num3 = TorchID.Dust[num];
			int maxValue = 30;
			if (itemAnimation > 0)
			{
				maxValue = 7;
			}
			if (direction == -1)
			{
				if (Main.rand.Next(maxValue) == 0)
				{
					int num4 = Dust.NewDust(new Vector2(itemLocation.X - 16f, itemLocation.Y - 14f * gravDir), 4, 4, num3, 0f, 0f, 100);
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num4].noGravity = true;
					}
					Main.dust[num4].velocity *= 0.3f;
					Main.dust[num4].velocity.Y -= 1.5f;
					Main.dust[num4].position = RotatedRelativePoint(Main.dust[num4].position);
					if (num3 == 66)
					{
						Main.dust[num4].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
						Main.dust[num4].noGravity = true;
					}
				}
				Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X - 12f + velocity.X, itemLocation.Y - 14f + velocity.Y)), R, G, B);
			}
			else
			{
				if (Main.rand.Next(maxValue) == 0)
				{
					int num5 = Dust.NewDust(new Vector2(itemLocation.X + 6f, itemLocation.Y - 14f * gravDir), 4, 4, num3, 0f, 0f, 100);
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num5].noGravity = true;
					}
					Main.dust[num5].velocity *= 0.3f;
					Main.dust[num5].velocity.Y -= 1.5f;
					Main.dust[num5].position = RotatedRelativePoint(Main.dust[num5].position);
					if (num3 == 66)
					{
						Main.dust[num5].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
						Main.dust[num5].noGravity = true;
					}
				}
				Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X + 12f + velocity.X, itemLocation.Y - 14f + velocity.Y)), R, G, B);
			}
		}
		if ((sItem.type == 105 || sItem.type == 713) && !wet && !pulley)
		{
			int maxValue2 = 20;
			if (itemAnimation > 0)
			{
				maxValue2 = 7;
			}
			if (direction == -1)
			{
				if (Main.rand.Next(maxValue2) == 0)
				{
					int num6 = Dust.NewDust(new Vector2(itemLocation.X - 12f, itemLocation.Y - 20f * gravDir), 4, 4, 6, 0f, 0f, 100);
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num6].noGravity = true;
					}
					Main.dust[num6].velocity *= 0.3f;
					Main.dust[num6].velocity.Y -= 1.5f;
					Main.dust[num6].position = RotatedRelativePoint(Main.dust[num6].position);
				}
				Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X - 16f + velocity.X, itemLocation.Y - 14f)), 1f, 0.95f, 0.8f);
			}
			else
			{
				if (Main.rand.Next(maxValue2) == 0)
				{
					int num7 = Dust.NewDust(new Vector2(itemLocation.X + 4f, itemLocation.Y - 20f * gravDir), 4, 4, 6, 0f, 0f, 100);
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num7].noGravity = true;
					}
					Main.dust[num7].velocity *= 0.3f;
					Main.dust[num7].velocity.Y -= 1.5f;
					Main.dust[num7].position = RotatedRelativePoint(Main.dust[num7].position);
				}
				Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X + 6f + velocity.X, itemLocation.Y - 14f)), 1f, 0.95f, 0.8f);
			}
		}
		else if (sItem.type == 148 && !wet && !pulley)
		{
			int maxValue3 = 10;
			if (itemAnimation > 0)
			{
				maxValue3 = 7;
			}
			if (direction == -1)
			{
				if (Main.rand.Next(maxValue3) == 0)
				{
					int num8 = Dust.NewDust(new Vector2(itemLocation.X - 12f, itemLocation.Y - 20f * gravDir), 4, 4, 172, 0f, 0f, 100);
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num8].noGravity = true;
					}
					Main.dust[num8].velocity *= 0.3f;
					Main.dust[num8].velocity.Y -= 1.5f;
					Main.dust[num8].position = RotatedRelativePoint(Main.dust[num8].position);
				}
				Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X - 16f + velocity.X, itemLocation.Y - 14f)), 0f, 0.5f, 1f);
			}
			else
			{
				if (Main.rand.Next(maxValue3) == 0)
				{
					int num9 = Dust.NewDust(new Vector2(itemLocation.X + 4f, itemLocation.Y - 20f * gravDir), 4, 4, 172, 0f, 0f, 100);
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num9].noGravity = true;
					}
					Main.dust[num9].velocity *= 0.3f;
					Main.dust[num9].velocity.Y -= 1.5f;
					Main.dust[num9].position = RotatedRelativePoint(Main.dust[num9].position);
				}
				Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X + 6f + velocity.X, itemLocation.Y - 14f)), 0f, 0.5f, 1f);
			}
		}
		else if (sItem.type == 3117 && !wet && !pulley)
		{
			itemLocation.X -= direction * 4;
			int maxValue4 = 10;
			if (itemAnimation > 0)
			{
				maxValue4 = 7;
			}
			if (direction == -1)
			{
				if (Main.rand.Next(maxValue4) == 0)
				{
					int num10 = Dust.NewDust(new Vector2(itemLocation.X - 10f, itemLocation.Y - 20f * gravDir), 4, 4, 242, 0f, 0f, 100);
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num10].noGravity = true;
					}
					Main.dust[num10].velocity *= 0.3f;
					Main.dust[num10].velocity.Y -= 1.5f;
					Main.dust[num10].position = RotatedRelativePoint(Main.dust[num10].position);
				}
				Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X - 16f + velocity.X, itemLocation.Y - 14f)), 0.9f, 0.1f, 0.75f);
			}
			else
			{
				if (Main.rand.Next(maxValue4) == 0)
				{
					int num11 = Dust.NewDust(new Vector2(itemLocation.X + 6f, itemLocation.Y - 20f * gravDir), 4, 4, 242, 0f, 0f, 100);
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num11].noGravity = true;
					}
					Main.dust[num11].velocity *= 0.3f;
					Main.dust[num11].velocity.Y -= 1.5f;
					Main.dust[num11].position = RotatedRelativePoint(Main.dust[num11].position);
				}
				Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X + 6f + velocity.X, itemLocation.Y - 14f)), 0.9f, 0.1f, 0.75f);
			}
		}
		else if (sItem.type == 5322 && !wet && !pulley)
		{
			float r = 0.2f;
			float g = 0.3f;
			float b = 0.32f;
			if (direction == -1)
			{
				Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X - 16f + velocity.X, itemLocation.Y - 14f)), r, g, b);
			}
			else
			{
				Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X + 6f + velocity.X, itemLocation.Y - 14f)), r, g, b);
			}
		}
		if (sItem.type == 282 && !pulley)
		{
			if (direction == -1)
			{
				Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X - 16f + velocity.X, itemLocation.Y - 14f)), 0.7f, 1f, 0.8f);
			}
			else
			{
				Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X + 6f + velocity.X, itemLocation.Y - 14f)), 0.7f, 1f, 0.8f);
			}
		}
		if (sItem.type == 3002 && !pulley)
		{
			float r2 = 1.05f;
			float g2 = 0.95f;
			float b2 = 0.55f;
			if (direction == -1)
			{
				Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X - 16f + velocity.X, itemLocation.Y - 14f)), r2, g2, b2);
			}
			else
			{
				Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X + 6f + velocity.X, itemLocation.Y - 14f)), r2, g2, b2);
			}
			spelunkerTimer++;
			if (spelunkerTimer >= 10)
			{
				spelunkerTimer = 0;
				Main.instance.SpelunkerProjectileHelper.AddSpotToCheck(base.Center);
			}
		}
		if (sItem.type == 286 && !pulley)
		{
			if (direction == -1)
			{
				Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X - 16f + velocity.X, itemLocation.Y - 14f)), 0.7f, 0.8f, 1f);
			}
			else
			{
				Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X + 6f + velocity.X, itemLocation.Y - 14f)), 0.7f, 0.8f, 1f);
			}
		}
		if (sItem.type == 3112 && !pulley)
		{
			if (direction == -1)
			{
				Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X - 16f + velocity.X, itemLocation.Y - 14f)), 1f, 0.6f, 0.85f);
			}
			else
			{
				Lighting.AddLight(RotatedRelativePoint(new Vector2(itemLocation.X + 6f + velocity.X, itemLocation.Y - 14f)), 1f, 0.6f, 0.85f);
			}
		}
		if (sItem.type == 4776 && !pulley)
		{
			Vector2 vec = RotatedRelativePoint(new Vector2(itemLocation.X + 6f + velocity.X, itemLocation.Y - 14f));
			if (direction == -1)
			{
				vec = RotatedRelativePoint(new Vector2(itemLocation.X - 16f + velocity.X, itemLocation.Y - 14f));
			}
			Vector3 rgb = (DelegateMethods.v3_1 = new Vector3(0.9f, 0.35f, 1f));
			Point p = vec.ToTileCoordinates();
			DelegateMethods.v2_1 = p.ToVector2();
			DelegateMethods.f_1 = 4.5f;
			Utils.PlotTileArea(p.X, p.Y, DelegateMethods.SpreadLightOpen_StopForSolids);
			Lighting.AddLight(vec, rgb);
		}
		if (sItem.type == 3542 && handPosition.HasValue)
		{
			Vector2 vector = handPosition.Value - velocity;
			for (int i = 0; i < 4; i++)
			{
				Dust dust = Main.dust[Dust.NewDust(base.Center, 0, 0, 242, direction * 2, 0f, 150, default(Color), 1.3f)];
				dust.position = vector;
				dust.velocity *= 0f;
				dust.noGravity = true;
				dust.fadeIn = 1f;
				dust.velocity += velocity;
				if (Main.rand.Next(2) == 0)
				{
					dust.position += Utils.RandomVector2(Main.rand, -4f, 4f);
					dust.scale += Main.rand.NextFloat();
					if (Main.rand.Next(2) == 0)
					{
						dust.customData = this;
					}
				}
			}
		}
		if (sItem.type != 4952 || pulley || isPettingAnimal)
		{
			return;
		}
		Vector2 pos = itemLocation + new Vector2(8 * direction, -10f * gravDir);
		Vector3 rgb2 = new Vector3(1f, 0.7f, 0.8f) * 1.3f;
		Vector2 vector2 = RotatedRelativePoint(pos);
		Lighting.AddLight(vector2, rgb2);
		if (Main.rand.Next(40) == 0)
		{
			Vector2 vector3 = Main.rand.NextVector2Circular(4f, 4f);
			Dust dust2 = Dust.NewDustPerfect(vector2 + vector3, 43, Vector2.Zero, 254, new Color(255, 255, 0, 255), 0.3f);
			if (vector3 != Vector2.Zero)
			{
				dust2.velocity = vector2.DirectionTo(dust2.position) * 0.2f;
			}
			dust2.fadeIn = 0.3f;
			dust2.noLightEmittence = true;
			dust2.customData = this;
		}
	}

	public bool CanVisuallyHoldItem(Item item)
	{
		if (item.holdStyle == 4)
		{
			if (isPettingAnimal)
			{
				return false;
			}
			if (pulley)
			{
				return false;
			}
			if (gravDir == -1f)
			{
				return false;
			}
			if (velocity.Y != 0f)
			{
				return false;
			}
			if (mount.Active)
			{
				return false;
			}
		}
		if (item.holdStyle == 6 && isPettingAnimal)
		{
			return false;
		}
		if (item.holdStyle == 5 && isPettingAnimal)
		{
			return false;
		}
		return true;
	}

	private void ItemCheck_ApplyHoldStyle(float mountOffset, Item sItem, Rectangle heldItemFrame)
	{
		if (isPettingAnimal)
		{
			int num = miscCounter % 14 / 7;
			CompositeArmStretchAmount stretch = CompositeArmStretchAmount.ThreeQuarters;
			if (num == 1)
			{
				stretch = CompositeArmStretchAmount.Full;
			}
			float num2 = 0.3f;
			if (isTheAnimalBeingPetSmall)
			{
				num2 = 0.2f;
			}
			SetCompositeArmBack(enabled: true, stretch, (float)Math.PI * -2f * num2 * (float)direction);
		}
		if (!CanVisuallyHoldItem(sItem))
		{
			return;
		}
		if (sItem.holdStyle == 1 && !pulley)
		{
			if (Main.dedServ)
			{
				itemLocation.X = position.X + (float)width * 0.5f + 20f * (float)direction;
			}
			else if (sItem.type == 930)
			{
				itemLocation.X = position.X + (float)(width / 2) * 0.5f - 12f - (float)(2 * direction);
				float x = position.X + (float)(width / 2) + (float)(38 * direction);
				if (direction == 1)
				{
					x -= 10f;
				}
				float y = MountedCenter.Y - 4f * gravDir;
				if (gravDir == -1f)
				{
					y -= 8f;
				}
				RotateRelativePoint(ref x, ref y);
				int num3 = 0;
				for (int i = 54; i < 58; i++)
				{
					if (inventory[i].stack > 0 && inventory[i].ammo == 931)
					{
						num3 = inventory[i].type;
						break;
					}
				}
				if (num3 == 0)
				{
					for (int j = 0; j < 54; j++)
					{
						if (inventory[j].stack > 0 && inventory[j].ammo == 931)
						{
							num3 = inventory[j].type;
							break;
						}
					}
				}
				switch (num3)
				{
				case 931:
					num3 = 127;
					break;
				case 1614:
					num3 = 187;
					break;
				case 5377:
					num3 = 169;
					break;
				case 5378:
					num3 = 75;
					break;
				case 5379:
					num3 = 66;
					break;
				case 5380:
					num3 = 310;
					break;
				}
				if (num3 > 0)
				{
					int num4 = Dust.NewDust(new Vector2(x, y + gfxOffY), 6, 6, num3, 0f, 0f, 100, default(Color), 1.6f);
					Main.dust[num4].noGravity = true;
					Main.dust[num4].velocity.Y -= 4f * gravDir;
					if (num3 == 66)
					{
						Main.dust[num4].color = Main.hslToRgb(Main.GlobalTimeWrappedHourly * 0.6f % 1f, 1f, 0.5f);
						Main.dust[num4].scale *= 0.5f;
						Main.dust[num4].velocity *= 0.75f;
					}
				}
			}
			else if (sItem.type == 968)
			{
				itemLocation.X = position.X + (float)width * 0.5f + (float)(8 * direction);
				if (whoAmI == Main.myPlayer)
				{
					int num5 = (int)(itemLocation.X + (float)heldItemFrame.Width * 0.8f * (float)direction) / 16;
					int num6 = (int)(itemLocation.Y + mountOffset + (float)(heldItemFrame.Height / 2)) / 16;
					if (Main.tile[num5, num6] == null)
					{
						Main.tile[num5, num6] = new Tile();
					}
					if (Main.tile[num5, num6].active() && Main.tile[num5, num6].type == 215 && Main.tile[num5, num6].frameY < 54)
					{
						miscTimer++;
						if (Main.rand.Next(5) == 0)
						{
							miscTimer++;
						}
						if (miscTimer > 900)
						{
							miscTimer = 0;
							sItem.SetDefaults(969);
							if (selectedItem == 58)
							{
								Main.mouseItem.SetDefaults(969);
							}
							for (int k = 0; k < 58; k++)
							{
								if (inventory[k].type == sItem.type && k != selectedItem && inventory[k].stack < inventory[k].maxStack)
								{
									SoundEngine.PlaySound(7);
									inventory[k].stack++;
									sItem.SetDefaults();
									if (selectedItem == 58)
									{
										Main.mouseItem.SetDefaults();
									}
								}
							}
						}
					}
					else
					{
						miscTimer = 0;
					}
				}
			}
			else if (sItem.type == 856)
			{
				itemLocation.X = position.X + (float)width * 0.5f + (float)(4 * direction);
			}
			else if (sItem.fishingPole > 0)
			{
				itemLocation.X = position.X + (float)width * 0.5f + (float)heldItemFrame.Width * 0.18f * (float)direction;
			}
			else
			{
				itemLocation.X = position.X + (float)width * 0.5f + ((float)heldItemFrame.Width * 0.5f + 2f) * (float)direction;
				if (sItem.type == 282 || sItem.type == 286 || sItem.type == 3112 || sItem.type == 4776)
				{
					itemLocation.X -= direction * 2;
					itemLocation.Y += 4f;
				}
				else if (sItem.type == 3002)
				{
					itemLocation.X -= 4 * direction;
					itemLocation.Y += 2f;
				}
			}
			itemLocation.Y = position.Y + 24f + mountOffset;
			if (sItem.type == 856)
			{
				itemLocation.Y = position.Y + 34f + mountOffset;
			}
			if (sItem.type == 930)
			{
				itemLocation.Y = position.Y + 9f + mountOffset;
			}
			if (sItem.fishingPole > 0)
			{
				itemLocation.Y += 4f;
			}
			else if (sItem.type == 3476)
			{
				itemLocation.X = base.Center.X + (float)(14 * direction);
				itemLocation.Y = MountedCenter.Y;
			}
			else if (sItem.type == 3779)
			{
				itemLocation.X = base.Center.X + (float)(6 * direction);
				itemLocation.Y = MountedCenter.Y + 6f;
			}
			else if (sItem.type == 4952)
			{
				itemLocation.X = base.Center.X + (float)(2 * direction);
				itemLocation.Y = MountedCenter.Y + 26f;
			}
			else if (sItem.type == 353)
			{
				itemLocation.X = base.Center.X + (float)(6 * direction);
				itemLocation.Y = MountedCenter.Y + 11f;
			}
			else if (ItemID.Sets.IsFood[sItem.type])
			{
				itemLocation.X = base.Center.X + (float)(4 * direction);
				itemLocation.Y = MountedCenter.Y + (float)(heldItemFrame.Height / 2);
			}
			else if (sItem.type == 4049 && Main.rand.Next(4) == 0)
			{
				Dust dust = Dust.NewDustPerfect(base.Center + new Vector2(direction * 23, gravDir * 6f), 31, Vector2.Zero, 127, default(Color), 0.7f);
				dust.noGravity = true;
				dust.velocity = Main.rand.NextVector2Circular(1f, 1f) + new Vector2(0f, -1f);
			}
			itemRotation = 0f;
			if (gravDir == -1f)
			{
				itemRotation = 0f - itemRotation;
				itemLocation.Y = position.Y + (float)height + (position.Y - itemLocation.Y) + mountOffset;
				if (sItem.type == 930)
				{
					itemLocation.Y -= 24f;
				}
			}
		}
		else if (sItem.holdStyle == 2 && !pulley)
		{
			if (sItem.type == 946 || sItem.type == 4707)
			{
				itemRotation = 0f;
				itemLocation.X = position.X + (float)width * 0.5f - (float)(16 * direction);
				itemLocation.Y = position.Y + 22f + mountOffset;
				fallStart = (int)(position.Y / 16f);
				if (gravDir == -1f)
				{
					itemRotation = 0f - itemRotation;
					itemLocation.Y = position.Y + (float)height + (position.Y - itemLocation.Y);
					if (velocity.Y < -2f && !controlDown)
					{
						velocity.Y = -2f;
					}
				}
				else if (velocity.Y > 2f && !controlDown)
				{
					velocity.Y = 2f;
				}
			}
			else
			{
				itemLocation.X = position.X + (float)width * 0.5f + (float)(6 * direction);
				itemLocation.Y = position.Y + 16f + mountOffset;
				itemRotation = 0.79f * (float)(-direction);
				if (gravDir == -1f)
				{
					itemRotation = 0f - itemRotation;
					itemLocation.Y = position.Y + (float)height + (position.Y - itemLocation.Y);
				}
			}
		}
		else if (sItem.holdStyle == 3 && !pulley)
		{
			if (!Main.dedServ)
			{
				itemLocation.X = position.X + (float)width * 0.5f - (float)heldItemFrame.Width * 0.5f - (float)(direction * 2);
				itemLocation.Y = MountedCenter.Y - (float)heldItemFrame.Height * 0.5f;
				itemRotation = 0f;
			}
		}
		else if (sItem.holdStyle == 4)
		{
			if (!Main.dedServ)
			{
				float num7 = new Vector2(10 * direction, 10f).ToRotation() + (float)Math.PI / 4f;
				itemRotation = num7;
				if (direction == -1)
				{
					itemRotation += (float)Math.PI / 2f;
				}
				CompositeArmStretchAmount stretch2 = CompositeArmStretchAmount.Full;
				CompositeArmStretchAmount stretch3 = CompositeArmStretchAmount.ThreeQuarters;
				float num8 = -(float)Math.PI / 10f;
				if (direction == -1)
				{
					num8 *= -1f;
				}
				float num9 = itemRotation - (float)Math.PI / 4f + (float)Math.PI;
				if (direction == 1)
				{
					num9 += (float)Math.PI / 2f;
				}
				float rotation = num9 + num8;
				float rotation2 = num9 - num8;
				Vector2 vector = (num9 + (float)Math.PI / 2f).ToRotationVector2() * 2f;
				itemLocation = MountedCenter.Floor() + vector;
				SetCompositeArmFront(enabled: true, stretch2, rotation);
				SetCompositeArmBack(enabled: true, stretch3, rotation2);
				FlipItemLocationAndRotationForGravity();
			}
		}
		else if (sItem.holdStyle == 5 && !pulley)
		{
			if (!Main.dedServ)
			{
				itemRotation = 0f;
				itemLocation.X = base.Center.X - (float)(8 * direction);
				itemLocation.Y = position.Y + 40f + mountOffset;
				Vector2 vector2 = Main.OffsetsPlayerHeadgear[bodyFrame.Y / 56];
				itemLocation += vector2;
				CompositeArmStretchAmount stretch4 = CompositeArmStretchAmount.Quarter;
				SetCompositeArmBack(enabled: true, stretch4, -(float)Math.PI / 4f * (float)direction);
				CompositeArmStretchAmount stretch5 = CompositeArmStretchAmount.Full;
				SetCompositeArmFront(enabled: true, stretch5, -0.39269912f * (float)direction);
				FlipItemLocationAndRotationForGravity();
			}
		}
		else if (sItem.holdStyle == 6 && !pulley && !Main.dedServ)
		{
			itemRotation = 0f;
			itemLocation.X = base.Center.X + (float)(8 * direction);
			itemLocation.Y = position.Y + 40f + mountOffset - 2f;
			Vector2 vector3 = Main.OffsetsPlayerHeadgear[bodyFrame.Y / 56];
			itemLocation += vector3;
			CompositeArmStretchAmount stretch6 = CompositeArmStretchAmount.ThreeQuarters;
			SetCompositeArmBack(enabled: true, stretch6, (float)Math.PI * -3f / 5f * (float)direction);
			FlipItemLocationAndRotationForGravity();
		}
	}

	private void ItemCheck_ApplyManaRegenDelay(Item sItem)
	{
		if (!spaceGun || (sItem.type != 127 && sItem.type != 4347 && sItem.type != 4348))
		{
			manaRegenDelay = (int)maxRegenDelay;
		}
	}

	public Vector2 GetFrontHandPosition(CompositeArmStretchAmount stretch, float rotation)
	{
		float num = rotation + (float)Math.PI / 2f;
		Vector2 vector = new Vector2((float)Math.Cos(num), (float)Math.Sin(num));
		switch (stretch)
		{
		case CompositeArmStretchAmount.Full:
			vector *= 10f;
			break;
		case CompositeArmStretchAmount.None:
			vector *= 4f;
			break;
		case CompositeArmStretchAmount.Quarter:
			vector *= 6f;
			break;
		case CompositeArmStretchAmount.ThreeQuarters:
			vector *= 8f;
			break;
		}
		if (direction == -1)
		{
			vector += new Vector2(4f, -2f);
			vector += new Vector2(0f, -3f).RotatedBy(rotation + (float)Math.PI / 2f);
		}
		else
		{
			vector += new Vector2(-4f, -2f);
			vector += new Vector2(0f, 3f).RotatedBy(rotation + (float)Math.PI / 2f);
		}
		return MountedCenter + vector;
	}

	public Vector2 GetBackHandPosition(CompositeArmStretchAmount stretch, float rotation)
	{
		float num = rotation + (float)Math.PI / 2f;
		Vector2 vector = new Vector2((float)Math.Cos(num), (float)Math.Sin(num));
		switch (stretch)
		{
		case CompositeArmStretchAmount.Full:
			vector *= new Vector2(10f, 12f);
			break;
		case CompositeArmStretchAmount.None:
			vector *= new Vector2(4f, 6f);
			break;
		case CompositeArmStretchAmount.Quarter:
			vector *= new Vector2(6f, 8f);
			break;
		case CompositeArmStretchAmount.ThreeQuarters:
			vector *= new Vector2(8f, 10f);
			break;
		}
		if (direction == -1)
		{
			vector += new Vector2(-6f, -2f);
		}
		else
		{
			vector += new Vector2(6f, -2f);
		}
		return MountedCenter + vector;
	}

	public void ItemCheck_ApplyUseStyle(float mountOffset, Item sItem, Rectangle heldItemFrame)
	{
		if (Main.dedServ)
		{
			return;
		}
		if (sItem.useStyle == 1)
		{
			if (sItem.type > -1 && Item.claw[sItem.type])
			{
				if ((double)itemAnimation < (double)itemAnimationMax * 0.333)
				{
					float num = 10f;
					itemLocation.X = position.X + (float)width * 0.5f + ((float)heldItemFrame.Width * 0.5f - num) * (float)direction;
					itemLocation.Y = position.Y + 26f + mountOffset;
				}
				else if ((double)itemAnimation < (double)itemAnimationMax * 0.666)
				{
					float num2 = 8f;
					itemLocation.X = position.X + (float)width * 0.5f + ((float)heldItemFrame.Width * 0.5f - num2) * (float)direction;
					num2 = 24f;
					itemLocation.Y = position.Y + num2 + mountOffset;
				}
				else
				{
					float num3 = 6f;
					itemLocation.X = position.X + (float)width * 0.5f - ((float)heldItemFrame.Width * 0.5f - num3) * (float)direction;
					num3 = 20f;
					itemLocation.Y = position.Y + num3 + mountOffset;
				}
				itemRotation = ((float)itemAnimation / (float)itemAnimationMax - 0.5f) * (float)(-direction) * 3.5f - (float)direction * 0.3f;
			}
			else
			{
				Vector2 zero = Vector2.Zero;
				if ((double)itemAnimation < (double)itemAnimationMax * 0.333)
				{
					float num4 = 10f;
					if (heldItemFrame.Width > 32)
					{
						num4 = 14f;
					}
					if (heldItemFrame.Width >= 52)
					{
						num4 = 24f;
					}
					if (heldItemFrame.Width >= 64)
					{
						num4 = 28f;
					}
					if (heldItemFrame.Width >= 92)
					{
						num4 = 38f;
					}
					if (sItem.type == 2330 || sItem.type == 2320 || sItem.type == 2341)
					{
						num4 += 8f;
					}
					if (sItem.type == 671)
					{
						num4 += 12f;
					}
					itemLocation.X = position.X + (float)width * 0.5f + ((float)heldItemFrame.Width * 0.5f - num4) * (float)direction;
					itemLocation.Y = position.Y + 24f + mountOffset;
					zero = new Vector2(-4f, 1f);
				}
				else if ((double)itemAnimation < (double)itemAnimationMax * 0.666)
				{
					float num5 = 10f;
					if (heldItemFrame.Width > 32)
					{
						num5 = 18f;
					}
					if (heldItemFrame.Width >= 52)
					{
						num5 = 24f;
					}
					if (heldItemFrame.Width >= 64)
					{
						num5 = 28f;
					}
					if (heldItemFrame.Width >= 92)
					{
						num5 = 38f;
					}
					if (sItem.type == 2330 || sItem.type == 2320 || sItem.type == 2341)
					{
						num5 += 4f;
					}
					if (sItem.type == 671)
					{
						num5 += 6f;
					}
					itemLocation.X = position.X + (float)width * 0.5f + ((float)heldItemFrame.Width * 0.5f - num5) * (float)direction;
					num5 = 10f;
					if (heldItemFrame.Height > 32)
					{
						num5 = 8f;
					}
					if (heldItemFrame.Height > 52)
					{
						num5 = 12f;
					}
					if (heldItemFrame.Height > 64)
					{
						num5 = 14f;
					}
					if (sItem.type == 2330 || sItem.type == 2320 || sItem.type == 2341)
					{
						num5 += 4f;
					}
					if (sItem.type == 671)
					{
						num5 += 10f;
					}
					itemLocation.Y = position.Y + num5 + mountOffset;
					zero = new Vector2(-6f, -4f);
				}
				else
				{
					float num6 = 6f;
					if (heldItemFrame.Width > 32)
					{
						num6 = 14f;
					}
					if (heldItemFrame.Width >= 48)
					{
						num6 = 18f;
					}
					if (heldItemFrame.Width >= 52)
					{
						num6 = 24f;
					}
					if (heldItemFrame.Width >= 64)
					{
						num6 = 28f;
					}
					if (heldItemFrame.Width >= 92)
					{
						num6 = 38f;
					}
					if (sItem.type == 2330 || sItem.type == 2320 || sItem.type == 2341)
					{
						num6 += 4f;
					}
					if (sItem.type == 671)
					{
						num6 += 8f;
					}
					itemLocation.X = position.X + (float)width * 0.5f - ((float)heldItemFrame.Width * 0.5f - num6) * (float)direction;
					num6 = 10f;
					if (heldItemFrame.Height > 32)
					{
						num6 = 10f;
					}
					if (heldItemFrame.Height > 52)
					{
						num6 = 12f;
					}
					if (heldItemFrame.Height > 64)
					{
						num6 = 14f;
					}
					if (sItem.type == 2330 || sItem.type == 2320 || sItem.type == 2341)
					{
						num6 += 4f;
					}
					if (sItem.type == 671)
					{
						num6 += 8f;
					}
					itemLocation.Y = position.Y + num6 + mountOffset;
					zero = new Vector2(4f, -2f);
				}
				if (sItem.type > -1 && ItemID.Sets.UsesBetterMeleeItemLocation[sItem.type])
				{
					itemLocation += zero * Directions;
				}
				itemRotation = ((float)itemAnimation / (float)itemAnimationMax - 0.5f) * (float)(-direction) * 3.5f - (float)direction * 0.3f;
			}
			if (gravDir == -1f)
			{
				itemRotation = 0f - itemRotation;
				itemLocation.Y = position.Y + (float)height + (position.Y - itemLocation.Y);
			}
		}
		else if (sItem.useStyle == 7)
		{
			itemRotation = (float)itemAnimation / (float)itemAnimationMax * (float)direction * 2f + -1.4f * (float)direction;
			if ((double)itemAnimation < (double)itemAnimationMax * 0.5)
			{
				itemLocation.X = position.X + (float)width * 0.5f + ((float)heldItemFrame.Width * 0.5f - 9f - itemRotation * 12f * (float)direction) * (float)direction;
				itemLocation.Y = position.Y + 38f + itemRotation * (float)direction * 4f + mountOffset;
			}
			else
			{
				itemLocation.X = position.X + (float)width * 0.5f + ((float)heldItemFrame.Width * 0.5f - 9f - itemRotation * 16f * (float)direction) * (float)direction;
				itemLocation.Y = position.Y + 38f + itemRotation * (float)direction + mountOffset;
			}
			if (gravDir == -1f)
			{
				itemRotation = 0f - itemRotation;
				itemLocation.Y = position.Y + (float)height + (position.Y - itemLocation.Y);
			}
		}
		else if (sItem.useStyle == 9)
		{
			float num7 = (float)itemAnimation / (float)itemAnimationMax;
			float t = 1f - num7;
			t = Utils.GetLerpValue(0f, 0.7f, t, clamped: true);
			itemRotation = t * (float)(-direction) * 2f + 0.7f * (float)direction;
			itemLocation = MountedCenter + new Vector2((float)(direction * 10) * ((float)itemAnimation / (float)itemAnimationMax), 0f);
			float num8 = 8f;
			float num9 = 7f;
			float num10 = (float)Math.PI * 2f / 5f;
			float num11 = (0f - num10) * 0.5f + (1f - t) * num10;
			num11 += (float)Math.PI / 10f;
			Vector2 vector = base.Center + new Vector2((float)direction * num8, 0f) + num11.ToRotationVector2() * num9 * new Vector2(direction, 1f);
			itemLocation = vector;
			float num12 = num11 - (float)Math.PI / 2f;
			if (direction == -1)
			{
				num12 = 0f - num12;
			}
			SetCompositeArmFront(enabled: true, CompositeArmStretchAmount.Full, num12);
			itemLocation = GetFrontHandPosition(CompositeArmStretchAmount.Full, num12);
			itemLocation -= MountedCenter;
			itemLocation *= MathHelper.Lerp(1.5f, 1.2f, t);
			itemLocation += MountedCenter;
			itemLocation.X += (float)direction * MathHelper.Lerp(8f, 2f, t);
			if (gravDir == -1f)
			{
				itemRotation = 0f - itemRotation;
				itemLocation.Y = position.Y + (float)height + (position.Y - itemLocation.Y);
			}
		}
		else if (sItem.useStyle == 6)
		{
			float num13 = 1f - (float)itemAnimation / (float)itemAnimationMax;
			num13 *= 6f;
			if (num13 > 1f)
			{
				num13 = 1f;
			}
			itemRotation = (1f - num13) * (float)direction * 2f - 1.4f * (float)direction;
			if (num13 >= 0.5f)
			{
				itemLocation.X = position.X + (float)width * 0.5f + ((float)heldItemFrame.Width * 0.5f - 9f - itemRotation * 12f * (float)direction) * (float)direction;
				itemLocation.Y = position.Y + 38f + itemRotation * (float)direction * 4f + mountOffset;
			}
			else
			{
				itemLocation.X = position.X + (float)width * 0.5f + ((float)heldItemFrame.Width * 0.5f - 9f - itemRotation * 16f * (float)direction) * (float)direction;
				itemLocation.Y = position.Y + 38f + itemRotation * (float)direction + mountOffset;
			}
			if (gravDir == -1f)
			{
				itemRotation = 0f - itemRotation;
				itemLocation.Y = position.Y + (float)height + (position.Y - itemLocation.Y);
			}
		}
		else if (sItem.useStyle == 2)
		{
			itemLocation = MountedCenter + new Vector2(10 * direction, -10f).RotatedBy(itemRotation + (float)Math.PI / 4f * (float)direction);
			float num14 = 1f - (float)itemAnimation / (float)itemAnimationMax;
			CompositeArmStretchAmount compositeArmStretchAmount = CompositeArmStretchAmount.Full;
			if (num14 > 0.25f && num14 <= 0.5f)
			{
				compositeArmStretchAmount = CompositeArmStretchAmount.ThreeQuarters;
			}
			if (num14 > 0.5f && num14 <= 0.75f)
			{
				compositeArmStretchAmount = CompositeArmStretchAmount.Quarter;
			}
			if (num14 > 0.75f && num14 <= 1f)
			{
				compositeArmStretchAmount = CompositeArmStretchAmount.None;
			}
			SetCompositeArmFront(enabled: true, compositeArmStretchAmount, -(float)Math.PI / 2f * (float)direction);
			SetCompositeArmBack(enabled: true, compositeArmStretchAmount, -(float)Math.PI / 2f * (float)direction);
			int num15 = 8;
			switch (compositeArmStretchAmount)
			{
			case CompositeArmStretchAmount.Full:
				num15 = 8;
				break;
			case CompositeArmStretchAmount.ThreeQuarters:
				num15 = 6;
				break;
			case CompositeArmStretchAmount.Quarter:
				num15 = 4;
				break;
			case CompositeArmStretchAmount.None:
				num15 = 2;
				break;
			}
			itemLocation = MountedCenter + new Vector2((num15 + 10 - heldItemFrame.Width / 2) * direction, heldItemFrame.Height / 2 - 4);
			if (gravDir == -1f)
			{
				itemRotation = 0f - itemRotation;
				itemLocation.Y = position.Y + (float)height + (position.Y - itemLocation.Y);
			}
		}
		else if (sItem.useStyle == 11)
		{
			float num16 = 1f - (float)itemAnimation / (float)itemAnimationMax;
			num16 *= 2f;
			CompositeArmStretchAmount compositeArmStretchAmount2 = CompositeArmStretchAmount.Full;
			if (num16 > 0.25f && num16 <= 0.5f)
			{
				compositeArmStretchAmount2 = CompositeArmStretchAmount.ThreeQuarters;
			}
			if (num16 > 0.5f && num16 <= 0.75f)
			{
				compositeArmStretchAmount2 = CompositeArmStretchAmount.Quarter;
			}
			if (num16 > 0.75f && num16 <= 1.25f)
			{
				compositeArmStretchAmount2 = CompositeArmStretchAmount.None;
			}
			if (num16 > 1.25f && num16 <= 1.5f)
			{
				compositeArmStretchAmount2 = CompositeArmStretchAmount.Quarter;
			}
			if (num16 > 1.5f && num16 <= 1.75f)
			{
				compositeArmStretchAmount2 = CompositeArmStretchAmount.ThreeQuarters;
			}
			if (num16 > 1.75f && num16 <= 2f)
			{
				compositeArmStretchAmount2 = CompositeArmStretchAmount.Full;
			}
			SetCompositeArmFront(enabled: true, compositeArmStretchAmount2, -(float)Math.PI / 4f * (float)direction);
			SetCompositeArmBack(enabled: true, CompositeArmStretchAmount.Full, -(float)Math.PI / 16f);
			int num17 = 8;
			switch (compositeArmStretchAmount2)
			{
			case CompositeArmStretchAmount.Full:
				num17 = 8;
				break;
			case CompositeArmStretchAmount.ThreeQuarters:
				num17 = 6;
				break;
			case CompositeArmStretchAmount.Quarter:
				num17 = 4;
				break;
			case CompositeArmStretchAmount.None:
				num17 = 2;
				break;
			}
			itemLocation = MountedCenter + new Vector2((num17 + 22 - heldItemFrame.Width / 2) * direction, heldItemFrame.Height / 2 - 8);
			if (gravDir == -1f)
			{
				itemRotation = 0f - itemRotation;
				itemLocation.Y = position.Y + (float)height + (position.Y - itemLocation.Y);
			}
		}
		else if (sItem.useStyle == 3)
		{
			if ((double)itemAnimation > (double)itemAnimationMax * 0.666)
			{
				itemLocation.X = -1000f;
				itemLocation.Y = -1000f;
				itemRotation = -1.3f * (float)direction;
			}
			else
			{
				itemLocation.X = position.X + (float)width * 0.5f + ((float)heldItemFrame.Width * 0.5f - 4f) * (float)direction;
				itemLocation.Y = position.Y + 24f + mountOffset;
				float num18 = (float)itemAnimation / (float)itemAnimationMax * (float)heldItemFrame.Width * (float)direction * GetAdjustedItemScale(sItem) * 1.2f - (float)(10 * direction);
				if (num18 > -4f && direction == -1)
				{
					num18 = -8f;
				}
				if (num18 < 4f && direction == 1)
				{
					num18 = 8f;
				}
				itemLocation.X -= num18;
				itemRotation = 0.8f * (float)direction;
				if (sItem.type == 946 || sItem.type == 4707)
				{
					itemLocation.X -= 6 * direction;
				}
			}
			if (gravDir == -1f)
			{
				itemRotation = 0f - itemRotation;
				itemLocation.Y = position.Y + (float)height + (position.Y - itemLocation.Y);
			}
		}
		else if (sItem.useStyle == 4)
		{
			int num19 = 0;
			int num20 = 0;
			if (sItem.type == 3601)
			{
				num19 = 10;
			}
			if (sItem.type == 5114)
			{
				num19 = 10;
				num20 = -2;
			}
			if (sItem.type == 5120)
			{
				num19 = 10;
			}
			itemRotation = 0f;
			itemLocation.X = position.X + (float)width * 0.5f + ((float)heldItemFrame.Width * 0.5f - 9f - itemRotation * 14f * (float)direction - 4f - (float)num19) * (float)direction;
			itemLocation.Y = position.Y + (float)heldItemFrame.Height * 0.5f + 4f + mountOffset + (float)num20;
			if (gravDir == -1f)
			{
				itemRotation = 0f - itemRotation;
				itemLocation.Y = position.Y + (float)height + (position.Y - itemLocation.Y);
			}
		}
		else if (sItem.useStyle == 5)
		{
			if (sItem.type == 3779)
			{
				itemRotation = 0f;
				itemLocation.X = base.Center.X + (float)(6 * direction);
				itemLocation.Y = MountedCenter.Y + 6f;
			}
			else if (sItem.type == 4262)
			{
				itemRotation = 0f;
				itemLocation.X = base.Center.X + (float)(-heldItemFrame.Width) * 0.5f + (float)(direction * -6);
				itemLocation.Y = MountedCenter.Y - 6f;
				if (Main.rand.Next(20) == 0)
				{
					int num21 = Main.rand.Next(570, 573);
					Vector2 vector2 = new Vector2(base.Center.X + (float)(direction * 30) - 6f, itemLocation.Y - 30f);
					Vector2 vector3 = new Vector2(Main.WindForVisuals * 2f + (float)direction * 0.3f, -0.5f);
					vector3.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					vector3.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					if (num21 == 572)
					{
						vector2.X -= 8f;
					}
					if (num21 == 571)
					{
						vector2.X -= 4f;
					}
					Gore.NewGore(vector2, vector3, num21, 0.8f);
				}
			}
			else if (Item.staff[sItem.type])
			{
				float num22 = 6f;
				if (sItem.type == 3476)
				{
					num22 = 14f;
				}
				itemLocation = MountedCenter;
				itemLocation += (itemRotation.ToRotationVector2() * num22 * direction).Floor();
			}
			else
			{
				itemLocation.X = position.X + (float)width * 0.5f - (float)heldItemFrame.Width * 0.5f - (float)(direction * 2);
				itemLocation.Y = MountedCenter.Y - (float)heldItemFrame.Height * 0.5f;
			}
			if (sItem.type != 5065)
			{
				return;
			}
			_ = itemRotation;
			Vector2 vector4 = itemLocation + itemRotation.ToRotationVector2() * 38f * direction;
			Vector2 vector5 = itemRotation.ToRotationVector2() * 5f * direction;
			if (itemAnimation % 2 == 0)
			{
				Color newColor = Main.hslToRgb(0.92f, 1f, 0.5f);
				int num23 = Dust.NewDust(vector4, 0, 0, 267, 0f, 0f, 0, newColor);
				Main.dust[num23].position = vector4 - velocity + Main.rand.NextVector2Circular(10f, 10f);
				Main.dust[num23].noGravity = true;
				Main.dust[num23].scale = 0.3f;
				Main.dust[num23].fadeIn = Main.rand.NextFloat() * 1.2f;
				Main.dust[num23].velocity = Main.rand.NextVector2Circular(1f, 1f) + velocity;
				if (num23 != 6000)
				{
					Dust dust = Dust.CloneDust(num23);
					dust.scale /= 2f;
					dust.fadeIn *= 0.85f;
					dust.color = new Color(255, 255, 255, 255);
				}
			}
			if (itemAnimation % 4 == 0)
			{
				ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.PrincessWeapon, new ParticleOrchestraSettings
				{
					PositionInWorld = vector4,
					MovementVector = vector5 * 0.1f + Main.rand.NextVector2Circular(2f, 2f) + velocity
				}, whoAmI);
			}
		}
		else if (sItem.useStyle == 13)
		{
			int useAnimation = itemAnimationMax;
			if (itemTimeMax != 0)
			{
				useAnimation = itemTimeMax;
			}
			if (useAnimation == 0)
			{
				useAnimation = sItem.useAnimation;
			}
			float num24 = 1f - (float)(itemAnimation % useAnimation) / (float)useAnimation;
			CompositeArmStretchAmount stretch = CompositeArmStretchAmount.Quarter;
			if (num24 > 0.33f && num24 <= 0.66f)
			{
				stretch = CompositeArmStretchAmount.ThreeQuarters;
			}
			if (num24 > 0.66f && num24 <= 1f)
			{
				stretch = CompositeArmStretchAmount.Full;
			}
			float rotation = itemRotation * Directions.Y - (float)Math.PI / 2f * (float)direction;
			SetCompositeArmFront(enabled: true, stretch, rotation);
		}
		else if (sItem.useStyle == 8)
		{
			Projectile projectile = null;
			if (ownedProjectileCounts[722] > 0)
			{
				for (int i = 0; i < 1000; i++)
				{
					Projectile projectile2 = Main.projectile[i];
					if (projectile2.active && projectile2.owner == whoAmI && projectile2.type == 722)
					{
						projectile = projectile2;
						break;
					}
				}
			}
			float num25 = 1f;
			if (projectile != null)
			{
				num25 = MathHelper.Lerp(0.6f, 1f, Utils.GetLerpValue(0f, 800f, Vector2.Distance(MountedCenter, projectile.Center), clamped: true));
			}
			num25 = 1f;
			if (itemAnimation >= sItem.useAnimation - 1 && itemAnimation <= sItem.useAnimation)
			{
				float num26 = new Vector2(10 * direction, 10f).ToRotation() + (float)Math.PI / 4f;
				itemRotation = num26;
				if (direction == -1)
				{
					itemRotation += (float)Math.PI / 2f;
				}
				_ = 1f - (float)itemAnimation / (float)itemAnimationMax;
				CompositeArmStretchAmount stretch2 = CompositeArmStretchAmount.Full;
				CompositeArmStretchAmount stretch3 = CompositeArmStretchAmount.ThreeQuarters;
				float num27 = -(float)Math.PI / 10f;
				if (direction == -1)
				{
					num27 *= -1f;
				}
				float num28 = itemRotation - (float)Math.PI / 4f + (float)Math.PI;
				if (direction == 1)
				{
					num28 += (float)Math.PI / 2f;
				}
				float rotation2 = num28 + num27;
				float rotation3 = num28 - num27;
				Vector2 vector6 = (num28 + (float)Math.PI / 2f).ToRotationVector2() * -2f;
				itemLocation = (MountedCenter + vector6).Floor();
				SetCompositeArmFront(enabled: true, stretch2, rotation2);
				SetCompositeArmBack(enabled: true, stretch3, rotation3);
			}
			else if (itemAnimation > sItem.useAnimation)
			{
				float num29 = 0f - Utils.GetLerpValue(itemAnimationMax, itemAnimationMax * 5, itemAnimation, clamped: true);
				num29 *= num25;
				CompositeArmStretchAmount stretch4 = CompositeArmStretchAmount.Full;
				CompositeArmStretchAmount stretch5 = CompositeArmStretchAmount.ThreeQuarters;
				float num30 = -(float)Math.PI / 10f;
				num30 *= 0f - num29;
				itemRotation = (float)Math.PI / 2f * (float)(-direction) + (float)Math.PI + (float)Math.PI * num29 * (float)(-direction);
				float num31 = -(float)Math.PI / 5f * (float)direction;
				if (direction < 1)
				{
					num30 *= -1f;
				}
				float rotation4 = num31 + num30;
				float rotation5 = num31 - num30;
				Vector2 vector7 = new Vector2(10 * direction, num29 * -6f);
				itemLocation = (MountedCenter + vector7).Floor();
				SetCompositeArmFront(enabled: true, stretch4, rotation4);
				SetCompositeArmBack(enabled: true, stretch5, rotation5);
			}
			else
			{
				float num32 = 1f - (float)itemAnimation / (float)itemAnimationMax;
				CompositeArmStretchAmount stretch6 = CompositeArmStretchAmount.Full;
				CompositeArmStretchAmount stretch7 = CompositeArmStretchAmount.ThreeQuarters;
				if (num32 > 0.6f)
				{
					stretch7 = CompositeArmStretchAmount.Quarter;
				}
				float num33 = -(float)Math.PI / 10f;
				if (direction == -1)
				{
					num33 *= -1f;
				}
				num33 *= 1f - num32 * 2.2f;
				itemRotation = (num32 * (float)Math.PI * 1.6f + -(float)Math.PI / 2f) * num25 * (float)(-direction) + (float)Math.PI;
				float num34 = (num32 * (float)Math.PI * 0.6f + (float)Math.PI * 2f / 5f) * (float)(-direction) + (float)Math.PI - (float)Math.PI / 4f + (float)Math.PI;
				if (direction == 1)
				{
					num34 += (float)Math.PI / 2f;
				}
				float rotation6 = num34 + num33;
				float rotation7 = num34 - num33;
				Vector2 vector8 = (num34 + (float)Math.PI / 2f).ToRotationVector2() * (-5f * (1f - num32));
				itemLocation = (MountedCenter + vector8).Floor();
				SetCompositeArmFront(enabled: true, stretch6, rotation6);
				SetCompositeArmBack(enabled: true, stretch7, rotation7);
			}
			FlipItemLocationAndRotationForGravity();
		}
		else if (sItem.useStyle == 12)
		{
			itemRotation = 0f;
			itemLocation.X = MountedCenter.X - (float)(8 * direction);
			itemLocation.Y = position.Y + 40f + mountOffset;
			Vector2 vector9 = Main.OffsetsPlayerHeadgear[bodyFrame.Y / 56];
			itemLocation += vector9;
			float num35 = itemAnimationMax;
			if (num35 == 0f)
			{
				num35 = sItem.useAnimation;
			}
			float num36 = 1f - (float)itemAnimation / num35;
			num36 *= 2f;
			float num37 = (float)Math.Cos(num36 * (float)Math.PI) * 0.2f;
			CompositeArmStretchAmount compositeArmStretchAmount3 = CompositeArmStretchAmount.Full;
			if (num36 > 0.25f && num36 <= 0.5f)
			{
				compositeArmStretchAmount3 = CompositeArmStretchAmount.ThreeQuarters;
			}
			if (num36 > 0.5f && num36 <= 0.75f)
			{
				compositeArmStretchAmount3 = CompositeArmStretchAmount.Quarter;
			}
			if (num36 > 0.75f && num36 <= 1.25f)
			{
				compositeArmStretchAmount3 = CompositeArmStretchAmount.None;
			}
			if (num36 > 1.25f && num36 <= 1.5f)
			{
				compositeArmStretchAmount3 = CompositeArmStretchAmount.Quarter;
			}
			if (num36 > 1.5f && num36 <= 1.75f)
			{
				compositeArmStretchAmount3 = CompositeArmStretchAmount.ThreeQuarters;
			}
			if (num36 > 1.75f && num36 <= 2f)
			{
				compositeArmStretchAmount3 = CompositeArmStretchAmount.Full;
			}
			SetCompositeArmFront(enabled: true, compositeArmStretchAmount3, (-(float)Math.PI / 4f + num37) * (float)direction);
			CompositeArmStretchAmount stretch8 = CompositeArmStretchAmount.Quarter;
			SetCompositeArmBack(enabled: true, stretch8, (-(float)Math.PI / 4f - num37 * 0.5f) * (float)direction);
			FlipItemLocationAndRotationForGravity();
			if (sItem.type != 4715 || compositeArmStretchAmount3 != CompositeArmStretchAmount.ThreeQuarters)
			{
				return;
			}
			Vector2 vector10 = itemLocation + new Vector2(heldItemFrame.Width, -heldItemFrame.Height) * new Vector2(direction, gravDir) * 0.3f;
			Dust dust2 = Dust.NewDustPerfect(vector10, 228, Main.rand.NextVector2CircularEdge(1f, 1f));
			dust2.noGravity = true;
			dust2.noLight = true;
			dust2.velocity *= 2f;
			float num38 = 0.5f;
			for (float num39 = 0f; num39 < 1f; num39 += 0.5f)
			{
				if (Main.rand.Next(3) == 0)
				{
					Dust dust3 = Dust.NewDustPerfect(vector10, 278, Vector2.UnitY.RotatedBy(num39 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * num38 - num38 * 0.5f + (float)Math.PI / 2f) * (2f + Main.rand.NextFloat() * 1f), 150, Color.Lerp(Color.White, Color.HotPink, Main.rand.NextFloat() * 0.5f + 0.5f), 0.45f);
					dust3.noGravity = true;
					dust3.velocity *= 0.5f;
					dust3.customData = this;
					dust3.position += dust3.velocity * 6f;
				}
			}
			for (float num40 = 0f; num40 < 1f; num40 += 0.5f)
			{
				if (Main.rand.Next(3) == 0)
				{
					Dust dust4 = Dust.NewDustPerfect(vector10, 278, Vector2.UnitY.RotatedBy(num40 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * num38 - num38 * 0.5f + (float)Math.PI / 2f) * (0.5f + Main.rand.NextFloat() * 1f), 150, Color.Lerp(Color.White, Color.Gold, Main.rand.NextFloat() * 0.5f + 0.5f), 0.45f);
					dust4.noGravity = true;
					dust4.velocity *= 0.5f;
					dust4.customData = this;
					dust4.position += dust4.velocity * 6f;
				}
			}
		}
		else if (sItem.useStyle == 14 && !Main.dedServ)
		{
			itemRotation = 0f;
			itemLocation.X = base.Center.X + (float)(6 * direction);
			itemLocation.Y = position.Y + 40f + mountOffset - 8f;
			Vector2 vector11 = Main.OffsetsPlayerHeadgear[bodyFrame.Y / 56];
			itemLocation += vector11;
			CompositeArmStretchAmount stretch9 = CompositeArmStretchAmount.Full;
			SetCompositeArmBack(enabled: true, stretch9, (float)Math.PI * -3f / 4f * (float)direction);
			FlipItemLocationAndRotationForGravity();
		}
	}

	public void FlipItemLocationAndRotationForGravity()
	{
		if (gravDir == -1f)
		{
			itemRotation = 0f - itemRotation;
			float num = position.Y - itemLocation.Y;
			itemLocation.Y = base.Bottom.Y + num;
		}
	}

	private void ItemCheck_StartActualUse(Item sItem)
	{
		bool flag = sItem.type == 4711;
		if (sItem.pick > 0 || sItem.axe > 0 || sItem.hammer > 0 || flag)
		{
			toolTime = 1;
		}
		if (grappling[0] > -1)
		{
			pulley = false;
			pulleyDir = 1;
			if (controlRight)
			{
				direction = 1;
			}
			else if (controlLeft)
			{
				direction = -1;
			}
		}
		StartChanneling(sItem);
		attackCD = 0;
		ResetMeleeHitCooldowns();
		ApplyItemAnimation(sItem);
		bool flag2 = ItemID.Sets.SkipsInitialUseSound[sItem.type];
		if (sItem.UseSound != null && !flag2)
		{
			SoundEngine.PlaySound(sItem.UseSound, base.Center);
		}
	}

	private void FreeUpPetsAndMinions(Item sItem)
	{
		if (ProjectileID.Sets.MinionSacrificable[sItem.shoot])
		{
			List<int> list = new List<int>();
			float num = 0f;
			for (int i = 0; i < 1000; i++)
			{
				if (!Main.projectile[i].active || Main.projectile[i].owner != whoAmI || !Main.projectile[i].minion)
				{
					continue;
				}
				int j;
				for (j = 0; j < list.Count; j++)
				{
					if (Main.projectile[list[j]].minionSlots > Main.projectile[i].minionSlots)
					{
						list.Insert(j, i);
						break;
					}
				}
				if (j == list.Count)
				{
					list.Add(i);
				}
				num += Main.projectile[i].minionSlots;
			}
			float num2 = ItemID.Sets.StaffMinionSlotsRequired[sItem.type];
			float num3 = 0f;
			int num4 = 388;
			int num5 = -1;
			for (int k = 0; k < list.Count; k++)
			{
				int type = Main.projectile[list[k]].type;
				if (type == 626)
				{
					list.RemoveAt(k);
					k--;
				}
				if (type == 627)
				{
					if (Main.projectile[(int)Main.projectile[list[k]].localAI[1]].type == 628)
					{
						num5 = list[k];
					}
					list.RemoveAt(k);
					k--;
				}
			}
			if (num5 != -1)
			{
				list.Add(num5);
				list.Add(Projectile.GetByUUID(Main.projectile[num5].owner, Main.projectile[num5].ai[0]));
			}
			for (int l = 0; l < list.Count; l++)
			{
				if (!(num - num3 > (float)maxMinions - num2))
				{
					break;
				}
				int type2 = Main.projectile[list[l]].type;
				if (type2 == num4 || type2 == 625 || type2 == 628 || type2 == 623)
				{
					continue;
				}
				if (type2 == 388 && num4 == 387)
				{
					num4 = 388;
				}
				if (type2 == 387 && num4 == 388)
				{
					num4 = 387;
				}
				num3 += Main.projectile[list[l]].minionSlots;
				if (type2 == 626 || type2 == 627)
				{
					Projectile projectile = Main.projectile[list[l]];
					int byUUID = Projectile.GetByUUID(projectile.owner, projectile.ai[0]);
					if (Main.projectile.IndexInRange(byUUID))
					{
						Projectile projectile2 = Main.projectile[byUUID];
						if (projectile2.type != 625)
						{
							projectile2.localAI[1] = projectile.localAI[1];
						}
						projectile2 = Main.projectile[(int)projectile.localAI[1]];
						projectile2.ai[0] = projectile.ai[0];
						projectile2.ai[1] = 1f;
						projectile2.netUpdate = true;
					}
				}
				Main.projectile[list[l]].Kill();
			}
			list.Clear();
			if (num + num2 >= 9f)
			{
				AchievementsHelper.HandleSpecialEvent(this, 6);
			}
			return;
		}
		for (int m = 0; m < 1000; m++)
		{
			Projectile projectile3 = Main.projectile[m];
			if (projectile3.active && projectile3.owner == whoAmI)
			{
				if (projectile3.type == sItem.shoot)
				{
					projectile3.Kill();
				}
				if (sItem.shoot == 72 && (projectile3.type == 86 || projectile3.type == 87))
				{
					projectile3.Kill();
				}
				if (sItem.type == 5131 && (projectile3.type == 881 || projectile3.type == 934))
				{
					projectile3.Kill();
				}
			}
		}
	}

	private void ApplyPotionDelay(Item sItem)
	{
		if (sItem.type == 3001)
		{
			int minValue = 2400;
			int num = 4200;
			potionDelay = Main.rand.Next(minValue, num + 1);
			if (pStone)
			{
				potionDelay = (int)((float)potionDelay * PhilosopherStoneDurationMultiplier);
			}
			AddBuff(21, potionDelay);
		}
		else if (sItem.type == 227)
		{
			potionDelay = restorationDelayTime;
			AddBuff(21, potionDelay);
		}
		else if (sItem.type == 5)
		{
			potionDelay = mushroomDelayTime;
			AddBuff(21, potionDelay);
			TryToResetHungerToNeutral();
		}
		else
		{
			potionDelay = potionDelayTime;
			AddBuff(21, potionDelay);
		}
	}

	private void ApplyLifeAndOrMana(Item item)
	{
		int num = item.healLife;
		int healMana = item.healMana;
		if (item.type == 3001)
		{
			int healLife = item.healLife;
			int num2 = 120;
			num = Main.rand.Next(healLife, num2 + 1);
			if (Main.myPlayer == whoAmI)
			{
				float num3 = Main.rand.NextFloat();
				int num4 = 0;
				if (num3 <= 0.1f)
				{
					num4 = 240;
				}
				else if (num3 <= 0.3f)
				{
					num4 = 120;
				}
				else if (num3 <= 0.6f)
				{
					num4 = 60;
				}
				if (num4 > 0)
				{
					SetImmuneTimeForAllTypes(num4);
				}
			}
		}
		statLife += num;
		statMana += healMana;
		if (statLife > statLifeMax2)
		{
			statLife = statLifeMax2;
		}
		if (statMana > statManaMax2)
		{
			statMana = statManaMax2;
		}
		if (num > 0 && Main.myPlayer == whoAmI)
		{
			HealEffect(num);
		}
		if (healMana > 0)
		{
			AddBuff(94, manaSickTime);
			if (Main.myPlayer == whoAmI)
			{
				ManaEffect(healMana);
			}
		}
	}

	private bool ItemCheck_CheckCanUse(Item sItem)
	{
		int num = whoAmI;
		bool flag = true;
		int num2 = (int)((float)Main.mouseX + Main.screenPosition.X) / 16;
		int num3 = (int)((float)Main.mouseY + Main.screenPosition.Y) / 16;
		if (gravDir == -1f)
		{
			num3 = (int)(Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY) / 16;
		}
		if (sItem.type == 3335 && (extraAccessory || !Main.expertMode))
		{
			flag = false;
		}
		if (pulley && sItem.fishingPole > 0)
		{
			flag = false;
		}
		if (pulley && ItemID.Sets.IsAKite[sItem.type])
		{
			flag = false;
		}
		if (sItem.type == 3611 && (WiresUI.Settings.ToolMode & (WiresUI.Settings.MultiToolMode.Red | WiresUI.Settings.MultiToolMode.Green | WiresUI.Settings.MultiToolMode.Blue | WiresUI.Settings.MultiToolMode.Yellow | WiresUI.Settings.MultiToolMode.Actuator)) == 0)
		{
			flag = false;
		}
		if (sItem.type == 5451 && ownedProjectileCounts[1020] > 0)
		{
			flag = false;
		}
		if ((sItem.type == 3611 || sItem.type == 3625) && wireOperationsCooldown > 0)
		{
			flag = false;
		}
		if (!CheckDD2CrystalPaymentLock(sItem))
		{
			flag = false;
		}
		if (sItem.shoot > -1 && ProjectileID.Sets.IsADD2Turret[sItem.shoot] && !downedDD2EventAnyDifficulty && !DD2Event.Ongoing)
		{
			flag = false;
		}
		if (sItem.shoot > -1 && ProjectileID.Sets.IsADD2Turret[sItem.shoot] && DD2Event.Ongoing && num == Main.myPlayer)
		{
			FindSentryRestingSpot(sItem.shoot, out var worldX, out var worldY, out var _);
			if (WouldSpotOverlapWithSentry(worldX, worldY, sItem.shoot == 688 || sItem.shoot == 689 || sItem.shoot == 690))
			{
				flag = false;
			}
		}
		if (sItem.shoot > -1 && ProjectileID.Sets.IsADD2Turret[sItem.shoot] && num == Main.myPlayer)
		{
			FindSentryRestingSpot(sItem.shoot, out var worldX2, out var worldY2, out var _);
			worldX2 /= 16;
			worldY2 /= 16;
			worldY2--;
			if (sItem.shoot == 688 || sItem.shoot == 689 || sItem.shoot == 690)
			{
				if (Collision.SolidTiles(worldX2, worldX2, worldY2 - 2, worldY2))
				{
					flag = false;
				}
			}
			else if (WorldGen.SolidTile(worldX2, worldY2))
			{
				flag = false;
			}
		}
		if (wet && (sItem.shoot == 85 || sItem.shoot == 15 || sItem.shoot == 34))
		{
			flag = false;
		}
		if (sItem.makeNPC > 0 && !NPC.CanReleaseNPCs(whoAmI))
		{
			flag = false;
		}
		if (whoAmI == Main.myPlayer && sItem.type == 603 && !Main.runningCollectorsEdition)
		{
			flag = false;
		}
		if (sItem.type == 1071 || sItem.type == 1072)
		{
			bool flag2 = false;
			for (int i = 0; i < 58; i++)
			{
				if (inventory[i].PaintOrCoating)
				{
					flag2 = true;
					break;
				}
			}
			if (!flag2)
			{
				flag = false;
			}
		}
		if (noItems)
		{
			flag = false;
		}
		if (sItem.tileWand > 0)
		{
			int tileWand = sItem.tileWand;
			flag = false;
			for (int j = 0; j < 58; j++)
			{
				if (tileWand == inventory[j].type && inventory[j].stack > 0)
				{
					flag = true;
					break;
				}
			}
		}
		if (sItem.shoot == 6 || sItem.shoot == 19 || sItem.shoot == 33 || sItem.shoot == 52 || sItem.shoot == 113 || sItem.shoot == 320 || sItem.shoot == 333 || sItem.shoot == 383 || sItem.shoot == 491 || sItem.shoot == 867 || sItem.shoot == 902 || sItem.shoot == 866)
		{
			for (int k = 0; k < 1000; k++)
			{
				if (Main.projectile[k].active && Main.projectile[k].owner == Main.myPlayer && Main.projectile[k].type == sItem.shoot)
				{
					flag = false;
				}
			}
		}
		if (sItem.shoot == 106)
		{
			int num4 = 0;
			for (int l = 0; l < 1000; l++)
			{
				if (Main.projectile[l].active && Main.projectile[l].owner == Main.myPlayer && Main.projectile[l].type == sItem.shoot)
				{
					num4++;
				}
			}
			if (num4 >= 6)
			{
				flag = false;
			}
		}
		if (sItem.shoot == 272)
		{
			int num5 = 0;
			for (int m = 0; m < 1000; m++)
			{
				if (Main.projectile[m].active && Main.projectile[m].owner == Main.myPlayer && Main.projectile[m].type == sItem.shoot)
				{
					num5++;
				}
			}
			if (num5 >= 10)
			{
				flag = false;
			}
		}
		if (sItem.shoot == 1000)
		{
			int num6 = 0;
			for (int n = 0; n < 1000; n++)
			{
				if (Main.projectile[n].active && Main.projectile[n].owner == Main.myPlayer && Main.projectile[n].type == sItem.shoot)
				{
					num6++;
				}
			}
			if (num6 >= 3)
			{
				flag = false;
			}
		}
		if (sItem.shoot == 13 || sItem.shoot == 32 || (sItem.shoot >= 230 && sItem.shoot <= 235) || sItem.shoot == 315 || sItem.shoot == 331 || sItem.shoot == 372)
		{
			for (int num7 = 0; num7 < 1000; num7++)
			{
				if (Main.projectile[num7].active && Main.projectile[num7].owner == Main.myPlayer && Main.projectile[num7].type == sItem.shoot && Main.projectile[num7].ai[0] != 2f)
				{
					flag = false;
				}
			}
		}
		if (sItem.shoot == 332)
		{
			int num8 = 0;
			for (int num9 = 0; num9 < 1000; num9++)
			{
				if (Main.projectile[num9].active && Main.projectile[num9].owner == Main.myPlayer && Main.projectile[num9].type == sItem.shoot && Main.projectile[num9].ai[0] != 2f)
				{
					num8++;
				}
			}
			if (num8 >= 3)
			{
				flag = false;
			}
		}
		if (sItem.potion && potionDelay > 0)
		{
			flag = false;
		}
		if (sItem.mana > 0 && silence)
		{
			flag = false;
		}
		if (sItem.mana > 0 && flag)
		{
			flag = ItemCheck_PayMana(sItem, flag);
		}
		if (sItem.type == 43 && Main.IsItDay())
		{
			flag = false;
		}
		if (sItem.type == 544 && Main.IsItDay())
		{
			flag = false;
		}
		if (sItem.type == 556 && Main.IsItDay())
		{
			flag = false;
		}
		if (sItem.type == 557 && Main.IsItDay())
		{
			flag = false;
		}
		if (sItem.type == 70 && !ZoneCorrupt)
		{
			flag = false;
		}
		if (sItem.type == 1133 && !ZoneJungle)
		{
			flag = false;
		}
		if (sItem.type == 5120 && !ZoneSnow)
		{
			flag = false;
		}
		if (sItem.type == 1844 && (Main.dayTime || Main.pumpkinMoon || Main.snowMoon || DD2Event.Ongoing))
		{
			flag = false;
		}
		if (sItem.type == 1958 && (Main.dayTime || Main.pumpkinMoon || Main.snowMoon || DD2Event.Ongoing))
		{
			flag = false;
		}
		if (sItem.type == 2767 && (!Main.dayTime || Main.eclipse || !Main.hardMode))
		{
			flag = false;
		}
		if (sItem.type == 4271 && (Main.dayTime || Main.bloodMoon))
		{
			flag = false;
		}
		if (sItem.type == 3601 && (!NPC.downedGolemBoss || !Main.hardMode || NPC.AnyDanger() || NPC.AnyoneNearCultists()))
		{
			flag = false;
		}
		if (!SummonItemCheck(sItem))
		{
			flag = false;
		}
		if (sItem.shoot == 17 && flag && num == Main.myPlayer && !ItemCheck_IsValidDirtRodTarget(Main.tile[num2, num3]))
		{
			flag = false;
		}
		if (sItem.chlorophyteExtractinatorConsumable && flag && num == Main.myPlayer)
		{
			Tile tile = Main.tile[num2, num3];
			if (!tile.active() || (tile.type != 642 && tile.type != 219))
			{
				flag = false;
			}
		}
		if (sItem.fishingPole > 0)
		{
			flag = ItemCheck_CheckFishingBobbers(flag);
		}
		if (ItemID.Sets.HasAProjectileThatHasAUsabilityCheck[sItem.type])
		{
			flag = ItemCheck_CheckUsabilityOfProjectiles(flag);
		}
		if (sItem.shoot == 17 && flag && num == Main.myPlayer)
		{
			if (ItemCheck_IsValidDirtRodTarget(Main.tile[num2, num3]))
			{
				WorldGen.KillTile(num2, num3, fail: false, effectOnly: false, noItem: true);
				if (!Main.tile[num2, num3].active())
				{
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 4, num2, num3);
					}
				}
				else
				{
					flag = false;
				}
			}
			else
			{
				flag = false;
			}
		}
		if (flag)
		{
			flag = HasAmmo(sItem, flag);
		}
		return flag;
	}

	private bool ItemCheck_CheckUsabilityOfProjectiles(bool canUse)
	{
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile = Main.projectile[i];
			if (projectile.active && projectile.owner == whoAmI)
			{
				projectile.CheckUsability(this, ref canUse);
			}
		}
		return canUse;
	}

	private bool ItemCheck_CheckFishingBobbers(bool canUse)
	{
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile = Main.projectile[i];
			if (!projectile.active || projectile.owner != whoAmI || !projectile.bobber)
			{
				continue;
			}
			canUse = false;
			if (whoAmI != Main.myPlayer || projectile.ai[0] != 0f)
			{
				continue;
			}
			projectile.ai[0] = 1f;
			float num = -10f;
			if (projectile.wet && projectile.velocity.Y > num)
			{
				projectile.velocity.Y = num;
			}
			projectile.netUpdate2 = true;
			if (projectile.ai[1] < 0f && projectile.localAI[1] != 0f)
			{
				ItemCheck_CheckFishingBobber_PickAndConsumeBait(projectile, out var pullTheBobber, out var baitTypeUsed);
				if (pullTheBobber)
				{
					ItemCheck_CheckFishingBobber_PullBobber(projectile, baitTypeUsed);
				}
			}
		}
		return canUse;
	}

	private void ItemCheck_CheckFishingBobber_PullBobber(Projectile bobber, int baitTypeUsed)
	{
		if (baitTypeUsed == 2673)
		{
			if (Main.netMode != 1)
			{
				NPC.SpawnOnPlayer(whoAmI, 370);
			}
			else
			{
				NetMessage.SendData(61, -1, -1, null, whoAmI, 370f);
			}
			bobber.ai[0] = 2f;
		}
		else if (bobber.localAI[1] < 0f)
		{
			Point point = new Point((int)bobber.position.X, (int)bobber.position.Y);
			int num = (int)(0f - bobber.localAI[1]);
			if (num == 618)
			{
				point.Y += 64;
			}
			if (Main.netMode == 1)
			{
				NetMessage.SendData(130, -1, -1, null, point.X / 16, point.Y / 16, num);
			}
			else
			{
				if (num == 682)
				{
					NPC.unlockedSlimeRedSpawn = true;
				}
				NPC.NewNPC(new EntitySource_FishedOut(this), point.X, point.Y, num);
				bobber.ai[0] = 2f;
				WorldGen.CheckAchievement_RealEstateAndTownSlimes();
			}
		}
		else if (Main.rand.Next(7) == 0 && !accFishingLine)
		{
			bobber.ai[0] = 2f;
		}
		else
		{
			bobber.ai[1] = bobber.localAI[1];
		}
		bobber.netUpdate = true;
	}

	private void ItemCheck_CheckFishingBobber_PickAndConsumeBait(Projectile bobber, out bool pullTheBobber, out int baitTypeUsed)
	{
		pullTheBobber = false;
		baitTypeUsed = 0;
		int num = -1;
		for (int i = 54; i < 58; i++)
		{
			if (inventory[i].stack > 0 && inventory[i].bait > 0)
			{
				num = i;
				break;
			}
		}
		if (num == -1)
		{
			for (int j = 0; j < 50; j++)
			{
				if (inventory[j].stack > 0 && inventory[j].bait > 0)
				{
					num = j;
					break;
				}
			}
		}
		if (num <= -1)
		{
			return;
		}
		Item item = inventory[num];
		bool flag = false;
		float num2 = 1f + (float)item.bait / 6f;
		if (num2 < 1f)
		{
			num2 = 1f;
		}
		if (accTackleBox)
		{
			num2 += 1f;
		}
		if (Main.rand.NextFloat() * num2 < 1f)
		{
			flag = true;
		}
		if (bobber.localAI[1] == -1f)
		{
			flag = true;
		}
		if (bobber.localAI[1] > 0f)
		{
			Item item2 = new Item();
			item2.SetDefaults((int)bobber.localAI[1]);
			if (item2.rare < 0)
			{
				flag = false;
			}
		}
		baitTypeUsed = item.type;
		if (baitTypeUsed == 2895)
		{
			flag = Main.rand.Next(20) == 0;
		}
		if (baitTypeUsed == 2673)
		{
			flag = true;
		}
		if (flag)
		{
			if (item.type == 4361 || item.type == 4362)
			{
				NPC.LadyBugKilled(base.Center, item.type == 4362);
			}
			item.stack--;
			if (item.stack <= 0)
			{
				item.SetDefaults();
			}
		}
		pullTheBobber = true;
	}

	private static bool ItemCheck_IsValidDirtRodTarget(Tile t)
	{
		if (t.active())
		{
			if (t.type != 0 && t.type != 2 && t.type != 23 && t.type != 109 && t.type != 199 && t.type != 477)
			{
				return t.type == 492;
			}
			return true;
		}
		return false;
	}

	private bool ItemCheck_PayMana(Item sItem, bool canUse)
	{
		bool flag = altFunctionUse == 2;
		bool flag2 = false;
		int num = (int)((float)sItem.mana * manaCost);
		if (sItem.type == 2795)
		{
			flag2 = true;
		}
		if (sItem.type == 3852 && flag)
		{
			num = (int)((float)(sItem.mana * 2) * manaCost);
		}
		if (sItem.shoot > 0 && ProjectileID.Sets.TurretFeature[sItem.shoot] && flag)
		{
			flag2 = true;
		}
		if (sItem.shoot > 0 && ProjectileID.Sets.MinionTargettingFeature[sItem.shoot] && flag)
		{
			flag2 = true;
		}
		if (sItem.type == 3006)
		{
			flag2 = true;
		}
		if (sItem.type != 3269 && (!spaceGun || (sItem.type != 127 && sItem.type != 4347 && sItem.type != 4348)))
		{
			if (statMana >= num)
			{
				if (!flag2)
				{
					statMana -= num;
				}
			}
			else if (manaFlower)
			{
				QuickMana();
				if (statMana >= num)
				{
					if (!flag2)
					{
						statMana -= num;
					}
				}
				else
				{
					canUse = false;
				}
			}
			else
			{
				canUse = false;
			}
		}
		return canUse;
	}

	private void ItemCheck_TryPlacingWearablesOnMannequins(Item sItem)
	{
		if (!controlUseItem || !releaseUseItem || (sItem.headSlot <= 0 && sItem.bodySlot <= 0 && sItem.legSlot <= 0))
		{
			return;
		}
		if (sItem.useStyle == 0)
		{
			releaseUseItem = false;
		}
		if (!(position.X / 16f - (float)tileRangeX - (float)sItem.tileBoost <= (float)tileTargetX) || !((position.X + (float)width) / 16f + (float)tileRangeX + (float)sItem.tileBoost - 1f >= (float)tileTargetX) || !(position.Y / 16f - (float)tileRangeY - (float)sItem.tileBoost <= (float)tileTargetY) || !((position.Y + (float)height) / 16f + (float)tileRangeY + (float)sItem.tileBoost - 2f >= (float)tileTargetY))
		{
			return;
		}
		int num = tileTargetX;
		int num2 = tileTargetY;
		if (!Main.tile[num, num2].active() || (Main.tile[num, num2].type != 128 && Main.tile[num, num2].type != 269))
		{
			return;
		}
		int frameY = Main.tile[num, num2].frameY;
		int num3 = 0;
		if (sItem.bodySlot >= 0)
		{
			num3 = 1;
		}
		if (sItem.legSlot >= 0)
		{
			num3 = 2;
		}
		frameY /= 18;
		while (num3 > frameY)
		{
			num2++;
			frameY = Main.tile[num, num2].frameY;
			frameY /= 18;
		}
		while (num3 < frameY)
		{
			num2--;
			frameY = Main.tile[num, num2].frameY;
			frameY /= 18;
		}
		int num4;
		for (num4 = Main.tile[num, num2].frameX; num4 >= 100; num4 -= 100)
		{
		}
		if (num4 >= 36)
		{
			num4 -= 36;
		}
		num -= num4 / 18;
		int num5 = Main.tile[num, num2].frameX;
		WorldGen.KillTile(num, num2, fail: true);
		if (Main.netMode == 1)
		{
			NetMessage.SendData(17, -1, -1, null, 0, num, num2, 1f);
		}
		while (num5 >= 100)
		{
			num5 -= 100;
		}
		if (frameY == 0 && sItem.headSlot >= 0)
		{
			Main.blockMouse = true;
			Main.tile[num, num2].frameX = (short)(num5 + sItem.headSlot * 100);
			if (Main.netMode == 1)
			{
				NetMessage.SendTileSquare(-1, num, num2);
			}
			sItem.stack--;
			if (sItem.stack <= 0)
			{
				sItem.SetDefaults();
				Main.mouseItem.SetDefaults();
			}
			if (selectedItem == 58)
			{
				Main.mouseItem = sItem.Clone();
			}
			releaseUseItem = false;
			mouseInterface = true;
		}
		else if (frameY == 1 && sItem.bodySlot >= 0)
		{
			Main.blockMouse = true;
			Main.tile[num, num2].frameX = (short)(num5 + sItem.bodySlot * 100);
			if (Main.netMode == 1)
			{
				NetMessage.SendTileSquare(-1, num, num2);
			}
			sItem.stack--;
			if (sItem.stack <= 0)
			{
				sItem.SetDefaults();
				Main.mouseItem.SetDefaults();
			}
			if (selectedItem == 58)
			{
				Main.mouseItem = sItem.Clone();
			}
			releaseUseItem = false;
			mouseInterface = true;
		}
		else if (frameY == 2 && sItem.legSlot >= 0 && !ArmorIDs.Legs.Sets.MannequinIncompatible.Contains(sItem.legSlot))
		{
			Main.blockMouse = true;
			Main.tile[num, num2].frameX = (short)(num5 + sItem.legSlot * 100);
			if (Main.netMode == 1)
			{
				NetMessage.SendTileSquare(-1, num, num2);
			}
			sItem.stack--;
			if (sItem.stack <= 0)
			{
				sItem.SetDefaults();
				Main.mouseItem.SetDefaults();
			}
			if (selectedItem == 58)
			{
				Main.mouseItem = sItem.Clone();
			}
			releaseUseItem = false;
			mouseInterface = true;
		}
	}

	private void ApplyReuseDelay()
	{
		itemAnimation = reuseDelay;
		itemTime = reuseDelay;
		reuseDelay = 0;
	}

	private void ItemCheck_HackHoldStyles(Item sItem)
	{
		if (sItem.fishingPole > 0)
		{
			sItem.holdStyle = 0;
			if (ItemTimeIsZero && itemAnimation == 0)
			{
				for (int i = 0; i < 1000; i++)
				{
					if (Main.projectile[i].active && Main.projectile[i].owner == whoAmI && Main.projectile[i].bobber)
					{
						sItem.holdStyle = 1;
					}
				}
			}
		}
		if (!ItemID.Sets.IsAKite[sItem.type])
		{
			return;
		}
		sItem.holdStyle = 0;
		if (!ItemTimeIsZero || itemAnimation != 0)
		{
			return;
		}
		for (int j = 0; j < 1000; j++)
		{
			if (Main.projectile[j].active && Main.projectile[j].owner == whoAmI && Main.projectile[j].type == sItem.shoot)
			{
				sItem.holdStyle = 1;
				ChangeDir((!(Main.projectile[j].Center.X - base.Center.X < 0f)) ? 1 : (-1));
			}
		}
	}

	private void ItemCheck_HandleMPItemAnimation(Item sItem)
	{
		if (sItem.autoReuse && !noItems)
		{
			releaseUseItem = true;
			if (itemAnimation == 1 && sItem.stack > 0)
			{
				if (sItem.shoot > 0 && whoAmI != Main.myPlayer && controlUseItem && sItem.useStyle == 5 && sItem.reuseDelay == 0)
				{
					ApplyItemAnimation(sItem);
				}
				else
				{
					itemAnimation = 0;
				}
			}
		}
		TryAllowingItemReuse(sItem);
	}

	private void TryAllowingItemReuse(Item sItem)
	{
		bool flag = false;
		if (autoReuseGlove)
		{
			flag |= sItem.melee && sItem.type != 3030;
			flag |= sItem.summon && ItemID.Sets.SummonerWeaponThatScalesWithAttackSpeed[sItem.type];
		}
		if (autoReuseAllWeapons && sItem.damage > 0 && (!sItem.channel || !channel))
		{
			flag = true;
		}
		if (flag)
		{
			releaseUseItem = true;
		}
	}

	private void ItemCheck_HandleMount()
	{
		if (!mount.Active)
		{
			return;
		}
		if (whoAmI == Main.myPlayer && gravDir == -1f)
		{
			mount.Dismount(this);
		}
		else
		{
			if (mount.Type != 8)
			{
				return;
			}
			noItems = true;
			if (controlUseItem || controlUseTile)
			{
				StartChanneling();
				if (releaseUseItem && releaseUseTile)
				{
					mount.UseAbility(this, Vector2.Zero, toggleOn: true);
				}
				releaseUseItem = false;
				releaseUseTile = false;
			}
		}
	}

	public void StartChanneling()
	{
		channel = true;
		_channelShotCache = default(ChannelCancelKey);
	}

	public void StartChanneling(Item item)
	{
		if (item.channel)
		{
			channel = true;
			_channelShotCache = new ChannelCancelKey
			{
				ProjectileTypeExpected = item.shoot
			};
		}
	}

	public void TryUpdateChannel(Projectile projectile)
	{
		_channelShotCache.TryTracking(projectile);
	}

	public void TryCancelChannel(Projectile projectile)
	{
		if (_channelShotCache.Matches(projectile))
		{
			channel = false;
		}
	}

	public static bool WouldSpotOverlapWithSentry(int worldX, int worldY, bool lightningAura)
	{
		Point value = new Point(worldX, worldY - 8);
		Point value2 = new Point(worldX + 16, worldY - 8);
		Point value3 = new Point(worldX - 16, worldY - 8);
		bool result = false;
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile = Main.projectile[i];
			if (projectile.active && projectile.sentry)
			{
				Rectangle hitbox = projectile.Hitbox;
				if (!lightningAura && hitbox.X > 30)
				{
					hitbox.X += hitbox.Width / 2;
					hitbox.Width = 30;
					hitbox.X -= hitbox.Width / 2;
				}
				if (hitbox.Contains(value) || hitbox.Contains(value2) || hitbox.Contains(value3))
				{
					result = true;
					break;
				}
			}
		}
		return result;
	}

	public void FindSentryRestingSpot(int checkProj, out int worldX, out int worldY, out int pushYUp)
	{
		bool flag = false;
		Vector2 pointPoisition = Main.MouseWorld;
		LimitPointToPlayerReachableArea(ref pointPoisition);
		int num = (int)pointPoisition.X / 16;
		int i = (int)pointPoisition.Y / 16;
		worldX = num * 16 + 8;
		pushYUp = 41;
		switch (checkProj)
		{
		case 663:
			worldX += direction;
			break;
		case 665:
			pushYUp += 2;
			break;
		case 667:
			pushYUp += 3;
			break;
		case 677:
			worldX += direction;
			break;
		case 678:
			worldX += direction;
			break;
		case 691:
		case 692:
		case 693:
			pushYUp = 20;
			worldX += direction;
			pushYUp += 2;
			break;
		}
		if (!flag)
		{
			for (; i < Main.maxTilesY - 10 && Main.tile[num, i] != null && !WorldGen.SolidTile2(num, i) && Main.tile[num - 1, i] != null && !WorldGen.SolidTile2(num - 1, i) && Main.tile[num + 1, i] != null && !WorldGen.SolidTile2(num + 1, i); i++)
			{
			}
			i++;
		}
		i--;
		pushYUp -= 14;
		worldY = i * 16;
	}

	public void UpdateMaxTurrets()
	{
		if (Main.myPlayer != whoAmI)
		{
			return;
		}
		List<Projectile> list = new List<Projectile>();
		for (int i = 0; i < 1000; i++)
		{
			if (Main.projectile[i].WipableTurret)
			{
				list.Add(Main.projectile[i]);
			}
		}
		int num = 0;
		while (list.Count > maxTurrets && ++num < 1000)
		{
			Projectile projectile = list[0];
			for (int j = 1; j < list.Count; j++)
			{
				if (list[j].timeLeft < projectile.timeLeft)
				{
					projectile = list[j];
				}
			}
			projectile.Kill();
			list.Remove(projectile);
		}
	}

	private void ItemCheck_ApplyPetBuffs(Item sItem)
	{
		if (whoAmI == Main.myPlayer && sItem.type == 603 && Main.runningCollectorsEdition)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 669)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 115)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 3060)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 3628)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 3062)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 3577)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 425)
		{
			int num = Main.rand.Next(3);
			if (num == 0)
			{
				num = 27;
			}
			if (num == 1)
			{
				num = 101;
			}
			if (num == 2)
			{
				num = 102;
			}
			for (int i = 0; i < maxBuffs; i++)
			{
				if (buffType[i] == 27 || buffType[i] == 101 || buffType[i] == 102)
				{
					DelBuff(i);
					i--;
				}
			}
			AddBuff(num, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 753)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 994)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1169)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1170)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1171)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1172)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1180)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1181)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1182)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1183)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1242)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1157)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1309)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1311)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1837)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1312)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1798)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1799)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1802)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1810)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1927)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 1959)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 2364)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 2365)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 3043)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer && sItem.type == 2420)
		{
			AddBuff(sItem.buffType, 3600);
		}
		if (whoAmI == Main.myPlayer)
		{
			switch (sItem.type)
			{
			case 2535:
			case 2551:
			case 2584:
			case 2587:
			case 2621:
			case 2749:
			case 3249:
			case 3474:
			case 3531:
			case 4269:
			case 4273:
			case 4281:
			case 4607:
			case 4758:
			case 5005:
			case 5069:
			case 5114:
				AddBuff(sItem.buffType, 3600);
				break;
			}
		}
		if (whoAmI == Main.myPlayer)
		{
			switch (sItem.type)
			{
			case 3855:
			case 3856:
			case 3857:
			case 4365:
			case 4366:
			case 4425:
			case 4550:
			case 4551:
			case 4603:
			case 4604:
			case 4605:
			case 4701:
			case 4735:
			case 4736:
			case 4737:
			case 4777:
			case 4797:
			case 4798:
			case 4799:
			case 4800:
			case 4801:
			case 4802:
			case 4803:
			case 4804:
			case 4805:
			case 4806:
			case 4807:
			case 4808:
			case 4809:
			case 4810:
			case 4811:
			case 4812:
			case 4813:
			case 4814:
			case 4815:
			case 4816:
			case 4817:
			case 4960:
			case 5088:
			case 5089:
			case 5090:
			case 5091:
			case 5098:
			case 5131:
			case 5276:
			case 5297:
			case 5332:
			case 5333:
			case 5400:
				AddBuff(sItem.buffType, 3600);
				break;
			}
		}
	}

	public float GetWeaponKnockback(Item sItem, float KnockBack)
	{
		if (sItem.summon)
		{
			KnockBack += minionKB;
		}
		if (sItem.melee && kbGlove)
		{
			KnockBack *= 2f;
		}
		if (kbBuff)
		{
			KnockBack *= 1.5f;
		}
		if (sItem.ranged && shroomiteStealth)
		{
			KnockBack *= 1f + (1f - stealth) * 0.5f;
		}
		if (sItem.ranged && setVortex)
		{
			KnockBack *= 1f + (1f - stealth) * 0.5f;
		}
		return KnockBack;
	}

	public int GetWeaponCrit(Item sItem)
	{
		if (sItem.melee)
		{
			return meleeCrit;
		}
		if (sItem.ranged)
		{
			return rangedCrit;
		}
		if (sItem.magic)
		{
			return magicCrit;
		}
		return 0;
	}

	public int GetWeaponDamage(Item sItem)
	{
		int num = sItem.damage;
		if (num > 0)
		{
			if (sItem.melee)
			{
				num = (int)((float)num * meleeDamage + 5E-06f);
			}
			else if (sItem.ranged)
			{
				float num2 = rangedDamage;
				if (sItem.useAmmo == AmmoID.Arrow || sItem.useAmmo == AmmoID.Stake)
				{
					num2 = bowEffectiveDamage;
				}
				if (sItem.useAmmo == AmmoID.Bullet || sItem.useAmmo == AmmoID.CandyCorn)
				{
					num2 = gunEffectiveDamage;
				}
				if (sItem.useAmmo == AmmoID.Rocket || sItem.useAmmo == AmmoID.StyngerBolt || sItem.useAmmo == AmmoID.JackOLantern || sItem.useAmmo == AmmoID.NailFriendly || sItem.useAmmo == AmmoID.Coin || sItem.useAmmo == AmmoID.Flare || sItem.useAmmo == AmmoID.Dart || sItem.useAmmo == AmmoID.Snowball || sItem.useAmmo == AmmoID.Sand || sItem.useAmmo == AmmoID.FallenStar || sItem.useAmmo == AmmoID.Gel)
				{
					num2 = specialistEffectiveDamage;
				}
				if (sItem.type == 1156 || sItem.type == 3350 || sItem.type == 3210 || sItem.type == 160 || sItem.type == 3821)
				{
					num2 = specialistEffectiveDamage;
				}
				num = (int)((float)num * num2 + 5E-06f);
			}
			else if (sItem.magic)
			{
				num = (int)((float)num * magicDamage + 5E-06f);
			}
			else if (sItem.summon)
			{
				num = (int)((float)num * minionDamage + 5E-06f);
			}
		}
		return num;
	}

	public bool HasAmmo(Item sItem, bool canUse)
	{
		if (sItem.useAmmo > 0)
		{
			canUse = false;
			for (int i = 0; i < 58; i++)
			{
				if (inventory[i].ammo == sItem.useAmmo && inventory[i].stack > 0)
				{
					canUse = true;
					break;
				}
			}
		}
		return canUse;
	}

	private bool PickAmmo_TryFindingSpecificMatches(int launcher, int ammo, out int pickedProjectileId)
	{
		pickedProjectileId = 0;
		if (AmmoID.Sets.SpecificLauncherAmmoProjectileMatches.TryGetValue(launcher, out var value) && value.TryGetValue(ammo, out pickedProjectileId))
		{
			return true;
		}
		return false;
	}

	public void PickAmmo(Item sItem, ref int projToShoot, ref float speed, ref bool canShoot, ref int Damage, ref float KnockBack, out int usedAmmoItemId, bool dontConsume = false)
	{
		Item item = new Item();
		bool flag = false;
		usedAmmoItemId = 0;
		if (sItem.useAmmo == AmmoID.Coin)
		{
			for (int i = 0; i < 4; i++)
			{
				int num = 50 + i;
				if (inventory[num].ammo == sItem.useAmmo && inventory[num].stack > 0)
				{
					item = inventory[num];
					canShoot = true;
					flag = true;
					break;
				}
			}
		}
		for (int j = 54; j < 58; j++)
		{
			if (inventory[j].ammo == sItem.useAmmo && inventory[j].stack > 0)
			{
				item = inventory[j];
				canShoot = true;
				flag = true;
				break;
			}
		}
		if (!flag)
		{
			for (int k = 0; k < 54; k++)
			{
				if (inventory[k].ammo == sItem.useAmmo && inventory[k].stack > 0)
				{
					item = inventory[k];
					canShoot = true;
					break;
				}
			}
		}
		if (!canShoot)
		{
			return;
		}
		usedAmmoItemId = item.type;
		int pickedProjectileId = -1;
		if (PickAmmo_TryFindingSpecificMatches(sItem.type, item.type, out pickedProjectileId))
		{
			projToShoot = pickedProjectileId;
		}
		else if (sItem.type == 1946)
		{
			projToShoot = 338 + item.type - 771;
		}
		else if (sItem.type == 3930)
		{
			projToShoot = 715 + item.type - AmmoID.Rocket;
		}
		else if (sItem.useAmmo == AmmoID.Rocket)
		{
			projToShoot += item.shoot;
		}
		else if (sItem.useAmmo == AmmoID.Solution)
		{
			projToShoot += item.shoot;
		}
		else if (item.shoot > 0)
		{
			projToShoot = item.shoot;
		}
		if (sItem.type == 3019 && projToShoot == 1)
		{
			projToShoot = 485;
		}
		if (sItem.type == 3052)
		{
			projToShoot = 495;
		}
		if (sItem.type == 4953 && projToShoot == 1)
		{
			projToShoot = 932;
		}
		if (sItem.type == 4381)
		{
			projToShoot = 819;
		}
		if (sItem.type == 4058 && projToShoot == 474)
		{
			projToShoot = 117;
		}
		if (projToShoot == 42)
		{
			if (item.type == 370)
			{
				projToShoot = 65;
				Damage += 5;
			}
			else if (item.type == 408)
			{
				projToShoot = 68;
				Damage += 5;
			}
			else if (item.type == 1246)
			{
				projToShoot = 354;
				Damage += 5;
			}
		}
		if (inventory[selectedItem].type == 2888 && projToShoot == 1)
		{
			projToShoot = 469;
		}
		if (hasMoltenQuiver && projToShoot == 1)
		{
			projToShoot = 2;
			Damage += 2;
		}
		speed += item.shootSpeed;
		if (magicQuiver && (sItem.useAmmo == AmmoID.Arrow || sItem.useAmmo == AmmoID.Stake))
		{
			KnockBack *= 1.1f;
			speed *= 1.1f;
		}
		if (item.ranged)
		{
			if (item.damage > 0)
			{
				Damage += (int)((float)item.damage * rangedDamage);
			}
		}
		else
		{
			Damage += item.damage;
		}
		if ((sItem.useAmmo == AmmoID.Arrow || sItem.useAmmo == AmmoID.Stake) && archery)
		{
			if (speed < 20f)
			{
				speed *= 1.2f;
				if (speed > 20f)
				{
					speed = 20f;
				}
			}
			Damage = (int)((double)Damage * 1.1);
		}
		KnockBack += item.knockBack;
		bool flag2 = dontConsume;
		if (sItem.type == 3475 && Main.rand.Next(3) != 0)
		{
			flag2 = true;
		}
		if (sItem.type == 3930 && Main.rand.Next(2) == 0)
		{
			flag2 = true;
		}
		if (sItem.type == 3540 && Main.rand.Next(3) != 0)
		{
			flag2 = true;
		}
		if (sItem.type == 5134 && Main.rand.Next(3) == 0)
		{
			flag2 = true;
		}
		if (magicQuiver && (sItem.useAmmo == AmmoID.Arrow || sItem.useAmmo == AmmoID.Stake) && Main.rand.Next(5) == 0)
		{
			flag2 = true;
		}
		if (ammoBox && Main.rand.Next(5) == 0)
		{
			flag2 = true;
		}
		if (ammoPotion && Main.rand.Next(5) == 0)
		{
			flag2 = true;
		}
		if (sItem.type == 1782 && Main.rand.Next(3) == 0)
		{
			flag2 = true;
		}
		if (sItem.type == 98 && Main.rand.Next(3) == 0)
		{
			flag2 = true;
		}
		if (sItem.type == 2270 && Main.rand.Next(2) == 0)
		{
			flag2 = true;
		}
		if (sItem.type == 533 && Main.rand.Next(2) == 0)
		{
			flag2 = true;
		}
		if (sItem.type == 1929 && Main.rand.Next(2) == 0)
		{
			flag2 = true;
		}
		if (sItem.type == 1553 && Main.rand.Next(3) != 0)
		{
			flag2 = true;
		}
		if (sItem.type == 434 && !ItemAnimationJustStarted)
		{
			flag2 = true;
		}
		if (sItem.type == 4953 && itemAnimation > sItem.useAnimation - 8)
		{
			flag2 = true;
		}
		if (huntressAmmoCost90 && Main.rand.Next(10) == 0)
		{
			flag2 = true;
		}
		if (chloroAmmoCost80 && Main.rand.Next(5) == 0)
		{
			flag2 = true;
		}
		if (ammoCost80 && Main.rand.Next(5) == 0)
		{
			flag2 = true;
		}
		if (ammoCost75 && Main.rand.Next(4) == 0)
		{
			flag2 = true;
		}
		if (Main.remixWorld && sItem.type == 1319 && Main.rand.Next(2) == 0)
		{
			flag2 = true;
		}
		if (projToShoot == 85 && itemAnimation < itemAnimationMax - sItem.useTime)
		{
			flag2 = true;
		}
		if ((sItem.type == 779 || sItem.type == 5134) && itemAnimation < itemAnimationMax - sItem.useTime)
		{
			flag2 = true;
		}
		if (!flag2 && item.consumable)
		{
			item.stack--;
			if (item.stack <= 0)
			{
				item.active = false;
				item.TurnToAir();
			}
		}
	}

	public void GetOtherPlayersPickTile(int x, int y, int pickDamage)
	{
		int tileId = hitTile.HitObject(x, y, 1);
		hitTile.AddDamage(tileId, pickDamage);
	}

	public void PickTile(int x, int y, int pickPower)
	{
		int num = hitTile.HitObject(x, y, 1);
		Tile tile = Main.tile[x, y];
		if (tile.type == 504)
		{
			return;
		}
		int num2 = GetPickaxeDamage(x, y, pickPower, num, tile);
		if (!WorldGen.CanKillTile(x, y))
		{
			num2 = 0;
		}
		if (Main.getGoodWorld)
		{
			num2 *= 2;
		}
		if (DoesPickTargetTransformOnKill(hitTile, num2, x, y, pickPower, num, tile))
		{
			num2 = 0;
		}
		if (hitTile.AddDamage(num, num2) >= 100)
		{
			AchievementsHelper.CurrentlyMining = true;
			ClearMiningCacheAt(x, y, 1);
			if (Main.netMode == 1 && Main.tileContainer[Main.tile[x, y].type])
			{
				if (Main.tile[x, y].type == 470 || Main.tile[x, y].type == 475)
				{
					NetMessage.SendData(17, -1, -1, null, 20, x, y);
				}
				else
				{
					WorldGen.KillTile(x, y, fail: true);
					NetMessage.SendData(17, -1, -1, null, 0, x, y, 1f);
				}
				if (Main.tile[x, y].type == 21)
				{
					NetMessage.SendData(34, -1, -1, null, 1, x, y);
				}
				if (Main.tile[x, y].type == 467)
				{
					NetMessage.SendData(34, -1, -1, null, 5, x, y);
				}
				if (Main.tile[x, y].type == 88)
				{
					NetMessage.SendData(34, -1, -1, null, 3, x, y);
				}
			}
			else
			{
				bool flag = Main.tile[x, y].active();
				WorldGen.KillTile(x, y);
				if (!Main.dedServ && flag && !Main.tile[x, y].active())
				{
					AchievementsHelper.HandleMining();
				}
				if (Main.netMode == 1)
				{
					NetMessage.SendData(17, -1, -1, null, 0, x, y);
				}
			}
			AchievementsHelper.CurrentlyMining = false;
		}
		else
		{
			WorldGen.KillTile(x, y, fail: true);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(17, -1, -1, null, 0, x, y, 1f);
				NetMessage.SendData(125, -1, -1, null, Main.myPlayer, x, y, num2);
			}
		}
		if (num2 != 0)
		{
			hitTile.Prune();
		}
	}

	private void ClearMiningCacheAt(int x, int y, int hitTileCacheType)
	{
		hitReplace.TryClearingAndPruning(x, y, 1);
		hitTile.TryClearingAndPruning(x, y, 1);
	}

	public bool isNearFairy()
	{
		if (NPC.npcsFoundForCheckActive[583] || NPC.npcsFoundForCheckActive[584] || NPC.npcsFoundForCheckActive[585])
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && (Main.npc[i].type == 583 || Main.npc[i].type == 584 || Main.npc[i].type == 585) && Vector2.Distance(Main.npc[i].Center, base.Center) < (float)NPC.sWidth)
				{
					return true;
				}
			}
		}
		return false;
	}

	public bool isNearNPC(int type, float range = -1f)
	{
		if (range == -1f)
		{
			range = NPC.sWidth;
		}
		if (NPC.npcsFoundForCheckActive[type])
		{
			for (int i = 0; i < 200; i++)
			{
				if (Main.npc[i].active && Main.npc[i].type == type && Vector2.Distance(Main.npc[i].Center, base.Center) < range)
				{
					return true;
				}
			}
		}
		return false;
	}

	public bool HasEnoughPickPowerToHurtTile(int x, int y)
	{
		Item bestPickaxe = GetBestPickaxe();
		if (bestPickaxe == null)
		{
			return false;
		}
		Tile tile = Main.tile[x, y];
		_ = tile.type;
		int hitBufferIndex = hitTile.HitObject(x, y, 1);
		if (GetPickaxeDamage(x, y, bestPickaxe.pick, hitBufferIndex, tile) == 0)
		{
			return false;
		}
		return true;
	}

	private int GetPickaxeDamage(int x, int y, int pickPower, int hitBufferIndex, Tile tileTarget)
	{
		int num = 0;
		if (Main.tileNoFail[tileTarget.type])
		{
			num = 100;
		}
		num = ((!Main.tileDungeon[tileTarget.type] && tileTarget.type != 25 && tileTarget.type != 58 && tileTarget.type != 117 && tileTarget.type != 203) ? ((tileTarget.type == 85) ? ((!Main.getGoodWorld) ? (num + pickPower / 3) : (num + pickPower / 4)) : ((tileTarget.type != 48 && tileTarget.type != 232) ? ((tileTarget.type == 226) ? (num + pickPower / 4) : ((tileTarget.type != 107 && tileTarget.type != 221) ? ((tileTarget.type != 108 && tileTarget.type != 222) ? ((tileTarget.type == 111 || tileTarget.type == 223) ? (num + pickPower / 4) : ((tileTarget.type != 211) ? (num + pickPower) : (num + pickPower / 5))) : (num + pickPower / 3)) : (num + pickPower / 2))) : (num + pickPower * 2))) : (num + pickPower / 2));
		if (tileTarget.type == 211 && pickPower < 200)
		{
			num = 0;
		}
		if ((tileTarget.type == 25 || tileTarget.type == 203) && pickPower < 65)
		{
			num = 0;
		}
		else if (tileTarget.type == 117 && pickPower < 65)
		{
			num = 0;
		}
		else if (tileTarget.type == 37 && pickPower < 50)
		{
			num = 0;
		}
		else if ((tileTarget.type == 22 || tileTarget.type == 204) && (double)y > Main.worldSurface && pickPower < 55)
		{
			num = 0;
		}
		else if (tileTarget.type == 56 && pickPower < 55)
		{
			num = 0;
		}
		else if (tileTarget.type == 77 && pickPower < 65 && y >= Main.UnderworldLayer)
		{
			num = 0;
		}
		else if (tileTarget.type == 58 && pickPower < 65)
		{
			num = 0;
		}
		else if ((tileTarget.type == 226 || tileTarget.type == 237) && pickPower < 210)
		{
			num = 0;
		}
		else if (tileTarget.type == 137 && pickPower < 210)
		{
			int num2 = tileTarget.frameY / 18;
			if ((uint)(num2 - 1) <= 3u)
			{
				num = 0;
			}
		}
		else if (Main.tileDungeon[tileTarget.type] && pickPower < 100 && (double)y > Main.worldSurface)
		{
			if ((double)x < (double)Main.maxTilesX * 0.35 || (double)x > (double)Main.maxTilesX * 0.65)
			{
				num = 0;
			}
		}
		else if (tileTarget.type == 107 && pickPower < 100)
		{
			num = 0;
		}
		else if (tileTarget.type == 108 && pickPower < 110)
		{
			num = 0;
		}
		else if (tileTarget.type == 111 && pickPower < 150)
		{
			num = 0;
		}
		else if (tileTarget.type == 221 && pickPower < 100)
		{
			num = 0;
		}
		else if (tileTarget.type == 222 && pickPower < 110)
		{
			num = 0;
		}
		else if (tileTarget.type == 223 && pickPower < 150)
		{
			num = 0;
		}
		if (tileTarget.type == 147 || tileTarget.type == 0 || tileTarget.type == 40 || tileTarget.type == 53 || tileTarget.type == 57 || tileTarget.type == 59 || tileTarget.type == 123 || tileTarget.type == 224 || tileTarget.type == 397)
		{
			num += pickPower;
		}
		if (tileTarget.type == 404)
		{
			num += 5;
		}
		if (tileTarget.type == 165 || Main.tileRope[tileTarget.type] || tileTarget.type == 199)
		{
			num = 100;
		}
		if (tileTarget.type == 128 || tileTarget.type == 269)
		{
			if (tileTarget.frameX == 18 || tileTarget.frameX == 54)
			{
				x--;
				tileTarget = Main.tile[x, y];
				hitTile.UpdatePosition(hitBufferIndex, x, y);
			}
			if (tileTarget.frameX >= 100)
			{
				num = 0;
				Main.blockMouse = true;
			}
		}
		if (tileTarget.type == 334)
		{
			if (tileTarget.frameY == 0)
			{
				y++;
				tileTarget = Main.tile[x, y];
				hitTile.UpdatePosition(hitBufferIndex, x, y);
			}
			if (tileTarget.frameY == 36)
			{
				y--;
				tileTarget = Main.tile[x, y];
				hitTile.UpdatePosition(hitBufferIndex, x, y);
			}
			int frameX = tileTarget.frameX;
			bool flag = frameX >= 5000;
			bool flag2 = false;
			if (!flag)
			{
				int num3 = frameX / 18;
				num3 %= 3;
				x -= num3;
				tileTarget = Main.tile[x, y];
				if (tileTarget.frameX >= 5000)
				{
					flag = true;
				}
			}
			if (flag)
			{
				frameX = tileTarget.frameX;
				int num4 = 0;
				while (frameX >= 5000)
				{
					frameX -= 5000;
					num4++;
				}
				if (num4 != 0)
				{
					flag2 = true;
				}
			}
			if (flag2)
			{
				num = 0;
				Main.blockMouse = true;
			}
		}
		return num;
	}

	private bool DoesPickTargetTransformOnKill(HitTile hitCounter, int damage, int x, int y, int pickPower, int bufferIndex, Tile tileTarget)
	{
		if (hitCounter.AddDamage(bufferIndex, damage, updateAmount: false) >= 100 && (tileTarget.type == 2 || tileTarget.type == 477 || tileTarget.type == 492 || tileTarget.type == 23 || tileTarget.type == 60 || tileTarget.type == 70 || tileTarget.type == 109 || tileTarget.type == 199 || Main.tileMoss[tileTarget.type] || tileTarget.type == 662 || tileTarget.type == 661 || TileID.Sets.tileMossBrick[tileTarget.type] || tileTarget.type == 633))
		{
			return true;
		}
		return false;
	}

	public bool ItemFitsWeaponRack(Item i)
	{
		bool flag = false;
		if (i.fishingPole > 0)
		{
			flag = true;
		}
		int netID = i.netID;
		if (netID == 905 || netID == 1326 || netID == 5335)
		{
			flag = true;
		}
		if ((i.damage > 0 || flag) && i.useStyle != 0)
		{
			return i.stack > 0;
		}
		return false;
	}

	public void PlaceWeapon(int x, int y)
	{
		if (Main.tile[x, y].active() && Main.tile[x, y].type == 334)
		{
			int frameY = Main.tile[x, y].frameY;
			int num = 1;
			frameY /= 18;
			while (num > frameY)
			{
				y++;
				frameY = Main.tile[x, y].frameY;
				frameY /= 18;
			}
			while (num < frameY)
			{
				y--;
				frameY = Main.tile[x, y].frameY;
				frameY /= 18;
			}
			int num2 = Main.tile[x, y].frameX;
			int num3 = 0;
			while (num2 >= 5000)
			{
				num2 -= 5000;
				num3++;
			}
			if (num3 != 0)
			{
				num2 = (num3 - 1) * 18;
			}
			bool flag = false;
			if (num2 >= 54)
			{
				num2 -= 54;
				flag = true;
			}
			x -= num2 / 18;
			int num4 = Main.tile[x, y].frameX;
			WorldGen.KillTile(x, y, fail: true);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(17, -1, -1, null, 0, x, y, 1f);
			}
			if (Main.netMode == 1)
			{
				NetMessage.SendData(17, -1, -1, null, 0, x + 1, y, 1f);
			}
			while (num4 >= 5000)
			{
				num4 -= 5000;
			}
			Main.blockMouse = true;
			int num5 = 5000;
			int num6 = 10000;
			if (flag)
			{
				num5 = 20000;
				num6 = 25000;
			}
			Main.tile[x, y].frameX = (short)(inventory[selectedItem].netID + num5 + 100);
			Main.tile[x + 1, y].frameX = (short)(inventory[selectedItem].prefix + num6);
			if (Main.netMode == 1)
			{
				NetMessage.SendTileSquare(-1, x, y);
			}
			if (Main.netMode == 1)
			{
				NetMessage.SendTileSquare(-1, x + 1, y);
			}
			inventory[selectedItem].stack--;
			if (inventory[selectedItem].stack <= 0)
			{
				inventory[selectedItem].SetDefaults();
				Main.mouseItem.SetDefaults();
			}
			if (selectedItem == 58)
			{
				Main.mouseItem = inventory[selectedItem].Clone();
			}
			releaseUseItem = false;
			mouseInterface = true;
		}
	}

	public bool ItemFitsItemFrame(Item i)
	{
		return i.stack > 0;
	}

	public Color GetImmuneAlpha(Color newColor, float alphaReduction)
	{
		float num = (float)(255 - immuneAlpha) / 255f;
		if (alphaReduction > 0f)
		{
			num *= 1f - alphaReduction;
		}
		if (shimmerTransparency > 0f)
		{
			if ((double)shimmerTransparency >= 0.8)
			{
				return Color.Transparent;
			}
			num *= 1f - shimmerTransparency;
			num *= 1f - shimmerTransparency;
			num *= 1f - shimmerTransparency;
		}
		if (immuneAlpha > 125)
		{
			return Color.Transparent;
		}
		return Color.Multiply(newColor, num);
	}

	public Color GetImmuneAlphaPure(Color newColor, float alphaReduction)
	{
		float num = (float)(255 - immuneAlpha) / 255f;
		if (alphaReduction > 0f)
		{
			num *= 1f - alphaReduction;
		}
		if (shimmerTransparency > 0f)
		{
			num *= 1f - shimmerTransparency;
		}
		return Color.Multiply(newColor, num);
	}

	public Color GetDeathAlpha(Color newColor)
	{
		int r = newColor.R + (int)((double)immuneAlpha * 0.9);
		int g = newColor.G + (int)((double)immuneAlpha * 0.5);
		int b = newColor.B + (int)((double)immuneAlpha * 0.5);
		int num = newColor.A + (int)((double)immuneAlpha * 0.4);
		if (num < 0)
		{
			num = 0;
		}
		if (num > 255)
		{
			num = 255;
		}
		return new Color(r, g, b, num);
	}

	public void addDPS(int dmg)
	{
		if (dpsStarted)
		{
			dpsLastHit = DateTime.Now;
			dpsDamage += dmg;
			dpsEnd = DateTime.Now;
		}
		else
		{
			dpsStarted = true;
			dpsStart = DateTime.Now;
			dpsEnd = DateTime.Now;
			dpsLastHit = DateTime.Now;
			dpsDamage = dmg;
		}
	}

	public void checkDPSTime()
	{
		int num = 3;
		if (dpsStarted && (DateTime.Now - dpsLastHit).Seconds >= num)
		{
			dpsStarted = false;
		}
	}

	public int getDPS()
	{
		TimeSpan timeSpan = dpsEnd - dpsStart;
		float num = (float)timeSpan.Milliseconds / 1000f;
		num += (float)timeSpan.Seconds;
		num += (float)timeSpan.Minutes / 60f;
		if (num >= 3f)
		{
			dpsStart = DateTime.Now;
			dpsStart = dpsStart.AddSeconds(-1.0);
			dpsDamage = (int)((float)dpsDamage / num);
			timeSpan = dpsEnd - dpsStart;
			num = (float)timeSpan.Milliseconds / 1000f;
			num += (float)timeSpan.Seconds;
			num += (float)timeSpan.Minutes / 60f;
		}
		if (num < 1f)
		{
			num = 1f;
		}
		return (int)((float)dpsDamage / num);
	}

	public long DropCoins()
	{
		IEntitySource itemSource_Death = GetItemSource_Death();
		long num = 0L;
		for (int i = 0; i < 59; i++)
		{
			if (inventory[i].IsACoin)
			{
				int num2 = Item.NewItem(itemSource_Death, (int)position.X, (int)position.Y, width, height, inventory[i].type);
				int num3 = inventory[i].stack / 2;
				if (Main.expertMode)
				{
					num3 = (int)((double)inventory[i].stack * 0.25);
				}
				if (Main.masterMode)
				{
					num3 = 0;
				}
				num3 = inventory[i].stack - num3;
				inventory[i].stack -= num3;
				if (inventory[i].type == 71)
				{
					num += num3;
				}
				if (inventory[i].type == 72)
				{
					num += (long)num3 * 100L;
				}
				if (inventory[i].type == 73)
				{
					num += (long)num3 * 10000L;
				}
				if (inventory[i].type == 74)
				{
					num += (long)num3 * 1000000L;
				}
				if (inventory[i].stack <= 0)
				{
					inventory[i] = new Item();
				}
				Main.item[num2].stack = num3;
				Main.item[num2].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
				Main.item[num2].velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
				Main.item[num2].noGrabDelay = 100;
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, num2);
				}
				if (i == 58)
				{
					Main.mouseItem = inventory[i].Clone();
				}
			}
		}
		lostCoins = num;
		lostCoinString = Main.ValueToCoins(lostCoins);
		return num;
	}

	public void DropItems()
	{
		IEntitySource itemSource_Death = GetItemSource_Death();
		for (int i = 0; i < 59; i++)
		{
			if (inventory[i].stack > 0)
			{
				bool flag = true;
				int type = inventory[i].type;
				if ((uint)(type - 3506) <= 1u || type == 3509)
				{
					flag = false;
				}
				if (flag)
				{
					TryDroppingSingleItem(itemSource_Death, inventory[i]);
				}
			}
			inventory[i].TurnToAir();
			if (i < armor.Length)
			{
				TryDroppingSingleItem(itemSource_Death, armor[i]);
			}
			if (i < dye.Length)
			{
				TryDroppingSingleItem(itemSource_Death, dye[i]);
			}
			if (i < miscEquips.Length)
			{
				TryDroppingSingleItem(itemSource_Death, miscEquips[i]);
			}
			if (i < miscDyes.Length)
			{
				TryDroppingSingleItem(itemSource_Death, miscDyes[i]);
			}
		}
		EquipmentLoadout[] loadouts = Loadouts;
		for (int type = 0; type < loadouts.Length; type++)
		{
			loadouts[type].TryDroppingItems(this, itemSource_Death);
		}
		inventory[0].SetDefaults(3507);
		inventory[0].Prefix(-1);
		inventory[1].SetDefaults(3509);
		inventory[1].Prefix(-1);
		inventory[2].SetDefaults(3506);
		inventory[2].Prefix(-1);
		Main.mouseItem.TurnToAir();
	}

	public void TryDroppingSingleItem(IEntitySource source, Item theItem)
	{
		if (theItem.stack > 0)
		{
			int num = Item.NewItem(source, (int)position.X, (int)position.Y, width, height, theItem.type);
			Item obj = Main.item[num];
			obj.netDefaults(theItem.netID);
			obj.Prefix(theItem.prefix);
			obj.stack = theItem.stack;
			obj.velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
			obj.velocity.X = (float)Main.rand.Next(-20, 21) * 0.2f;
			obj.noGrabDelay = 100;
			obj.newAndShiny = false;
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, num);
			}
		}
		theItem.TurnToAir(fullReset: true);
	}

	public object Clone()
	{
		return MemberwiseClone();
	}

	public void CopyVisuals(Player other)
	{
		skinVariant = other.skinVariant;
		direction = other.direction;
		selectedItem = other.selectedItem;
		extraAccessory = other.extraAccessory;
		skinColor = other.skinColor;
		eyeColor = other.eyeColor;
		hair = other.hair;
		hairColor = other.hairColor;
		shirtColor = other.shirtColor;
		underShirtColor = other.underShirtColor;
		pantsColor = other.pantsColor;
		shoeColor = other.shoeColor;
		position = other.position;
		velocity = other.velocity;
		statLife = other.statLife;
		statLifeMax = other.statLifeMax;
		statLifeMax2 = other.statLifeMax2;
		statMana = other.statMana;
		statManaMax = other.statManaMax;
		statManaMax2 = other.statManaMax2;
		hideMisc = other.hideMisc;
		for (int i = 0; i < 59; i++)
		{
			inventory[i] = other.inventory[i].Clone();
			if (i < armor.Length)
			{
				armor[i] = other.armor[i].Clone();
			}
			if (i < dye.Length)
			{
				dye[i] = other.dye[i].Clone();
			}
			if (i < miscEquips.Length)
			{
				miscEquips[i] = other.miscEquips[i].Clone();
			}
			if (i < miscDyes.Length)
			{
				miscDyes[i] = other.miscDyes[i].Clone();
			}
			if (i < hideVisibleAccessory.Length)
			{
				hideVisibleAccessory[i] = other.hideVisibleAccessory[i];
			}
		}
	}

	public Player clientClone()
	{
		Player player = new Player();
		player.zone1 = zone1;
		player.zone2 = zone2;
		player.zone3 = zone3;
		player.zone4 = zone4;
		player.zone5 = zone5;
		player.voidVaultInfo = voidVaultInfo;
		player.luck = luck;
		player.extraAccessory = extraAccessory;
		player.MinionRestTargetPoint = MinionRestTargetPoint;
		player.MinionAttackTargetNPC = MinionAttackTargetNPC;
		player.direction = direction;
		player.selectedItem = selectedItem;
		player.controlUp = controlUp;
		player.controlDown = controlDown;
		player.controlLeft = controlLeft;
		player.controlRight = controlRight;
		player.controlJump = controlJump;
		player.controlUseItem = controlUseItem;
		player.controlDownHold = controlDownHold;
		player.isOperatingAnotherEntity = isOperatingAnotherEntity;
		player.autoReuseAllWeapons = autoReuseAllWeapons;
		player.statLife = statLife;
		player.statLifeMax = statLifeMax;
		player.statMana = statMana;
		player.statManaMax = statManaMax;
		player.position.X = position.X;
		player.tileEntityAnchor = tileEntityAnchor;
		player.chest = chest;
		player.talkNPC = talkNPC;
		player.piggyBankProjTracker = piggyBankProjTracker;
		player.voidLensChest = voidLensChest;
		player.hideVisibleAccessory = hideVisibleAccessory;
		player.hideMisc = hideMisc;
		player.shieldRaised = shieldRaised;
		for (int i = 0; i < 59; i++)
		{
			player.inventory[i] = inventory[i].Clone();
			if (i < armor.Length)
			{
				player.armor[i] = armor[i].Clone();
			}
			if (i < dye.Length)
			{
				player.dye[i] = dye[i].Clone();
			}
			if (i < miscEquips.Length)
			{
				player.miscEquips[i] = miscEquips[i].Clone();
			}
			if (i < miscDyes.Length)
			{
				player.miscDyes[i] = miscDyes[i].Clone();
			}
			if (i < bank.item.Length)
			{
				player.bank.item[i] = bank.item[i].Clone();
			}
			if (i < bank2.item.Length)
			{
				player.bank2.item[i] = bank2.item[i].Clone();
			}
			if (i < bank3.item.Length)
			{
				player.bank3.item[i] = bank3.item[i].Clone();
			}
			if (i < bank4.item.Length)
			{
				player.bank4.item[i] = bank4.item[i].Clone();
			}
		}
		CloneLoadouts(player);
		player.trashItem = trashItem.Clone();
		for (int j = 0; j < maxBuffs; j++)
		{
			player.buffType[j] = buffType[j];
			player.buffTime[j] = buffTime[j];
		}
		DpadRadial.CopyTo(player.DpadRadial);
		CircularRadial.CopyTo(player.CircularRadial);
		return player;
	}

	private void CloneLoadouts(Player clonePlayer)
	{
		Item[] array = armor;
		Item[] array2 = clonePlayer.armor;
		for (int i = 0; i < array.Length; i++)
		{
			array2[i] = array[i].Clone();
		}
		array = dye;
		array2 = clonePlayer.dye;
		for (int j = 0; j < array.Length; j++)
		{
			array2[j] = array[j].Clone();
		}
		for (int k = 0; k < Loadouts.Length; k++)
		{
			array = Loadouts[k].Armor;
			array2 = clonePlayer.Loadouts[k].Armor;
			for (int l = 0; l < array.Length; l++)
			{
				array2[l] = array[l].Clone();
			}
			array = Loadouts[k].Dye;
			array2 = clonePlayer.Loadouts[k].Dye;
			for (int m = 0; m < array.Length; m++)
			{
				array2[m] = array[m].Clone();
			}
		}
	}

	public static bool CheckSpawn(int x, int y)
	{
		bool flag = Main.tileSolid[379];
		Main.tileSolid[379] = true;
		bool result = CheckSpawn_Internal(x, y);
		Main.tileSolid[379] = flag;
		return result;
	}

	private static bool CheckSpawn_Internal(int x, int y)
	{
		if (x < 10 || x > Main.maxTilesX - 10 || y < 10 || y > Main.maxTilesX - 10)
		{
			return false;
		}
		if (Main.tile[x, y - 1] == null)
		{
			return false;
		}
		if (!Main.tile[x, y - 1].active() || Main.tile[x, y - 1].type != 79)
		{
			return false;
		}
		for (int i = x - 1; i <= x + 1; i++)
		{
			for (int j = y - 3; j < y; j++)
			{
				if (Main.tile[i, j] == null)
				{
					return false;
				}
				if (Main.tile[i, j].nactive() && Main.tileSolid[Main.tile[i, j].type] && !Main.tileSolidTop[Main.tile[i, j].type])
				{
					Main.NewText(Language.GetTextValue("Game.BedObstructed"), byte.MaxValue, 240, 20);
					return false;
				}
			}
		}
		if (!WorldGen.StartRoomCheck(x, y - 1))
		{
			return false;
		}
		return true;
	}

	public void FindSpawn()
	{
		for (int i = 0; i < 200; i++)
		{
			if (spN[i] == null)
			{
				SpawnX = -1;
				SpawnY = -1;
				break;
			}
			if (spN[i] == Main.worldName && spI[i] == Main.worldID)
			{
				SpawnX = spX[i];
				SpawnY = spY[i];
				break;
			}
		}
	}

	public void RemoveSpawn()
	{
		SpawnX = -1;
		SpawnY = -1;
		for (int i = 0; i < 200 && spN[i] != null; i++)
		{
			if (spN[i] == Main.worldName && spI[i] == Main.worldID)
			{
				for (int j = i; j < 199; j++)
				{
					spN[j] = spN[j + 1];
					spI[j] = spI[j + 1];
					spX[j] = spX[j + 1];
					spY[j] = spY[j + 1];
				}
				spN[199] = null;
				spI[199] = 0;
				spX[199] = 0;
				spY[199] = 0;
				break;
			}
		}
	}

	public void ChangeSpawn(int x, int y)
	{
		for (int i = 0; i < 200 && spN[i] != null; i++)
		{
			if (spN[i] == Main.worldName && spI[i] == Main.worldID)
			{
				for (int num = i; num > 0; num--)
				{
					spN[num] = spN[num - 1];
					spI[num] = spI[num - 1];
					spX[num] = spX[num - 1];
					spY[num] = spY[num - 1];
				}
				spN[0] = Main.worldName;
				spI[0] = Main.worldID;
				spX[0] = x;
				spY[0] = y;
				FindSpawn();
				return;
			}
		}
		for (int num2 = 199; num2 > 0; num2--)
		{
			if (spN[num2 - 1] != null)
			{
				spN[num2] = spN[num2 - 1];
				spI[num2] = spI[num2 - 1];
				spX[num2] = spX[num2 - 1];
				spY[num2] = spY[num2 - 1];
			}
		}
		spN[0] = Main.worldName;
		spI[0] = Main.worldID;
		spX[0] = x;
		spY[0] = y;
		FindSpawn();
	}

	public static void SavePlayer(PlayerFileData playerFile, bool skipMapSave = false)
	{
		try
		{
			Main.Achievements.Save();
			InternalSaveMap(playerFile.IsCloudSave);
			if (!Main.ServerSideCharacter)
			{
				FileUtilities.ProtectedInvoke(delegate
				{
					InternalSavePlayerFile(playerFile);
				});
			}
		}
		catch (Exception exception)
		{
			FancyErrorPrinter.ShowFileSavingFailError(exception, playerFile.Path);
			throw;
		}
	}

	private static void InternalSavePlayerFile(PlayerFileData playerFile)
	{
		if (playerFile.ServerSideCharacter)
		{
			return;
		}
		string path = playerFile.Path;
		Player player = playerFile.Player;
		bool isCloudSave = playerFile.IsCloudSave;
		if (string.IsNullOrEmpty(path))
		{
			return;
		}
		if (FileUtilities.Exists(path, isCloudSave))
		{
			FileUtilities.Copy(path, path + ".bak", isCloudSave);
		}
		RijndaelManaged rijndaelManaged = new RijndaelManaged();
		using Stream stream = (isCloudSave ? ((Stream)new MemoryStream(2000)) : ((Stream)new FileStream(path, FileMode.Create)));
		using CryptoStream cryptoStream = new CryptoStream(stream, rijndaelManaged.CreateEncryptor(ENCRYPTION_KEY, ENCRYPTION_KEY), CryptoStreamMode.Write);
		using BinaryWriter binaryWriter = new BinaryWriter(cryptoStream);
		binaryWriter.Write(279);
		playerFile.Metadata.Write(binaryWriter);
		Serialize(playerFile, player, binaryWriter);
		binaryWriter.Flush();
		cryptoStream.FlushFinalBlock();
		stream.Flush();
		if (isCloudSave && SocialAPI.Cloud != null)
		{
			SocialAPI.Cloud.Write(playerFile.Path, ((MemoryStream)stream).ToArray());
		}
	}

	private static void Serialize(PlayerFileData playerFile, Player newPlayer, BinaryWriter fileIO)
	{
		fileIO.Write(newPlayer.name);
		fileIO.Write(newPlayer.difficulty);
		fileIO.Write(playerFile.GetPlayTime().Ticks);
		fileIO.Write(newPlayer.hair);
		fileIO.Write(newPlayer.hairDye);
		BitsByte bitsByte = (byte)0;
		for (int i = 0; i < 8; i++)
		{
			bitsByte[i] = newPlayer.hideVisibleAccessory[i];
		}
		fileIO.Write(bitsByte);
		bitsByte = (byte)0;
		for (int j = 0; j < 2; j++)
		{
			bitsByte[j] = newPlayer.hideVisibleAccessory[j + 8];
		}
		fileIO.Write(bitsByte);
		fileIO.Write(newPlayer.hideMisc);
		fileIO.Write((byte)newPlayer.skinVariant);
		fileIO.Write(newPlayer.statLife);
		fileIO.Write(newPlayer.statLifeMax);
		fileIO.Write(newPlayer.statMana);
		fileIO.Write(newPlayer.statManaMax);
		fileIO.Write(newPlayer.extraAccessory);
		fileIO.Write(newPlayer.unlockedBiomeTorches);
		fileIO.Write(newPlayer.UsingBiomeTorches);
		fileIO.Write(newPlayer.ateArtisanBread);
		fileIO.Write(newPlayer.usedAegisCrystal);
		fileIO.Write(newPlayer.usedAegisFruit);
		fileIO.Write(newPlayer.usedArcaneCrystal);
		fileIO.Write(newPlayer.usedGalaxyPearl);
		fileIO.Write(newPlayer.usedGummyWorm);
		fileIO.Write(newPlayer.usedAmbrosia);
		fileIO.Write(newPlayer.downedDD2EventAnyDifficulty);
		fileIO.Write(newPlayer.taxMoney);
		fileIO.Write(newPlayer.numberOfDeathsPVE);
		fileIO.Write(newPlayer.numberOfDeathsPVP);
		fileIO.Write(newPlayer.hairColor.R);
		fileIO.Write(newPlayer.hairColor.G);
		fileIO.Write(newPlayer.hairColor.B);
		fileIO.Write(newPlayer.skinColor.R);
		fileIO.Write(newPlayer.skinColor.G);
		fileIO.Write(newPlayer.skinColor.B);
		fileIO.Write(newPlayer.eyeColor.R);
		fileIO.Write(newPlayer.eyeColor.G);
		fileIO.Write(newPlayer.eyeColor.B);
		fileIO.Write(newPlayer.shirtColor.R);
		fileIO.Write(newPlayer.shirtColor.G);
		fileIO.Write(newPlayer.shirtColor.B);
		fileIO.Write(newPlayer.underShirtColor.R);
		fileIO.Write(newPlayer.underShirtColor.G);
		fileIO.Write(newPlayer.underShirtColor.B);
		fileIO.Write(newPlayer.pantsColor.R);
		fileIO.Write(newPlayer.pantsColor.G);
		fileIO.Write(newPlayer.pantsColor.B);
		fileIO.Write(newPlayer.shoeColor.R);
		fileIO.Write(newPlayer.shoeColor.G);
		fileIO.Write(newPlayer.shoeColor.B);
		for (int k = 0; k < newPlayer.armor.Length; k++)
		{
			fileIO.Write(newPlayer.armor[k].netID);
			fileIO.Write(newPlayer.armor[k].prefix);
		}
		for (int l = 0; l < newPlayer.dye.Length; l++)
		{
			fileIO.Write(newPlayer.dye[l].netID);
			fileIO.Write(newPlayer.dye[l].prefix);
		}
		for (int m = 0; m < 58; m++)
		{
			fileIO.Write(newPlayer.inventory[m].netID);
			fileIO.Write(newPlayer.inventory[m].stack);
			fileIO.Write(newPlayer.inventory[m].prefix);
			fileIO.Write(newPlayer.inventory[m].favorited);
		}
		for (int n = 0; n < newPlayer.miscEquips.Length; n++)
		{
			fileIO.Write(newPlayer.miscEquips[n].netID);
			fileIO.Write(newPlayer.miscEquips[n].prefix);
			fileIO.Write(newPlayer.miscDyes[n].netID);
			fileIO.Write(newPlayer.miscDyes[n].prefix);
		}
		for (int num = 0; num < 40; num++)
		{
			fileIO.Write(newPlayer.bank.item[num].netID);
			fileIO.Write(newPlayer.bank.item[num].stack);
			fileIO.Write(newPlayer.bank.item[num].prefix);
		}
		for (int num2 = 0; num2 < 40; num2++)
		{
			fileIO.Write(newPlayer.bank2.item[num2].netID);
			fileIO.Write(newPlayer.bank2.item[num2].stack);
			fileIO.Write(newPlayer.bank2.item[num2].prefix);
		}
		for (int num3 = 0; num3 < 40; num3++)
		{
			fileIO.Write(newPlayer.bank3.item[num3].netID);
			fileIO.Write(newPlayer.bank3.item[num3].stack);
			fileIO.Write(newPlayer.bank3.item[num3].prefix);
		}
		for (int num4 = 0; num4 < 40; num4++)
		{
			fileIO.Write(newPlayer.bank4.item[num4].netID);
			fileIO.Write(newPlayer.bank4.item[num4].stack);
			fileIO.Write(newPlayer.bank4.item[num4].prefix);
			fileIO.Write(newPlayer.bank4.item[num4].favorited);
		}
		fileIO.Write(newPlayer.voidVaultInfo);
		for (int num5 = 0; num5 < maxBuffs; num5++)
		{
			if (Main.buffNoSave[newPlayer.buffType[num5]])
			{
				fileIO.Write(0);
				fileIO.Write(0);
			}
			else
			{
				fileIO.Write(newPlayer.buffType[num5]);
				fileIO.Write(newPlayer.buffTime[num5]);
			}
		}
		for (int num6 = 0; num6 < 200; num6++)
		{
			if (newPlayer.spN[num6] == null)
			{
				fileIO.Write(-1);
				break;
			}
			fileIO.Write(newPlayer.spX[num6]);
			fileIO.Write(newPlayer.spY[num6]);
			fileIO.Write(newPlayer.spI[num6]);
			fileIO.Write(newPlayer.spN[num6]);
		}
		fileIO.Write(newPlayer.hbLocked);
		for (int num7 = 0; num7 < newPlayer.hideInfo.Length; num7++)
		{
			fileIO.Write(newPlayer.hideInfo[num7]);
		}
		fileIO.Write(newPlayer.anglerQuestsFinished);
		for (int num8 = 0; num8 < newPlayer.DpadRadial.Bindings.Length; num8++)
		{
			fileIO.Write(newPlayer.DpadRadial.Bindings[num8]);
		}
		for (int num9 = 0; num9 < newPlayer.builderAccStatus.Length; num9++)
		{
			fileIO.Write(newPlayer.builderAccStatus[num9]);
		}
		fileIO.Write(newPlayer.bartenderQuestLog);
		fileIO.Write(newPlayer.dead);
		if (newPlayer.dead)
		{
			fileIO.Write(newPlayer.respawnTimer);
		}
		long value = DateTime.UtcNow.ToBinary();
		fileIO.Write(value);
		fileIO.Write(newPlayer.golferScoreAccumulated);
		newPlayer.creativeTracker.Save(fileIO);
		newPlayer.SaveTemporaryItemSlotContents(fileIO);
		CreativePowerManager.Instance.SaveToPlayer(newPlayer, fileIO);
		BitsByte bitsByte2 = default(BitsByte);
		bitsByte2[0] = newPlayer.unlockedSuperCart;
		bitsByte2[1] = newPlayer.enabledSuperCart;
		fileIO.Write(bitsByte2);
		fileIO.Write(newPlayer.CurrentLoadoutIndex);
		for (int num10 = 0; num10 < newPlayer.Loadouts.Length; num10++)
		{
			newPlayer.Loadouts[num10].Serialize(fileIO);
		}
	}

	private void SaveTemporaryItemSlotContents(BinaryWriter writer)
	{
		Item itemByIndex = Main.CreativeMenu.GetItemByIndex(0);
		BitsByte bitsByte = (byte)0;
		bitsByte[0] = !Main.mouseItem.IsAir;
		bitsByte[1] = !itemByIndex.IsAir;
		bitsByte[2] = !Main.guideItem.IsAir;
		bitsByte[3] = !Main.reforgeItem.IsAir;
		ItemSerializationContext context = ItemSerializationContext.SavingAndLoading;
		writer.Write(bitsByte);
		if (bitsByte[0])
		{
			Main.mouseItem.Serialize(writer, context);
		}
		if (bitsByte[1])
		{
			itemByIndex.Serialize(writer, context);
		}
		if (bitsByte[2])
		{
			Main.guideItem.Serialize(writer, context);
		}
		if (bitsByte[3])
		{
			Main.reforgeItem.Serialize(writer, context);
		}
	}

	private void LoadTemporaryItemSlotContents(BinaryReader reader)
	{
		BitsByte bitsByte = reader.ReadByte();
		ItemSerializationContext context = ItemSerializationContext.SavingAndLoading;
		if (bitsByte[0])
		{
			_temporaryItemSlots[0] = new Item();
			_temporaryItemSlots[0].DeserializeFrom(reader, context);
		}
		if (bitsByte[1])
		{
			_temporaryItemSlots[1] = new Item();
			_temporaryItemSlots[1].DeserializeFrom(reader, context);
		}
		if (bitsByte[2])
		{
			_temporaryItemSlots[2] = new Item();
			_temporaryItemSlots[2].DeserializeFrom(reader, context);
		}
		if (bitsByte[3])
		{
			_temporaryItemSlots[3] = new Item();
			_temporaryItemSlots[3].DeserializeFrom(reader, context);
		}
	}

	public void SetPlayerDataToOutOfClassFields()
	{
		Item mouseItem = new Item();
		if (_temporaryItemSlots[0] != null)
		{
			mouseItem = _temporaryItemSlots[0].Clone();
		}
		Main.mouseItem = mouseItem;
		mouseItem = new Item();
		if (_temporaryItemSlots[1] != null)
		{
			mouseItem = _temporaryItemSlots[1].Clone();
		}
		Main.CreativeMenu.SetItembyIndex(mouseItem, 0);
		mouseItem = new Item();
		if (_temporaryItemSlots[2] != null)
		{
			mouseItem = _temporaryItemSlots[2].Clone();
		}
		Main.guideItem = mouseItem;
		mouseItem = new Item();
		if (_temporaryItemSlots[3] != null)
		{
			mouseItem = _temporaryItemSlots[3].Clone();
		}
		Main.reforgeItem = mouseItem;
		CreativePowerManager.Instance.ApplyLoadedDataToPlayer(this);
	}

	public static void ClearPlayerTempInfo()
	{
		Main.mouseItem.TurnToAir();
		Main.guideItem.TurnToAir();
		Main.reforgeItem.TurnToAir();
		Main.CreativeMenu.GetItemByIndex(0).TurnToAir();
	}

	public static void InternalSaveMap(bool isCloudSave)
	{
		if (string.IsNullOrEmpty(Main.playerPathName))
		{
			return;
		}
		try
		{
			if (Main.mapEnabled)
			{
				Main.Map.Save();
			}
		}
		catch
		{
		}
		if (!isCloudSave)
		{
			Utils.TryCreatingDirectory(Main.PlayerPath);
		}
	}

	public static PlayerFileData LoadPlayer(string playerPath, bool cloudSave)
	{
		PlayerFileData playerFileData = new PlayerFileData(playerPath, cloudSave);
		if (cloudSave && SocialAPI.Cloud == null)
		{
			return playerFileData;
		}
		if (Main.rand == null)
		{
			Main.rand = new UnifiedRandom((int)DateTime.Now.Ticks);
		}
		Player player = new Player();
		bool gotToReadName = false;
		try
		{
			RijndaelManaged rijndaelManaged = new RijndaelManaged();
			rijndaelManaged.Padding = PaddingMode.None;
			using (MemoryStream stream = new MemoryStream(FileUtilities.ReadAllBytes(playerPath, cloudSave)))
			{
				using CryptoStream input = new CryptoStream(stream, rijndaelManaged.CreateDecryptor(ENCRYPTION_KEY, ENCRYPTION_KEY), CryptoStreamMode.Read);
				using BinaryReader binaryReader = new BinaryReader(input);
				int num = binaryReader.ReadInt32();
				if (num >= 135)
				{
					playerFileData.Metadata = FileMetadata.Read(binaryReader, FileType.Player);
				}
				else
				{
					playerFileData.Metadata = FileMetadata.FromCurrentSettings(FileType.Player);
				}
				if (num > 279)
				{
					player.loadStatus = 1;
					player.name = binaryReader.ReadString();
					playerFileData.Player = player;
					return playerFileData;
				}
				Deserialize(playerFileData, player, binaryReader, num, out gotToReadName);
			}
			player.PlayerFrame();
			player.loadStatus = 0;
			playerFileData.Player = player;
			return playerFileData;
		}
		catch
		{
		}
		Player player2 = new Player();
		player2.loadStatus = 2;
		if (gotToReadName && player.name.Length <= nameLen)
		{
			player2.name = player.name;
		}
		else
		{
			string[] array = playerPath.Replace('/', Path.DirectorySeparatorChar).Split(Path.DirectorySeparatorChar);
			player2.name = array[array.Length - 1].Split('.')[0];
		}
		playerFileData.Player = player2;
		return playerFileData;
	}

	public Player SerializedClone()
	{
		Player player = new Player();
		_visualCloneStream.Seek(0L, SeekOrigin.Begin);
		Serialize(_visualCloneDummyData, this, _visualCloneWriter);
		_visualCloneStream.Seek(0L, SeekOrigin.Begin);
		Deserialize(_visualCloneDummyData, player, _visualCloneReader, 279, out var _);
		return player;
	}

	private static void Deserialize(PlayerFileData data, Player newPlayer, BinaryReader fileIO, int release, out bool gotToReadName)
	{
		gotToReadName = false;
		newPlayer.name = fileIO.ReadString();
		gotToReadName = true;
		if (release >= 10)
		{
			if (release >= 17)
			{
				newPlayer.difficulty = fileIO.ReadByte();
			}
			else if (fileIO.ReadBoolean())
			{
				newPlayer.difficulty = 2;
			}
		}
		if (release >= 138)
		{
			data.SetPlayTime(new TimeSpan(fileIO.ReadInt64()));
		}
		else
		{
			data.SetPlayTime(TimeSpan.Zero);
		}
		newPlayer.hair = fileIO.ReadInt32();
		if (release >= 82)
		{
			newPlayer.hairDye = fileIO.ReadByte();
		}
		if (release >= 124)
		{
			BitsByte bitsByte = fileIO.ReadByte();
			for (int i = 0; i < 8; i++)
			{
				newPlayer.hideVisibleAccessory[i] = bitsByte[i];
			}
			bitsByte = fileIO.ReadByte();
			for (int j = 0; j < 2; j++)
			{
				newPlayer.hideVisibleAccessory[j + 8] = bitsByte[j];
			}
		}
		else if (release >= 83)
		{
			BitsByte bitsByte2 = fileIO.ReadByte();
			for (int k = 0; k < 8; k++)
			{
				newPlayer.hideVisibleAccessory[k] = bitsByte2[k];
			}
		}
		if (release >= 119)
		{
			newPlayer.hideMisc = fileIO.ReadByte();
		}
		if (release <= 17)
		{
			if (newPlayer.hair == 5 || newPlayer.hair == 6 || newPlayer.hair == 9 || newPlayer.hair == 11)
			{
				newPlayer.Male = false;
			}
			else
			{
				newPlayer.Male = true;
			}
		}
		else if (release < 107)
		{
			newPlayer.Male = fileIO.ReadBoolean();
		}
		else
		{
			newPlayer.skinVariant = fileIO.ReadByte();
		}
		if (release < 161 && newPlayer.skinVariant == 7)
		{
			newPlayer.skinVariant = 9;
		}
		newPlayer.statLife = fileIO.ReadInt32();
		newPlayer.statLifeMax = fileIO.ReadInt32();
		if (newPlayer.statLifeMax > 500)
		{
			newPlayer.statLifeMax = 500;
		}
		newPlayer.statMana = fileIO.ReadInt32();
		newPlayer.statManaMax = fileIO.ReadInt32();
		if (newPlayer.statManaMax > 200)
		{
			newPlayer.statManaMax = 200;
		}
		if (newPlayer.statMana > 400)
		{
			newPlayer.statMana = 400;
		}
		if (release >= 125)
		{
			newPlayer.extraAccessory = fileIO.ReadBoolean();
		}
		if (release >= 229)
		{
			newPlayer.unlockedBiomeTorches = fileIO.ReadBoolean();
			newPlayer.UsingBiomeTorches = fileIO.ReadBoolean();
			if (release >= 256)
			{
				newPlayer.ateArtisanBread = fileIO.ReadBoolean();
			}
			if (release >= 260)
			{
				newPlayer.usedAegisCrystal = fileIO.ReadBoolean();
				newPlayer.usedAegisFruit = fileIO.ReadBoolean();
				newPlayer.usedArcaneCrystal = fileIO.ReadBoolean();
				newPlayer.usedGalaxyPearl = fileIO.ReadBoolean();
				newPlayer.usedGummyWorm = fileIO.ReadBoolean();
				newPlayer.usedAmbrosia = fileIO.ReadBoolean();
			}
		}
		if (release >= 182)
		{
			newPlayer.downedDD2EventAnyDifficulty = fileIO.ReadBoolean();
		}
		if (release >= 128)
		{
			newPlayer.taxMoney = fileIO.ReadInt32();
		}
		if (release >= 254)
		{
			newPlayer.numberOfDeathsPVE = fileIO.ReadInt32();
		}
		if (release >= 254)
		{
			newPlayer.numberOfDeathsPVP = fileIO.ReadInt32();
		}
		newPlayer.hairColor = fileIO.ReadRGB();
		newPlayer.skinColor = fileIO.ReadRGB();
		newPlayer.eyeColor = fileIO.ReadRGB();
		newPlayer.shirtColor = fileIO.ReadRGB();
		newPlayer.underShirtColor = fileIO.ReadRGB();
		newPlayer.pantsColor = fileIO.ReadRGB();
		newPlayer.shoeColor = fileIO.ReadRGB();
		Main.player[Main.myPlayer].hairColor = newPlayer.hairColor;
		Main.player[Main.myPlayer].skinColor = newPlayer.skinColor;
		Main.player[Main.myPlayer].eyeColor = newPlayer.eyeColor;
		Main.player[Main.myPlayer].shirtColor = newPlayer.shirtColor;
		Main.player[Main.myPlayer].underShirtColor = newPlayer.underShirtColor;
		Main.player[Main.myPlayer].pantsColor = newPlayer.pantsColor;
		Main.player[Main.myPlayer].shoeColor = newPlayer.shoeColor;
		if (release >= 38)
		{
			if (release < 124)
			{
				int num = 11;
				if (release >= 81)
				{
					num = 16;
				}
				for (int l = 0; l < num; l++)
				{
					int num2 = l;
					if (num2 >= 8)
					{
						num2 += 2;
					}
					newPlayer.armor[num2].netDefaults(fileIO.ReadInt32());
					newPlayer.armor[num2].Prefix(fileIO.ReadByte());
				}
			}
			else
			{
				int num3 = 20;
				for (int m = 0; m < num3; m++)
				{
					newPlayer.armor[m].netDefaults(fileIO.ReadInt32());
					newPlayer.armor[m].Prefix(fileIO.ReadByte());
				}
			}
			if (release >= 47)
			{
				int num4 = 3;
				if (release >= 81)
				{
					num4 = 8;
				}
				if (release >= 124)
				{
					num4 = 10;
				}
				for (int n = 0; n < num4; n++)
				{
					int num5 = n;
					newPlayer.dye[num5].netDefaults(fileIO.ReadInt32());
					newPlayer.dye[num5].Prefix(fileIO.ReadByte());
				}
			}
			if (release >= 58)
			{
				for (int num6 = 0; num6 < 58; num6++)
				{
					int num7 = fileIO.ReadInt32();
					if (num7 >= ItemID.Count)
					{
						newPlayer.inventory[num6].netDefaults(0);
						fileIO.ReadInt32();
						fileIO.ReadByte();
						if (release >= 114)
						{
							fileIO.ReadBoolean();
						}
					}
					else
					{
						newPlayer.inventory[num6].netDefaults(num7);
						newPlayer.inventory[num6].stack = fileIO.ReadInt32();
						newPlayer.inventory[num6].Prefix(fileIO.ReadByte());
						if (release >= 114)
						{
							newPlayer.inventory[num6].favorited = fileIO.ReadBoolean();
						}
					}
				}
			}
			else
			{
				for (int num8 = 0; num8 < 48; num8++)
				{
					int num9 = fileIO.ReadInt32();
					if (num9 >= ItemID.Count)
					{
						newPlayer.inventory[num8].netDefaults(0);
						fileIO.ReadInt32();
						fileIO.ReadByte();
					}
					else
					{
						newPlayer.inventory[num8].netDefaults(num9);
						newPlayer.inventory[num8].stack = fileIO.ReadInt32();
						newPlayer.inventory[num8].Prefix(fileIO.ReadByte());
					}
				}
			}
			if (release >= 117)
			{
				if (release < 136)
				{
					for (int num10 = 0; num10 < 5; num10++)
					{
						if (num10 != 1)
						{
							int num11 = fileIO.ReadInt32();
							if (num11 >= ItemID.Count)
							{
								newPlayer.miscEquips[num10].netDefaults(0);
								fileIO.ReadByte();
							}
							else
							{
								newPlayer.miscEquips[num10].netDefaults(num11);
								newPlayer.miscEquips[num10].Prefix(fileIO.ReadByte());
							}
							num11 = fileIO.ReadInt32();
							if (num11 >= ItemID.Count)
							{
								newPlayer.miscDyes[num10].netDefaults(0);
								fileIO.ReadByte();
							}
							else
							{
								newPlayer.miscDyes[num10].netDefaults(num11);
								newPlayer.miscDyes[num10].Prefix(fileIO.ReadByte());
							}
						}
					}
				}
				else
				{
					for (int num12 = 0; num12 < 5; num12++)
					{
						int num13 = fileIO.ReadInt32();
						if (num13 >= ItemID.Count)
						{
							newPlayer.miscEquips[num12].netDefaults(0);
							fileIO.ReadByte();
						}
						else
						{
							newPlayer.miscEquips[num12].netDefaults(num13);
							newPlayer.miscEquips[num12].Prefix(fileIO.ReadByte());
						}
						num13 = fileIO.ReadInt32();
						if (num13 >= ItemID.Count)
						{
							newPlayer.miscDyes[num12].netDefaults(0);
							fileIO.ReadByte();
						}
						else
						{
							newPlayer.miscDyes[num12].netDefaults(num13);
							newPlayer.miscDyes[num12].Prefix(fileIO.ReadByte());
						}
					}
				}
			}
			if (release >= 58)
			{
				for (int num14 = 0; num14 < 40; num14++)
				{
					newPlayer.bank.item[num14].netDefaults(fileIO.ReadInt32());
					newPlayer.bank.item[num14].stack = fileIO.ReadInt32();
					newPlayer.bank.item[num14].Prefix(fileIO.ReadByte());
				}
				for (int num15 = 0; num15 < 40; num15++)
				{
					newPlayer.bank2.item[num15].netDefaults(fileIO.ReadInt32());
					newPlayer.bank2.item[num15].stack = fileIO.ReadInt32();
					newPlayer.bank2.item[num15].Prefix(fileIO.ReadByte());
				}
			}
			else
			{
				for (int num16 = 0; num16 < 20; num16++)
				{
					newPlayer.bank.item[num16].netDefaults(fileIO.ReadInt32());
					newPlayer.bank.item[num16].stack = fileIO.ReadInt32();
					newPlayer.bank.item[num16].Prefix(fileIO.ReadByte());
				}
				for (int num17 = 0; num17 < 20; num17++)
				{
					newPlayer.bank2.item[num17].netDefaults(fileIO.ReadInt32());
					newPlayer.bank2.item[num17].stack = fileIO.ReadInt32();
					newPlayer.bank2.item[num17].Prefix(fileIO.ReadByte());
				}
			}
			if (release >= 182)
			{
				for (int num18 = 0; num18 < 40; num18++)
				{
					newPlayer.bank3.item[num18].netDefaults(fileIO.ReadInt32());
					newPlayer.bank3.item[num18].stack = fileIO.ReadInt32();
					newPlayer.bank3.item[num18].Prefix(fileIO.ReadByte());
				}
			}
			if (release >= 198)
			{
				for (int num19 = 0; num19 < 40; num19++)
				{
					newPlayer.bank4.item[num19].netDefaults(fileIO.ReadInt32());
					newPlayer.bank4.item[num19].stack = fileIO.ReadInt32();
					newPlayer.bank4.item[num19].Prefix(fileIO.ReadByte());
					if (release >= 255)
					{
						newPlayer.bank4.item[num19].favorited = fileIO.ReadBoolean();
					}
				}
			}
			if (release >= 199)
			{
				newPlayer.voidVaultInfo = fileIO.ReadByte();
			}
		}
		else
		{
			for (int num20 = 0; num20 < 8; num20++)
			{
				newPlayer.armor[num20].SetDefaults(ItemID.FromLegacyName(fileIO.ReadString(), release));
				if (release >= 36)
				{
					newPlayer.armor[num20].Prefix(fileIO.ReadByte());
				}
			}
			if (release >= 6)
			{
				for (int num21 = 8; num21 < 11; num21++)
				{
					newPlayer.armor[num21].SetDefaults(ItemID.FromLegacyName(fileIO.ReadString(), release));
					if (release >= 36)
					{
						newPlayer.armor[num21].Prefix(fileIO.ReadByte());
					}
				}
			}
			for (int num22 = 0; num22 < 44; num22++)
			{
				newPlayer.inventory[num22].SetDefaults(ItemID.FromLegacyName(fileIO.ReadString(), release));
				newPlayer.inventory[num22].stack = fileIO.ReadInt32();
				if (release >= 36)
				{
					newPlayer.inventory[num22].Prefix(fileIO.ReadByte());
				}
			}
			if (release >= 15)
			{
				for (int num23 = 44; num23 < 48; num23++)
				{
					newPlayer.inventory[num23].SetDefaults(ItemID.FromLegacyName(fileIO.ReadString(), release));
					newPlayer.inventory[num23].stack = fileIO.ReadInt32();
					if (release >= 36)
					{
						newPlayer.inventory[num23].Prefix(fileIO.ReadByte());
					}
				}
			}
			for (int num24 = 0; num24 < 20; num24++)
			{
				newPlayer.bank.item[num24].SetDefaults(ItemID.FromLegacyName(fileIO.ReadString(), release));
				newPlayer.bank.item[num24].stack = fileIO.ReadInt32();
				if (release >= 36)
				{
					newPlayer.bank.item[num24].Prefix(fileIO.ReadByte());
				}
			}
			if (release >= 20)
			{
				for (int num25 = 0; num25 < 20; num25++)
				{
					newPlayer.bank2.item[num25].SetDefaults(ItemID.FromLegacyName(fileIO.ReadString(), release));
					newPlayer.bank2.item[num25].stack = fileIO.ReadInt32();
					if (release >= 36)
					{
						newPlayer.bank2.item[num25].Prefix(fileIO.ReadByte());
					}
				}
			}
		}
		if (release < 58)
		{
			for (int num26 = 40; num26 < 48; num26++)
			{
				newPlayer.inventory[num26 + 10] = newPlayer.inventory[num26].Clone();
				newPlayer.inventory[num26].SetDefaults();
			}
		}
		if (release >= 11)
		{
			int num27 = 22;
			if (release < 74)
			{
				num27 = 10;
			}
			if (release >= 252)
			{
				num27 = 44;
			}
			for (int num28 = 0; num28 < num27; num28++)
			{
				newPlayer.buffType[num28] = fileIO.ReadInt32();
				newPlayer.buffTime[num28] = fileIO.ReadInt32();
				if (newPlayer.buffType[num28] == 0)
				{
					num28--;
					num27--;
				}
			}
		}
		for (int num29 = 0; num29 < 200; num29++)
		{
			int num30 = fileIO.ReadInt32();
			if (num30 == -1)
			{
				break;
			}
			newPlayer.spX[num29] = num30;
			newPlayer.spY[num29] = fileIO.ReadInt32();
			newPlayer.spI[num29] = fileIO.ReadInt32();
			newPlayer.spN[num29] = fileIO.ReadString();
		}
		if (release >= 16)
		{
			newPlayer.hbLocked = fileIO.ReadBoolean();
		}
		if (release >= 115)
		{
			int num31 = 13;
			for (int num32 = 0; num32 < num31; num32++)
			{
				newPlayer.hideInfo[num32] = fileIO.ReadBoolean();
			}
		}
		if (release >= 98)
		{
			newPlayer.anglerQuestsFinished = fileIO.ReadInt32();
		}
		if (release >= 162)
		{
			for (int num33 = 0; num33 < 4; num33++)
			{
				newPlayer.DpadRadial.Bindings[num33] = fileIO.ReadInt32();
			}
		}
		if (release >= 164)
		{
			int num34 = 8;
			if (release >= 167)
			{
				num34 = 10;
			}
			if (release >= 197)
			{
				num34 = 11;
			}
			if (release >= 230)
			{
				num34 = 12;
			}
			for (int num35 = 0; num35 < num34; num35++)
			{
				newPlayer.builderAccStatus[num35] = fileIO.ReadInt32();
			}
			if (release < 210)
			{
				newPlayer.builderAccStatus[0] = 1;
			}
			if (release < 249)
			{
				bool flag = false;
				for (int num36 = 0; num36 < 58; num36++)
				{
					if (newPlayer.inventory[num36].type == 3611)
					{
						flag = true;
						break;
					}
				}
				if (flag)
				{
					newPlayer.builderAccStatus[1] = 1;
				}
			}
		}
		if (release >= 181)
		{
			newPlayer.bartenderQuestLog = fileIO.ReadInt32();
		}
		if (release >= 200)
		{
			newPlayer.dead = fileIO.ReadBoolean();
			if (newPlayer.dead)
			{
				newPlayer.respawnTimer = Utils.Clamp(fileIO.ReadInt32(), 0, 60000);
			}
		}
		newPlayer.lastTimePlayerWasSaved = 0L;
		if (release >= 202)
		{
			newPlayer.lastTimePlayerWasSaved = fileIO.ReadInt64();
		}
		else
		{
			newPlayer.lastTimePlayerWasSaved = DateTime.UtcNow.ToBinary();
		}
		if (release >= 206)
		{
			newPlayer.golferScoreAccumulated = fileIO.ReadInt32();
		}
		if (release >= 218)
		{
			newPlayer.creativeTracker.Load(fileIO, release);
		}
		if (release >= 214)
		{
			newPlayer.LoadTemporaryItemSlotContents(fileIO);
		}
		newPlayer.savedPerPlayerFieldsThatArentInThePlayerClass = new SavedPlayerDataWithAnnoyingRules();
		CreativePowerManager.Instance.ResetDataForNewPlayer(newPlayer);
		if (release >= 220)
		{
			CreativePowerManager.Instance.LoadToPlayer(newPlayer, fileIO, release);
		}
		if (release >= 253)
		{
			BitsByte bitsByte3 = fileIO.ReadByte();
			newPlayer.unlockedSuperCart = bitsByte3[0];
			newPlayer.enabledSuperCart = bitsByte3[1];
		}
		else
		{
			newPlayer.unlockedSuperCart = newPlayer.HasItemInAnyInventory(3353);
		}
		if (release >= 262)
		{
			int value = fileIO.ReadInt32();
			newPlayer.CurrentLoadoutIndex = Utils.Clamp(value, 0, newPlayer.Loadouts.Length - 1);
			for (int num37 = 0; num37 < newPlayer.Loadouts.Length; num37++)
			{
				newPlayer.Loadouts[num37].Deserialize(fileIO, release);
			}
		}
		LoadPlayer_LastMinuteFixes(newPlayer);
	}

	private static void AdjustRespawnTimerForWorldJoining(Player newPlayer)
	{
		if (Main.myPlayer != newPlayer.whoAmI || !newPlayer.dead)
		{
			return;
		}
		long num = DateTime.UtcNow.ToBinary() - newPlayer.lastTimePlayerWasSaved;
		if (num > 0)
		{
			int num2 = Utils.Clamp((int)(Utils.Clamp(new TimeSpan(num).TotalSeconds, 0.0, 1000.0) * 60.0), 0, newPlayer.respawnTimer);
			newPlayer.respawnTimer -= num2;
			if (newPlayer.respawnTimer == 0)
			{
				newPlayer.dead = false;
			}
		}
	}

	public void FixLoadedData()
	{
		FixLoadedData_Items(armor);
		FixLoadedData_Items(dye);
		FixLoadedData_Items(inventory);
		FixLoadedData_Items(miscEquips);
		FixLoadedData_Items(miscDyes);
		FixLoadedData_Items(bank.item);
		FixLoadedData_Items(bank2.item);
		FixLoadedData_Items(bank3.item);
		FixLoadedData_Items(bank4.item);
		FixLoadedData_Items(_temporaryItemSlots);
		FixLoadedData_EliminiateDuplicateAccessories(armor);
		for (int i = 0; i < Loadouts.Length; i++)
		{
			Loadouts[i].FixLoadedData();
		}
	}

	public static void FixLoadedData_EliminiateDuplicateAccessories(Item[] armorArray)
	{
		for (int i = 3; i < 10; i++)
		{
			Item item = armorArray[i];
			if (item.IsAir)
			{
				continue;
			}
			for (int j = i + 1; j < 10; j++)
			{
				Item item2 = armorArray[j];
				if (item2.type == item.type)
				{
					item2.TurnToAir();
				}
			}
		}
	}

	private void FixLoadedData_Items(Item[] items)
	{
		for (int i = 0; i < items.Length; i++)
		{
			if (items[i] != null)
			{
				items[i].FixAgainstExploit();
			}
		}
	}

	private static void LoadPlayer_LastMinuteFixes(Player newPlayer)
	{
		newPlayer.skinVariant = (int)MathHelper.Clamp(newPlayer.skinVariant, 0f, PlayerVariantID.Count - 1);
		for (int i = 3; i < 10; i++)
		{
			int type = newPlayer.armor[i].type;
			if (type == 908 || type == 5000)
			{
				newPlayer.lavaMax += 420;
			}
			if (type == 906 || type == 4038 || type == 3999 || type == 4003)
			{
				newPlayer.lavaMax += 420;
			}
			if (newPlayer.wingsLogic == 0 && newPlayer.armor[i].wingSlot >= 0)
			{
				newPlayer.wingsLogic = newPlayer.armor[i].wingSlot;
			}
			if (type == 158 || type == 396 || type == 1250 || type == 1251 || type == 1252)
			{
				newPlayer.noFallDmg = true;
			}
			if (type == 860 || type == 535)
			{
				newPlayer.pStone = true;
			}
			newPlayer.lavaTime = newPlayer.lavaMax;
		}
		newPlayer.FixLoadedData();
	}

	public static PlayerFileData GetFileData(string file, bool cloudSave)
	{
		if (file == null || (cloudSave && SocialAPI.Cloud == null))
		{
			return null;
		}
		PlayerFileData playerFileData = LoadPlayer(file, cloudSave);
		if (playerFileData.Player != null)
		{
			if (playerFileData.Player.loadStatus != 0 && playerFileData.Player.loadStatus != 1)
			{
				if (FileUtilities.Exists(file + ".bak", cloudSave))
				{
					FileUtilities.Move(file + ".bak", file, cloudSave);
				}
				playerFileData = LoadPlayer(file, cloudSave);
				if (playerFileData.Player == null)
				{
					return null;
				}
			}
			return playerFileData;
		}
		return null;
	}

	public Color GetHairColor(bool useLighting = true)
	{
		Color color = Lighting.GetColor((int)((double)position.X + (double)width * 0.5) / 16, (int)(((double)position.Y + (double)height * 0.25) / 16.0));
		return GameShaders.Hair.GetColor(hairDye, this, useLighting ? color : Color.White);
	}

	public bool HasItem(int type)
	{
		for (int i = 0; i < 58; i++)
		{
			if (type == inventory[i].type && inventory[i].stack > 0)
			{
				return true;
			}
		}
		return false;
	}

	public bool HasItem(int type, Item[] collection)
	{
		for (int i = 0; i < collection.Length; i++)
		{
			if (type == collection[i].type && collection[i].stack > 0)
			{
				return true;
			}
		}
		return false;
	}

	public bool HasItemInInventoryOrOpenVoidBag(int type)
	{
		if (!HasItem(type))
		{
			if (useVoidBag())
			{
				return HasItem(type, bank4.item);
			}
			return false;
		}
		return true;
	}

	public bool HasItemInAnyInventory(int type)
	{
		if (HasItem(type, inventory))
		{
			return true;
		}
		if (HasItem(type, armor))
		{
			return true;
		}
		if (HasItem(type, dye))
		{
			return true;
		}
		if (HasItem(type, miscEquips))
		{
			return true;
		}
		if (HasItem(type, miscDyes))
		{
			return true;
		}
		if (HasItem(type, bank.item))
		{
			return true;
		}
		if (HasItem(type, bank2.item))
		{
			return true;
		}
		if (HasItem(type, bank3.item))
		{
			return true;
		}
		if (HasItem(type, bank4.item))
		{
			return true;
		}
		return false;
	}

	public int FindItem(int netid)
	{
		for (int i = 0; i < 58; i++)
		{
			if (netid == inventory[i].netID && inventory[i].stack > 0)
			{
				return i;
			}
		}
		return -1;
	}

	public int FindItem(List<int> netids)
	{
		for (int i = 0; i < 58; i++)
		{
			if (inventory[i].stack > 0 && netids.Contains(inventory[i].netID))
			{
				return i;
			}
		}
		return -1;
	}

	public int FindItem(bool[] validtypes)
	{
		for (int i = 0; i < 58; i++)
		{
			if (inventory[i].stack > 0 && validtypes[inventory[i].type])
			{
				return i;
			}
		}
		return -1;
	}

	public int FindItem(int type, Item[] collection)
	{
		for (int i = 0; i < collection.Length; i++)
		{
			if (inventory[i].stack > 0 && type == collection[i].type)
			{
				return i;
			}
		}
		return -1;
	}

	public int FindItemInInventoryOrOpenVoidBag(int type, out bool inVoidBag)
	{
		inVoidBag = false;
		int num = FindItem(type);
		if (num == -1 && useVoidBag())
		{
			num = FindItem(type, bank4.item);
			if (num == -1)
			{
				return -1;
			}
			inVoidBag = true;
		}
		return num;
	}

	public Player()
	{
		width = 20;
		height = 42;
		name = string.Empty;
		bodyFrame.Width = 40;
		bodyFrame.Height = 56;
		legFrame.Width = 40;
		legFrame.Height = 56;
		tileEntityAnchor.Clear();
		doorHelper = new DoorOpeningHelper();
		for (int i = 0; i < 59; i++)
		{
			if (i < armor.Length)
			{
				armor[i] = new Item();
			}
			inventory[i] = new Item();
		}
		for (int j = 0; j < 40; j++)
		{
			bank.item[j] = new Item();
			bank2.item[j] = new Item();
			bank3.item[j] = new Item();
			bank4.item[j] = new Item();
		}
		for (int k = 0; k < dye.Length; k++)
		{
			dye[k] = new Item();
		}
		for (int l = 0; l < miscEquips.Length; l++)
		{
			miscEquips[l] = new Item();
		}
		for (int m = 0; m < miscDyes.Length; m++)
		{
			miscDyes[m] = new Item();
		}
		trashItem = new Item();
		lastVisualizedSelectedItem = new Item();
		grappling[0] = -1;
		statManaMax = 20;
		extraAccessory = false;
		ateArtisanBread = false;
		usedAegisCrystal = false;
		usedAegisFruit = false;
		usedArcaneCrystal = false;
		usedGalaxyPearl = false;
		usedGummyWorm = false;
		usedAmbrosia = false;
		for (int n = 0; n < TileID.Count; n++)
		{
			adjTile[n] = false;
			oldAdjTile[n] = false;
		}
		hitTile = new HitTile();
		hitReplace = new HitTile();
		mount = new Mount();
		talkNPC = -1;
		piggyBankProjTracker.Clear();
		voidLensChest.Clear();
		creativeTracker = new CreativeUnlocksTracker();
		builderAccStatus[0] = 1;
	}

	public void MagicConch()
	{
		bool flag = position.X / 16f < (float)(Main.maxTilesX / 2);
		bool flag2 = false;
		int num = 50;
		int num2 = 50;
		int num3 = WorldGen.beachDistance - num - num2;
		if (flag)
		{
			num3 = Main.maxTilesX - num3 - 1 - num2;
		}
		else
		{
			num3 -= num2 / 2;
		}
		_ = (float)Main.maxTilesY / 1200f;
		_ = (float)Main.maxTilesY / 1200f;
		new RandomTeleportationAttemptSettings
		{
			avoidAnyLiquid = true,
			avoidHurtTiles = true,
			attemptsBeforeGivingUp = 1000,
			maximumFallDistanceFromOrignalPoint = 300
		};
		Vector2 vector = Vector2.Zero;
		int num4 = flag.ToDirectionInt();
		int startX = (flag ? (Main.maxTilesX - 50) : 50);
		flag2 = true;
		if (!TeleportHelpers.RequestMagicConchTeleportPosition(this, -num4, startX, out var landingPoint))
		{
			flag2 = false;
			startX = ((!flag) ? (Main.maxTilesX - 50) : 50);
			if (TeleportHelpers.RequestMagicConchTeleportPosition(this, num4, startX, out landingPoint))
			{
				flag2 = true;
			}
		}
		if (flag2)
		{
			vector = landingPoint.ToWorldCoordinates(8f, 16f) - new Vector2(width / 2, height);
		}
		if (flag2)
		{
			Vector2 newPos = vector;
			Teleport(newPos, 5);
			velocity = Vector2.Zero;
			if (Main.netMode == 2)
			{
				RemoteClient.CheckSection(whoAmI, position);
				NetMessage.SendData(65, -1, -1, null, 0, whoAmI, newPos.X, newPos.Y, 5);
			}
		}
		else
		{
			Vector2 newPos2 = position;
			Teleport(newPos2, 5);
			velocity = Vector2.Zero;
			if (Main.netMode == 2)
			{
				RemoteClient.CheckSection(whoAmI, position);
				NetMessage.SendData(65, -1, -1, null, 0, whoAmI, newPos2.X, newPos2.Y, 5, 1);
			}
		}
	}

	public void Shellphone_Spawn()
	{
		int floorX = Main.spawnTileX;
		int floorY = Main.spawnTileY;
		Spawn_GetPositionAtWorldSpawn(ref floorX, ref floorY);
		if (Main.netMode != 1 && !Spawn_IsAreaAValidWorldSpawn(floorX, floorY))
		{
			Spawn_ForceClearArea(floorX, floorY);
		}
		Vector2 newPos = new Point(floorX, floorY).ToWorldCoordinates(8f, 0f) - new Vector2(width / 2, height);
		Teleport(newPos, 11);
		velocity = Vector2.Zero;
		if (Main.netMode == 2)
		{
			RemoteClient.CheckSection(whoAmI, position);
			NetMessage.SendData(65, -1, -1, null, 0, whoAmI, newPos.X, newPos.Y, 11);
		}
	}

	public void DemonConch()
	{
		bool canSpawn = false;
		int num = Main.maxTilesX / 2;
		int num2 = 100;
		int num3 = num2 / 2;
		int teleportStartY = Main.UnderworldLayer + 20;
		int teleportRangeY = 80;
		RandomTeleportationAttemptSettings settings = new RandomTeleportationAttemptSettings
		{
			mostlySolidFloor = true,
			avoidAnyLiquid = true,
			avoidLava = true,
			avoidHurtTiles = true,
			avoidWalls = true,
			attemptsBeforeGivingUp = 1000,
			maximumFallDistanceFromOrignalPoint = 30
		};
		Vector2 vector = CheckForGoodTeleportationSpot(ref canSpawn, num - num3, num2, teleportStartY, teleportRangeY, settings);
		if (!canSpawn)
		{
			vector = CheckForGoodTeleportationSpot(ref canSpawn, num - num2, num3, teleportStartY, teleportRangeY, settings);
		}
		if (!canSpawn)
		{
			vector = CheckForGoodTeleportationSpot(ref canSpawn, num + num3, num3, teleportStartY, teleportRangeY, settings);
		}
		if (canSpawn)
		{
			Vector2 newPos = vector;
			Teleport(newPos, 7);
			velocity = Vector2.Zero;
			if (Main.netMode == 2)
			{
				RemoteClient.CheckSection(whoAmI, position);
				NetMessage.SendData(65, -1, -1, null, 0, whoAmI, newPos.X, newPos.Y, 7);
			}
		}
		else
		{
			Vector2 newPos2 = position;
			Teleport(newPos2, 7);
			velocity = Vector2.Zero;
			if (Main.netMode == 2)
			{
				RemoteClient.CheckSection(whoAmI, position);
				NetMessage.SendData(65, -1, -1, null, 0, whoAmI, newPos2.X, newPos2.Y, 7, 1);
			}
		}
	}

	public void TeleportationPotion()
	{
		bool canSpawn = false;
		int teleportStartX = 100;
		int teleportRangeX = Main.maxTilesX - 200;
		int teleportStartY = 100;
		int underworldLayer = Main.UnderworldLayer;
		Vector2 vector = CheckForGoodTeleportationSpot(ref canSpawn, teleportStartX, teleportRangeX, teleportStartY, underworldLayer, new RandomTeleportationAttemptSettings
		{
			avoidLava = true,
			avoidHurtTiles = true,
			maximumFallDistanceFromOrignalPoint = 100,
			attemptsBeforeGivingUp = 1000
		});
		if (canSpawn)
		{
			Vector2 newPos = vector;
			Teleport(newPos, 2);
			velocity = Vector2.Zero;
			if (Main.netMode == 2)
			{
				RemoteClient.CheckSection(whoAmI, position);
				NetMessage.SendData(65, -1, -1, null, 0, whoAmI, newPos.X, newPos.Y, 2);
			}
		}
		else
		{
			Vector2 newPos2 = position;
			Teleport(newPos2, 2);
			velocity = Vector2.Zero;
			if (Main.netMode == 2)
			{
				RemoteClient.CheckSection(whoAmI, position);
				NetMessage.SendData(65, -1, -1, null, 0, whoAmI, newPos2.X, newPos2.Y, 2, 1);
			}
		}
	}

	public Vector2 CheckForGoodTeleportationSpot(ref bool canSpawn, int teleportStartX, int teleportRangeX, int teleportStartY, int teleportRangeY, RandomTeleportationAttemptSettings settings)
	{
		int num = 0;
		int num2 = 0;
		int num3 = 0;
		int num4 = width;
		Vector2 vector = new Vector2(num2, num3) * 16f + new Vector2(-num4 / 2 + 8, -height);
		while (!canSpawn && num < settings.attemptsBeforeGivingUp)
		{
			num++;
			num2 = teleportStartX + Main.rand.Next(teleportRangeX);
			num3 = teleportStartY + Main.rand.Next(teleportRangeY);
			int num5 = 5;
			num2 = (int)MathHelper.Clamp(num2, num5, Main.maxTilesX - num5);
			num3 = (int)MathHelper.Clamp(num3, num5, Main.maxTilesY - num5);
			vector = new Vector2(num2, num3) * 16f + new Vector2(-num4 / 2 + 8, -height);
			if (Collision.SolidCollision(vector, num4, height))
			{
				continue;
			}
			if (Main.tile[num2, num3] == null)
			{
				Main.tile[num2, num3] = new Tile();
			}
			if ((settings.avoidWalls && Main.tile[num2, num3].wall > 0) || (Main.tile[num2, num3].wall == 87 && (double)num3 > Main.worldSurface && !NPC.downedPlantBoss) || (Main.wallDungeon[Main.tile[num2, num3].wall] && (double)num3 > Main.worldSurface && !NPC.downedBoss3))
			{
				continue;
			}
			int num6 = 0;
			while (num6 < settings.maximumFallDistanceFromOrignalPoint)
			{
				if (Main.tile[num2, num3 + num6] == null)
				{
					Main.tile[num2, num3 + num6] = new Tile();
				}
				Tile tile = Main.tile[num2, num3 + num6];
				vector = new Vector2(num2, num3 + num6) * 16f + new Vector2(-num4 / 2 + 8, -height);
				Collision.SlopeCollision(vector, velocity, num4, height, gravDir);
				if (!Collision.SolidCollision(vector, num4, height))
				{
					num6++;
					continue;
				}
				if (tile.active() && !tile.inActive() && Main.tileSolid[tile.type])
				{
					break;
				}
				num6++;
			}
			vector.Y -= 16f;
			int i = (int)vector.X / 16;
			int j = (int)vector.Y / 16;
			int num7 = (int)(vector.X + (float)num4 * 0.5f) / 16;
			int j2 = (int)(vector.Y + (float)height) / 16;
			Tile tileSafely = Framing.GetTileSafely(i, j);
			Tile tileSafely2 = Framing.GetTileSafely(num7, j2);
			if (settings.avoidAnyLiquid && tileSafely2.liquid > 0)
			{
				continue;
			}
			if (settings.mostlySolidFloor)
			{
				Tile tileSafely3 = Framing.GetTileSafely(num7 - 1, j2);
				Tile tileSafely4 = Framing.GetTileSafely(num7 + 1, j2);
				if (!tileSafely3.active() || tileSafely3.inActive() || !Main.tileSolid[tileSafely3.type] || Main.tileSolidTop[tileSafely3.type] || !tileSafely4.active() || tileSafely4.inActive() || !Main.tileSolid[tileSafely4.type] || Main.tileSolidTop[tileSafely4.type])
				{
					continue;
				}
			}
			if ((settings.avoidWalls && tileSafely.wall > 0) || (settings.avoidAnyLiquid && Collision.WetCollision(vector, num4, height)) || (settings.avoidLava && Collision.LavaCollision(vector, num4, height)) || (settings.avoidHurtTiles && Collision.AnyHurtingTiles(vector, num4, height)) || Collision.SolidCollision(vector, num4, height) || num6 >= settings.maximumFallDistanceFromOrignalPoint - 1)
			{
				continue;
			}
			Vector2 vector2 = Vector2.UnitX * 16f;
			if (Collision.TileCollision(vector - vector2, vector2, width, height, fallThrough: false, fall2: false, (int)gravDir) != vector2)
			{
				continue;
			}
			vector2 = -Vector2.UnitX * 16f;
			if (Collision.TileCollision(vector - vector2, vector2, width, height, fallThrough: false, fall2: false, (int)gravDir) != vector2)
			{
				continue;
			}
			vector2 = Vector2.UnitY * 16f;
			if (!(Collision.TileCollision(vector - vector2, vector2, width, height, fallThrough: false, fall2: false, (int)gravDir) != vector2))
			{
				vector2 = -Vector2.UnitY * 16f;
				if (!(Collision.TileCollision(vector - vector2, vector2, width, height, fallThrough: false, fall2: false, (int)gravDir) != vector2))
				{
					canSpawn = true;
					num3 += num6;
					break;
				}
			}
		}
		return vector;
	}

	public void GetAnglerReward(NPC angler, int questItemType)
	{
		EntitySource_Gift source = new EntitySource_Gift(angler);
		int questsDone = anglerQuestsFinished;
		float anglerRewardRarityMultiplier = GetAnglerRewardRarityMultiplier(questsDone);
		anglerRewardRarityMultiplier *= (float)(currentShoppingSettings.PriceAdjustment + 1.0) / 2f;
		GetItemSettings anglerRewardSettings = GetItemSettings.NPCEntityToPlayerInventorySettings;
		GetAnglerReward_MainReward(source, questsDone, anglerRewardRarityMultiplier, questItemType, ref anglerRewardSettings);
		GetAnglerReward_Decoration(source, questsDone, anglerRewardRarityMultiplier, ref anglerRewardSettings);
		GetAnglerReward_Money(source, questsDone, anglerRewardRarityMultiplier, ref anglerRewardSettings);
		GetAnglerReward_Bait(source, questsDone, anglerRewardRarityMultiplier, ref anglerRewardSettings);
	}

	public static float GetAnglerRewardRarityMultiplier(int questsDone)
	{
		float num = 1f;
		num = ((questsDone <= 50) ? (num - (float)questsDone * 0.01f) : ((questsDone <= 100) ? (0.5f - (float)(questsDone - 50) * 0.005f) : ((questsDone > 150) ? 0.15f : (0.25f - (float)(questsDone - 100) * 0.002f))));
		return num * 0.9f;
	}

	private void GetAnglerReward_MainReward(IEntitySource source, int questsDone, float rarityReduction, int questItemType, ref GetItemSettings anglerRewardSettings)
	{
		Item item = new Item();
		item.type = 0;
		switch (questsDone)
		{
		case 5:
			item.SetDefaults(2428);
			break;
		case 10:
			item.SetDefaults(2367);
			break;
		case 15:
			item.SetDefaults(2368);
			break;
		case 20:
			item.SetDefaults(2369);
			break;
		case 25:
			item.SetDefaults(3031);
			break;
		case 30:
			item.SetDefaults(2294);
			break;
		default:
		{
			if (questItemType == 2451 && Main.hardMode)
			{
				item.SetDefaults((Main.rand.Next(2) == 0) ? 5303 : 5302);
				break;
			}
			if (questItemType == 2451 && !Main.hardMode && Main.rand.Next(2) == 0)
			{
				item.SetDefaults((Main.rand.Next(2) == 0) ? 5303 : 5302);
				break;
			}
			List<int> list = new List<int> { 2373, 2374, 2375, 3120, 3037, 3096, 5139 };
			float num = 1f;
			for (int i = 0; i < 3; i++)
			{
				num *= 1f - 1f / (float)(int)(40f * rarityReduction);
			}
			for (int j = 0; j < 3; j++)
			{
				num *= 1f - 1f / (float)(int)(30f * rarityReduction);
			}
			num *= 1f - 1f / (float)(int)(25f * rarityReduction);
			float num2 = 1f - num;
			num2 *= 0.8f;
			if (questsDone > 75 && Main.rand.Next((int)(250f * rarityReduction)) == 0)
			{
				item.SetDefaults(2294);
				break;
			}
			if (Main.hardMode && questsDone > 25 && Main.rand.Next((int)(100f * rarityReduction)) == 0)
			{
				item.SetDefaults(2422);
				break;
			}
			if (Main.hardMode && questsDone > 10 && Main.rand.Next((int)(70f * rarityReduction)) == 0)
			{
				item.SetDefaults(2494);
				break;
			}
			if (questsDone > 10 && Main.rand.Next((int)(70f * rarityReduction)) == 0)
			{
				item.SetDefaults(3031);
				break;
			}
			if (questsDone > 10 && Main.rand.Next((int)(70f * rarityReduction)) == 0)
			{
				item.SetDefaults(3032);
				break;
			}
			if (Main.rand.Next((int)(80f * rarityReduction)) == 0)
			{
				item.SetDefaults(3183);
				break;
			}
			if (Main.rand.Next((int)(60f * rarityReduction)) == 0)
			{
				item.SetDefaults(2360);
				break;
			}
			if (Main.rand.Next((int)(60f * rarityReduction)) == 0)
			{
				item.SetDefaults(4067);
				break;
			}
			if (Main.rand.Next((int)(80f * rarityReduction)) == 0)
			{
				item.SetDefaults(2417);
				break;
			}
			if (Main.rand.Next((int)(80f * rarityReduction)) == 0)
			{
				item.SetDefaults(2498);
				break;
			}
			if (DropAnglerAccByMissing(list, num2, out var botheredRollingForADrop, out var itemIdToDrop))
			{
				item.SetDefaults(itemIdToDrop);
				break;
			}
			if (!botheredRollingForADrop && Main.rand.NextDouble() < (double)num2)
			{
				int defaults = Utils.SelectRandom(Main.rand, list.ToArray());
				item.SetDefaults(defaults);
				break;
			}
			switch (Main.rand.Next(3))
			{
			case 0:
				item.SetDefaults(2354);
				item.stack = Main.rand.Next(2, 6);
				break;
			case 1:
				item.SetDefaults(2355);
				item.stack = Main.rand.Next(2, 6);
				break;
			default:
				item.SetDefaults(2356);
				item.stack = Main.rand.Next(2, 6);
				break;
			}
			break;
		}
		}
		item.position = base.Center;
		Item item2 = GetItem(whoAmI, item, anglerRewardSettings);
		if (item2.stack > 0)
		{
			int number = Item.NewItem(source, (int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number, 1f);
			}
		}
		if (item.type == 2417)
		{
			Item item3 = new Item();
			Item item4 = new Item();
			item3.SetDefaults(2418);
			item3.position = base.Center;
			item2 = GetItem(whoAmI, item3, anglerRewardSettings);
			if (item2.stack > 0)
			{
				int number2 = Item.NewItem(source, (int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number2, 1f);
				}
			}
			item4.SetDefaults(2419);
			item4.position = base.Center;
			item2 = GetItem(whoAmI, item4, anglerRewardSettings);
			if (item2.stack > 0)
			{
				int number3 = Item.NewItem(source, (int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number3, 1f);
				}
			}
		}
		else
		{
			if (item.type != 2498)
			{
				return;
			}
			Item item5 = new Item();
			Item item6 = new Item();
			item5.SetDefaults(2499);
			item5.position = base.Center;
			item2 = GetItem(whoAmI, item5, anglerRewardSettings);
			if (item2.stack > 0)
			{
				int number4 = Item.NewItem(source, (int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number4, 1f);
				}
			}
			item6.SetDefaults(2500);
			item6.position = base.Center;
			item2 = GetItem(whoAmI, item6, anglerRewardSettings);
			if (item2.stack > 0)
			{
				int number5 = Item.NewItem(source, (int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number5, 1f);
				}
			}
		}
	}

	private void GetAnglerReward_Decoration(IEntitySource source, int questsDone, float rarityReduction, ref GetItemSettings anglerRewardSettings)
	{
		float value = 1f - rarityReduction;
		int num = 100;
		float num2 = MathHelper.Lerp(value, 1f, Math.Min(1f, (float)questsDone / (float)num));
		if (!(num2 >= 1f) && !(Main.rand.NextFloat() <= num2))
		{
			return;
		}
		Item item = new Item();
		item.type = 0;
		item.SetDefaults(Main.rand.Next(19) switch
		{
			1 => 2443, 
			2 => 2444, 
			3 => 2445, 
			4 => 2497, 
			5 => 2495, 
			6 => 2446, 
			7 => 2447, 
			8 => 2448, 
			9 => 2449, 
			10 => 2490, 
			11 => 2496, 
			12 => 5235, 
			13 => 5252, 
			14 => 5256, 
			15 => 5259, 
			16 => 5263, 
			17 => 5264, 
			18 => 5265, 
			_ => 2442, 
		});
		item.position = base.Center;
		Item item2 = GetItem(whoAmI, item, GetItemSettings.NPCEntityToPlayerInventorySettings);
		if (item2.stack > 0)
		{
			int number = Item.NewItem(source, (int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number, 1f);
			}
		}
	}

	private void GetAnglerReward_Bait(IEntitySource source, int questsDone, float rarityReduction, ref GetItemSettings anglerRewardSettings)
	{
		if (Main.rand.Next((int)(100f * rarityReduction)) > 50)
		{
			return;
		}
		Item item = new Item();
		if (Main.rand.Next((int)(15f * rarityReduction)) == 0)
		{
			item.SetDefaults(2676);
		}
		else if (Main.rand.Next((int)(5f * rarityReduction)) == 0)
		{
			item.SetDefaults(2675);
		}
		else
		{
			item.SetDefaults(2674);
		}
		if (Main.rand.Next(25) <= questsDone)
		{
			item.stack++;
		}
		if (Main.rand.Next(50) <= questsDone)
		{
			item.stack++;
		}
		if (Main.rand.Next(100) <= questsDone)
		{
			item.stack++;
		}
		if (Main.rand.Next(150) <= questsDone)
		{
			item.stack++;
		}
		if (Main.rand.Next(200) <= questsDone)
		{
			item.stack++;
		}
		if (Main.rand.Next(250) <= questsDone)
		{
			item.stack++;
		}
		item.position = base.Center;
		Item item2 = GetItem(whoAmI, item, GetItemSettings.NPCEntityToPlayerInventorySettings);
		if (item2.stack > 0)
		{
			int number = Item.NewItem(source, (int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number, 1f);
			}
		}
	}

	private void GetAnglerReward_Money(IEntitySource source, int questsDone, float rarityReduction, ref GetItemSettings anglerRewardSettings)
	{
		Item item = new Item();
		int num = (questsDone + 50) / 2;
		num = (int)((float)(num * Main.rand.Next(50, 201)) * 0.015f);
		num = (int)((double)num * 1.5);
		if (Main.hardMode)
		{
			num *= 2;
		}
		if (Main.expertMode)
		{
			num *= 2;
		}
		if (num > 100)
		{
			num /= 100;
			if (num > 10)
			{
				num = 10;
			}
			if (num < 1)
			{
				num = 1;
			}
			item.SetDefaults(73);
			item.stack = num;
		}
		else
		{
			if (num > 99)
			{
				num = 99;
			}
			if (num < 1)
			{
				num = 1;
			}
			item.SetDefaults(72);
			item.stack = num;
		}
		item.position = base.Center;
		Item item2 = GetItem(whoAmI, item, anglerRewardSettings);
		if (item2.stack > 0)
		{
			int number = Item.NewItem(source, (int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number, 1f);
			}
		}
	}

	public bool DropAnglerAccByMissing(List<int> itemIdsOfAccsWeWant, float totalChance, out bool botheredRollingForADrop, out int itemIdToDrop)
	{
		botheredRollingForADrop = false;
		itemIdToDrop = 0;
		List<int> list = new List<int>(itemIdsOfAccsWeWant);
		Item[] array = inventory;
		for (int i = 0; i < array.Length; i++)
		{
			RemoveAnglerAccOptionsFromRewardPool(list, array[i]);
		}
		array = armor;
		for (int j = 0; j < array.Length; j++)
		{
			RemoveAnglerAccOptionsFromRewardPool(list, array[j]);
		}
		array = bank.item;
		for (int k = 0; k < array.Length; k++)
		{
			RemoveAnglerAccOptionsFromRewardPool(list, array[k]);
		}
		array = bank2.item;
		for (int l = 0; l < array.Length; l++)
		{
			RemoveAnglerAccOptionsFromRewardPool(list, array[l]);
		}
		array = bank3.item;
		for (int m = 0; m < array.Length; m++)
		{
			RemoveAnglerAccOptionsFromRewardPool(list, array[m]);
		}
		array = bank4.item;
		for (int n = 0; n < array.Length; n++)
		{
			RemoveAnglerAccOptionsFromRewardPool(list, array[n]);
		}
		for (int num = 0; num < Loadouts.Length; num++)
		{
			array = Loadouts[num].Armor;
			for (int num2 = 0; num2 < array.Length; num2++)
			{
				RemoveAnglerAccOptionsFromRewardPool(list, array[num2]);
			}
		}
		if (list.Count == 0)
		{
			return false;
		}
		bool flag = false;
		if (Main.rand.NextDouble() < (double)totalChance)
		{
			flag = true;
		}
		botheredRollingForADrop = true;
		if (flag)
		{
			itemIdToDrop = Main.rand.NextFromList(list.ToArray());
			return true;
		}
		return false;
	}

	private void RemoveAnglerAccOptionsFromRewardPool(List<int> itemIdsOfAccsWeWant, Item itemToTestAgainst)
	{
		if (!itemToTestAgainst.IsAir)
		{
			switch (itemToTestAgainst.type)
			{
			default:
				itemIdsOfAccsWeWant.Remove(itemToTestAgainst.type);
				break;
			case 3721:
			case 5064:
				itemIdsOfAccsWeWant.Remove(2373);
				itemIdsOfAccsWeWant.Remove(2375);
				itemIdsOfAccsWeWant.Remove(2374);
				break;
			case 3036:
			case 3123:
			case 3124:
			case 5358:
			case 5359:
			case 5360:
			case 5361:
				itemIdsOfAccsWeWant.Remove(3120);
				itemIdsOfAccsWeWant.Remove(3037);
				itemIdsOfAccsWeWant.Remove(3096);
				break;
			case 5140:
			case 5141:
			case 5142:
			case 5143:
			case 5144:
			case 5145:
			case 5146:
				itemIdsOfAccsWeWant.Remove(5139);
				break;
			}
		}
	}

	public void GetDyeTraderReward(NPC dyeTrader)
	{
		int num = -1;
		EntitySource_Gift source = new EntitySource_Gift(dyeTrader);
		List<int> list = new List<int>
		{
			3560, 3028, 3041, 3040, 3025, 3190, 3027, 3026, 3554, 3553,
			3555, 2872, 3534, 2871
		};
		if (Main.hardMode)
		{
			list.Add(3039);
			list.Add(3038);
			list.Add(3598);
			list.Add(3597);
			list.Add(3600);
			list.Add(3042);
			list.Add(3533);
			list.Add(3561);
			if (NPC.downedMechBossAny)
			{
				list.Add(2883);
				list.Add(2869);
				list.Add(2873);
				list.Add(2870);
			}
			if (NPC.downedPlantBoss)
			{
				list.Add(2878);
				list.Add(2879);
				list.Add(2884);
				list.Add(2885);
			}
			if (NPC.downedMartians)
			{
				list.Add(2864);
				list.Add(3556);
			}
			if (NPC.downedMoonlord)
			{
				list.Add(3024);
			}
		}
		num = list[Main.rand.Next(list.Count)];
		Item item = new Item();
		item.SetDefaults(num);
		item.stack = 6;
		item.position = base.Center;
		Item item2 = GetItem(whoAmI, item, GetItemSettings.NPCEntityToPlayerInventorySettings);
		if (item2.stack > 0)
		{
			int number = Item.NewItem(source, (int)position.X, (int)position.Y, width, height, item2.type, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
			if (Main.netMode == 1)
			{
				NetMessage.SendData(21, -1, -1, null, number, 1f);
			}
		}
	}

	public bool CheckMana(int amount, bool pay = false, bool blockQuickMana = false)
	{
		int num = (int)((float)amount * manaCost);
		if (statMana >= num)
		{
			if (pay)
			{
				statMana -= num;
			}
			return true;
		}
		if (manaFlower && !blockQuickMana)
		{
			QuickMana();
			if (statMana >= num)
			{
				if (pay)
				{
					statMana -= num;
				}
				return true;
			}
			return false;
		}
		return false;
	}

	public void TryPortalJumping()
	{
		if (!mount.Active && !dead && !isLockedToATile)
		{
			PortalHelper.TryGoingThroughPortals(this);
		}
	}

	public bool ConsumeSolarFlare()
	{
		if (setSolar && solarShields > 0)
		{
			solarShields--;
			for (int i = 0; i < maxBuffs; i++)
			{
				if (buffType[i] >= 170 && buffType[i] <= 172)
				{
					DelBuff(i);
				}
			}
			if (solarShields > 0 && whoAmI == Main.myPlayer)
			{
				AddBuff(170 + solarShields - 1, 5, quiet: false);
			}
			solarCounter = 0;
			return true;
		}
		return false;
	}

	public void KeyDoubleTap(int keyDir)
	{
		int num = 0;
		if (Main.ReversedUpDownArmorSetBonuses)
		{
			num = 1;
		}
		if (keyDir != num)
		{
			return;
		}
		if (setVortex && !mount.Active)
		{
			vortexStealthActive = !vortexStealthActive;
		}
		if (setForbidden)
		{
			MinionRestTargetAim();
			if (!setForbiddenCooldownLocked)
			{
				CommandForbiddenStorm();
			}
		}
	}

	public void UpdateForbiddenSetLock()
	{
		List<int> list = new List<int>();
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile = Main.projectile[i];
			if (projectile.active && projectile.type == 656 && projectile.owner == whoAmI)
			{
				list.Add(i);
			}
		}
		setForbiddenCooldownLocked = list.Count > 1;
	}

	public void CommandForbiddenStorm()
	{
		List<int> list = new List<int>();
		for (int i = 0; i < 1000; i++)
		{
			Projectile projectile = Main.projectile[i];
			if (projectile.active && projectile.type == 656 && projectile.owner == whoAmI)
			{
				list.Add(i);
			}
		}
		bool flag = StrayMethods.CanSpawnSandstormFriendly(MinionRestTargetPoint, 30, 30);
		bool num = MinionRestTargetPoint == Vector2.Zero;
		Vector2 center = base.Center;
		Vector2 endPoint = MinionRestTargetPoint;
		if (num)
		{
			endPoint = center;
		}
		int samplesToTake = 10;
		float samplingWidth = 60f;
		Collision.AimingLaserScan(center, endPoint, samplingWidth, samplesToTake, out var vectorTowardsTarget, out var samples);
		bool flag2 = false;
		float[] array = samples;
		for (int j = 0; j < array.Length; j++)
		{
			if (Math.Abs(array[j] - vectorTowardsTarget.Length()) < 10f)
			{
				flag2 = true;
				break;
			}
		}
		float num2 = 0f;
		for (int k = 0; k < samples.Length; k++)
		{
			if (samples[k] > num2)
			{
				num2 = samples[k];
			}
		}
		if (list.Count <= 1)
		{
			Vector2 vector = center + vectorTowardsTarget.SafeNormalize(Vector2.Zero) * num2;
			Vector2 vector2 = vector - center;
			if (vector2.Length() > 0f)
			{
				for (float num3 = 0f; num3 < vector2.Length(); num3 += 15f)
				{
					Vector2 vector3 = center + vector2 * (num3 / vector2.Length());
					Dust obj = Main.dust[Dust.NewDust(vector3, 0, 0, 269)];
					obj.position = vector3;
					obj.fadeIn = 0.5f;
					obj.scale = 0.7f;
					obj.velocity *= 0.4f;
					obj.noLight = true;
				}
			}
			for (float num4 = 0f; num4 < (float)Math.PI * 2f; num4 += (float)Math.PI / 15f)
			{
				Dust obj2 = Main.dust[Dust.NewDust(vector, 0, 0, 269)];
				obj2.position = vector;
				obj2.fadeIn = 1f;
				obj2.scale = 0.3f;
				obj2.noLight = true;
			}
		}
		flag &= list.Count <= 1;
		flag = flag && flag2;
		if (flag)
		{
			flag = CheckMana(20, pay: true);
			if (flag)
			{
				manaRegenDelay = (int)maxRegenDelay;
			}
		}
		if (!flag)
		{
			return;
		}
		foreach (int item in list)
		{
			Projectile projectile2 = Main.projectile[item];
			if (!(projectile2.ai[0] >= 780f))
			{
				projectile2.ai[0] = 780f + projectile2.ai[0] % 60f;
				projectile2.netUpdate = true;
			}
		}
		int damage = (int)(20f * (1f + magicDamage + minionDamage - 2f));
		IEntitySource projectileSource_SetBonus = GetProjectileSource_SetBonus(3);
		_ = Main.projectile[Projectile.NewProjectile(projectileSource_SetBonus, MinionRestTargetPoint, Vector2.Zero, 656, damage, 0f, Main.myPlayer)];
	}

	public void KeyHoldDown(int keyDir, int holdTime)
	{
		int num = 0;
		if (Main.ReversedUpDownArmorSetBonuses)
		{
			num = 1;
		}
		if (keyDir == num)
		{
			if (setStardust && holdTime >= 60)
			{
				MinionRestTargetPoint = Vector2.Zero;
			}
			if (setForbidden && holdTime >= 60)
			{
				MinionRestTargetPoint = Vector2.Zero;
			}
		}
	}

	public void MinionNPCTargetAim(bool doNotDisableIfTheTargetIsTheSame)
	{
		Vector2 mouseWorld = Main.MouseWorld;
		int num = -1;
		for (int i = 0; i < 200; i++)
		{
			if (Main.npc[i].CanBeChasedBy(this) && (num == -1 || Main.npc[i].Hitbox.Distance(mouseWorld) < Main.npc[num].Hitbox.Distance(mouseWorld)))
			{
				num = i;
			}
		}
		if (MinionAttackTargetNPC == num && !doNotDisableIfTheTargetIsTheSame)
		{
			MinionAttackTargetNPC = -1;
		}
		else
		{
			MinionAttackTargetNPC = num;
		}
	}

	public void MinionRestTargetAim()
	{
		Vector2 mouseWorld = Main.MouseWorld;
		float y = mouseWorld.Y;
		int num = (int)mouseWorld.X / 16;
		int num2 = (int)y / 16;
		int num3 = 0;
		if (Main.tile[num, num2].nactive() && Main.tileSolid[Main.tile[num, num2].type] && !Main.tileSolidTop[Main.tile[num, num2].type])
		{
			int num4 = 0;
			int num5 = 0;
			while (num5 > -20 && num2 + num5 > 1)
			{
				int num6 = num2 + num5;
				if (Main.tile[num, num6].nactive() && Main.tileSolid[Main.tile[num, num6].type] && !Main.tileSolidTop[Main.tile[num, num6].type])
				{
					num4 = num5;
					num5--;
					continue;
				}
				num4 = num5;
				break;
			}
			int num7 = 0;
			for (int i = 0; i < 20 && num2 + i < Main.maxTilesY; i++)
			{
				int num8 = num2 + i;
				if (Main.tile[num, num8].nactive() && Main.tileSolid[Main.tile[num, num8].type] && !Main.tileSolidTop[Main.tile[num, num8].type])
				{
					num7 = i;
					continue;
				}
				num7 = i;
				break;
			}
			num3 = ((num7 <= -num4) ? (num7 + 3) : (num4 - 2));
		}
		int num9 = num2 + num3;
		bool flag = false;
		for (int j = num9; j < num9 + 5; j++)
		{
			if (WorldGen.SolidTileAllowBottomSlope(num, j))
			{
				flag = true;
			}
		}
		while (!flag)
		{
			num9++;
			for (int k = num9; k < num9 + 5; k++)
			{
				if (WorldGen.SolidTileAllowBottomSlope(num, k))
				{
					flag = true;
				}
			}
		}
		Vector2 vector = new Vector2(num * 16 + 8, num9 * 16);
		if (Distance(vector) <= 1000f)
		{
			MinionRestTargetPoint = vector;
		}
	}

	public void UpdateMinionTarget()
	{
		if (whoAmI != Main.myPlayer)
		{
			return;
		}
		if (Distance(MinionRestTargetPoint) > 1000f)
		{
			MinionRestTargetPoint = Vector2.Zero;
		}
		if (MinionAttackTargetNPC != -1 && (!Main.npc[MinionAttackTargetNPC].CanBeChasedBy(this) || Main.npc[MinionAttackTargetNPC].Hitbox.Distance(base.Center) > 3000f))
		{
			MinionAttackTargetNPC = -1;
		}
		if (stardustGuardian && HasMinionRestTarget)
		{
			Vector2 minionRestTargetPoint = MinionRestTargetPoint;
			float num = (float)miscCounter / 150f;
			float num2 = (float)Math.PI * 2f / 3f;
			for (int i = 0; i < 3; i++)
			{
				int num3 = Dust.NewDust(minionRestTargetPoint, 0, 0, 135, 0f, 0f, 100, default(Color), 1.5f);
				Main.dust[num3].noGravity = true;
				Main.dust[num3].velocity = Vector2.Zero;
				Main.dust[num3].noLight = true;
				Main.dust[num3].position = minionRestTargetPoint + (num * ((float)Math.PI * 2f) + num2 * (float)i).ToRotationVector2() * 4f;
				Main.dust[num3].shader = GameShaders.Armor.GetSecondaryShader(cPet, this);
			}
		}
	}

	public void NebulaLevelup(int type)
	{
		if (whoAmI != Main.myPlayer)
		{
			return;
		}
		int timeToAdd = 480;
		for (int i = 0; i < maxBuffs; i++)
		{
			if (buffType[i] >= type && buffType[i] < type + 3)
			{
				DelBuff(i);
			}
		}
		switch (type)
		{
		case 173:
			nebulaLevelLife = (int)MathHelper.Clamp(nebulaLevelLife + 1, 0f, 3f);
			AddBuff(type + nebulaLevelLife - 1, timeToAdd);
			break;
		case 176:
			nebulaLevelMana = (int)MathHelper.Clamp(nebulaLevelMana + 1, 0f, 3f);
			AddBuff(type + nebulaLevelMana - 1, timeToAdd);
			break;
		case 179:
			nebulaLevelDamage = (int)MathHelper.Clamp(nebulaLevelDamage + 1, 0f, 3f);
			AddBuff(type + nebulaLevelDamage - 1, timeToAdd);
			break;
		}
	}

	public void UpdateTouchingTiles()
	{
		TouchedTiles.Clear();
		List<Point> list = null;
		List<Point> list2 = null;
		if (!Collision.IsClearSpotTest(position + velocity, 16f, width, height, fallThrough: false, fall2: false, (int)gravDir, checkCardinals: true, checkSlopes: true))
		{
			list = Collision.FindCollisionTile((Math.Sign(velocity.Y) == 1) ? 2 : 3, position + velocity, 16f, width, height, fallThrough: false, fall2: false, (int)gravDir);
		}
		if (!Collision.IsClearSpotTest(position, Math.Abs(velocity.Y), width, height, fallThrough: false, fall2: false, (int)gravDir, checkCardinals: true, checkSlopes: true))
		{
			list2 = Collision.FindCollisionTile((Math.Sign(velocity.Y) == 1) ? 2 : 3, position, Math.Abs(velocity.Y), width, height, fallThrough: false, fall2: false, (int)gravDir, checkCardinals: true, checkSlopes: true);
		}
		if (list != null && list2 != null)
		{
			for (int i = 0; i < list2.Count; i++)
			{
				if (!list.Contains(list2[i]))
				{
					list.Add(list2[i]);
				}
			}
		}
		if (list == null && list2 != null)
		{
			list = list2;
		}
		if (list != null)
		{
			TouchedTiles = list;
		}
	}
}
