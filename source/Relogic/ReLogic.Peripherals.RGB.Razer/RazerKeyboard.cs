using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Input;

namespace ReLogic.Peripherals.RGB.Razer;

internal class RazerKeyboard : RgbKeyboard
{
	private NativeMethods.CustomKeyboardEffect _effect = NativeMethods.CustomKeyboardEffect.Create();

	private readonly EffectHandle _handle = new EffectHandle();

	private readonly List<Tuple<RazerKey, uint>> _pendingKeys = new List<Tuple<RazerKey, uint>>(132);

	private static readonly Dictionary<Keys, RazerKey> XnaKeyToChromaKey = new Dictionary<Keys, RazerKey>
	{
		{
			(Keys)27,
			RazerKey.Esc
		},
		{
			(Keys)112,
			RazerKey.F1
		},
		{
			(Keys)113,
			RazerKey.F2
		},
		{
			(Keys)114,
			RazerKey.F3
		},
		{
			(Keys)115,
			RazerKey.F4
		},
		{
			(Keys)116,
			RazerKey.F5
		},
		{
			(Keys)117,
			RazerKey.F6
		},
		{
			(Keys)118,
			RazerKey.F7
		},
		{
			(Keys)119,
			RazerKey.F8
		},
		{
			(Keys)120,
			RazerKey.F9
		},
		{
			(Keys)121,
			RazerKey.F10
		},
		{
			(Keys)122,
			RazerKey.F11
		},
		{
			(Keys)123,
			RazerKey.F12
		},
		{
			(Keys)49,
			RazerKey.D1
		},
		{
			(Keys)50,
			RazerKey.D2
		},
		{
			(Keys)51,
			RazerKey.D3
		},
		{
			(Keys)52,
			RazerKey.D4
		},
		{
			(Keys)53,
			RazerKey.D5
		},
		{
			(Keys)54,
			RazerKey.D6
		},
		{
			(Keys)55,
			RazerKey.D7
		},
		{
			(Keys)56,
			RazerKey.D8
		},
		{
			(Keys)57,
			RazerKey.D9
		},
		{
			(Keys)48,
			RazerKey.D0
		},
		{
			(Keys)65,
			RazerKey.A
		},
		{
			(Keys)66,
			RazerKey.B
		},
		{
			(Keys)67,
			RazerKey.C
		},
		{
			(Keys)68,
			RazerKey.D
		},
		{
			(Keys)69,
			RazerKey.E
		},
		{
			(Keys)70,
			RazerKey.F
		},
		{
			(Keys)71,
			RazerKey.G
		},
		{
			(Keys)72,
			RazerKey.H
		},
		{
			(Keys)73,
			RazerKey.I
		},
		{
			(Keys)74,
			RazerKey.J
		},
		{
			(Keys)75,
			RazerKey.K
		},
		{
			(Keys)76,
			RazerKey.L
		},
		{
			(Keys)77,
			RazerKey.M
		},
		{
			(Keys)78,
			RazerKey.N
		},
		{
			(Keys)79,
			RazerKey.O
		},
		{
			(Keys)80,
			RazerKey.P
		},
		{
			(Keys)81,
			RazerKey.Q
		},
		{
			(Keys)82,
			RazerKey.R
		},
		{
			(Keys)83,
			RazerKey.S
		},
		{
			(Keys)84,
			RazerKey.T
		},
		{
			(Keys)85,
			RazerKey.U
		},
		{
			(Keys)86,
			RazerKey.V
		},
		{
			(Keys)87,
			RazerKey.W
		},
		{
			(Keys)88,
			RazerKey.X
		},
		{
			(Keys)89,
			RazerKey.Y
		},
		{
			(Keys)90,
			RazerKey.Z
		},
		{
			(Keys)144,
			RazerKey.NumLock
		},
		{
			(Keys)96,
			RazerKey.Numpad0
		},
		{
			(Keys)97,
			RazerKey.Numpad1
		},
		{
			(Keys)98,
			RazerKey.Numpad2
		},
		{
			(Keys)99,
			RazerKey.Numpad3
		},
		{
			(Keys)100,
			RazerKey.Numpad4
		},
		{
			(Keys)101,
			RazerKey.Numpad5
		},
		{
			(Keys)102,
			RazerKey.Numpad6
		},
		{
			(Keys)103,
			RazerKey.Numpad7
		},
		{
			(Keys)104,
			RazerKey.Numpad8
		},
		{
			(Keys)105,
			RazerKey.Numpad9
		},
		{
			(Keys)111,
			RazerKey.NumpadDivide
		},
		{
			(Keys)106,
			RazerKey.NumpadMultiply
		},
		{
			(Keys)109,
			RazerKey.NumpadSubtract
		},
		{
			(Keys)107,
			RazerKey.NumpadAdd
		},
		{
			(Keys)13,
			RazerKey.NumpadEnter
		},
		{
			(Keys)110,
			RazerKey.NumpadDecimal
		},
		{
			(Keys)44,
			RazerKey.PrintScreen
		},
		{
			(Keys)145,
			RazerKey.Scroll
		},
		{
			(Keys)19,
			RazerKey.Pause
		},
		{
			(Keys)45,
			RazerKey.Insert
		},
		{
			(Keys)36,
			RazerKey.Home
		},
		{
			(Keys)33,
			RazerKey.PageUp
		},
		{
			(Keys)46,
			RazerKey.Delete
		},
		{
			(Keys)35,
			RazerKey.End
		},
		{
			(Keys)34,
			RazerKey.PageDown
		},
		{
			(Keys)38,
			RazerKey.Up
		},
		{
			(Keys)37,
			RazerKey.Left
		},
		{
			(Keys)40,
			RazerKey.Down
		},
		{
			(Keys)39,
			RazerKey.Right
		},
		{
			(Keys)9,
			RazerKey.Tab
		},
		{
			(Keys)20,
			RazerKey.CapsLock
		},
		{
			(Keys)8,
			RazerKey.Backspace
		},
		{
			(Keys)162,
			RazerKey.LeftCtrl
		},
		{
			(Keys)91,
			RazerKey.LeftWindows
		},
		{
			(Keys)164,
			RazerKey.LeftAlt
		},
		{
			(Keys)32,
			RazerKey.Space
		},
		{
			(Keys)165,
			RazerKey.RightAlt
		},
		{
			(Keys)93,
			RazerKey.RightMenu
		},
		{
			(Keys)163,
			RazerKey.RightCtrl
		},
		{
			(Keys)160,
			RazerKey.LeftShift
		},
		{
			(Keys)161,
			RazerKey.RightShift
		},
		{
			(Keys)192,
			RazerKey.OemTilde
		},
		{
			(Keys)189,
			RazerKey.OemMinus
		},
		{
			(Keys)219,
			RazerKey.OemLeftBracket
		},
		{
			(Keys)221,
			RazerKey.OemRightBracket
		},
		{
			(Keys)226,
			RazerKey.OemBackslash
		},
		{
			(Keys)186,
			RazerKey.OemSemicolon
		},
		{
			(Keys)222,
			RazerKey.OemApostrophe
		},
		{
			(Keys)188,
			RazerKey.OemComma
		},
		{
			(Keys)190,
			RazerKey.OemPeriod
		}
	};

	public RazerKeyboard(DeviceColorProfile colorProfile)
		: base(RgbDeviceVendor.Razer, Fragment.FromGrid(new Rectangle(0, 0, 22, 6)), colorProfile)
	{
	}//IL_002d: Unknown result type (might be due to invalid IL or missing references)


	public override void Render(IEnumerable<RgbKey> keys)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		foreach (RgbKey key in keys)
		{
			if (XnaKeyToChromaKey.TryGetValue(key.Key, out var value))
			{
				uint item = RazerHelper.XnaColorToDeviceColor(ProcessLedColor(key.CurrentColor));
				_pendingKeys.Add(Tuple.Create(value, item));
			}
		}
	}

	public override void Present()
	{
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		for (int i = 0; i < _effect.Color.Length; i++)
		{
			_effect.Color[i] = 0u;
			_effect.Key[i] = 0u;
		}
		for (int j = 0; j < base.LedCount; j++)
		{
			_effect.Color[j] = RazerHelper.Vector4ToDeviceColor(GetProcessedLedColor(j));
			_effect.Key[j] = _effect.Color[j] & 0xFFFFFFu;
		}
		for (int k = 0; k < _pendingKeys.Count; k++)
		{
			int item = (int)_pendingKeys[k].Item1;
			item = (item >> 8) * 22 + (item & 0xFF);
			_effect.Key[item] = _pendingKeys[k].Item2 | 0x1000000u;
		}
		_pendingKeys.Clear();
		_handle.SetAsKeyboardEffect(ref _effect);
		_handle.Apply();
	}
}
